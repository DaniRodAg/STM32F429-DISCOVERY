
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f658  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ed8  0800f808  0800f808  00010808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126e0  080126e0  00014250  2**0
                  CONTENTS
  4 .ARM          00000008  080126e0  080126e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126e8  080126e8  00014250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126e8  080126e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080126ec  080126ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  080126f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014250  2**0
                  CONTENTS
 10 .bss          00000af8  20000250  20000250  00014250  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d48  20000d48  00014250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002166f  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058c3  00000000  00000000  000358ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e38  00000000  00000000  0003b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000170d  00000000  00000000  0003cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c5dd  00000000  00000000  0003e6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028b05  00000000  00000000  0006acda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9861  00000000  00000000  000937df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018d040  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009268  00000000  00000000  0018d084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001962ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000250 	.word	0x20000250
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f7f0 	.word	0x0800f7f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000254 	.word	0x20000254
 80001ec:	0800f7f0 	.word	0x0800f7f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001008:	f000 fe48 	bl	8001c9c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800100c:	20ca      	movs	r0, #202	@ 0xca
 800100e:	f000 f95d 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001012:	20c3      	movs	r0, #195	@ 0xc3
 8001014:	f000 f967 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001018:	2008      	movs	r0, #8
 800101a:	f000 f964 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800101e:	2050      	movs	r0, #80	@ 0x50
 8001020:	f000 f961 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001024:	20cf      	movs	r0, #207	@ 0xcf
 8001026:	f000 f951 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f95b 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001030:	20c1      	movs	r0, #193	@ 0xc1
 8001032:	f000 f958 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001036:	2030      	movs	r0, #48	@ 0x30
 8001038:	f000 f955 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800103c:	20ed      	movs	r0, #237	@ 0xed
 800103e:	f000 f945 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001042:	2064      	movs	r0, #100	@ 0x64
 8001044:	f000 f94f 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f94c 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800104e:	2012      	movs	r0, #18
 8001050:	f000 f949 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001054:	2081      	movs	r0, #129	@ 0x81
 8001056:	f000 f946 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800105a:	20e8      	movs	r0, #232	@ 0xe8
 800105c:	f000 f936 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001060:	2085      	movs	r0, #133	@ 0x85
 8001062:	f000 f940 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f93d 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800106c:	2078      	movs	r0, #120	@ 0x78
 800106e:	f000 f93a 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001072:	20cb      	movs	r0, #203	@ 0xcb
 8001074:	f000 f92a 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001078:	2039      	movs	r0, #57	@ 0x39
 800107a:	f000 f934 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800107e:	202c      	movs	r0, #44	@ 0x2c
 8001080:	f000 f931 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f92e 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800108a:	2034      	movs	r0, #52	@ 0x34
 800108c:	f000 f92b 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001090:	2002      	movs	r0, #2
 8001092:	f000 f928 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001096:	20f7      	movs	r0, #247	@ 0xf7
 8001098:	f000 f918 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800109c:	2020      	movs	r0, #32
 800109e:	f000 f922 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80010a2:	20ea      	movs	r0, #234	@ 0xea
 80010a4:	f000 f912 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 f91c 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f919 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80010b4:	20b1      	movs	r0, #177	@ 0xb1
 80010b6:	f000 f909 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f913 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80010c0:	201b      	movs	r0, #27
 80010c2:	f000 f910 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80010c6:	20b6      	movs	r0, #182	@ 0xb6
 80010c8:	f000 f900 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f000 f90a 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80010d2:	20a2      	movs	r0, #162	@ 0xa2
 80010d4:	f000 f907 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80010d8:	20c0      	movs	r0, #192	@ 0xc0
 80010da:	f000 f8f7 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80010de:	2010      	movs	r0, #16
 80010e0:	f000 f901 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80010e4:	20c1      	movs	r0, #193	@ 0xc1
 80010e6:	f000 f8f1 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80010ea:	2010      	movs	r0, #16
 80010ec:	f000 f8fb 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80010f0:	20c5      	movs	r0, #197	@ 0xc5
 80010f2:	f000 f8eb 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80010f6:	2045      	movs	r0, #69	@ 0x45
 80010f8:	f000 f8f5 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80010fc:	2015      	movs	r0, #21
 80010fe:	f000 f8f2 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001102:	20c7      	movs	r0, #199	@ 0xc7
 8001104:	f000 f8e2 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001108:	2090      	movs	r0, #144	@ 0x90
 800110a:	f000 f8ec 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800110e:	2036      	movs	r0, #54	@ 0x36
 8001110:	f000 f8dc 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001114:	20c8      	movs	r0, #200	@ 0xc8
 8001116:	f000 f8e6 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800111a:	20f2      	movs	r0, #242	@ 0xf2
 800111c:	f000 f8d6 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001120:	2000      	movs	r0, #0
 8001122:	f000 f8e0 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001126:	20b0      	movs	r0, #176	@ 0xb0
 8001128:	f000 f8d0 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800112c:	20c2      	movs	r0, #194	@ 0xc2
 800112e:	f000 f8da 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001132:	20b6      	movs	r0, #182	@ 0xb6
 8001134:	f000 f8ca 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001138:	200a      	movs	r0, #10
 800113a:	f000 f8d4 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800113e:	20a7      	movs	r0, #167	@ 0xa7
 8001140:	f000 f8d1 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001144:	2027      	movs	r0, #39	@ 0x27
 8001146:	f000 f8ce 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800114a:	2004      	movs	r0, #4
 800114c:	f000 f8cb 	bl	80012e6 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001150:	202a      	movs	r0, #42	@ 0x2a
 8001152:	f000 f8bb 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f8c5 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f8c2 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f8bf 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001168:	20ef      	movs	r0, #239	@ 0xef
 800116a:	f000 f8bc 	bl	80012e6 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800116e:	202b      	movs	r0, #43	@ 0x2b
 8001170:	f000 f8ac 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f8b6 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f8b3 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 f8b0 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001186:	203f      	movs	r0, #63	@ 0x3f
 8001188:	f000 f8ad 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800118c:	20f6      	movs	r0, #246	@ 0xf6
 800118e:	f000 f89d 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001192:	2001      	movs	r0, #1
 8001194:	f000 f8a7 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001198:	2000      	movs	r0, #0
 800119a:	f000 f8a4 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800119e:	2006      	movs	r0, #6
 80011a0:	f000 f8a1 	bl	80012e6 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80011a4:	202c      	movs	r0, #44	@ 0x2c
 80011a6:	f000 f891 	bl	80012cc <ili9341_WriteReg>
  LCD_Delay(200);
 80011aa:	20c8      	movs	r0, #200	@ 0xc8
 80011ac:	f000 fe64 	bl	8001e78 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80011b0:	2026      	movs	r0, #38	@ 0x26
 80011b2:	f000 f88b 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 f895 	bl	80012e6 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80011bc:	20e0      	movs	r0, #224	@ 0xe0
 80011be:	f000 f885 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f88f 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80011c8:	2029      	movs	r0, #41	@ 0x29
 80011ca:	f000 f88c 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80011ce:	2024      	movs	r0, #36	@ 0x24
 80011d0:	f000 f889 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80011d4:	200c      	movs	r0, #12
 80011d6:	f000 f886 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80011da:	200e      	movs	r0, #14
 80011dc:	f000 f883 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80011e0:	2009      	movs	r0, #9
 80011e2:	f000 f880 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80011e6:	204e      	movs	r0, #78	@ 0x4e
 80011e8:	f000 f87d 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80011ec:	2078      	movs	r0, #120	@ 0x78
 80011ee:	f000 f87a 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80011f2:	203c      	movs	r0, #60	@ 0x3c
 80011f4:	f000 f877 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80011f8:	2009      	movs	r0, #9
 80011fa:	f000 f874 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80011fe:	2013      	movs	r0, #19
 8001200:	f000 f871 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001204:	2005      	movs	r0, #5
 8001206:	f000 f86e 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800120a:	2017      	movs	r0, #23
 800120c:	f000 f86b 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001210:	2011      	movs	r0, #17
 8001212:	f000 f868 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f865 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800121c:	20e1      	movs	r0, #225	@ 0xe1
 800121e:	f000 f855 	bl	80012cc <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f85f 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001228:	2016      	movs	r0, #22
 800122a:	f000 f85c 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800122e:	201b      	movs	r0, #27
 8001230:	f000 f859 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001234:	2004      	movs	r0, #4
 8001236:	f000 f856 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800123a:	2011      	movs	r0, #17
 800123c:	f000 f853 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001240:	2007      	movs	r0, #7
 8001242:	f000 f850 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001246:	2031      	movs	r0, #49	@ 0x31
 8001248:	f000 f84d 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800124c:	2033      	movs	r0, #51	@ 0x33
 800124e:	f000 f84a 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001252:	2042      	movs	r0, #66	@ 0x42
 8001254:	f000 f847 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001258:	2005      	movs	r0, #5
 800125a:	f000 f844 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800125e:	200c      	movs	r0, #12
 8001260:	f000 f841 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001264:	200a      	movs	r0, #10
 8001266:	f000 f83e 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800126a:	2028      	movs	r0, #40	@ 0x28
 800126c:	f000 f83b 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001270:	202f      	movs	r0, #47	@ 0x2f
 8001272:	f000 f838 	bl	80012e6 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001276:	200f      	movs	r0, #15
 8001278:	f000 f835 	bl	80012e6 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800127c:	2011      	movs	r0, #17
 800127e:	f000 f825 	bl	80012cc <ili9341_WriteReg>
  LCD_Delay(200);
 8001282:	20c8      	movs	r0, #200	@ 0xc8
 8001284:	f000 fdf8 	bl	8001e78 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001288:	2029      	movs	r0, #41	@ 0x29
 800128a:	f000 f81f 	bl	80012cc <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800128e:	202c      	movs	r0, #44	@ 0x2c
 8001290:	f000 f81c 	bl	80012cc <ili9341_WriteReg>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800129c:	f000 fcfe 	bl	8001c9c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80012a0:	2103      	movs	r1, #3
 80012a2:	20d3      	movs	r0, #211	@ 0xd3
 80012a4:	f000 f82c 	bl	8001300 <ili9341_ReadData>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29b      	uxth	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80012b4:	2029      	movs	r0, #41	@ 0x29
 80012b6:	f000 f809 	bl	80012cc <ili9341_WriteReg>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80012c2:	2028      	movs	r0, #40	@ 0x28
 80012c4:	f000 f802 	bl	80012cc <ili9341_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fd79 	bl	8001dd0 <LCD_IO_WriteReg>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fd4a 	bl	8001d8c <LCD_IO_WriteData>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	80fb      	strh	r3, [r7, #6]
 800130c:	4613      	mov	r3, r2
 800130e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001310:	797a      	ldrb	r2, [r7, #5]
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fd7c 	bl	8001e14 <LCD_IO_ReadData>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800132a:	23f0      	movs	r3, #240	@ 0xf0
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800133a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fa59 	bl	800180c <stmpe811_GetInstance>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2bff      	cmp	r3, #255	@ 0xff
 8001362:	d112      	bne.n	800138a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 fa51 	bl	800180c <stmpe811_GetInstance>
 800136a:	4603      	mov	r3, r0
 800136c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d80a      	bhi.n	800138a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001374:	7bbb      	ldrb	r3, [r7, #14]
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	b2d1      	uxtb	r1, r2
 800137a:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <stmpe811_Init+0x4c>)
 800137c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800137e:	f000 fd86 	bl	8001e8e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f807 	bl	8001398 <stmpe811_Reset>
    }
  }
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000026c 	.word	0x2000026c

08001398 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2202      	movs	r2, #2
 80013a8:	2103      	movs	r1, #3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fd7b 	bl	8001ea6 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80013b0:	200a      	movs	r0, #10
 80013b2:	f000 fdb4 	bl	8001f1e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	2103      	movs	r1, #3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd71 	bl	8001ea6 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80013c4:	2002      	movs	r0, #2
 80013c6:	f000 fdaa 	bl	8001f1e <IOE_Delay>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80013d2:	b590      	push	{r4, r7, lr}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80013dc:	f000 fd57 	bl	8001e8e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fd70 	bl	8001ecc <IOE_Read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2101      	movs	r1, #1
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd67 	bl	8001ecc <IOE_Read>
 80013fe:	4603      	mov	r3, r0
 8001400:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001402:	4323      	orrs	r3, r4
 8001404:	b21b      	sxth	r3, r3
 8001406:	b29b      	uxth	r3, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}

08001410 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2109      	movs	r1, #9
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fd51 	bl	8001ecc <IOE_Read>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	2109      	movs	r1, #9
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fd31 	bl	8001ea6 <IOE_Write>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2109      	movs	r1, #9
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fd33 	bl	8001ecc <IOE_Read>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	2109      	movs	r1, #9
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fd13 	bl	8001ea6 <IOE_Write>
    
}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	4613      	mov	r3, r2
 8001496:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	210a      	movs	r1, #10
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fd12 	bl	8001ecc <IOE_Read>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	797b      	ldrb	r3, [r7, #5]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	210a      	movs	r1, #10
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fcf2 	bl	8001ea6 <IOE_Write>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	460a      	mov	r2, r1
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4613      	mov	r3, r2
 80014d8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	210a      	movs	r1, #10
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fcf1 	bl	8001ecc <IOE_Read>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80014ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4013      	ands	r3, r2
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	210a      	movs	r1, #10
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fccc 	bl	8001ea6 <IOE_Write>
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	460a      	mov	r2, r1
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	4613      	mov	r3, r2
 8001524:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	210b      	movs	r1, #11
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fccd 	bl	8001ecc <IOE_Read>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	797b      	ldrb	r3, [r7, #5]
 8001538:	4013      	ands	r3, r2
 800153a:	b2db      	uxtb	r3, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	797a      	ldrb	r2, [r7, #5]
 800155a:	210b      	movs	r1, #11
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fca2 	bl	8001ea6 <IOE_Write>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	6039      	str	r1, [r7, #0]
 8001574:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2117      	movs	r1, #23
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fca3 	bl	8001ecc <IOE_Read>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b25b      	sxtb	r3, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	b25a      	sxtb	r2, r3
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4013      	ands	r3, r2
 8001598:	b25b      	sxtb	r3, r3
 800159a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	2117      	movs	r1, #23
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fc7e 	bl	8001ea6 <IOE_Write>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2104      	movs	r1, #4
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fc82 	bl	8001ecc <IOE_Read>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	f023 0304 	bic.w	r3, r3, #4
 80015d2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	2104      	movs	r1, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fc62 	bl	8001ea6 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	21f0      	movs	r1, #240	@ 0xf0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ffbf 	bl	800156a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	f023 0303 	bic.w	r3, r3, #3
 80015f2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	2104      	movs	r1, #4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fc52 	bl	8001ea6 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2249      	movs	r2, #73	@ 0x49
 8001608:	2120      	movs	r1, #32
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fc4b 	bl	8001ea6 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001610:	2002      	movs	r0, #2
 8001612:	f000 fc84 	bl	8001f1e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2201      	movs	r2, #1
 800161c:	2121      	movs	r1, #33	@ 0x21
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fc41 	bl	8001ea6 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	229a      	movs	r2, #154	@ 0x9a
 800162a:	2141      	movs	r1, #65	@ 0x41
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fc3a 	bl	8001ea6 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2201      	movs	r2, #1
 8001638:	214a      	movs	r1, #74	@ 0x4a
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fc33 	bl	8001ea6 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2201      	movs	r2, #1
 8001646:	214b      	movs	r1, #75	@ 0x4b
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fc2c 	bl	8001ea6 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2200      	movs	r2, #0
 8001654:	214b      	movs	r1, #75	@ 0x4b
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fc25 	bl	8001ea6 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2201      	movs	r2, #1
 8001662:	2156      	movs	r1, #86	@ 0x56
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fc1e 	bl	8001ea6 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2201      	movs	r2, #1
 8001670:	2158      	movs	r1, #88	@ 0x58
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fc17 	bl	8001ea6 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fc10 	bl	8001ea6 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	22ff      	movs	r2, #255	@ 0xff
 800168c:	210b      	movs	r1, #11
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fc09 	bl	8001ea6 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001694:	2002      	movs	r0, #2
 8001696:	f000 fc42 	bl	8001f1e <IOE_Delay>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2140      	movs	r1, #64	@ 0x40
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fc08 	bl	8001ecc <IOE_Read>
 80016bc:	4603      	mov	r3, r0
 80016be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c2:	2b80      	cmp	r3, #128	@ 0x80
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	214c      	movs	r1, #76	@ 0x4c
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fbf6 	bl	8001ecc <IOE_Read>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d010      	beq.n	8001708 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e00d      	b.n	8001708 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2201      	movs	r2, #1
 80016f2:	214b      	movs	r1, #75	@ 0x4b
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fbd6 	bl	8001ea6 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2200      	movs	r2, #0
 8001700:	214b      	movs	r1, #75	@ 0x4b
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fbcf 	bl	8001ea6 <IOE_Write>
  }
  
  return ret;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	b2d8      	uxtb	r0, r3
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	2304      	movs	r3, #4
 800172a:	21d7      	movs	r1, #215	@ 0xd7
 800172c:	f000 fbe1 	bl	8001ef2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001730:	7c3b      	ldrb	r3, [r7, #16]
 8001732:	061a      	lsls	r2, r3, #24
 8001734:	7c7b      	ldrb	r3, [r7, #17]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	431a      	orrs	r2, r3
 800173a:	7cbb      	ldrb	r3, [r7, #18]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	4313      	orrs	r3, r2
 8001740:	7cfa      	ldrb	r2, [r7, #19]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	0d1b      	lsrs	r3, r3, #20
 800174a:	b29a      	uxth	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29b      	uxth	r3, r3
 8001756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001760:	89fb      	ldrh	r3, [r7, #14]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2201      	movs	r2, #1
 8001766:	214b      	movs	r1, #75	@ 0x4b
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fb9c 	bl	8001ea6 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800176e:	89fb      	ldrh	r3, [r7, #14]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2200      	movs	r2, #0
 8001774:	214b      	movs	r1, #75	@ 0x4b
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fb95 	bl	8001ea6 <IOE_Write>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800178e:	f000 fb84 	bl	8001e9a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	211f      	movs	r1, #31
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fe76 	bl	8001488 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fe36 	bl	8001410 <stmpe811_EnableGlobalIT>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fe47 	bl	800144c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	211f      	movs	r1, #31
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fe81 	bl	80014ca <stmpe811_DisableITSource>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	211f      	movs	r1, #31
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe99 	bl	8001516 <stmpe811_ReadGITStatus>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	211f      	movs	r1, #31
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fea1 	bl	8001544 <stmpe811_ClearGlobalIT>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e00b      	b.n	8001838 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <stmpe811_GetInstance+0x40>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	461a      	mov	r2, r3
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	e006      	b.n	8001840 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	3301      	adds	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d9f0      	bls.n	8001820 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800183e:	23ff      	movs	r3, #255	@ 0xff
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	2000026c 	.word	0x2000026c

08001850 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a33      	ldr	r2, [pc, #204]	@ (800192c <I2Cx_MspInit+0xdc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d15f      	bne.n	8001922 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <I2Cx_MspInit+0xe0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a31      	ldr	r2, [pc, #196]	@ (8001930 <I2Cx_MspInit+0xe0>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <I2Cx_MspInit+0xe0>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <I2Cx_MspInit+0xe0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a2a      	ldr	r2, [pc, #168]	@ (8001930 <I2Cx_MspInit+0xe0>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <I2Cx_MspInit+0xe0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800189a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80018a0:	2312      	movs	r3, #18
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80018ac:	2304      	movs	r3, #4
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	481f      	ldr	r0, [pc, #124]	@ (8001934 <I2Cx_MspInit+0xe4>)
 80018b8:	f004 fc60 	bl	800617c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80018bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	481b      	ldr	r0, [pc, #108]	@ (8001938 <I2Cx_MspInit+0xe8>)
 80018ca:	f004 fc57 	bl	800617c <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <I2Cx_MspInit+0xe0>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <I2Cx_MspInit+0xe0>)
 80018d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <I2Cx_MspInit+0xe0>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <I2Cx_MspInit+0xe0>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <I2Cx_MspInit+0xe0>)
 80018f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018f4:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <I2Cx_MspInit+0xe0>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <I2Cx_MspInit+0xe0>)
 80018fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001900:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	210f      	movs	r1, #15
 8001906:	2048      	movs	r0, #72	@ 0x48
 8001908:	f003 fa38 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800190c:	2048      	movs	r0, #72	@ 0x48
 800190e:	f003 fa51 	bl	8004db4 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210f      	movs	r1, #15
 8001916:	2049      	movs	r0, #73	@ 0x49
 8001918:	f003 fa30 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800191c:	2049      	movs	r0, #73	@ 0x49
 800191e:	f003 fa49 	bl	8004db4 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40005c00 	.word	0x40005c00
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020800 	.word	0x40020800

0800193c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001940:	4814      	ldr	r0, [pc, #80]	@ (8001994 <I2Cx_Init+0x58>)
 8001942:	f005 fb8d 	bl	8007060 <HAL_I2C_GetState>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d121      	bne.n	8001990 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <I2Cx_Init+0x58>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <I2Cx_Init+0x5c>)
 8001950:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <I2Cx_Init+0x58>)
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <I2Cx_Init+0x60>)
 8001956:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8001958:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <I2Cx_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800195e:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <I2Cx_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <I2Cx_Init+0x58>)
 8001966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800196a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <I2Cx_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <I2Cx_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <I2Cx_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <I2Cx_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <I2Cx_Init+0x58>)
 8001986:	f7ff ff63 	bl	8001850 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800198a:	4802      	ldr	r0, [pc, #8]	@ (8001994 <I2Cx_Init+0x58>)
 800198c:	f004 fec8 	bl	8006720 <HAL_I2C_Init>
  }
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000270 	.word	0x20000270
 8001998:	40005c00 	.word	0x40005c00
 800199c:	000186a0 	.word	0x000186a0

080019a0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <I2Cx_ITConfig+0x58>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <I2Cx_ITConfig+0x58>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <I2Cx_ITConfig+0x58>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80019c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80019d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019d4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4808      	ldr	r0, [pc, #32]	@ (80019fc <I2Cx_ITConfig+0x5c>)
 80019dc:	f004 fbce 	bl	800617c <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80019e0:	2200      	movs	r2, #0
 80019e2:	210f      	movs	r1, #15
 80019e4:	2028      	movs	r0, #40	@ 0x28
 80019e6:	f003 f9c9 	bl	8004d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80019ea:	2028      	movs	r0, #40	@ 0x28
 80019ec:	f003 f9e2 	bl	8004db4 <HAL_NVIC_EnableIRQ>
}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000

08001a00 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af04      	add	r7, sp, #16
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	71bb      	strb	r3, [r7, #6]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <I2Cx_WriteData+0x4c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	2301      	movs	r3, #1
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	1d7b      	adds	r3, r7, #5
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4808      	ldr	r0, [pc, #32]	@ (8001a50 <I2Cx_WriteData+0x50>)
 8001a30:	f004 ffea 	bl	8006a08 <HAL_I2C_Mem_Write>
 8001a34:	4603      	mov	r3, r0
 8001a36:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001a3e:	f000 f863 	bl	8001b08 <I2Cx_Error>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000060 	.word	0x20000060
 8001a50:	20000270 	.word	0x20000270

08001a54 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	79bb      	ldrb	r3, [r7, #6]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <I2Cx_ReadData+0x50>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f107 030e 	add.w	r3, r7, #14
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <I2Cx_ReadData+0x54>)
 8001a88:	f005 f8b8 	bl	8006bfc <HAL_I2C_Mem_Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001a96:	f000 f837 	bl	8001b08 <I2Cx_Error>

  }
  return value;
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000060 	.word	0x20000060
 8001aa8:	20000270 	.word	0x20000270

08001aac <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	603a      	str	r2, [r7, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	460b      	mov	r3, r1
 8001abc:	71bb      	strb	r3, [r7, #6]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <I2Cx_ReadBuffer+0x54>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <I2Cx_ReadBuffer+0x58>)
 8001ae0:	f005 f88c 	bl	8006bfc <HAL_I2C_Mem_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e002      	b.n	8001af8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001af2:	f000 f809 	bl	8001b08 <I2Cx_Error>

    return 1;
 8001af6:	2301      	movs	r3, #1
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000060 	.word	0x20000060
 8001b04:	20000270 	.word	0x20000270

08001b08 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001b0c:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <I2Cx_Error+0x14>)
 8001b0e:	f004 ff4b 	bl	80069a8 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8001b12:	f7ff ff13 	bl	800193c <I2Cx_Init>
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000270 	.word	0x20000270

08001b20 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b24:	4819      	ldr	r0, [pc, #100]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b26:	f007 fe79 	bl	800981c <HAL_SPI_GetState>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d12b      	bne.n	8001b88 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b32:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <SPIx_Init+0x70>)
 8001b34:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b38:	2218      	movs	r2, #24
 8001b3a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001b48:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001b54:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b56:	2207      	movs	r2, #7
 8001b58:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b6c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b76:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b7a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001b7c:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b7e:	f000 f853 	bl	8001c28 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b82:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <SPIx_Init+0x6c>)
 8001b84:	f007 f993 	bl	8008eae <HAL_SPI_Init>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200002c4 	.word	0x200002c4
 8001b90:	40015000 	.word	0x40015000

08001b94 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <SPIx_Read+0x38>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f107 0108 	add.w	r1, r7, #8
 8001bae:	4808      	ldr	r0, [pc, #32]	@ (8001bd0 <SPIx_Read+0x3c>)
 8001bb0:	f007 fb72 	bl	8009298 <HAL_SPI_Receive>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001bbe:	f000 f827 	bl	8001c10 <SPIx_Error>
  }

  return readvalue;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000064 	.word	0x20000064
 8001bd0:	200002c4 	.word	0x200002c4

08001bd4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <SPIx_Write+0x34>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	1db9      	adds	r1, r7, #6
 8001be8:	2201      	movs	r2, #1
 8001bea:	4808      	ldr	r0, [pc, #32]	@ (8001c0c <SPIx_Write+0x38>)
 8001bec:	f007 fa10 	bl	8009010 <HAL_SPI_Transmit>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001bfa:	f000 f809 	bl	8001c10 <SPIx_Error>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000064 	.word	0x20000064
 8001c0c:	200002c4 	.word	0x200002c4

08001c10 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c14:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <SPIx_Error+0x14>)
 8001c16:	f007 f9d3 	bl	8008fc0 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001c1a:	f7ff ff81 	bl	8001b20 <SPIx_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002c4 	.word	0x200002c4

08001c28 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <SPIx_MspInit+0x6c>)
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	4a16      	ldr	r2, [pc, #88]	@ (8001c94 <SPIx_MspInit+0x6c>)
 8001c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <SPIx_MspInit+0x6c>)
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <SPIx_MspInit+0x6c>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	4a0f      	ldr	r2, [pc, #60]	@ (8001c94 <SPIx_MspInit+0x6c>)
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <SPIx_MspInit+0x6c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001c68:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c76:	2301      	movs	r3, #1
 8001c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <SPIx_MspInit+0x70>)
 8001c86:	f004 fa79 	bl	800617c <HAL_GPIO_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40021400 	.word	0x40021400

08001c9c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001ca2:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <LCD_IO_Init+0xe0>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d164      	bne.n	8001d74 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001caa:	4b34      	ldr	r3, [pc, #208]	@ (8001d7c <LCD_IO_Init+0xe0>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	4a31      	ldr	r2, [pc, #196]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001cba:	f043 0308 	orr.w	r3, r3, #8
 8001cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4827      	ldr	r0, [pc, #156]	@ (8001d84 <LCD_IO_Init+0xe8>)
 8001ce6:	f004 fa49 	bl	800617c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a23      	ldr	r2, [pc, #140]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <LCD_IO_Init+0xe8>)
 8001d20:	f004 fa2c 	bl	800617c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <LCD_IO_Init+0xe4>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001d40:	2304      	movs	r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LCD_IO_Init+0xec>)
 8001d58:	f004 fa10 	bl	800617c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2104      	movs	r1, #4
 8001d60:	4809      	ldr	r0, [pc, #36]	@ (8001d88 <LCD_IO_Init+0xec>)
 8001d62:	f004 fcc3 	bl	80066ec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d66:	2201      	movs	r2, #1
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <LCD_IO_Init+0xec>)
 8001d6c:	f004 fcbe 	bl	80066ec <HAL_GPIO_WritePin>

    SPIx_Init();
 8001d70:	f7ff fed6 	bl	8001b20 <SPIx_Init>
  }
}
 8001d74:	bf00      	nop
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000031c 	.word	0x2000031c
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40020800 	.word	0x40020800

08001d8c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d9c:	480a      	ldr	r0, [pc, #40]	@ (8001dc8 <LCD_IO_WriteData+0x3c>)
 8001d9e:	f004 fca5 	bl	80066ec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001da2:	2200      	movs	r2, #0
 8001da4:	2104      	movs	r1, #4
 8001da6:	4809      	ldr	r0, [pc, #36]	@ (8001dcc <LCD_IO_WriteData+0x40>)
 8001da8:	f004 fca0 	bl	80066ec <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff10 	bl	8001bd4 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001db4:	2201      	movs	r2, #1
 8001db6:	2104      	movs	r1, #4
 8001db8:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <LCD_IO_WriteData+0x40>)
 8001dba:	f004 fc97 	bl	80066ec <HAL_GPIO_WritePin>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40020800 	.word	0x40020800

08001dd0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de0:	480a      	ldr	r0, [pc, #40]	@ (8001e0c <LCD_IO_WriteReg+0x3c>)
 8001de2:	f004 fc83 	bl	80066ec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001de6:	2200      	movs	r2, #0
 8001de8:	2104      	movs	r1, #4
 8001dea:	4809      	ldr	r0, [pc, #36]	@ (8001e10 <LCD_IO_WriteReg+0x40>)
 8001dec:	f004 fc7e 	bl	80066ec <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff feed 	bl	8001bd4 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <LCD_IO_WriteReg+0x40>)
 8001e00:	f004 fc74 	bl	80066ec <HAL_GPIO_WritePin>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40020800 	.word	0x40020800

08001e14 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	80fb      	strh	r3, [r7, #6]
 8001e20:	4613      	mov	r3, r2
 8001e22:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4810      	ldr	r0, [pc, #64]	@ (8001e70 <LCD_IO_ReadData+0x5c>)
 8001e2e:	f004 fc5d 	bl	80066ec <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e38:	480e      	ldr	r0, [pc, #56]	@ (8001e74 <LCD_IO_ReadData+0x60>)
 8001e3a:	f004 fc57 	bl	80066ec <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fec7 	bl	8001bd4 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001e46:	797b      	ldrb	r3, [r7, #5]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fea3 	bl	8001b94 <SPIx_Read>
 8001e4e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e56:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <LCD_IO_ReadData+0x60>)
 8001e58:	f004 fc48 	bl	80066ec <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2104      	movs	r1, #4
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <LCD_IO_ReadData+0x5c>)
 8001e62:	f004 fc43 	bl	80066ec <HAL_GPIO_WritePin>

  return readvalue;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00

08001e78 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f002 fc2d 	bl	80046e0 <HAL_Delay>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8001e92:	f7ff fd53 	bl	800193c <I2Cx_Init>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8001e9e:	f7ff fd7f 	bl	80019a0 <I2Cx_ITConfig>
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	71bb      	strb	r3, [r7, #6]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001eb8:	797a      	ldrb	r2, [r7, #5]
 8001eba:	79b9      	ldrb	r1, [r7, #6]
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fd9e 	bl	8001a00 <I2Cx_WriteData>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001edc:	79ba      	ldrb	r2, [r7, #6]
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fdb6 	bl	8001a54 <I2Cx_ReadData>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	603a      	str	r2, [r7, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
 8001f00:	460b      	mov	r3, r1
 8001f02:	71bb      	strb	r3, [r7, #6]
 8001f04:	4613      	mov	r3, r2
 8001f06:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001f08:	88bb      	ldrh	r3, [r7, #4]
 8001f0a:	79b9      	ldrb	r1, [r7, #6]
 8001f0c:	79f8      	ldrb	r0, [r7, #7]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	f7ff fdcc 	bl	8001aac <I2Cx_ReadBuffer>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f002 fbda 	bl	80046e0 <HAL_Delay>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff4 <BSP_LCD_Init+0xc0>)
 8001f3c:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f40:	2209      	movs	r2, #9
 8001f42:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f4c:	221d      	movs	r2, #29
 8001f4e:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001f50:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f52:	2203      	movs	r2, #3
 8001f54:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001f56:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f58:	f240 120d 	movw	r2, #269	@ 0x10d
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f60:	f240 1243 	movw	r2, #323	@ 0x143
 8001f64:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f68:	f240 1217 	movw	r2, #279	@ 0x117
 8001f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f70:	f240 1247 	movw	r2, #327	@ 0x147
 8001f74:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <BSP_LCD_Init+0xc4>)
 8001f90:	2208      	movs	r2, #8
 8001f92:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f94:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <BSP_LCD_Init+0xc4>)
 8001f96:	22c0      	movs	r2, #192	@ 0xc0
 8001f98:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <BSP_LCD_Init+0xc4>)
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <BSP_LCD_Init+0xc4>)
 8001fa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001fa8:	4813      	ldr	r0, [pc, #76]	@ (8001ff8 <BSP_LCD_Init+0xc4>)
 8001faa:	f006 fd2f 	bl	8008a0c <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001fc6:	f000 fb57 	bl	8002678 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001fca:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <BSP_LCD_Init+0xbc>)
 8001fcc:	f005 fc86 	bl	80078dc <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <BSP_LCD_Init+0xc8>)
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <BSP_LCD_Init+0xcc>)
 8001fd4:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <BSP_LCD_Init+0xc8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001fde:	f000 fd93 	bl	8002b08 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001fe2:	4808      	ldr	r0, [pc, #32]	@ (8002004 <BSP_LCD_Init+0xd0>)
 8001fe4:	f000 f8ce 	bl	8002184 <BSP_LCD_SetFont>

  return LCD_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000320 	.word	0x20000320
 8001ff4:	40016800 	.word	0x40016800
 8001ff8:	20000408 	.word	0x20000408
 8001ffc:	20000454 	.word	0x20000454
 8002000:	20000000 	.word	0x20000000
 8002004:	20000068 	.word	0x20000068

08002008 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <BSP_LCD_GetXSize+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	4798      	blx	r3
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000454 	.word	0x20000454

08002020 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <BSP_LCD_GetYSize+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202a:	4798      	blx	r3
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000454 	.word	0x20000454

08002038 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b090      	sub	sp, #64	@ 0x40
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002048:	f7ff ffde 	bl	8002008 <BSP_LCD_GetXSize>
 800204c:	4603      	mov	r3, r0
 800204e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8002054:	f7ff ffe4 	bl	8002020 <BSP_LCD_GetYSize>
 8002058:	4603      	mov	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8002064:	23ff      	movs	r3, #255	@ 0xff
 8002066:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800207e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002084:	2307      	movs	r3, #7
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002088:	f7ff ffbe 	bl	8002008 <BSP_LCD_GetXSize>
 800208c:	4603      	mov	r3, r0
 800208e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002090:	f7ff ffc6 	bl	8002020 <BSP_LCD_GetYSize>
 8002094:	4603      	mov	r3, r0
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	4619      	mov	r1, r3
 80020a0:	4814      	ldr	r0, [pc, #80]	@ (80020f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80020a2:	f005 fdad 	bl	8007c00 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	4913      	ldr	r1, [pc, #76]	@ (80020f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3304      	adds	r3, #4
 80020b6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80020bc:	88fa      	ldrh	r2, [r7, #6]
 80020be:	490e      	ldr	r1, [pc, #56]	@ (80020f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3308      	adds	r3, #8
 80020cc:	4a0b      	ldr	r2, [pc, #44]	@ (80020fc <BSP_LCD_LayerDefaultInit+0xc4>)
 80020ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	4909      	ldr	r1, [pc, #36]	@ (80020f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80020e2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80020e4:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80020e6:	f005 fdc9 	bl	8007c7c <HAL_LTDC_EnableDither>
}
 80020ea:	bf00      	nop
 80020ec:	3740      	adds	r7, #64	@ 0x40
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000320 	.word	0x20000320
 80020f8:	2000043c 	.word	0x2000043c
 80020fc:	20000068 	.word	0x20000068

08002100 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <BSP_LCD_SelectLayer+0x1c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000438 	.word	0x20000438

08002120 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002128:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <BSP_LCD_SetTextColor+0x28>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4907      	ldr	r1, [pc, #28]	@ (800214c <BSP_LCD_SetTextColor+0x2c>)
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000438 	.word	0x20000438
 800214c:	2000043c 	.word	0x2000043c

08002150 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <BSP_LCD_SetBackColor+0x2c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4908      	ldr	r1, [pc, #32]	@ (8002180 <BSP_LCD_SetBackColor+0x30>)
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3304      	adds	r3, #4
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000438 	.word	0x20000438
 8002180:	2000043c 	.word	0x2000043c

08002184 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <BSP_LCD_SetFont+0x2c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4908      	ldr	r1, [pc, #32]	@ (80021b4 <BSP_LCD_SetFont+0x30>)
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3308      	adds	r3, #8
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	601a      	str	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000438 	.word	0x20000438
 80021b4:	2000043c 	.word	0x2000043c

080021b8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <BSP_LCD_Clear+0x48>)
 80021c2:	681c      	ldr	r4, [r3, #0]
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <BSP_LCD_Clear+0x48>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002204 <BSP_LCD_Clear+0x4c>)
 80021ca:	2134      	movs	r1, #52	@ 0x34
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	335c      	adds	r3, #92	@ 0x5c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461e      	mov	r6, r3
 80021d8:	f7ff ff16 	bl	8002008 <BSP_LCD_GetXSize>
 80021dc:	4605      	mov	r5, r0
 80021de:	f7ff ff1f 	bl	8002020 <BSP_LCD_GetYSize>
 80021e2:	4602      	mov	r2, r0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	462a      	mov	r2, r5
 80021f0:	4631      	mov	r1, r6
 80021f2:	4620      	mov	r0, r4
 80021f4:	f000 fc50 	bl	8002a98 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002200:	20000438 	.word	0x20000438
 8002204:	20000320 	.word	0x20000320

08002208 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, uint8_t Orientation)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4604      	mov	r4, r0
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4623      	mov	r3, r4
 8002218:	80fb      	strh	r3, [r7, #6]
 800221a:	4603      	mov	r3, r0
 800221c:	80bb      	strh	r3, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	70fb      	strb	r3, [r7, #3]
 8002222:	4613      	mov	r3, r2
 8002224:	70bb      	strb	r3, [r7, #2]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <BSP_LCD_DisplayChar+0x8c>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	491b      	ldr	r1, [pc, #108]	@ (8002298 <BSP_LCD_DisplayChar+0x90>)
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3308      	adds	r3, #8
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <BSP_LCD_DisplayChar+0x8c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4c14      	ldr	r4, [pc, #80]	@ (8002298 <BSP_LCD_DisplayChar+0x90>)
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4423      	add	r3, r4
 8002252:	3308      	adds	r3, #8
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002258:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 800225c:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <BSP_LCD_DisplayChar+0x8c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4c0d      	ldr	r4, [pc, #52]	@ (8002298 <BSP_LCD_DisplayChar+0x90>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4423      	add	r3, r4
 800226c:	3308      	adds	r3, #8
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	889b      	ldrh	r3, [r3, #4]
 8002272:	3307      	adds	r3, #7
 8002274:	2b00      	cmp	r3, #0
 8002276:	da00      	bge.n	800227a <BSP_LCD_DisplayChar+0x72>
 8002278:	3307      	adds	r3, #7
 800227a:	10db      	asrs	r3, r3, #3
 800227c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002280:	18ca      	adds	r2, r1, r3
 8002282:	78bb      	ldrb	r3, [r7, #2]
 8002284:	88b9      	ldrh	r1, [r7, #4]
 8002286:	88f8      	ldrh	r0, [r7, #6]
 8002288:	f000 faf2 	bl	8002870 <DrawChar>
														   Orientation);
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	20000438 	.word	0x20000438
 8002298:	2000043c 	.word	0x2000043c

0800229c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode, uint8_t Orientation)
{
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60ba      	str	r2, [r7, #8]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	81fb      	strh	r3, [r7, #14]
 80022aa:	460b      	mov	r3, r1
 80022ac:	81bb      	strh	r3, [r7, #12]
 80022ae:	4613      	mov	r3, r2
 80022b0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80022b2:	2301      	movs	r3, #1
 80022b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80022b6:	2300      	movs	r3, #0
 80022b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint32_t size = 0, xsize = 0, ysize = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = pText;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	61fb      	str	r3, [r7, #28]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80022ca:	e002      	b.n	80022d2 <BSP_LCD_DisplayStringAt+0x36>
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	3301      	adds	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	61fa      	str	r2, [r7, #28]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f6      	bne.n	80022cc <BSP_LCD_DisplayStringAt+0x30>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80022de:	f7ff fe93 	bl	8002008 <BSP_LCD_GetXSize>
 80022e2:	4601      	mov	r1, r0
 80022e4:	4b9a      	ldr	r3, [pc, #616]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	489a      	ldr	r0, [pc, #616]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4403      	add	r3, r0
 80022f4:	3308      	adds	r3, #8
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	889b      	ldrh	r3, [r3, #4]
 80022fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022fe:	61bb      	str	r3, [r7, #24]
  ysize = (BSP_LCD_GetYSize() / DrawProp[ActiveLayer].pFont->Width);
 8002300:	f7ff fe8e 	bl	8002020 <BSP_LCD_GetYSize>
 8002304:	4601      	mov	r1, r0
 8002306:	4b92      	ldr	r3, [pc, #584]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4892      	ldr	r0, [pc, #584]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4403      	add	r3, r0
 8002316:	3308      	adds	r3, #8
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	889b      	ldrh	r3, [r3, #4]
 800231c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002320:	617b      	str	r3, [r7, #20]



  if(Orientation){
 8002322:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8087 	beq.w	800243a <BSP_LCD_DisplayStringAt+0x19e>
	  switch (mode)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d01c      	beq.n	800236c <BSP_LCD_DisplayStringAt+0xd0>
 8002332:	2b03      	cmp	r3, #3
 8002334:	dc33      	bgt.n	800239e <BSP_LCD_DisplayStringAt+0x102>
 8002336:	2b01      	cmp	r3, #1
 8002338:	d002      	beq.n	8002340 <BSP_LCD_DisplayStringAt+0xa4>
 800233a:	2b02      	cmp	r3, #2
 800233c:	d019      	beq.n	8002372 <BSP_LCD_DisplayStringAt+0xd6>
 800233e:	e02e      	b.n	800239e <BSP_LCD_DisplayStringAt+0x102>
	    {
	      case CENTER_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	1ad1      	subs	r1, r2, r3
 8002346:	4b82      	ldr	r3, [pc, #520]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4882      	ldr	r0, [pc, #520]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4403      	add	r3, r0
 8002356:	3308      	adds	r3, #8
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	889b      	ldrh	r3, [r3, #4]
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	4413      	add	r3, r2
 8002368:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800236a:	e01b      	b.n	80023a4 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case LEFT_MODE:
	      {
	        refcolumn = X;
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002370:	e018      	b.n	80023a4 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case RIGHT_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	b299      	uxth	r1, r3
 800237a:	4b75      	ldr	r3, [pc, #468]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4875      	ldr	r0, [pc, #468]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4403      	add	r3, r0
 800238a:	3308      	adds	r3, #8
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	889b      	ldrh	r3, [r3, #4]
 8002390:	fb11 f303 	smulbb	r3, r1, r3
 8002394:	b29a      	uxth	r2, r3
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	4413      	add	r3, r2
 800239a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800239c:	e002      	b.n	80023a4 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      default:
	      {
	        refcolumn = X;
 800239e:	89fb      	ldrh	r3, [r7, #14]
 80023a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 80023a2:	bf00      	nop
	    }
	  /*
	  ///* Send the string character by character on LCD

	  */
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80023a4:	e01b      	b.n	80023de <BSP_LCD_DisplayStringAt+0x142>
	                          DrawProp[ActiveLayer].pFont->Width))
	  {
	    ///* Display one character on LCD
	    BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80023ae:	89b9      	ldrh	r1, [r7, #12]
 80023b0:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80023b2:	f7ff ff29 	bl	8002208 <BSP_LCD_DisplayChar>
	    ///* Decrement the column position by 16
	    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80023b6:	4b66      	ldr	r3, [pc, #408]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4966      	ldr	r1, [pc, #408]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3308      	adds	r3, #8
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	889a      	ldrh	r2, [r3, #4]
 80023cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80023ce:	4413      	add	r3, r2
 80023d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    ///* Point on the next character
	    pText++;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
	    i++;
 80023d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023da:	3301      	adds	r3, #1
 80023dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2dc      	uxtb	r4, r3
 80023ec:	f7ff fe0c 	bl	8002008 <BSP_LCD_GetXSize>
 80023f0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80023f2:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4d57      	ldr	r5, [pc, #348]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	442b      	add	r3, r5
 8002402:	3308      	adds	r3, #8
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	889b      	ldrh	r3, [r3, #4]
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	1ac3      	subs	r3, r0, r3
 800240e:	b299      	uxth	r1, r3
	                          DrawProp[ActiveLayer].pFont->Width))
 8002410:	4b4f      	ldr	r3, [pc, #316]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	484f      	ldr	r0, [pc, #316]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	3308      	adds	r3, #8
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002426:	4299      	cmp	r1, r3
 8002428:	bf2c      	ite	cs
 800242a:	2301      	movcs	r3, #1
 800242c:	2300      	movcc	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	4023      	ands	r3, r4
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1b6      	bne.n	80023a6 <BSP_LCD_DisplayStringAt+0x10a>
  }




}
 8002438:	e085      	b.n	8002546 <BSP_LCD_DisplayStringAt+0x2aa>
	  switch (mode)
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d01c      	beq.n	800247a <BSP_LCD_DisplayStringAt+0x1de>
 8002440:	2b03      	cmp	r3, #3
 8002442:	dc33      	bgt.n	80024ac <BSP_LCD_DisplayStringAt+0x210>
 8002444:	2b01      	cmp	r3, #1
 8002446:	d002      	beq.n	800244e <BSP_LCD_DisplayStringAt+0x1b2>
 8002448:	2b02      	cmp	r3, #2
 800244a:	d019      	beq.n	8002480 <BSP_LCD_DisplayStringAt+0x1e4>
 800244c:	e02e      	b.n	80024ac <BSP_LCD_DisplayStringAt+0x210>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	1ad1      	subs	r1, r2, r3
 8002454:	4b3e      	ldr	r3, [pc, #248]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	483e      	ldr	r0, [pc, #248]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4403      	add	r3, r0
 8002464:	3308      	adds	r3, #8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	889b      	ldrh	r3, [r3, #4]
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	4413      	add	r3, r2
 8002476:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002478:	e01b      	b.n	80024b2 <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800247e:	e018      	b.n	80024b2 <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width);
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	b299      	uxth	r1, r3
 8002488:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4831      	ldr	r0, [pc, #196]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4403      	add	r3, r0
 8002498:	3308      	adds	r3, #8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	fb11 f303 	smulbb	r3, r1, r3
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	4413      	add	r3, r2
 80024a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 80024aa:	e002      	b.n	80024b2 <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 80024ac:	89fb      	ldrh	r3, [r7, #14]
 80024ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 80024b0:	bf00      	nop
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80024b2:	e01b      	b.n	80024ec <BSP_LCD_DisplayStringAt+0x250>
	      BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80024bc:	89b9      	ldrh	r1, [r7, #12]
 80024be:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80024c0:	f7ff fea2 	bl	8002208 <BSP_LCD_DisplayChar>
	      refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80024c4:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4922      	ldr	r1, [pc, #136]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	3308      	adds	r3, #8
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	889a      	ldrh	r2, [r3, #4]
 80024da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80024dc:	4413      	add	r3, r2
 80024de:	84fb      	strh	r3, [r7, #38]	@ 0x26
	      pText++;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
	      i++;
 80024e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2dc      	uxtb	r4, r3
 80024fa:	f7ff fd91 	bl	8002020 <BSP_LCD_GetYSize>
 80024fe:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002500:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4d13      	ldr	r5, [pc, #76]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	442b      	add	r3, r5
 8002510:	3308      	adds	r3, #8
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	889b      	ldrh	r3, [r3, #4]
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	1ac3      	subs	r3, r0, r3
 800251c:	b299      	uxth	r1, r3
	                            DrawProp[ActiveLayer].pFont->Width))
 800251e:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <BSP_LCD_DisplayStringAt+0x2b4>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	480c      	ldr	r0, [pc, #48]	@ (8002554 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4403      	add	r3, r0
 800252e:	3308      	adds	r3, #8
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002534:	4299      	cmp	r1, r3
 8002536:	bf2c      	ite	cs
 8002538:	2301      	movcs	r3, #1
 800253a:	2300      	movcc	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4023      	ands	r3, r4
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1b6      	bne.n	80024b4 <BSP_LCD_DisplayStringAt+0x218>
}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	@ 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bdb0      	pop	{r4, r5, r7, pc}
 800254e:	bf00      	nop
 8002550:	20000438 	.word	0x20000438
 8002554:	2000043c 	.word	0x2000043c

08002558 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
 8002562:	460b      	mov	r3, r1
 8002564:	80bb      	strh	r3, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 800256e:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <BSP_LCD_DrawHLine+0x70>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a16      	ldr	r2, [pc, #88]	@ (80025cc <BSP_LCD_DrawHLine+0x74>)
 8002574:	2134      	movs	r1, #52	@ 0x34
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	335c      	adds	r3, #92	@ 0x5c
 800257e:	681c      	ldr	r4, [r3, #0]
 8002580:	f7ff fd42 	bl	8002008 <BSP_LCD_GetXSize>
 8002584:	4602      	mov	r2, r0
 8002586:	88bb      	ldrh	r3, [r7, #4]
 8002588:	fb03 f202 	mul.w	r2, r3, r2
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4423      	add	r3, r4
 8002594:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <BSP_LCD_DrawHLine+0x70>)
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	887c      	ldrh	r4, [r7, #2]
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <BSP_LCD_DrawHLine+0x70>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4d0b      	ldr	r5, [pc, #44]	@ (80025d0 <BSP_LCD_DrawHLine+0x78>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	442b      	add	r3, r5
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2300      	movs	r3, #0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2301      	movs	r3, #1
 80025b8:	4622      	mov	r2, r4
 80025ba:	f000 fa6d 	bl	8002a98 <FillBuffer>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bdb0      	pop	{r4, r5, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000438 	.word	0x20000438
 80025cc:	20000320 	.word	0x20000320
 80025d0:	2000043c 	.word	0x2000043c

080025d4 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
 80025de:	460b      	mov	r3, r1
 80025e0:	80bb      	strh	r3, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <BSP_LCD_DrawVLine+0x78>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a18      	ldr	r2, [pc, #96]	@ (8002650 <BSP_LCD_DrawVLine+0x7c>)
 80025f0:	2134      	movs	r1, #52	@ 0x34
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	335c      	adds	r3, #92	@ 0x5c
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	f7ff fd04 	bl	8002008 <BSP_LCD_GetXSize>
 8002600:	4602      	mov	r2, r0
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	fb03 f202 	mul.w	r2, r3, r2
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4423      	add	r3, r4
 8002610:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <BSP_LCD_DrawVLine+0x78>)
 8002614:	681c      	ldr	r4, [r3, #0]
 8002616:	68fd      	ldr	r5, [r7, #12]
 8002618:	887e      	ldrh	r6, [r7, #2]
 800261a:	f7ff fcf5 	bl	8002008 <BSP_LCD_GetXSize>
 800261e:	4603      	mov	r3, r0
 8002620:	1e59      	subs	r1, r3, #1
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <BSP_LCD_DrawVLine+0x78>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	480b      	ldr	r0, [pc, #44]	@ (8002654 <BSP_LCD_DrawVLine+0x80>)
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4403      	add	r3, r0
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	9100      	str	r1, [sp, #0]
 8002638:	4633      	mov	r3, r6
 800263a:	2201      	movs	r2, #1
 800263c:	4629      	mov	r1, r5
 800263e:	4620      	mov	r0, r4
 8002640:	f000 fa2a 	bl	8002a98 <FillBuffer>
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264c:	20000438 	.word	0x20000438
 8002650:	20000320 	.word	0x20000320
 8002654:	2000043c 	.word	0x2000043c

08002658 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <BSP_LCD_DisplayOn+0x1c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002666:	4b03      	ldr	r3, [pc, #12]	@ (8002674 <BSP_LCD_DisplayOn+0x1c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4798      	blx	r3
  }
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000454 	.word	0x20000454

08002678 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08e      	sub	sp, #56	@ 0x38
 800267c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	4a60      	ldr	r2, [pc, #384]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002688:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800268c:	6453      	str	r3, [r2, #68]	@ 0x44
 800268e:	4b5e      	ldr	r3, [pc, #376]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	4b5a      	ldr	r3, [pc, #360]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a59      	ldr	r2, [pc, #356]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b57      	ldr	r3, [pc, #348]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a52      	ldr	r2, [pc, #328]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b50      	ldr	r3, [pc, #320]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	4a4b      	ldr	r2, [pc, #300]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e2:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b45      	ldr	r3, [pc, #276]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	4a44      	ldr	r2, [pc, #272]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fe:	4b42      	ldr	r3, [pc, #264]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b3e      	ldr	r3, [pc, #248]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	4a3d      	ldr	r2, [pc, #244]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6313      	str	r3, [r2, #48]	@ 0x30
 800271a:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b37      	ldr	r3, [pc, #220]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b30      	ldr	r3, [pc, #192]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a2f      	ldr	r2, [pc, #188]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 800274c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <BSP_LCD_MspInit+0x190>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800275e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800276c:	2302      	movs	r3, #2
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002770:	230e      	movs	r3, #14
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	4824      	ldr	r0, [pc, #144]	@ (800280c <BSP_LCD_MspInit+0x194>)
 800277c:	f003 fcfe 	bl	800617c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002780:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278a:	4619      	mov	r1, r3
 800278c:	4820      	ldr	r0, [pc, #128]	@ (8002810 <BSP_LCD_MspInit+0x198>)
 800278e:	f003 fcf5 	bl	800617c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002792:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279c:	4619      	mov	r1, r3
 800279e:	481d      	ldr	r0, [pc, #116]	@ (8002814 <BSP_LCD_MspInit+0x19c>)
 80027a0:	f003 fcec 	bl	800617c <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80027a4:	2348      	movs	r3, #72	@ 0x48
 80027a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80027a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ac:	4619      	mov	r1, r3
 80027ae:	481a      	ldr	r0, [pc, #104]	@ (8002818 <BSP_LCD_MspInit+0x1a0>)
 80027b0:	f003 fce4 	bl	800617c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80027b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80027ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027be:	4619      	mov	r1, r3
 80027c0:	4816      	ldr	r0, [pc, #88]	@ (800281c <BSP_LCD_MspInit+0x1a4>)
 80027c2:	f003 fcdb 	bl	800617c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80027c6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d0:	4619      	mov	r1, r3
 80027d2:	4813      	ldr	r0, [pc, #76]	@ (8002820 <BSP_LCD_MspInit+0x1a8>)
 80027d4:	f003 fcd2 	bl	800617c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80027d8:	2303      	movs	r3, #3
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80027dc:	2309      	movs	r3, #9
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80027e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	480a      	ldr	r0, [pc, #40]	@ (8002810 <BSP_LCD_MspInit+0x198>)
 80027e8:	f003 fcc8 	bl	800617c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80027ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f6:	4619      	mov	r1, r3
 80027f8:	4809      	ldr	r0, [pc, #36]	@ (8002820 <BSP_LCD_MspInit+0x1a8>)
 80027fa:	f003 fcbf 	bl	800617c <HAL_GPIO_Init>
}
 80027fe:	bf00      	nop
 8002800:	3738      	adds	r7, #56	@ 0x38
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021400 	.word	0x40021400
 8002820:	40021800 	.word	0x40021800

08002824 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	603a      	str	r2, [r7, #0]
 800282e:	80fb      	strh	r3, [r7, #6]
 8002830:	460b      	mov	r3, r1
 8002832:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <BSP_LCD_DrawPixel+0x44>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0c      	ldr	r2, [pc, #48]	@ (800286c <BSP_LCD_DrawPixel+0x48>)
 800283a:	2134      	movs	r1, #52	@ 0x34
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	335c      	adds	r3, #92	@ 0x5c
 8002844:	681c      	ldr	r4, [r3, #0]
 8002846:	88bd      	ldrh	r5, [r7, #4]
 8002848:	f7ff fbde 	bl	8002008 <BSP_LCD_GetXSize>
 800284c:	4603      	mov	r3, r0
 800284e:	fb03 f205 	mul.w	r2, r3, r5
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4423      	add	r3, r4
 800285a:	461a      	mov	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bdb0      	pop	{r4, r5, r7, pc}
 8002868:	20000438 	.word	0x20000438
 800286c:	20000320 	.word	0x20000320

08002870 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, uint8_t Orientation)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b08b      	sub	sp, #44	@ 0x2c
 8002874:	af00      	add	r7, sp, #0
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	81fb      	strh	r3, [r7, #14]
 800287e:	460b      	mov	r3, r1
 8002880:	81bb      	strh	r3, [r7, #12]
 8002882:	4613      	mov	r3, r2
 8002884:	71fb      	strb	r3, [r7, #7]
  uint32_t i = 0, j = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset, offsetheight;
  uint8_t *pchar;
  uint32_t line = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002892:	4b7f      	ldr	r3, [pc, #508]	@ (8002a90 <DrawChar+0x220>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	497f      	ldr	r1, [pc, #508]	@ (8002a94 <DrawChar+0x224>)
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3308      	adds	r3, #8
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	88db      	ldrh	r3, [r3, #6]
 80028a8:	837b      	strh	r3, [r7, #26]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80028aa:	4b79      	ldr	r3, [pc, #484]	@ (8002a90 <DrawChar+0x220>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4979      	ldr	r1, [pc, #484]	@ (8002a94 <DrawChar+0x224>)
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3308      	adds	r3, #8
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	889b      	ldrh	r3, [r3, #4]
 80028c0:	833b      	strh	r3, [r7, #24]

  offset = 8 * ((width + 7) / 8) -  width ;
 80028c2:	8b3b      	ldrh	r3, [r7, #24]
 80028c4:	3307      	adds	r3, #7
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da00      	bge.n	80028cc <DrawChar+0x5c>
 80028ca:	3307      	adds	r3, #7
 80028cc:	10db      	asrs	r3, r3, #3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	8b3b      	ldrh	r3, [r7, #24]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	75fb      	strb	r3, [r7, #23]
  offsetheight = 8 * ((height + 7) / 8) -  height;
 80028dc:	8b7b      	ldrh	r3, [r7, #26]
 80028de:	3307      	adds	r3, #7
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da00      	bge.n	80028e6 <DrawChar+0x76>
 80028e4:	3307      	adds	r3, #7
 80028e6:	10db      	asrs	r3, r3, #3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	8b7b      	ldrh	r3, [r7, #26]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	75bb      	strb	r3, [r7, #22]
  for (i = 0; i < height; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	e0be      	b.n	8002a7a <DrawChar+0x20a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80028fc:	8b3b      	ldrh	r3, [r7, #24]
 80028fe:	3307      	adds	r3, #7
 8002900:	2b00      	cmp	r3, #0
 8002902:	da00      	bge.n	8002906 <DrawChar+0x96>
 8002904:	3307      	adds	r3, #7
 8002906:	10db      	asrs	r3, r3, #3
 8002908:	461a      	mov	r2, r3
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	4413      	add	r3, r2
 8002914:	613b      	str	r3, [r7, #16]

    switch (((width + 7) / 8))
 8002916:	8b3b      	ldrh	r3, [r7, #24]
 8002918:	3307      	adds	r3, #7
 800291a:	2b00      	cmp	r3, #0
 800291c:	da00      	bge.n	8002920 <DrawChar+0xb0>
 800291e:	3307      	adds	r3, #7
 8002920:	10db      	asrs	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d002      	beq.n	800292c <DrawChar+0xbc>
 8002926:	2b02      	cmp	r3, #2
 8002928:	d004      	beq.n	8002934 <DrawChar+0xc4>
 800292a:	e00c      	b.n	8002946 <DrawChar+0xd6>
    {
      case 1:
        line =  pchar[0];
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	61fb      	str	r3, [r7, #28]
        break;
 8002932:	e016      	b.n	8002962 <DrawChar+0xf2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	3201      	adds	r2, #1
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]
        break;
 8002944:	e00d      	b.n	8002962 <DrawChar+0xf2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	041a      	lsls	r2, r3, #16
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	3301      	adds	r3, #1
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4313      	orrs	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	3202      	adds	r2, #2
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	61fb      	str	r3, [r7, #28]
        break;
 8002960:	bf00      	nop
    }
    if(Orientation){
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d03e      	beq.n	80029e6 <DrawChar+0x176>
        for (j = 0; j < width; j++)
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	e036      	b.n	80029dc <DrawChar+0x16c>
        {
          if (line & (1 << (width - j + offset - 1)))
 800296e:	8b3a      	ldrh	r2, [r7, #24]
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	1ad2      	subs	r2, r2, r3
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	4413      	add	r3, r2
 8002978:	3b01      	subs	r3, #1
 800297a:	2201      	movs	r2, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	461a      	mov	r2, r3
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <DrawChar+0x140>
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	b29a      	uxth	r2, r3
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	4413      	add	r3, r2
 8002992:	b298      	uxth	r0, r3
 8002994:	4b3e      	ldr	r3, [pc, #248]	@ (8002a90 <DrawChar+0x220>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	493e      	ldr	r1, [pc, #248]	@ (8002a94 <DrawChar+0x224>)
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	89bb      	ldrh	r3, [r7, #12]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7ff ff3b 	bl	8002824 <BSP_LCD_DrawPixel>
 80029ae:	e012      	b.n	80029d6 <DrawChar+0x166>
          }
          else
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	89fb      	ldrh	r3, [r7, #14]
 80029b6:	4413      	add	r3, r2
 80029b8:	b298      	uxth	r0, r3
 80029ba:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <DrawChar+0x220>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4935      	ldr	r1, [pc, #212]	@ (8002a94 <DrawChar+0x224>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3304      	adds	r3, #4
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	89bb      	ldrh	r3, [r7, #12]
 80029d0:	4619      	mov	r1, r3
 80029d2:	f7ff ff27 	bl	8002824 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	3301      	adds	r3, #1
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	8b3b      	ldrh	r3, [r7, #24]
 80029de:	6a3a      	ldr	r2, [r7, #32]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3c4      	bcc.n	800296e <DrawChar+0xfe>
 80029e4:	e043      	b.n	8002a6e <DrawChar+0x1fe>
          }
        }
    }

    else {
        for (j = 0; j < width; j++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	e03c      	b.n	8002a66 <DrawChar+0x1f6>
            {
              if (line & (1 << (width - j + offset - 1)))
 80029ec:	8b3a      	ldrh	r2, [r7, #24]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	4413      	add	r3, r2
 80029f6:	3b01      	subs	r3, #1
 80029f8:	2201      	movs	r2, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <DrawChar+0x1c4>
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].TextColor);
 8002a08:	89bb      	ldrh	r3, [r7, #12]
 8002a0a:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 8002a0e:	b298      	uxth	r0, r3
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	4413      	add	r3, r2
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <DrawChar+0x220>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4c1d      	ldr	r4, [pc, #116]	@ (8002a94 <DrawChar+0x224>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4423      	add	r3, r4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f7ff fef9 	bl	8002824 <BSP_LCD_DrawPixel>
 8002a32:	e015      	b.n	8002a60 <DrawChar+0x1f0>
              }
              else
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].BackColor);
 8002a34:	89bb      	ldrh	r3, [r7, #12]
 8002a36:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 8002a3a:	b298      	uxth	r0, r3
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	4413      	add	r3, r2
 8002a44:	b299      	uxth	r1, r3
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <DrawChar+0x220>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4c12      	ldr	r4, [pc, #72]	@ (8002a94 <DrawChar+0x224>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4423      	add	r3, r4
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f7ff fee2 	bl	8002824 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	3301      	adds	r3, #1
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	8b3b      	ldrh	r3, [r7, #24]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d3be      	bcc.n	80029ec <DrawChar+0x17c>
              }
            }
    }

    Ypos++;
 8002a6e:	89bb      	ldrh	r3, [r7, #12]
 8002a70:	3301      	adds	r3, #1
 8002a72:	81bb      	strh	r3, [r7, #12]
  for (i = 0; i < height; i++)
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	3301      	adds	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7a:	8b7b      	ldrh	r3, [r7, #26]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	f4ff af3c 	bcc.w	80028fc <DrawChar+0x8c>
  }
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	372c      	adds	r7, #44	@ 0x2c
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000438 	.word	0x20000438
 8002a94:	2000043c 	.word	0x2000043c

08002a98 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <FillBuffer+0x68>)
 8002aa8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002aac:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002aae:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <FillBuffer+0x68>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002ab4:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <FillBuffer+0x68>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8002aba:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <FillBuffer+0x68>)
 8002abc:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <FillBuffer+0x6c>)
 8002abe:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8002ac0:	480f      	ldr	r0, [pc, #60]	@ (8002b00 <FillBuffer+0x68>)
 8002ac2:	f002 ffbf 	bl	8005a44 <HAL_DMA2D_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d115      	bne.n	8002af8 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8002acc:	68f9      	ldr	r1, [r7, #12]
 8002ace:	480c      	ldr	r0, [pc, #48]	@ (8002b00 <FillBuffer+0x68>)
 8002ad0:	f003 fa26 	bl	8005f20 <HAL_DMA2D_ConfigLayer>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69f9      	ldr	r1, [r7, #28]
 8002ae4:	4806      	ldr	r0, [pc, #24]	@ (8002b00 <FillBuffer+0x68>)
 8002ae6:	f002 fff6 	bl	8005ad6 <HAL_DMA2D_Start>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002af0:	210a      	movs	r1, #10
 8002af2:	4803      	ldr	r0, [pc, #12]	@ (8002b00 <FillBuffer+0x68>)
 8002af4:	f003 f81a 	bl	8005b2c <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200003c8 	.word	0x200003c8
 8002b04:	4002b000 	.word	0x4002b000

08002b08 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b0c:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb8 <BSP_SDRAM_Init+0xb0>)
 8002b10:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002b12:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b14:	2202      	movs	r2, #2
 8002b16:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002b18:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002b1e:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b20:	2204      	movs	r2, #4
 8002b22:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002b24:	4b25      	ldr	r3, [pc, #148]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b26:	2207      	movs	r2, #7
 8002b28:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002b2a:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b32:	2202      	movs	r2, #2
 8002b34:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002b36:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b38:	2202      	movs	r2, #2
 8002b3a:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b42:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b50:	2210      	movs	r2, #16
 8002b52:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b54:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002b5a:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b5c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b60:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b6e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002b70:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002b7e:	2100      	movs	r1, #0
 8002b80:	480c      	ldr	r0, [pc, #48]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b82:	f000 f87f 	bl	8002c84 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002b86:	490d      	ldr	r1, [pc, #52]	@ (8002bbc <BSP_SDRAM_Init+0xb4>)
 8002b88:	480a      	ldr	r0, [pc, #40]	@ (8002bb4 <BSP_SDRAM_Init+0xac>)
 8002b8a:	f006 f8ff 	bl	8008d8c <HAL_SDRAM_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002b94:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <BSP_SDRAM_Init+0xb8>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e002      	b.n	8002ba2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <BSP_SDRAM_Init+0xb8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ba2:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002ba6:	f000 f80d 	bl	8002bc4 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <BSP_SDRAM_Init+0xb8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000458 	.word	0x20000458
 8002bb8:	a0000140 	.word	0xa0000140
 8002bbc:	2000048c 	.word	0x2000048c
 8002bc0:	20000078 	.word	0x20000078

08002bc4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002bd6:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd8:	2208      	movs	r2, #8
 8002bda:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002bdc:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002be2:	4b26      	ldr	r3, [pc, #152]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002be8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bec:	4923      	ldr	r1, [pc, #140]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bee:	4824      	ldr	r0, [pc, #144]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bf0:	f006 f900 	bl	8008df4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f001 fd73 	bl	80046e0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002bfa:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c02:	2208      	movs	r2, #8
 8002c04:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c16:	4919      	ldr	r1, [pc, #100]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c18:	4819      	ldr	r0, [pc, #100]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c1a:	f006 f8eb 	bl	8008df4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c20:	2203      	movs	r2, #3
 8002c22:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c24:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c26:	2208      	movs	r2, #8
 8002c28:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c30:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c3a:	4910      	ldr	r1, [pc, #64]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3c:	4810      	ldr	r0, [pc, #64]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c3e:	f006 f8d9 	bl	8008df4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002c42:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002c46:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c50:	2208      	movs	r2, #8
 8002c52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a07      	ldr	r2, [pc, #28]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c5e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c64:	4905      	ldr	r1, [pc, #20]	@ (8002c7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c66:	4806      	ldr	r0, [pc, #24]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c68:	f006 f8c4 	bl	8008df4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4804      	ldr	r0, [pc, #16]	@ (8002c80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c70:	f006 f8f5 	bl	8008e5e <HAL_SDRAM_ProgramRefreshRate>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200004a8 	.word	0x200004a8
 8002c80:	20000458 	.word	0x20000458

08002c84 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b090      	sub	sp, #64	@ 0x40
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80ec 	beq.w	8002e6e <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9a:	4b77      	ldr	r3, [pc, #476]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	4a76      	ldr	r2, [pc, #472]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ca6:	4b74      	ldr	r3, [pc, #464]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	4b70      	ldr	r3, [pc, #448]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a6f      	ldr	r2, [pc, #444]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	4b69      	ldr	r3, [pc, #420]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a68      	ldr	r2, [pc, #416]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b66      	ldr	r3, [pc, #408]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	4b62      	ldr	r3, [pc, #392]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a61      	ldr	r2, [pc, #388]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	4b54      	ldr	r3, [pc, #336]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a53      	ldr	r2, [pc, #332]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b51      	ldr	r3, [pc, #324]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b4d      	ldr	r3, [pc, #308]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4a4c      	ldr	r2, [pc, #304]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b46      	ldr	r3, [pc, #280]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	4a45      	ldr	r2, [pc, #276]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6a:	4b43      	ldr	r3, [pc, #268]	@ (8002e78 <BSP_SDRAM_MspInit+0x1f4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002d82:	230c      	movs	r3, #12
 8002d84:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002d86:	2360      	movs	r3, #96	@ 0x60
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	483a      	ldr	r0, [pc, #232]	@ (8002e7c <BSP_SDRAM_MspInit+0x1f8>)
 8002d92:	f003 f9f3 	bl	800617c <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002d96:	2301      	movs	r3, #1
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4837      	ldr	r0, [pc, #220]	@ (8002e80 <BSP_SDRAM_MspInit+0x1fc>)
 8002da2:	f003 f9eb 	bl	800617c <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002da6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db0:	4619      	mov	r1, r3
 8002db2:	4834      	ldr	r0, [pc, #208]	@ (8002e84 <BSP_SDRAM_MspInit+0x200>)
 8002db4:	f003 f9e2 	bl	800617c <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002db8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002dbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4830      	ldr	r0, [pc, #192]	@ (8002e88 <BSP_SDRAM_MspInit+0x204>)
 8002dc6:	f003 f9d9 	bl	800617c <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002dca:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	482d      	ldr	r0, [pc, #180]	@ (8002e8c <BSP_SDRAM_MspInit+0x208>)
 8002dd8:	f003 f9d0 	bl	800617c <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002ddc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002de6:	4619      	mov	r1, r3
 8002de8:	4829      	ldr	r0, [pc, #164]	@ (8002e90 <BSP_SDRAM_MspInit+0x20c>)
 8002dea:	f003 f9c7 	bl	800617c <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002df4:	4b27      	ldr	r3, [pc, #156]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e00:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002e02:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e08:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e10:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e18:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e20:	4b1c      	ldr	r3, [pc, #112]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e26:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e30:	2203      	movs	r2, #3
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e34:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e42:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <BSP_SDRAM_MspInit+0x214>)
 8002e44:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e4c:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002e52:	4810      	ldr	r0, [pc, #64]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e54:	f002 fad6 	bl	8005404 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002e58:	480e      	ldr	r0, [pc, #56]	@ (8002e94 <BSP_SDRAM_MspInit+0x210>)
 8002e5a:	f002 fa25 	bl	80052a8 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	210f      	movs	r1, #15
 8002e62:	2038      	movs	r0, #56	@ 0x38
 8002e64:	f001 ff8a 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e68:	2038      	movs	r0, #56	@ 0x38
 8002e6a:	f001 ffa3 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002e6e:	bf00      	nop
 8002e70:	3740      	adds	r7, #64	@ 0x40
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	200004b8 	.word	0x200004b8
 8002e98:	40026410 	.word	0x40026410

08002e9c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	80fb      	strh	r3, [r7, #6]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002eb0:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <BSP_TS_Init+0x64>)
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002eb6:	4a13      	ldr	r2, [pc, #76]	@ (8002f04 <BSP_TS_Init+0x68>)
 8002eb8:	88bb      	ldrh	r3, [r7, #4]
 8002eba:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002ebc:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <BSP_TS_Init+0x6c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2082      	movs	r0, #130	@ 0x82
 8002ec2:	4798      	blx	r3
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f640 0311 	movw	r3, #2065	@ 0x811
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d104      	bne.n	8002eda <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <BSP_TS_Init+0x70>)
 8002ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <BSP_TS_Init+0x6c>)
 8002ed4:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <BSP_TS_Init+0x70>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2082      	movs	r0, #130	@ 0x82
 8002ee8:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002eea:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <BSP_TS_Init+0x70>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2082      	movs	r0, #130	@ 0x82
 8002ef2:	4798      	blx	r3
  }

  return ret;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	2000051c 	.word	0x2000051c
 8002f04:	2000051e 	.word	0x2000051e
 8002f08:	20000038 	.word	0x20000038
 8002f0c:	20000518 	.word	0x20000518

08002f10 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f16:	463b      	mov	r3, r7
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f22:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f24:	4a21      	ldr	r2, [pc, #132]	@ (8002fac <MX_ADC1_Init+0x9c>)
 8002f26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f28:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f50:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f52:	4a17      	ldr	r2, [pc, #92]	@ (8002fb0 <MX_ADC1_Init+0xa0>)
 8002f54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f56:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f70:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f72:	f001 fbd9 	bl	8004728 <HAL_ADC_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002f7c:	f000 ffe2 	bl	8003f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <MX_ADC1_Init+0xa4>)
 8002f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <MX_ADC1_Init+0x98>)
 8002f92:	f001 fc0d 	bl	80047b0 <HAL_ADC_ConfigChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002f9c:	f000 ffd2 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000520 	.word	0x20000520
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	0f000001 	.word	0x0f000001
 8002fb4:	10000012 	.word	0x10000012

08002fb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff4 <HAL_ADC_MspInit+0x3c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <HAL_ADC_MspInit+0x40>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	4a09      	ldr	r2, [pc, #36]	@ (8002ff8 <HAL_ADC_MspInit+0x40>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fda:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <HAL_ADC_MspInit+0x40>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40012000 	.word	0x40012000
 8002ff8:	40023800 	.word	0x40023800

08002ffc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <MX_CRC_Init+0x20>)
 8003002:	4a07      	ldr	r2, [pc, #28]	@ (8003020 <MX_CRC_Init+0x24>)
 8003004:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003006:	4805      	ldr	r0, [pc, #20]	@ (800301c <MX_CRC_Init+0x20>)
 8003008:	f001 fee2 	bl	8004dd0 <HAL_CRC_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003012:	f000 ff97 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000568 	.word	0x20000568
 8003020:	40023000 	.word	0x40023000

08003024 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0b      	ldr	r2, [pc, #44]	@ (8003060 <HAL_CRC_MspInit+0x3c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10d      	bne.n	8003052 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_CRC_MspInit+0x40>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	4a09      	ldr	r2, [pc, #36]	@ (8003064 <HAL_CRC_MspInit+0x40>)
 8003040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003044:	6313      	str	r3, [r2, #48]	@ 0x30
 8003046:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <HAL_CRC_MspInit+0x40>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023000 	.word	0x40023000
 8003064:	40023800 	.word	0x40023800

08003068 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800306e:	463b      	mov	r3, r7
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003076:	4b0f      	ldr	r3, [pc, #60]	@ (80030b4 <MX_DAC_Init+0x4c>)
 8003078:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <MX_DAC_Init+0x50>)
 800307a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800307c:	480d      	ldr	r0, [pc, #52]	@ (80030b4 <MX_DAC_Init+0x4c>)
 800307e:	f001 fec3 	bl	8004e08 <HAL_DAC_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003088:	f000 ff5c 	bl	8003f44 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800308c:	2324      	movs	r3, #36	@ 0x24
 800308e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003094:	463b      	mov	r3, r7
 8003096:	2210      	movs	r2, #16
 8003098:	4619      	mov	r1, r3
 800309a:	4806      	ldr	r0, [pc, #24]	@ (80030b4 <MX_DAC_Init+0x4c>)
 800309c:	f002 f816 	bl	80050cc <HAL_DAC_ConfigChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80030a6:	f000 ff4d 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000570 	.word	0x20000570
 80030b8:	40007400 	.word	0x40007400

080030bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a33      	ldr	r2, [pc, #204]	@ (80031a8 <HAL_DAC_MspInit+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d160      	bne.n	80031a0 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	4b32      	ldr	r3, [pc, #200]	@ (80031ac <HAL_DAC_MspInit+0xf0>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	4a31      	ldr	r2, [pc, #196]	@ (80031ac <HAL_DAC_MspInit+0xf0>)
 80030e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ee:	4b2f      	ldr	r3, [pc, #188]	@ (80031ac <HAL_DAC_MspInit+0xf0>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b2b      	ldr	r3, [pc, #172]	@ (80031ac <HAL_DAC_MspInit+0xf0>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	4a2a      	ldr	r2, [pc, #168]	@ (80031ac <HAL_DAC_MspInit+0xf0>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6313      	str	r3, [r2, #48]	@ 0x30
 800310a:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <HAL_DAC_MspInit+0xf0>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003116:	2320      	movs	r3, #32
 8003118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311a:	2303      	movs	r3, #3
 800311c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	4821      	ldr	r0, [pc, #132]	@ (80031b0 <HAL_DAC_MspInit+0xf4>)
 800312a:	f003 f827 	bl	800617c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800312e:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003130:	4a21      	ldr	r2, [pc, #132]	@ (80031b8 <HAL_DAC_MspInit+0xfc>)
 8003132:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8003134:	4b1f      	ldr	r3, [pc, #124]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003136:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800313a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800313c:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 800313e:	2240      	movs	r2, #64	@ 0x40
 8003140:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003144:	2200      	movs	r2, #0
 8003146:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8003148:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 800314a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800314e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003152:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003156:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003158:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 800315a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800315e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8003160:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003166:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 800316a:	2200      	movs	r2, #0
 800316c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003170:	2200      	movs	r2, #0
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8003174:	480f      	ldr	r0, [pc, #60]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003176:	f002 f897 	bl	80052a8 <HAL_DMA_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003180:	f000 fee0 	bl	8003f44 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a0b      	ldr	r2, [pc, #44]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_DAC_MspInit+0xf8>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	210f      	movs	r1, #15
 8003194:	2036      	movs	r0, #54	@ 0x36
 8003196:	f001 fdf1 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800319a:	2036      	movs	r0, #54	@ 0x36
 800319c:	f001 fe0a 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	@ 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40007400 	.word	0x40007400
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	20000584 	.word	0x20000584
 80031b8:	400260a0 	.word	0x400260a0

080031bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <MX_DMA_Init+0x3c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	4a0b      	ldr	r2, [pc, #44]	@ (80031f8 <MX_DMA_Init+0x3c>)
 80031cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d2:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <MX_DMA_Init+0x3c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	2011      	movs	r0, #17
 80031e4:	f001 fdca 	bl	8004d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80031e8:	2011      	movs	r0, #17
 80031ea:	f001 fde3 	bl	8004db4 <HAL_NVIC_EnableIRQ>

}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800

080031fc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003200:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 8003202:	4a16      	ldr	r2, [pc, #88]	@ (800325c <MX_DMA2D_Init+0x60>)
 8003204:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003206:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 8003208:	2200      	movs	r2, #0
 800320a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800320c:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800321e:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 8003220:	2200      	movs	r2, #0
 8003222:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003224:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 800322c:	2200      	movs	r2, #0
 800322e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003230:	4809      	ldr	r0, [pc, #36]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 8003232:	f002 fc07 	bl	8005a44 <HAL_DMA2D_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800323c:	f000 fe82 	bl	8003f44 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003240:	2101      	movs	r1, #1
 8003242:	4805      	ldr	r0, [pc, #20]	@ (8003258 <MX_DMA2D_Init+0x5c>)
 8003244:	f002 fe6c 	bl	8005f20 <HAL_DMA2D_ConfigLayer>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800324e:	f000 fe79 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200005e4 	.word	0x200005e4
 800325c:	4002b000 	.word	0x4002b000

08003260 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0e      	ldr	r2, [pc, #56]	@ (80032a8 <HAL_DMA2D_MspInit+0x48>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d115      	bne.n	800329e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <HAL_DMA2D_MspInit+0x4c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	4a0c      	ldr	r2, [pc, #48]	@ (80032ac <HAL_DMA2D_MspInit+0x4c>)
 800327c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003280:	6313      	str	r3, [r2, #48]	@ 0x30
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_DMA2D_MspInit+0x4c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2105      	movs	r1, #5
 8003292:	205a      	movs	r0, #90	@ 0x5a
 8003294:	f001 fd72 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003298:	205a      	movs	r0, #90	@ 0x5a
 800329a:	f001 fd8b 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	4002b000 	.word	0x4002b000
 80032ac:	40023800 	.word	0x40023800

080032b0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
 80032c4:	615a      	str	r2, [r3, #20]
 80032c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80032c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <MX_FMC_Init+0x98>)
 80032ca:	4a20      	ldr	r2, [pc, #128]	@ (800334c <MX_FMC_Init+0x9c>)
 80032cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <MX_FMC_Init+0x98>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <MX_FMC_Init+0x98>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80032da:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <MX_FMC_Init+0x98>)
 80032dc:	2204      	movs	r2, #4
 80032de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <MX_FMC_Init+0x98>)
 80032e2:	2210      	movs	r2, #16
 80032e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032e6:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <MX_FMC_Init+0x98>)
 80032e8:	2240      	movs	r2, #64	@ 0x40
 80032ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80032ec:	4b16      	ldr	r3, [pc, #88]	@ (8003348 <MX_FMC_Init+0x98>)
 80032ee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80032f2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <MX_FMC_Init+0x98>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <MX_FMC_Init+0x98>)
 80032fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003300:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <MX_FMC_Init+0x98>)
 8003304:	2200      	movs	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <MX_FMC_Init+0x98>)
 800330a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800330e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003310:	2302      	movs	r3, #2
 8003312:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003314:	2307      	movs	r3, #7
 8003316:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003318:	2304      	movs	r3, #4
 800331a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800331c:	2307      	movs	r3, #7
 800331e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003320:	2303      	movs	r3, #3
 8003322:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8003328:	2302      	movs	r3, #2
 800332a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4805      	ldr	r0, [pc, #20]	@ (8003348 <MX_FMC_Init+0x98>)
 8003332:	f005 fd2b 	bl	8008d8c <HAL_SDRAM_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800333c:	f000 fe02 	bl	8003f44 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003340:	bf00      	nop
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000624 	.word	0x20000624
 800334c:	a0000140 	.word	0xa0000140

08003350 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003364:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <HAL_FMC_MspInit+0x104>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d16f      	bne.n	800344c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800336c:	4b39      	ldr	r3, [pc, #228]	@ (8003454 <HAL_FMC_MspInit+0x104>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4b38      	ldr	r3, [pc, #224]	@ (8003458 <HAL_FMC_MspInit+0x108>)
 8003378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337a:	4a37      	ldr	r2, [pc, #220]	@ (8003458 <HAL_FMC_MspInit+0x108>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6393      	str	r3, [r2, #56]	@ 0x38
 8003382:	4b35      	ldr	r3, [pc, #212]	@ (8003458 <HAL_FMC_MspInit+0x108>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800338e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003392:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a0:	230c      	movs	r3, #12
 80033a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	482c      	ldr	r0, [pc, #176]	@ (800345c <HAL_FMC_MspInit+0x10c>)
 80033aa:	f002 fee7 	bl	800617c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80033ae:	2301      	movs	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033be:	230c      	movs	r3, #12
 80033c0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4826      	ldr	r0, [pc, #152]	@ (8003460 <HAL_FMC_MspInit+0x110>)
 80033c8:	f002 fed8 	bl	800617c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80033cc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80033d0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033de:	230c      	movs	r3, #12
 80033e0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	481f      	ldr	r0, [pc, #124]	@ (8003464 <HAL_FMC_MspInit+0x114>)
 80033e8:	f002 fec8 	bl	800617c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80033ec:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80033f0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fa:	2303      	movs	r3, #3
 80033fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033fe:	230c      	movs	r3, #12
 8003400:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4818      	ldr	r0, [pc, #96]	@ (8003468 <HAL_FMC_MspInit+0x118>)
 8003408:	f002 feb8 	bl	800617c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800340c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003410:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800341e:	230c      	movs	r3, #12
 8003420:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4811      	ldr	r0, [pc, #68]	@ (800346c <HAL_FMC_MspInit+0x11c>)
 8003428:	f002 fea8 	bl	800617c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800342c:	2360      	movs	r3, #96	@ 0x60
 800342e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800343c:	230c      	movs	r3, #12
 800343e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	480a      	ldr	r0, [pc, #40]	@ (8003470 <HAL_FMC_MspInit+0x120>)
 8003446:	f002 fe99 	bl	800617c <HAL_GPIO_Init>
 800344a:	e000      	b.n	800344e <HAL_FMC_MspInit+0xfe>
    return;
 800344c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000658 	.word	0x20000658
 8003458:	40023800 	.word	0x40023800
 800345c:	40021400 	.word	0x40021400
 8003460:	40020800 	.word	0x40020800
 8003464:	40021800 	.word	0x40021800
 8003468:	40021000 	.word	0x40021000
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40020400 	.word	0x40020400

08003474 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800347c:	f7ff ff68 	bl	8003350 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <MX_GPIO_Init>:
     PB15   ------> USB_OTG_HS_DP
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	@ 0x38
 800348c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	4b92      	ldr	r3, [pc, #584]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	4a91      	ldr	r2, [pc, #580]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ae:	4b8f      	ldr	r3, [pc, #572]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	4b8b      	ldr	r3, [pc, #556]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	4a8a      	ldr	r2, [pc, #552]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ca:	4b88      	ldr	r3, [pc, #544]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	4b84      	ldr	r3, [pc, #528]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a83      	ldr	r2, [pc, #524]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b81      	ldr	r3, [pc, #516]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	4b7d      	ldr	r3, [pc, #500]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	4a7c      	ldr	r2, [pc, #496]	@ (80036ec <MX_GPIO_Init+0x264>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	@ 0x30
 8003502:	4b7a      	ldr	r3, [pc, #488]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	4b76      	ldr	r3, [pc, #472]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	4a75      	ldr	r2, [pc, #468]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	6313      	str	r3, [r2, #48]	@ 0x30
 800351e:	4b73      	ldr	r3, [pc, #460]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b6f      	ldr	r3, [pc, #444]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	4a6e      	ldr	r2, [pc, #440]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003538:	6313      	str	r3, [r2, #48]	@ 0x30
 800353a:	4b6c      	ldr	r3, [pc, #432]	@ (80036ec <MX_GPIO_Init+0x264>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b68      	ldr	r3, [pc, #416]	@ (80036ec <MX_GPIO_Init+0x264>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	4a67      	ldr	r2, [pc, #412]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003550:	f043 0310 	orr.w	r3, r3, #16
 8003554:	6313      	str	r3, [r2, #48]	@ 0x30
 8003556:	4b65      	ldr	r3, [pc, #404]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	4b61      	ldr	r3, [pc, #388]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	4a60      	ldr	r2, [pc, #384]	@ (80036ec <MX_GPIO_Init+0x264>)
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	6313      	str	r3, [r2, #48]	@ 0x30
 8003572:	4b5e      	ldr	r3, [pc, #376]	@ (80036ec <MX_GPIO_Init+0x264>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800357e:	2200      	movs	r2, #0
 8003580:	2116      	movs	r1, #22
 8003582:	485b      	ldr	r0, [pc, #364]	@ (80036f0 <MX_GPIO_Init+0x268>)
 8003584:	f003 f8b2 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	@ 0x80
 800358c:	4859      	ldr	r0, [pc, #356]	@ (80036f4 <MX_GPIO_Init+0x26c>)
 800358e:	f003 f8ad 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003592:	2200      	movs	r2, #0
 8003594:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003598:	4857      	ldr	r0, [pc, #348]	@ (80036f8 <MX_GPIO_Init+0x270>)
 800359a:	f003 f8a7 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800359e:	2200      	movs	r2, #0
 80035a0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80035a4:	4855      	ldr	r0, [pc, #340]	@ (80036fc <MX_GPIO_Init+0x274>)
 80035a6:	f003 f8a1 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80035aa:	2316      	movs	r3, #22
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ae:	2301      	movs	r3, #1
 80035b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035be:	4619      	mov	r1, r3
 80035c0:	484b      	ldr	r0, [pc, #300]	@ (80036f0 <MX_GPIO_Init+0x268>)
 80035c2:	f002 fddb 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80035c6:	f248 0307 	movw	r3, #32775	@ 0x8007
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035cc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80035d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035da:	4619      	mov	r1, r3
 80035dc:	4845      	ldr	r0, [pc, #276]	@ (80036f4 <MX_GPIO_Init+0x26c>)
 80035de:	f002 fdcd 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	2301      	movs	r3, #1
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ee:	2300      	movs	r3, #0
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035f6:	4619      	mov	r1, r3
 80035f8:	483e      	ldr	r0, [pc, #248]	@ (80036f4 <MX_GPIO_Init+0x26c>)
 80035fa:	f002 fdbf 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80035fe:	2320      	movs	r3, #32
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003602:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800360c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003610:	4619      	mov	r1, r3
 8003612:	4837      	ldr	r0, [pc, #220]	@ (80036f0 <MX_GPIO_Init+0x268>)
 8003614:	f002 fdb2 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003618:	2304      	movs	r3, #4
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361c:	2300      	movs	r3, #0
 800361e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003628:	4619      	mov	r1, r3
 800362a:	4835      	ldr	r0, [pc, #212]	@ (8003700 <MX_GPIO_Init+0x278>)
 800362c:	f002 fda6 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003630:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	2300      	movs	r3, #0
 8003640:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003642:	230c      	movs	r3, #12
 8003644:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800364a:	4619      	mov	r1, r3
 800364c:	482c      	ldr	r0, [pc, #176]	@ (8003700 <MX_GPIO_Init+0x278>)
 800364e:	f002 fd95 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003664:	4619      	mov	r1, r3
 8003666:	4826      	ldr	r0, [pc, #152]	@ (8003700 <MX_GPIO_Init+0x278>)
 8003668:	f002 fd88 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800366c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003672:	2300      	movs	r3, #0
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800367a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800367e:	4619      	mov	r1, r3
 8003680:	481d      	ldr	r0, [pc, #116]	@ (80036f8 <MX_GPIO_Init+0x270>)
 8003682:	f002 fd7b 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003686:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368c:	2301      	movs	r3, #1
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800369c:	4619      	mov	r1, r3
 800369e:	4816      	ldr	r0, [pc, #88]	@ (80036f8 <MX_GPIO_Init+0x270>)
 80036a0:	f002 fd6c 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80036a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036b6:	2307      	movs	r3, #7
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036be:	4619      	mov	r1, r3
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <MX_GPIO_Init+0x26c>)
 80036c2:	f002 fd5b 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80036c6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036cc:	2301      	movs	r3, #1
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d4:	2300      	movs	r3, #0
 80036d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036dc:	4619      	mov	r1, r3
 80036de:	4807      	ldr	r0, [pc, #28]	@ (80036fc <MX_GPIO_Init+0x274>)
 80036e0:	f002 fd4c 	bl	800617c <HAL_GPIO_Init>

}
 80036e4:	bf00      	nop
 80036e6:	3738      	adds	r7, #56	@ 0x38
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020800 	.word	0x40020800
 80036f4:	40020000 	.word	0x40020000
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40021800 	.word	0x40021800
 8003700:	40020400 	.word	0x40020400

08003704 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003708:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <MX_I2C3_Init+0x74>)
 800370a:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <MX_I2C3_Init+0x78>)
 800370c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800370e:	4b1a      	ldr	r3, [pc, #104]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003710:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <MX_I2C3_Init+0x7c>)
 8003712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003714:	4b18      	ldr	r3, [pc, #96]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800371a:	4b17      	ldr	r3, [pc, #92]	@ (8003778 <MX_I2C3_Init+0x74>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003720:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003726:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003728:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <MX_I2C3_Init+0x74>)
 800372a:	2200      	movs	r2, #0
 800372c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003730:	2200      	movs	r2, #0
 8003732:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003734:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800373a:	4b0f      	ldr	r3, [pc, #60]	@ (8003778 <MX_I2C3_Init+0x74>)
 800373c:	2200      	movs	r2, #0
 800373e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003740:	480d      	ldr	r0, [pc, #52]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003742:	f002 ffed 	bl	8006720 <HAL_I2C_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800374c:	f000 fbfa 	bl	8003f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003750:	2100      	movs	r1, #0
 8003752:	4809      	ldr	r0, [pc, #36]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003754:	f004 f846 	bl	80077e4 <HAL_I2CEx_ConfigAnalogFilter>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800375e:	f000 fbf1 	bl	8003f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003762:	2100      	movs	r1, #0
 8003764:	4804      	ldr	r0, [pc, #16]	@ (8003778 <MX_I2C3_Init+0x74>)
 8003766:	f004 f879 	bl	800785c <HAL_I2CEx_ConfigDigitalFilter>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003770:	f000 fbe8 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000065c 	.word	0x2000065c
 800377c:	40005c00 	.word	0x40005c00
 8003780:	000186a0 	.word	0x000186a0

08003784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	@ 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a29      	ldr	r2, [pc, #164]	@ (8003848 <HAL_I2C_MspInit+0xc4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d14b      	bne.n	800383e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	4a27      	ldr	r2, [pc, #156]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b6:	4b25      	ldr	r3, [pc, #148]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b21      	ldr	r3, [pc, #132]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	4a20      	ldr	r2, [pc, #128]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80037de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e4:	2312      	movs	r3, #18
 80037e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e8:	2301      	movs	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ec:	2300      	movs	r3, #0
 80037ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037f0:	2304      	movs	r3, #4
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	4619      	mov	r1, r3
 80037fa:	4815      	ldr	r0, [pc, #84]	@ (8003850 <HAL_I2C_MspInit+0xcc>)
 80037fc:	f002 fcbe 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003806:	2312      	movs	r3, #18
 8003808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800380a:	2301      	movs	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003812:	2304      	movs	r3, #4
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	4619      	mov	r1, r3
 800381c:	480d      	ldr	r0, [pc, #52]	@ (8003854 <HAL_I2C_MspInit+0xd0>)
 800381e:	f002 fcad 	bl	800617c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	4a08      	ldr	r2, [pc, #32]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 800382c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003830:	6413      	str	r3, [r2, #64]	@ 0x40
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_I2C_MspInit+0xc8>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800383e:	bf00      	nop
 8003840:	3728      	adds	r7, #40	@ 0x28
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40005c00 	.word	0x40005c00
 800384c:	40023800 	.word	0x40023800
 8003850:	40020800 	.word	0x40020800
 8003854:	40020000 	.word	0x40020000

08003858 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0b      	ldr	r2, [pc, #44]	@ (8003894 <HAL_I2C_MspDeInit+0x3c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10f      	bne.n	800388a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800386a:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <HAL_I2C_MspDeInit+0x40>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <HAL_I2C_MspDeInit+0x40>)
 8003870:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003874:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8003876:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800387a:	4808      	ldr	r0, [pc, #32]	@ (800389c <HAL_I2C_MspDeInit+0x44>)
 800387c:	f002 fe2a 	bl	80064d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003884:	4806      	ldr	r0, [pc, #24]	@ (80038a0 <HAL_I2C_MspDeInit+0x48>)
 8003886:	f002 fe25 	bl	80064d4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40005c00 	.word	0x40005c00
 8003898:	40023800 	.word	0x40023800
 800389c:	40020800 	.word	0x40020800
 80038a0:	40020000 	.word	0x40020000

080038a4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	@ 0x38
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	2234      	movs	r2, #52	@ 0x34
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f007 fe8c 	bl	800b5ce <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80038b6:	4b39      	ldr	r3, [pc, #228]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038b8:	4a39      	ldr	r2, [pc, #228]	@ (80039a0 <MX_LTDC_Init+0xfc>)
 80038ba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80038bc:	4b37      	ldr	r3, [pc, #220]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038be:	2200      	movs	r2, #0
 80038c0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80038c2:	4b36      	ldr	r3, [pc, #216]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80038c8:	4b34      	ldr	r3, [pc, #208]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80038ce:	4b33      	ldr	r3, [pc, #204]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80038d4:	4b31      	ldr	r3, [pc, #196]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038d6:	2209      	movs	r2, #9
 80038d8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80038da:	4b30      	ldr	r3, [pc, #192]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038dc:	2201      	movs	r2, #1
 80038de:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80038e0:	4b2e      	ldr	r3, [pc, #184]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038e2:	221d      	movs	r2, #29
 80038e4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80038e6:	4b2d      	ldr	r3, [pc, #180]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038e8:	2203      	movs	r2, #3
 80038ea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80038ec:	4b2b      	ldr	r3, [pc, #172]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038ee:	f240 120d 	movw	r2, #269	@ 0x10d
 80038f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80038f4:	4b29      	ldr	r3, [pc, #164]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038f6:	f240 1243 	movw	r2, #323	@ 0x143
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80038fc:	4b27      	ldr	r3, [pc, #156]	@ (800399c <MX_LTDC_Init+0xf8>)
 80038fe:	f240 1217 	movw	r2, #279	@ 0x117
 8003902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8003904:	4b25      	ldr	r3, [pc, #148]	@ (800399c <MX_LTDC_Init+0xf8>)
 8003906:	f240 1247 	movw	r2, #327	@ 0x147
 800390a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800390c:	4b23      	ldr	r3, [pc, #140]	@ (800399c <MX_LTDC_Init+0xf8>)
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003914:	4b21      	ldr	r3, [pc, #132]	@ (800399c <MX_LTDC_Init+0xf8>)
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800391c:	4b1f      	ldr	r3, [pc, #124]	@ (800399c <MX_LTDC_Init+0xf8>)
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003924:	481d      	ldr	r0, [pc, #116]	@ (800399c <MX_LTDC_Init+0xf8>)
 8003926:	f003 ffd9 	bl	80078dc <HAL_LTDC_Init>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003930:	f000 fb08 	bl	8003f44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8003938:	23f0      	movs	r3, #240	@ 0xf0
 800393a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8003940:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003944:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003946:	2302      	movs	r3, #2
 8003948:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800394a:	23ff      	movs	r3, #255	@ 0xff
 800394c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003952:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003956:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003958:	2307      	movs	r3, #7
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800395c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8003962:	23f0      	movs	r3, #240	@ 0xf0
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8003966:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800396a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	2200      	movs	r2, #0
 8003982:	4619      	mov	r1, r3
 8003984:	4805      	ldr	r0, [pc, #20]	@ (800399c <MX_LTDC_Init+0xf8>)
 8003986:	f004 f93b 	bl	8007c00 <HAL_LTDC_ConfigLayer>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8003990:	f000 fad8 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003994:	bf00      	nop
 8003996:	3738      	adds	r7, #56	@ 0x38
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200006b0 	.word	0x200006b0
 80039a0:	40016800 	.word	0x40016800

080039a4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b09a      	sub	sp, #104	@ 0x68
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039c0:	2230      	movs	r2, #48	@ 0x30
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f007 fe02 	bl	800b5ce <memset>
  if(ltdcHandle->Instance==LTDC)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a85      	ldr	r2, [pc, #532]	@ (8003be4 <HAL_LTDC_MspInit+0x240>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f040 8103 	bne.w	8003bdc <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80039d6:	2308      	movs	r3, #8
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80039da:	233c      	movs	r3, #60	@ 0x3c
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80039de:	2305      	movs	r3, #5
 80039e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80039e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039ec:	4618      	mov	r0, r3
 80039ee:	f005 f80d 	bl	8008a0c <HAL_RCCEx_PeriphCLKConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80039f8:	f000 faa4 	bl	8003f44 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	4b79      	ldr	r3, [pc, #484]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	4a78      	ldr	r2, [pc, #480]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0c:	4b76      	ldr	r3, [pc, #472]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	4b72      	ldr	r3, [pc, #456]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	4a71      	ldr	r2, [pc, #452]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a22:	f043 0320 	orr.w	r3, r3, #32
 8003a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a28:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	4b6b      	ldr	r3, [pc, #428]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a44:	4b68      	ldr	r3, [pc, #416]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	4a63      	ldr	r2, [pc, #396]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a60:	4b61      	ldr	r3, [pc, #388]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	4b5d      	ldr	r3, [pc, #372]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	4a5c      	ldr	r2, [pc, #368]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	4b56      	ldr	r3, [pc, #344]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	4a55      	ldr	r2, [pc, #340]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a98:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	4a4e      	ldr	r2, [pc, #312]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003aae:	f043 0308 	orr.w	r3, r3, #8
 8003ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8003be8 <HAL_LTDC_MspInit+0x244>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ac4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ad2:	230e      	movs	r3, #14
 8003ad4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003ad6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ada:	4619      	mov	r1, r3
 8003adc:	4843      	ldr	r0, [pc, #268]	@ (8003bec <HAL_LTDC_MspInit+0x248>)
 8003ade:	f002 fb4d 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003ae2:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003ae6:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003af4:	230e      	movs	r3, #14
 8003af6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003afc:	4619      	mov	r1, r3
 8003afe:	483c      	ldr	r0, [pc, #240]	@ (8003bf0 <HAL_LTDC_MspInit+0x24c>)
 8003b00:	f002 fb3c 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003b04:	2303      	movs	r3, #3
 8003b06:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b14:	2309      	movs	r3, #9
 8003b16:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4835      	ldr	r0, [pc, #212]	@ (8003bf4 <HAL_LTDC_MspInit+0x250>)
 8003b20:	f002 fb2c 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003b24:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003b28:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b32:	2300      	movs	r3, #0
 8003b34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b36:	230e      	movs	r3, #14
 8003b38:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b3e:	4619      	mov	r1, r3
 8003b40:	482c      	ldr	r0, [pc, #176]	@ (8003bf4 <HAL_LTDC_MspInit+0x250>)
 8003b42:	f002 fb1b 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003b46:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003b4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b54:	2300      	movs	r3, #0
 8003b56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b58:	230e      	movs	r3, #14
 8003b5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b60:	4619      	mov	r1, r3
 8003b62:	4825      	ldr	r0, [pc, #148]	@ (8003bf8 <HAL_LTDC_MspInit+0x254>)
 8003b64:	f002 fb0a 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003b68:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003b6c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2300      	movs	r3, #0
 8003b78:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b7a:	230e      	movs	r3, #14
 8003b7c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b82:	4619      	mov	r1, r3
 8003b84:	481d      	ldr	r0, [pc, #116]	@ (8003bfc <HAL_LTDC_MspInit+0x258>)
 8003b86:	f002 faf9 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003b8a:	2348      	movs	r3, #72	@ 0x48
 8003b8c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b96:	2300      	movs	r3, #0
 8003b98:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b9a:	230e      	movs	r3, #14
 8003b9c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4816      	ldr	r0, [pc, #88]	@ (8003c00 <HAL_LTDC_MspInit+0x25c>)
 8003ba6:	f002 fae9 	bl	800617c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003baa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003bae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003bbc:	2309      	movs	r3, #9
 8003bbe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	480c      	ldr	r0, [pc, #48]	@ (8003bf8 <HAL_LTDC_MspInit+0x254>)
 8003bc8:	f002 fad8 	bl	800617c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2105      	movs	r1, #5
 8003bd0:	2058      	movs	r0, #88	@ 0x58
 8003bd2:	f001 f8d3 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003bd6:	2058      	movs	r0, #88	@ 0x58
 8003bd8:	f001 f8ec 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3768      	adds	r7, #104	@ 0x68
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40016800 	.word	0x40016800
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40021400 	.word	0x40021400
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40021800 	.word	0x40021800
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020c00 	.word	0x40020c00

08003c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c0a:	f000 fd27 	bl	800465c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c0e:	f000 f891 	bl	8003d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c12:	f7ff fc39 	bl	8003488 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c16:	f7ff fad1 	bl	80031bc <MX_DMA_Init>
  MX_CRC_Init();
 8003c1a:	f7ff f9ef 	bl	8002ffc <MX_CRC_Init>
  MX_DMA2D_Init();
 8003c1e:	f7ff faed 	bl	80031fc <MX_DMA2D_Init>
  MX_FMC_Init();
 8003c22:	f7ff fb45 	bl	80032b0 <MX_FMC_Init>
  MX_I2C3_Init();
 8003c26:	f7ff fd6d 	bl	8003704 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003c2a:	f7ff fe3b 	bl	80038a4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003c2e:	f000 f98f 	bl	8003f50 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003c32:	f000 fc11 	bl	8004458 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003c36:	f7ff f96b 	bl	8002f10 <MX_ADC1_Init>
  MX_DAC_Init();
 8003c3a:	f7ff fa15 	bl	8003068 <MX_DAC_Init>
  MX_TIM2_Init();
 8003c3e:	f000 fc5b 	bl	80044f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_DAC_Init(&hdac);
  //HAL_DMA_Init(&hdma_dac2);
	BSP_SDRAM_Init();
 8003c42:	f7fe ff61 	bl	8002b08 <BSP_SDRAM_Init>
	BSP_LCD_Init();
 8003c46:	f7fe f975 	bl	8001f34 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8003c4a:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7fe f9f2 	bl	8002038 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8003c54:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f7fe f9ed 	bl	8002038 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f7fe fa4e 	bl	8002100 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8003c64:	f7fe fcf8 	bl	8002658 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8003c68:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003c6c:	f7fe faa4 	bl	80021b8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003c70:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003c74:	f7fe fa6c 	bl	8002150 <BSP_LCD_SetBackColor>
	BSP_TS_Init(240,320);
 8003c78:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003c7c:	20f0      	movs	r0, #240	@ 0xf0
 8003c7e:	f7ff f90d 	bl	8002e9c <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	BSP_LCD_SetFont(&Font16);
 8003c82:	4823      	ldr	r0, [pc, #140]	@ (8003d10 <main+0x10c>)
 8003c84:	f7fe fa7e 	bl	8002184 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	f7fe fa48 	bl	8002120 <BSP_LCD_SetTextColor>
	sprintf(texto,"%d KHz",FRECUENCIA);
 8003c90:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003c94:	491f      	ldr	r1, [pc, #124]	@ (8003d14 <main+0x110>)
 8003c96:	4820      	ldr	r0, [pc, #128]	@ (8003d18 <main+0x114>)
 8003c98:	f007 fc36 	bl	800b508 <siprintf>
	BSP_LCD_DisplayStringAt(0, 224, texto, CENTER_MODE, 0);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d18 <main+0x114>)
 8003ca4:	21e0      	movs	r1, #224	@ 0xe0
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7fe faf8 	bl	800229c <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(14,(uint8_t*)"24KHz", 0);
	BSP_LCD_DisplayStringAt(0, 0, "Output Signal", CENTER_MODE, 0);
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d1c <main+0x118>)
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f7fe faf0 	bl	800229c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 0, "Voltage", CENTER_MODE, 1);
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <main+0x11c>)
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f7fe fae8 	bl	800229c <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(9,(uint8_t*)" 0123456789");
	BSP_LCD_DrawHLine(0, 11, 240);
 8003ccc:	22f0      	movs	r2, #240	@ 0xf0
 8003cce:	210b      	movs	r1, #11
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fe fc41 	bl	8002558 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(11, 0, 320);
 8003cd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003cda:	2100      	movs	r1, #0
 8003cdc:	200b      	movs	r0, #11
 8003cde:	f7fe fc79 	bl	80025d4 <BSP_LCD_DrawVLine>
	contador=0;
 8003ce2:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <main+0x120>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	801a      	strh	r2, [r3, #0]
	//HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_2,DAC_TRIANGLEAMPLITUDE_4095);
	Generate_Sine_Wave(dac_data, BUFFER_SIZE, ADC_RES/2); // 2048 para señal de 12 bits (amplitud)
 8003ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cec:	21d0      	movs	r1, #208	@ 0xd0
 8003cee:	480e      	ldr	r0, [pc, #56]	@ (8003d28 <main+0x124>)
 8003cf0:	f000 f892 	bl	8003e18 <Generate_Sine_Wave>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, dac_data, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	23d0      	movs	r3, #208	@ 0xd0
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8003d28 <main+0x124>)
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	480b      	ldr	r0, [pc, #44]	@ (8003d2c <main+0x128>)
 8003d00:	f001 f8a4 	bl	8004e4c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8003d04:	480a      	ldr	r0, [pc, #40]	@ (8003d30 <main+0x12c>)
 8003d06:	f005 ff29 	bl	8009b5c <HAL_TIM_Base_Start>
    /*if(HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_2,DAC_TRIANGLEAMPLITUDE_4095)){
		BSP_LCD_DisplayStringAtLine(6,"ERROR DAC");
	}*/


  while (1)
 8003d0a:	bf00      	nop
 8003d0c:	e7fd      	b.n	8003d0a <main+0x106>
 8003d0e:	bf00      	nop
 8003d10:	20000070 	.word	0x20000070
 8003d14:	0800f808 	.word	0x0800f808
 8003d18:	2000075c 	.word	0x2000075c
 8003d1c:	0800f810 	.word	0x0800f810
 8003d20:	0800f820 	.word	0x0800f820
 8003d24:	20000758 	.word	0x20000758
 8003d28:	20000784 	.word	0x20000784
 8003d2c:	20000570 	.word	0x20000570
 8003d30:	20000bb0 	.word	0x20000bb0

08003d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b094      	sub	sp, #80	@ 0x50
 8003d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d3a:	f107 0320 	add.w	r3, r7, #32
 8003d3e:	2230      	movs	r2, #48	@ 0x30
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f007 fc43 	bl	800b5ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d48:	f107 030c 	add.w	r3, r7, #12
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e0c <SystemClock_Config+0xd8>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	4a2a      	ldr	r2, [pc, #168]	@ (8003e0c <SystemClock_Config+0xd8>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d68:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <SystemClock_Config+0xd8>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d74:	2300      	movs	r3, #0
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <SystemClock_Config+0xdc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a24      	ldr	r2, [pc, #144]	@ (8003e10 <SystemClock_Config+0xdc>)
 8003d7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b22      	ldr	r3, [pc, #136]	@ (8003e10 <SystemClock_Config+0xdc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003da4:	2304      	movs	r3, #4
 8003da6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003da8:	23b4      	movs	r3, #180	@ 0xb4
 8003daa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dac:	2302      	movs	r3, #2
 8003dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003db0:	2303      	movs	r3, #3
 8003db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db4:	f107 0320 	add.w	r3, r7, #32
 8003db8:	4618      	mov	r0, r3
 8003dba:	f004 f971 	bl	80080a0 <HAL_RCC_OscConfig>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003dc4:	f000 f8be 	bl	8003f44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003dc8:	f004 f91a 	bl	8008000 <HAL_PWREx_EnableOverDrive>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003dd2:	f000 f8b7 	bl	8003f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dd6:	230f      	movs	r3, #15
 8003dd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003de2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	2105      	movs	r1, #5
 8003df4:	4618      	mov	r0, r3
 8003df6:	f004 fbcb 	bl	8008590 <HAL_RCC_ClockConfig>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003e00:	f000 f8a0 	bl	8003f44 <Error_Handler>
  }
}
 8003e04:	bf00      	nop
 8003e06:	3750      	adds	r7, #80	@ 0x50
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
 8003e14:	00000000 	.word	0x00000000

08003e18 <Generate_Sine_Wave>:

/* USER CODE BEGIN 4 */

void Generate_Sine_Wave(uint32_t *buffer, uint32_t buff_size, uint32_t amplitude)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	ed2d 8b02 	vpush	{d8}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < buff_size; i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e039      	b.n	8003ea2 <Generate_Sine_Wave+0x8a>
        {
            float theta = 2.0f * M_PI * i / buff_size; // Cálculo del ángulo para la frecuencia correcta
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	f7fc fb78 	bl	8000524 <__aeabi_ui2d>
 8003e34:	a338      	add	r3, pc, #224	@ (adr r3, 8003f18 <Generate_Sine_Wave+0x100>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f7fc fbed 	bl	8000618 <__aeabi_dmul>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4614      	mov	r4, r2
 8003e44:	461d      	mov	r5, r3
 8003e46:	68b8      	ldr	r0, [r7, #8]
 8003e48:	f7fc fb6c 	bl	8000524 <__aeabi_ui2d>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc fd0a 	bl	800086c <__aeabi_ddiv>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7fc fed2 	bl	8000c08 <__aeabi_d2f>
 8003e64:	4603      	mov	r3, r0
 8003e66:	613b      	str	r3, [r7, #16]
            buffer[i] = (uint32_t)(amplitude * (1 + sinf(theta))); // Normalización para valores positivos
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003e72:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e76:	f00a ff81 	bl	800ed7c <sinf>
 8003e7a:	eef0 7a40 	vmov.f32	s15, s0
 8003e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e86:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e96:	ee17 2a90 	vmov	r2, s15
 8003e9a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buff_size; i++)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d3c1      	bcc.n	8003e2e <Generate_Sine_Wave+0x16>

            // Dibujar el punto en la pantalla, con ajustes en la posición
            //BSP_LCD_DrawPixel(12 + buffer[i] / 20, i + 12, LCD_COLOR_RED);
        }

    for(i = 0; i < 3400;i+=1){
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e021      	b.n	8003ef4 <Generate_Sine_Wave+0xdc>
    	// Dibujar el punto en la pantalla, con ajustes en la posición
    	BSP_LCD_DrawPixel(12 + buffer[i%buff_size]/20, i/10 + 12, LCD_COLOR_RED);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	fb01 f202 	mul.w	r2, r1, r2
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a11      	ldr	r2, [pc, #68]	@ (8003f10 <Generate_Sine_Wave+0xf8>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	b298      	uxth	r0, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <Generate_Sine_Wave+0xf8>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	08db      	lsrs	r3, r3, #3
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8003f14 <Generate_Sine_Wave+0xfc>)
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f7fe fc9b 	bl	8002824 <BSP_LCD_DrawPixel>
    for(i = 0; i < 3400;i+=1){
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f640 5247 	movw	r2, #3399	@ 0xd47
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d9d8      	bls.n	8003eb0 <Generate_Sine_Wave+0x98>

    }

}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	ecbd 8b02 	vpop	{d8}
 8003f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0c:	f3af 8000 	nop.w
 8003f10:	cccccccd 	.word	0xcccccccd
 8003f14:	ffff0000 	.word	0xffff0000
 8003f18:	3fa6defc 	.word	0x3fa6defc
 8003f1c:	401921fb 	.word	0x401921fb

08003f20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a04      	ldr	r2, [pc, #16]	@ (8003f40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f32:	f000 fbb5 	bl	80046a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40001000 	.word	0x40001000

08003f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f48:	b672      	cpsid	i
}
 8003f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <Error_Handler+0x8>

08003f50 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003f54:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f56:	4a18      	ldr	r2, [pc, #96]	@ (8003fb8 <MX_SPI5_Init+0x68>)
 8003f58:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003f5a:	4b16      	ldr	r3, [pc, #88]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f60:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003f62:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f68:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f80:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f82:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f84:	2218      	movs	r2, #24
 8003f86:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f88:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f8e:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f94:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003f9c:	220a      	movs	r2, #10
 8003f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003fa0:	4804      	ldr	r0, [pc, #16]	@ (8003fb4 <MX_SPI5_Init+0x64>)
 8003fa2:	f004 ff84 	bl	8008eae <HAL_SPI_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003fac:	f7ff ffca 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000ac4 	.word	0x20000ac4
 8003fb8:	40015000 	.word	0x40015000

08003fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a19      	ldr	r2, [pc, #100]	@ (8004040 <HAL_SPI_MspInit+0x84>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d12c      	bne.n	8004038 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	4b18      	ldr	r3, [pc, #96]	@ (8004044 <HAL_SPI_MspInit+0x88>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	4a17      	ldr	r2, [pc, #92]	@ (8004044 <HAL_SPI_MspInit+0x88>)
 8003fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fee:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <HAL_SPI_MspInit+0x88>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b11      	ldr	r3, [pc, #68]	@ (8004044 <HAL_SPI_MspInit+0x88>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	4a10      	ldr	r2, [pc, #64]	@ (8004044 <HAL_SPI_MspInit+0x88>)
 8004004:	f043 0320 	orr.w	r3, r3, #32
 8004008:	6313      	str	r3, [r2, #48]	@ 0x30
 800400a:	4b0e      	ldr	r3, [pc, #56]	@ (8004044 <HAL_SPI_MspInit+0x88>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004016:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800401a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004024:	2300      	movs	r3, #0
 8004026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004028:	2305      	movs	r3, #5
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	4619      	mov	r1, r3
 8004032:	4805      	ldr	r0, [pc, #20]	@ (8004048 <HAL_SPI_MspInit+0x8c>)
 8004034:	f002 f8a2 	bl	800617c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004038:	bf00      	nop
 800403a:	3728      	adds	r7, #40	@ 0x28
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40015000 	.word	0x40015000
 8004044:	40023800 	.word	0x40023800
 8004048:	40021400 	.word	0x40021400

0800404c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a08      	ldr	r2, [pc, #32]	@ (800407c <HAL_SPI_MspDeInit+0x30>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10a      	bne.n	8004074 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800405e:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <HAL_SPI_MspDeInit+0x34>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	4a07      	ldr	r2, [pc, #28]	@ (8004080 <HAL_SPI_MspDeInit+0x34>)
 8004064:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004068:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800406a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800406e:	4805      	ldr	r0, [pc, #20]	@ (8004084 <HAL_SPI_MspDeInit+0x38>)
 8004070:	f002 fa30 	bl	80064d4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40015000 	.word	0x40015000
 8004080:	40023800 	.word	0x40023800
 8004084:	40021400 	.word	0x40021400

08004088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <HAL_MspInit+0x4c>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <HAL_MspInit+0x4c>)
 8004098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800409c:	6453      	str	r3, [r2, #68]	@ 0x44
 800409e:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <HAL_MspInit+0x4c>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_MspInit+0x4c>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <HAL_MspInit+0x4c>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_MspInit+0x4c>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800

080040d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08e      	sub	sp, #56	@ 0x38
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <HAL_InitTick+0xe4>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	4a32      	ldr	r2, [pc, #200]	@ (80041bc <HAL_InitTick+0xe4>)
 80040f2:	f043 0310 	orr.w	r3, r3, #16
 80040f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f8:	4b30      	ldr	r3, [pc, #192]	@ (80041bc <HAL_InitTick+0xe4>)
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004104:	f107 0210 	add.w	r2, r7, #16
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f004 fc4a 	bl	80089a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800411e:	f004 fc2f 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 8004122:	6378      	str	r0, [r7, #52]	@ 0x34
 8004124:	e004      	b.n	8004130 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004126:	f004 fc2b 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 800412a:	4603      	mov	r3, r0
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004132:	4a23      	ldr	r2, [pc, #140]	@ (80041c0 <HAL_InitTick+0xe8>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	0c9b      	lsrs	r3, r3, #18
 800413a:	3b01      	subs	r3, #1
 800413c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800413e:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <HAL_InitTick+0xec>)
 8004140:	4a21      	ldr	r2, [pc, #132]	@ (80041c8 <HAL_InitTick+0xf0>)
 8004142:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004144:	4b1f      	ldr	r3, [pc, #124]	@ (80041c4 <HAL_InitTick+0xec>)
 8004146:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800414a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800414c:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <HAL_InitTick+0xec>)
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004152:	4b1c      	ldr	r3, [pc, #112]	@ (80041c4 <HAL_InitTick+0xec>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004158:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <HAL_InitTick+0xec>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800415e:	4b19      	ldr	r3, [pc, #100]	@ (80041c4 <HAL_InitTick+0xec>)
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004164:	4817      	ldr	r0, [pc, #92]	@ (80041c4 <HAL_InitTick+0xec>)
 8004166:	f005 fca9 	bl	8009abc <HAL_TIM_Base_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004170:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11b      	bne.n	80041b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004178:	4812      	ldr	r0, [pc, #72]	@ (80041c4 <HAL_InitTick+0xec>)
 800417a:	f005 fd57 	bl	8009c2c <HAL_TIM_Base_Start_IT>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004184:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004188:	2b00      	cmp	r3, #0
 800418a:	d111      	bne.n	80041b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800418c:	2036      	movs	r0, #54	@ 0x36
 800418e:	f000 fe11 	bl	8004db4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d808      	bhi.n	80041aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004198:	2200      	movs	r2, #0
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	2036      	movs	r0, #54	@ 0x36
 800419e:	f000 fded 	bl	8004d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041a2:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <HAL_InitTick+0xf4>)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e002      	b.n	80041b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80041b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3738      	adds	r7, #56	@ 0x38
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	431bde83 	.word	0x431bde83
 80041c4:	20000b1c 	.word	0x20000b1c
 80041c8:	40001000 	.word	0x40001000
 80041cc:	20000080 	.word	0x20000080

080041d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <NMI_Handler+0x4>

080041d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <HardFault_Handler+0x4>

080041e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <MemManage_Handler+0x4>

080041e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <BusFault_Handler+0x4>

080041f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <UsageFault_Handler+0x4>

080041f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8004234:	4802      	ldr	r0, [pc, #8]	@ (8004240 <DMA1_Stream6_IRQHandler+0x10>)
 8004236:	f001 f99b 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000584 	.word	0x20000584

08004244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004248:	4802      	ldr	r0, [pc, #8]	@ (8004254 <TIM2_IRQHandler+0x10>)
 800424a:	f005 fd5f 	bl	8009d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000bb0 	.word	0x20000bb0

08004258 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <TIM6_DAC_IRQHandler+0x20>)
 800425e:	791b      	ldrb	r3, [r3, #4]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004266:	4804      	ldr	r0, [pc, #16]	@ (8004278 <TIM6_DAC_IRQHandler+0x20>)
 8004268:	f000 feb2 	bl	8004fd0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800426c:	4803      	ldr	r0, [pc, #12]	@ (800427c <TIM6_DAC_IRQHandler+0x24>)
 800426e:	f005 fd4d 	bl	8009d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000570 	.word	0x20000570
 800427c:	20000b1c 	.word	0x20000b1c

08004280 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004284:	4802      	ldr	r0, [pc, #8]	@ (8004290 <LTDC_IRQHandler+0x10>)
 8004286:	f003 fbf9 	bl	8007a7c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200006b0 	.word	0x200006b0

08004294 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004298:	4802      	ldr	r0, [pc, #8]	@ (80042a4 <DMA2D_IRQHandler+0x10>)
 800429a:	f001 fd30 	bl	8005cfe <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200005e4 	.word	0x200005e4

080042a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return 1;
 80042ac:	2301      	movs	r3, #1
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_kill>:

int _kill(int pid, int sig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042c2:	f007 f9d7 	bl	800b674 <__errno>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2216      	movs	r2, #22
 80042ca:	601a      	str	r2, [r3, #0]
  return -1;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_exit>:

void _exit (int status)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ffe7 	bl	80042b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042ea:	bf00      	nop
 80042ec:	e7fd      	b.n	80042ea <_exit+0x12>

080042ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e00a      	b.n	8004316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004300:	f3af 8000 	nop.w
 8004304:	4601      	mov	r1, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	60ba      	str	r2, [r7, #8]
 800430c:	b2ca      	uxtb	r2, r1
 800430e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3301      	adds	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	dbf0      	blt.n	8004300 <_read+0x12>
  }

  return len;
 800431e:	687b      	ldr	r3, [r7, #4]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e009      	b.n	800434e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	60ba      	str	r2, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3301      	adds	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	dbf1      	blt.n	800433a <_write+0x12>
  }
  return len;
 8004356:	687b      	ldr	r3, [r7, #4]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <_close>:

int _close(int file)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004388:	605a      	str	r2, [r3, #4]
  return 0;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <_isatty>:

int _isatty(int file)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043a0:	2301      	movs	r3, #1
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <_sbrk+0x5c>)
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <_sbrk+0x60>)
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043dc:	4b13      	ldr	r3, [pc, #76]	@ (800442c <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <_sbrk+0x64>)
 80043e6:	4a12      	ldr	r2, [pc, #72]	@ (8004430 <_sbrk+0x68>)
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <_sbrk+0x64>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043f8:	f007 f93c 	bl	800b674 <__errno>
 80043fc:	4603      	mov	r3, r0
 80043fe:	220c      	movs	r2, #12
 8004400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	e009      	b.n	800441c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <_sbrk+0x64>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <_sbrk+0x64>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	4a05      	ldr	r2, [pc, #20]	@ (800442c <_sbrk+0x64>)
 8004418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20030000 	.word	0x20030000
 8004428:	00000400 	.word	0x00000400
 800442c:	20000b64 	.word	0x20000b64
 8004430:	20000d48 	.word	0x20000d48

08004434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004438:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <SystemInit+0x20>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443e:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <SystemInit+0x20>)
 8004440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800445e:	f107 0308 	add.w	r3, r7, #8
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800446c:	463b      	mov	r3, r7
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004474:	4b1e      	ldr	r3, [pc, #120]	@ (80044f0 <MX_TIM1_Init+0x98>)
 8004476:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <MX_TIM1_Init+0x9c>)
 8004478:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800447a:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <MX_TIM1_Init+0x98>)
 800447c:	2200      	movs	r2, #0
 800447e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004480:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <MX_TIM1_Init+0x98>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004486:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <MX_TIM1_Init+0x98>)
 8004488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800448c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800448e:	4b18      	ldr	r3, [pc, #96]	@ (80044f0 <MX_TIM1_Init+0x98>)
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004494:	4b16      	ldr	r3, [pc, #88]	@ (80044f0 <MX_TIM1_Init+0x98>)
 8004496:	2200      	movs	r2, #0
 8004498:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <MX_TIM1_Init+0x98>)
 800449c:	2200      	movs	r2, #0
 800449e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044a0:	4813      	ldr	r0, [pc, #76]	@ (80044f0 <MX_TIM1_Init+0x98>)
 80044a2:	f005 fb0b 	bl	8009abc <HAL_TIM_Base_Init>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80044ac:	f7ff fd4a 	bl	8003f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4619      	mov	r1, r3
 80044bc:	480c      	ldr	r0, [pc, #48]	@ (80044f0 <MX_TIM1_Init+0x98>)
 80044be:	f005 fd15 	bl	8009eec <HAL_TIM_ConfigClockSource>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80044c8:	f7ff fd3c 	bl	8003f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044cc:	2300      	movs	r3, #0
 80044ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044d4:	463b      	mov	r3, r7
 80044d6:	4619      	mov	r1, r3
 80044d8:	4805      	ldr	r0, [pc, #20]	@ (80044f0 <MX_TIM1_Init+0x98>)
 80044da:	f005 ff3d 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80044e4:	f7ff fd2e 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000b68 	.word	0x20000b68
 80044f4:	40010000 	.word	0x40010000

080044f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450c:	463b      	mov	r3, r7
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004514:	4b1d      	ldr	r3, [pc, #116]	@ (800458c <MX_TIM2_Init+0x94>)
 8004516:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800451a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 800451c:	4b1b      	ldr	r3, [pc, #108]	@ (800458c <MX_TIM2_Init+0x94>)
 800451e:	2205      	movs	r2, #5
 8004520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004522:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <MX_TIM2_Init+0x94>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8004528:	4b18      	ldr	r3, [pc, #96]	@ (800458c <MX_TIM2_Init+0x94>)
 800452a:	2201      	movs	r2, #1
 800452c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800452e:	4b17      	ldr	r3, [pc, #92]	@ (800458c <MX_TIM2_Init+0x94>)
 8004530:	2200      	movs	r2, #0
 8004532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004534:	4b15      	ldr	r3, [pc, #84]	@ (800458c <MX_TIM2_Init+0x94>)
 8004536:	2280      	movs	r2, #128	@ 0x80
 8004538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800453a:	4814      	ldr	r0, [pc, #80]	@ (800458c <MX_TIM2_Init+0x94>)
 800453c:	f005 fabe 	bl	8009abc <HAL_TIM_Base_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004546:	f7ff fcfd 	bl	8003f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800454a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800454e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004550:	f107 0308 	add.w	r3, r7, #8
 8004554:	4619      	mov	r1, r3
 8004556:	480d      	ldr	r0, [pc, #52]	@ (800458c <MX_TIM2_Init+0x94>)
 8004558:	f005 fcc8 	bl	8009eec <HAL_TIM_ConfigClockSource>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004562:	f7ff fcef 	bl	8003f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004566:	2320      	movs	r3, #32
 8004568:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800456e:	463b      	mov	r3, r7
 8004570:	4619      	mov	r1, r3
 8004572:	4806      	ldr	r0, [pc, #24]	@ (800458c <MX_TIM2_Init+0x94>)
 8004574:	f005 fef0 	bl	800a358 <HAL_TIMEx_MasterConfigSynchronization>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800457e:	f7ff fce1 	bl	8003f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004582:	bf00      	nop
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000bb0 	.word	0x20000bb0

08004590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <HAL_TIM_Base_MspInit+0x70>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10e      	bne.n	80045c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	4b17      	ldr	r3, [pc, #92]	@ (8004604 <HAL_TIM_Base_MspInit+0x74>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <HAL_TIM_Base_MspInit+0x74>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80045b2:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <HAL_TIM_Base_MspInit+0x74>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80045be:	e01a      	b.n	80045f6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c8:	d115      	bne.n	80045f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <HAL_TIM_Base_MspInit+0x74>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004604 <HAL_TIM_Base_MspInit+0x74>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045da:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <HAL_TIM_Base_MspInit+0x74>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045e6:	2200      	movs	r2, #0
 80045e8:	2100      	movs	r1, #0
 80045ea:	201c      	movs	r0, #28
 80045ec:	f000 fbc6 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045f0:	201c      	movs	r0, #28
 80045f2:	f000 fbdf 	bl	8004db4 <HAL_NVIC_EnableIRQ>
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40010000 	.word	0x40010000
 8004604:	40023800 	.word	0x40023800

08004608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800460c:	f7ff ff12 	bl	8004434 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004610:	480c      	ldr	r0, [pc, #48]	@ (8004644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004612:	490d      	ldr	r1, [pc, #52]	@ (8004648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004614:	4a0d      	ldr	r2, [pc, #52]	@ (800464c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004618:	e002      	b.n	8004620 <LoopCopyDataInit>

0800461a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800461a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800461c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800461e:	3304      	adds	r3, #4

08004620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004624:	d3f9      	bcc.n	800461a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004628:	4c0a      	ldr	r4, [pc, #40]	@ (8004654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800462a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800462c:	e001      	b.n	8004632 <LoopFillZerobss>

0800462e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800462e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004630:	3204      	adds	r2, #4

08004632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004634:	d3fb      	bcc.n	800462e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004636:	f007 f823 	bl	800b680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800463a:	f7ff fae3 	bl	8003c04 <main>
  bx  lr    
 800463e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004640:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004648:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800464c:	080126f0 	.word	0x080126f0
  ldr r2, =_sbss
 8004650:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004654:	20000d48 	.word	0x20000d48

08004658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004658:	e7fe      	b.n	8004658 <ADC_IRQHandler>
	...

0800465c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004660:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <HAL_Init+0x40>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0d      	ldr	r2, [pc, #52]	@ (800469c <HAL_Init+0x40>)
 8004666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800466a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_Init+0x40>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0a      	ldr	r2, [pc, #40]	@ (800469c <HAL_Init+0x40>)
 8004672:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004678:	4b08      	ldr	r3, [pc, #32]	@ (800469c <HAL_Init+0x40>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a07      	ldr	r2, [pc, #28]	@ (800469c <HAL_Init+0x40>)
 800467e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004684:	2003      	movs	r0, #3
 8004686:	f000 fb6e 	bl	8004d66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800468a:	200f      	movs	r0, #15
 800468c:	f7ff fd24 	bl	80040d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004690:	f7ff fcfa 	bl	8004088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023c00 	.word	0x40023c00

080046a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <HAL_IncTick+0x20>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_IncTick+0x24>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4413      	add	r3, r2
 80046b0:	4a04      	ldr	r2, [pc, #16]	@ (80046c4 <HAL_IncTick+0x24>)
 80046b2:	6013      	str	r3, [r2, #0]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000084 	.word	0x20000084
 80046c4:	20000bf8 	.word	0x20000bf8

080046c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return uwTick;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_GetTick+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000bf8 	.word	0x20000bf8

080046e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e8:	f7ff ffee 	bl	80046c8 <HAL_GetTick>
 80046ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d005      	beq.n	8004706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_Delay+0x44>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004706:	bf00      	nop
 8004708:	f7ff ffde 	bl	80046c8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d8f7      	bhi.n	8004708 <HAL_Delay+0x28>
  {
  }
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000084 	.word	0x20000084

08004728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e033      	b.n	80047a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe fc36 	bl	8002fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d118      	bne.n	8004798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800476e:	f023 0302 	bic.w	r3, r3, #2
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f94a 	bl	8004a14 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	f023 0303 	bic.w	r3, r3, #3
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40
 8004796:	e001      	b.n	800479c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e113      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x244>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b09      	cmp	r3, #9
 80047da:	d925      	bls.n	8004828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	3b1e      	subs	r3, #30
 80047f2:	2207      	movs	r2, #7
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43da      	mvns	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	400a      	ands	r2, r1
 8004800:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68d9      	ldr	r1, [r3, #12]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	4618      	mov	r0, r3
 8004814:	4603      	mov	r3, r0
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4403      	add	r3, r0
 800481a:	3b1e      	subs	r3, #30
 800481c:	409a      	lsls	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	e022      	b.n	800486e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6919      	ldr	r1, [r3, #16]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	2207      	movs	r2, #7
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43da      	mvns	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	400a      	ands	r2, r1
 800484a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6919      	ldr	r1, [r3, #16]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	4618      	mov	r0, r3
 800485e:	4603      	mov	r3, r0
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4403      	add	r3, r0
 8004864:	409a      	lsls	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b06      	cmp	r3, #6
 8004874:	d824      	bhi.n	80048c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	3b05      	subs	r3, #5
 8004888:	221f      	movs	r2, #31
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43da      	mvns	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	400a      	ands	r2, r1
 8004896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4618      	mov	r0, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	3b05      	subs	r3, #5
 80048b2:	fa00 f203 	lsl.w	r2, r0, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80048be:	e04c      	b.n	800495a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d824      	bhi.n	8004912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	3b23      	subs	r3, #35	@ 0x23
 80048da:	221f      	movs	r2, #31
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43da      	mvns	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	400a      	ands	r2, r1
 80048e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	4618      	mov	r0, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	3b23      	subs	r3, #35	@ 0x23
 8004904:	fa00 f203 	lsl.w	r2, r0, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004910:	e023      	b.n	800495a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	3b41      	subs	r3, #65	@ 0x41
 8004924:	221f      	movs	r2, #31
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43da      	mvns	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	400a      	ands	r2, r1
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	4618      	mov	r0, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	3b41      	subs	r3, #65	@ 0x41
 800494e:	fa00 f203 	lsl.w	r2, r0, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800495a:	4b29      	ldr	r3, [pc, #164]	@ (8004a00 <HAL_ADC_ConfigChannel+0x250>)
 800495c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a28      	ldr	r2, [pc, #160]	@ (8004a04 <HAL_ADC_ConfigChannel+0x254>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10f      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1d8>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b12      	cmp	r3, #18
 800496e:	d10b      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a04 <HAL_ADC_ConfigChannel+0x254>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d12b      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x23a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1c      	ldr	r2, [pc, #112]	@ (8004a08 <HAL_ADC_ConfigChannel+0x258>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <HAL_ADC_ConfigChannel+0x1f4>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b11      	cmp	r3, #17
 80049a2:	d122      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a11      	ldr	r2, [pc, #68]	@ (8004a08 <HAL_ADC_ConfigChannel+0x258>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d111      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049c6:	4b11      	ldr	r3, [pc, #68]	@ (8004a0c <HAL_ADC_ConfigChannel+0x25c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a11      	ldr	r2, [pc, #68]	@ (8004a10 <HAL_ADC_ConfigChannel+0x260>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	0c9a      	lsrs	r2, r3, #18
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049dc:	e002      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f9      	bne.n	80049de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40012300 	.word	0x40012300
 8004a04:	40012000 	.word	0x40012000
 8004a08:	10000012 	.word	0x10000012
 8004a0c:	2000007c 	.word	0x2000007c
 8004a10:	431bde83 	.word	0x431bde83

08004a14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a1c:	4b79      	ldr	r3, [pc, #484]	@ (8004c04 <ADC_Init+0x1f0>)
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	021a      	lsls	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6899      	ldr	r1, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	4a58      	ldr	r2, [pc, #352]	@ (8004c08 <ADC_Init+0x1f4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6899      	ldr	r1, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6899      	ldr	r1, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	e00f      	b.n	8004b12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0202 	bic.w	r2, r2, #2
 8004b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	7e1b      	ldrb	r3, [r3, #24]
 8004b2c:	005a      	lsls	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01b      	beq.n	8004b78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	035a      	lsls	r2, r3, #13
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	e007      	b.n	8004b88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	051a      	lsls	r2, r3, #20
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6899      	ldr	r1, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bca:	025a      	lsls	r2, r3, #9
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	029a      	lsls	r2, r3, #10
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40012300 	.word	0x40012300
 8004c08:	0f000001 	.word	0x0f000001

08004c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <__NVIC_SetPriorityGrouping+0x44>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c3e:	4a04      	ldr	r2, [pc, #16]	@ (8004c50 <__NVIC_SetPriorityGrouping+0x44>)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	60d3      	str	r3, [r2, #12]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <__NVIC_GetPriorityGrouping+0x18>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	f003 0307 	and.w	r3, r3, #7
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db0b      	blt.n	8004c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	4907      	ldr	r1, [pc, #28]	@ (8004ca8 <__NVIC_EnableIRQ+0x38>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2001      	movs	r0, #1
 8004c92:	fa00 f202 	lsl.w	r2, r0, r2
 8004c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	e000e100 	.word	0xe000e100

08004cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db0a      	blt.n	8004cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	490c      	ldr	r1, [pc, #48]	@ (8004cf8 <__NVIC_SetPriority+0x4c>)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd4:	e00a      	b.n	8004cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <__NVIC_SetPriority+0x50>)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	440b      	add	r3, r1
 8004cea:	761a      	strb	r2, [r3, #24]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000e100 	.word	0xe000e100
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	bf28      	it	cs
 8004d1e:	2304      	movcs	r3, #4
 8004d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d902      	bls.n	8004d30 <NVIC_EncodePriority+0x30>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b03      	subs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <NVIC_EncodePriority+0x32>
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	401a      	ands	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	43d9      	mvns	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d58:	4313      	orrs	r3, r2
         );
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ff4c 	bl	8004c0c <__NVIC_SetPriorityGrouping>
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d8e:	f7ff ff61 	bl	8004c54 <__NVIC_GetPriorityGrouping>
 8004d92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	f7ff ffb1 	bl	8004d00 <NVIC_EncodePriority>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff ff80 	bl	8004cac <__NVIC_SetPriority>
}
 8004dac:	bf00      	nop
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff ff54 	bl	8004c70 <__NVIC_EnableIRQ>
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e00e      	b.n	8004e00 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	795b      	ldrb	r3, [r3, #5]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d105      	bne.n	8004df8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fe f916 	bl	8003024 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e014      	b.n	8004e44 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	791b      	ldrb	r3, [r3, #4]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fe f946 	bl	80030bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0a2      	b.n	8004fae <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	795b      	ldrb	r3, [r3, #5]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_DAC_Start_DMA+0x28>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e09c      	b.n	8004fae <HAL_DAC_Start_DMA+0x162>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d129      	bne.n	8004eda <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a4b      	ldr	r2, [pc, #300]	@ (8004fb8 <HAL_DAC_Start_DMA+0x16c>)
 8004e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4a4a      	ldr	r2, [pc, #296]	@ (8004fbc <HAL_DAC_Start_DMA+0x170>)
 8004e94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	4a49      	ldr	r2, [pc, #292]	@ (8004fc0 <HAL_DAC_Start_DMA+0x174>)
 8004e9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004eac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_DAC_Start_DMA+0x70>
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d005      	beq.n	8004ec6 <HAL_DAC_Start_DMA+0x7a>
 8004eba:	e009      	b.n	8004ed0 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	613b      	str	r3, [r7, #16]
        break;
 8004ec4:	e033      	b.n	8004f2e <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	613b      	str	r3, [r7, #16]
        break;
 8004ece:	e02e      	b.n	8004f2e <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3310      	adds	r3, #16
 8004ed6:	613b      	str	r3, [r7, #16]
        break;
 8004ed8:	e029      	b.n	8004f2e <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	4a39      	ldr	r2, [pc, #228]	@ (8004fc4 <HAL_DAC_Start_DMA+0x178>)
 8004ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a38      	ldr	r2, [pc, #224]	@ (8004fc8 <HAL_DAC_Start_DMA+0x17c>)
 8004ee8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	4a37      	ldr	r2, [pc, #220]	@ (8004fcc <HAL_DAC_Start_DMA+0x180>)
 8004ef0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_DAC_Start_DMA+0xc4>
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d005      	beq.n	8004f1a <HAL_DAC_Start_DMA+0xce>
 8004f0e:	e009      	b.n	8004f24 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	613b      	str	r3, [r7, #16]
        break;
 8004f18:	e009      	b.n	8004f2e <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	613b      	str	r3, [r7, #16]
        break;
 8004f22:	e004      	b.n	8004f2e <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	331c      	adds	r3, #28
 8004f2a:	613b      	str	r3, [r7, #16]
        break;
 8004f2c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d111      	bne.n	8004f58 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6898      	ldr	r0, [r3, #8]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	f000 fab7 	bl	80054c0 <HAL_DMA_Start_IT>
 8004f52:	4603      	mov	r3, r0
 8004f54:	75fb      	strb	r3, [r7, #23]
 8004f56:	e010      	b.n	8004f7a <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004f66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68d8      	ldr	r0, [r3, #12]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	f000 faa5 	bl	80054c0 <HAL_DMA_Start_IT>
 8004f76:	4603      	mov	r3, r0
 8004f78:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2201      	movs	r2, #1
 8004f94:	409a      	lsls	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e005      	b.n	8004fac <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f043 0204 	orr.w	r2, r3, #4
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	0800517f 	.word	0x0800517f
 8004fbc:	080051a1 	.word	0x080051a1
 8004fc0:	080051bd 	.word	0x080051bd
 8004fc4:	0800523b 	.word	0x0800523b
 8004fc8:	0800525d 	.word	0x0800525d
 8004fcc:	08005279 	.word	0x08005279

08004fd0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01d      	beq.n	800502e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d018      	beq.n	800502e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2204      	movs	r2, #4
 8005000:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005016:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005026:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f845 	bl	80050b8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01d      	beq.n	8005074 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f043 0202 	orr.w	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800505c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800506c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8d9 	bl	8005226 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	@ 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_DAC_ConfigChannel+0x1c>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e042      	b.n	8005172 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	795b      	ldrb	r3, [r3, #5]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_DAC_ConfigChannel+0x2c>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e03c      	b.n	8005172 <HAL_DAC_ConfigChannel+0xa6>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2202      	movs	r2, #2
 8005102:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800511a:	43db      	mvns	r3, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4013      	ands	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4313      	orrs	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6819      	ldr	r1, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	22c0      	movs	r2, #192	@ 0xc0
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43da      	mvns	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	400a      	ands	r2, r1
 8005162:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005170:	7ffb      	ldrb	r3, [r7, #31]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	@ 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff ff75 	bl	800507c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	711a      	strb	r2, [r3, #4]
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ff6e 	bl	8005090 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f043 0204 	orr.w	r2, r3, #4
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff ff64 	bl	80050a4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	711a      	strb	r2, [r3, #4]
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005246:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff ffce 	bl	80051ea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	711a      	strb	r2, [r3, #4]
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff ffc7 	bl	80051fe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff ffbd 	bl	8005212 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	711a      	strb	r2, [r3, #4]
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052b4:	f7ff fa08 	bl	80046c8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e099      	b.n	80053f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052e4:	e00f      	b.n	8005306 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052e6:	f7ff f9ef 	bl	80046c8 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b05      	cmp	r3, #5
 80052f2:	d908      	bls.n	8005306 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2203      	movs	r2, #3
 80052fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e078      	b.n	80053f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e8      	bne.n	80052e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4b38      	ldr	r3, [pc, #224]	@ (8005400 <HAL_DMA_Init+0x158>)
 8005320:	4013      	ands	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005332:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800534a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	2b04      	cmp	r3, #4
 800535e:	d107      	bne.n	8005370 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	4313      	orrs	r3, r2
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	2b04      	cmp	r3, #4
 8005398:	d117      	bne.n	80053ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00e      	beq.n	80053ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 facd 	bl	800594c <DMA_CheckFifoParam>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2240      	movs	r2, #64	@ 0x40
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80053c6:	2301      	movs	r3, #1
 80053c8:	e016      	b.n	80053f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa84 	bl	80058e0 <DMA_CalcBaseAndBitshift>
 80053d8:	4603      	mov	r3, r0
 80053da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e0:	223f      	movs	r2, #63	@ 0x3f
 80053e2:	409a      	lsls	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	f010803f 	.word	0xf010803f

08005404 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e050      	b.n	80054b8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d101      	bne.n	8005426 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
 8005424:	e048      	b.n	80054b8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2221      	movs	r2, #33	@ 0x21
 8005464:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fa3a 	bl	80058e0 <DMA_CalcBaseAndBitshift>
 800546c:	4603      	mov	r3, r0
 800546e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005498:	223f      	movs	r2, #63	@ 0x3f
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_DMA_Start_IT+0x26>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e040      	b.n	8005568 <HAL_DMA_Start_IT+0xa8>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d12f      	bne.n	800555a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f9b8 	bl	8005884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005518:	223f      	movs	r2, #63	@ 0x3f
 800551a:	409a      	lsls	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0216 	orr.w	r2, r2, #22
 800552e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e005      	b.n	8005566 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005562:	2302      	movs	r3, #2
 8005564:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800557c:	4b8e      	ldr	r3, [pc, #568]	@ (80057b8 <HAL_DMA_IRQHandler+0x248>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a8e      	ldr	r2, [pc, #568]	@ (80057bc <HAL_DMA_IRQHandler+0x24c>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0a9b      	lsrs	r3, r3, #10
 8005588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559a:	2208      	movs	r2, #8
 800559c:	409a      	lsls	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01a      	beq.n	80055dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d013      	beq.n	80055dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	2208      	movs	r2, #8
 80055ca:	409a      	lsls	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e0:	2201      	movs	r2, #1
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d012      	beq.n	8005612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fe:	2201      	movs	r2, #1
 8005600:	409a      	lsls	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005616:	2204      	movs	r2, #4
 8005618:	409a      	lsls	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d012      	beq.n	8005648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005634:	2204      	movs	r2, #4
 8005636:	409a      	lsls	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005640:	f043 0204 	orr.w	r2, r3, #4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564c:	2210      	movs	r2, #16
 800564e:	409a      	lsls	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d043      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d03c      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566a:	2210      	movs	r2, #16
 800566c:	409a      	lsls	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d108      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d024      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	e01f      	b.n	80056e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
 80056b0:	e016      	b.n	80056e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0208 	bic.w	r2, r2, #8
 80056ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e4:	2220      	movs	r2, #32
 80056e6:	409a      	lsls	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 808f 	beq.w	8005810 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8087 	beq.w	8005810 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005706:	2220      	movs	r2, #32
 8005708:	409a      	lsls	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b05      	cmp	r3, #5
 8005718:	d136      	bne.n	8005788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0216 	bic.w	r2, r2, #22
 8005728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_DMA_IRQHandler+0x1da>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0208 	bic.w	r2, r2, #8
 8005758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575e:	223f      	movs	r2, #63	@ 0x3f
 8005760:	409a      	lsls	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577a:	2b00      	cmp	r3, #0
 800577c:	d07e      	beq.n	800587c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
        }
        return;
 8005786:	e079      	b.n	800587c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10d      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d031      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
 80057b4:	e02c      	b.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
 80057b6:	bf00      	nop
 80057b8:	2000007c 	.word	0x2000007c
 80057bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d023      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
 80057d0:	e01e      	b.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10f      	bne.n	8005800 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0210 	bic.w	r2, r2, #16
 80057ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005814:	2b00      	cmp	r3, #0
 8005816:	d032      	beq.n	800587e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d022      	beq.n	800586a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2205      	movs	r2, #5
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	3301      	adds	r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d307      	bcc.n	8005858 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f2      	bne.n	800583c <HAL_DMA_IRQHandler+0x2cc>
 8005856:	e000      	b.n	800585a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005858:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	e000      	b.n	800587e <HAL_DMA_IRQHandler+0x30e>
        return;
 800587c:	bf00      	nop
    }
  }
}
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80058a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b40      	cmp	r3, #64	@ 0x40
 80058b0:	d108      	bne.n	80058c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058c2:	e007      	b.n	80058d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	3b10      	subs	r3, #16
 80058f0:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <DMA_CalcBaseAndBitshift+0x64>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058fa:	4a13      	ldr	r2, [pc, #76]	@ (8005948 <DMA_CalcBaseAndBitshift+0x68>)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d909      	bls.n	8005922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	1d1a      	adds	r2, r3, #4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005920:	e007      	b.n	8005932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	aaaaaaab 	.word	0xaaaaaaab
 8005948:	08011ed8 	.word	0x08011ed8

0800594c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d11f      	bne.n	80059a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d856      	bhi.n	8005a1a <DMA_CheckFifoParam+0xce>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <DMA_CheckFifoParam+0x28>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005985 	.word	0x08005985
 8005978:	08005997 	.word	0x08005997
 800597c:	08005985 	.word	0x08005985
 8005980:	08005a1b 	.word	0x08005a1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d046      	beq.n	8005a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005994:	e043      	b.n	8005a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800599e:	d140      	bne.n	8005a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a4:	e03d      	b.n	8005a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ae:	d121      	bne.n	80059f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d837      	bhi.n	8005a26 <DMA_CheckFifoParam+0xda>
 80059b6:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <DMA_CheckFifoParam+0x70>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059cd 	.word	0x080059cd
 80059c0:	080059d3 	.word	0x080059d3
 80059c4:	080059cd 	.word	0x080059cd
 80059c8:	080059e5 	.word	0x080059e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
      break;
 80059d0:	e030      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d025      	beq.n	8005a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e2:	e022      	b.n	8005a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059ec:	d11f      	bne.n	8005a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059f2:	e01c      	b.n	8005a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d903      	bls.n	8005a02 <DMA_CheckFifoParam+0xb6>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d003      	beq.n	8005a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a00:	e018      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
      break;
 8005a06:	e015      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e00b      	b.n	8005a32 <DMA_CheckFifoParam+0xe6>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e00a      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e008      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      break;
 8005a22:	bf00      	nop
 8005a24:	e006      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      break;
 8005a26:	bf00      	nop
 8005a28:	e004      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e002      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <DMA_CheckFifoParam+0xe8>
      break;
 8005a32:	bf00      	nop
    }
  } 
  
  return status; 
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e03b      	b.n	8005ace <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fd fbf8 	bl	8003260 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a94:	f023 0107 	bic.w	r1, r3, #7
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005aae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68d1      	ldr	r1, [r2, #12]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_DMA2D_Start+0x1c>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e018      	b.n	8005b24 <HAL_DMA2D_Start+0x4e>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fa99 	bl	8006044 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d056      	beq.n	8005bf6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b48:	f7fe fdbe 	bl	80046c8 <HAL_GetTick>
 8005b4c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005b4e:	e04b      	b.n	8005be8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d023      	beq.n	8005baa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b70:	f043 0202 	orr.w	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2221      	movs	r2, #33	@ 0x21
 8005b94:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e0a5      	b.n	8005cf6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d01a      	beq.n	8005be8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fe fd89 	bl	80046c8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <HAL_DMA2D_PollForTransfer+0x9c>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10f      	bne.n	8005be8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e086      	b.n	8005cf6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0ac      	beq.n	8005b50 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d061      	beq.n	8005cdc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c18:	f7fe fd56 	bl	80046c8 <HAL_GetTick>
 8005c1c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005c1e:	e056      	b.n	8005cce <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02e      	beq.n	8005c90 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c40:	f043 0204 	orr.w	r2, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	f043 0202 	orr.w	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6c:	f043 0201 	orr.w	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2229      	movs	r2, #41	@ 0x29
 8005c7a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e032      	b.n	8005cf6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d01a      	beq.n	8005cce <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fe fd16 	bl	80046c8 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <HAL_DMA2D_PollForTransfer+0x182>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10f      	bne.n	8005cce <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb2:	f043 0220 	orr.w	r2, r3, #32
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e013      	b.n	8005cf6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0a1      	beq.n	8005c20 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2212      	movs	r2, #18
 8005ce2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d026      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d021      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d38:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3e:	f043 0201 	orr.w	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2204      	movs	r2, #4
 8005d52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d026      	beq.n	8005dc6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d021      	beq.n	8005dc6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d90:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2220      	movs	r2, #32
 8005d98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9e:	f043 0202 	orr.w	r2, r3, #2
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2204      	movs	r2, #4
 8005daa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d026      	beq.n	8005e1e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d021      	beq.n	8005e1e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2208      	movs	r2, #8
 8005df0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	f043 0204 	orr.w	r2, r3, #4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2204      	movs	r2, #4
 8005e02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d013      	beq.n	8005e50 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e40:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2204      	movs	r2, #4
 8005e48:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f853 	bl	8005ef6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d024      	beq.n	8005ea4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01f      	beq.n	8005ea4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e72:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01f      	beq.n	8005eee <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01a      	beq.n	8005eee <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ec6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2210      	movs	r2, #16
 8005ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f80e 	bl	8005f0a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_DMA2D_ConfigLayer+0x20>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e079      	b.n	8006034 <HAL_DMA2D_ConfigLayer+0x114>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	3318      	adds	r3, #24
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	041b      	lsls	r3, r3, #16
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005f6a:	4b35      	ldr	r3, [pc, #212]	@ (8006040 <HAL_DMA2D_ConfigLayer+0x120>)
 8005f6c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b0a      	cmp	r3, #10
 8005f74:	d003      	beq.n	8005f7e <HAL_DMA2D_ConfigLayer+0x5e>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b09      	cmp	r3, #9
 8005f7c:	d107      	bne.n	8005f8e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e005      	b.n	8005f9a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	061b      	lsls	r3, r3, #24
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d120      	bne.n	8005fe2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	ea02 0103 	and.w	r1, r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b0a      	cmp	r3, #10
 8005fc8:	d003      	beq.n	8005fd2 <HAL_DMA2D_ConfigLayer+0xb2>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b09      	cmp	r3, #9
 8005fd0:	d127      	bne.n	8006022 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005fde:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fe0:	e01f      	b.n	8006022 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	43db      	mvns	r3, r3
 8005fec:	ea02 0103 	and.w	r1, r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b0a      	cmp	r3, #10
 800600a:	d003      	beq.n	8006014 <HAL_DMA2D_ConfigLayer+0xf4>
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b09      	cmp	r3, #9
 8006012:	d106      	bne.n	8006022 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006020:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	ff03000f 	.word	0xff03000f

08006044 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006044:	b480      	push	{r7}
 8006046:	b08b      	sub	sp, #44	@ 0x2c
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006058:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	041a      	lsls	r2, r3, #16
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	431a      	orrs	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800607c:	d174      	bne.n	8006168 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006084:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800608c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006094:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d108      	bne.n	80060b6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060b4:	e053      	b.n	800615e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d106      	bne.n	80060cc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ca:	e048      	b.n	800615e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d111      	bne.n	80060f8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	0cdb      	lsrs	r3, r3, #19
 80060d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	0a9b      	lsrs	r3, r3, #10
 80060de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	08db      	lsrs	r3, r3, #3
 80060e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	02db      	lsls	r3, r3, #11
 80060ee:	4313      	orrs	r3, r2
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f6:	e032      	b.n	800615e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d117      	bne.n	8006130 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	0fdb      	lsrs	r3, r3, #31
 8006104:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	0cdb      	lsrs	r3, r3, #19
 800610a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	0adb      	lsrs	r3, r3, #11
 8006110:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	029b      	lsls	r3, r3, #10
 8006120:	431a      	orrs	r2, r3
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	03db      	lsls	r3, r3, #15
 8006126:	4313      	orrs	r3, r2
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
 800612e:	e016      	b.n	800615e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	0f1b      	lsrs	r3, r3, #28
 8006134:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	0d1b      	lsrs	r3, r3, #20
 800613a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	0b1b      	lsrs	r3, r3, #12
 8006140:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	011a      	lsls	r2, r3, #4
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	431a      	orrs	r2, r3
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	4313      	orrs	r3, r2
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006164:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006166:	e003      	b.n	8006170 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	60da      	str	r2, [r3, #12]
}
 8006170:	bf00      	nop
 8006172:	372c      	adds	r7, #44	@ 0x2c
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800617c:	b480      	push	{r7}
 800617e:	b089      	sub	sp, #36	@ 0x24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800618a:	2300      	movs	r3, #0
 800618c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	e177      	b.n	8006488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006198:	2201      	movs	r2, #1
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	fa02 f303 	lsl.w	r3, r2, r3
 80061a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4013      	ands	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	f040 8166 	bne.w	8006482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d005      	beq.n	80061ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d130      	bne.n	8006230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	2203      	movs	r2, #3
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	4013      	ands	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006204:	2201      	movs	r2, #1
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	43db      	mvns	r3, r3
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4013      	ands	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 0201 	and.w	r2, r3, #1
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b03      	cmp	r3, #3
 800623a:	d017      	beq.n	800626c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	2203      	movs	r2, #3
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	43db      	mvns	r3, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4013      	ands	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4313      	orrs	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d123      	bne.n	80062c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	08da      	lsrs	r2, r3, #3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3208      	adds	r2, #8
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	220f      	movs	r2, #15
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	43db      	mvns	r3, r3
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4013      	ands	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	08da      	lsrs	r2, r3, #3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3208      	adds	r2, #8
 80062ba:	69b9      	ldr	r1, [r7, #24]
 80062bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	2203      	movs	r2, #3
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	43db      	mvns	r3, r3
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4013      	ands	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 0203 	and.w	r2, r3, #3
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80c0 	beq.w	8006482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	4b66      	ldr	r3, [pc, #408]	@ (80064a0 <HAL_GPIO_Init+0x324>)
 8006308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630a:	4a65      	ldr	r2, [pc, #404]	@ (80064a0 <HAL_GPIO_Init+0x324>)
 800630c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006310:	6453      	str	r3, [r2, #68]	@ 0x44
 8006312:	4b63      	ldr	r3, [pc, #396]	@ (80064a0 <HAL_GPIO_Init+0x324>)
 8006314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800631e:	4a61      	ldr	r2, [pc, #388]	@ (80064a4 <HAL_GPIO_Init+0x328>)
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	089b      	lsrs	r3, r3, #2
 8006324:	3302      	adds	r3, #2
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	220f      	movs	r2, #15
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43db      	mvns	r3, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4013      	ands	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a58      	ldr	r2, [pc, #352]	@ (80064a8 <HAL_GPIO_Init+0x32c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d037      	beq.n	80063ba <HAL_GPIO_Init+0x23e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a57      	ldr	r2, [pc, #348]	@ (80064ac <HAL_GPIO_Init+0x330>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d031      	beq.n	80063b6 <HAL_GPIO_Init+0x23a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a56      	ldr	r2, [pc, #344]	@ (80064b0 <HAL_GPIO_Init+0x334>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02b      	beq.n	80063b2 <HAL_GPIO_Init+0x236>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a55      	ldr	r2, [pc, #340]	@ (80064b4 <HAL_GPIO_Init+0x338>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d025      	beq.n	80063ae <HAL_GPIO_Init+0x232>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a54      	ldr	r2, [pc, #336]	@ (80064b8 <HAL_GPIO_Init+0x33c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01f      	beq.n	80063aa <HAL_GPIO_Init+0x22e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a53      	ldr	r2, [pc, #332]	@ (80064bc <HAL_GPIO_Init+0x340>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d019      	beq.n	80063a6 <HAL_GPIO_Init+0x22a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a52      	ldr	r2, [pc, #328]	@ (80064c0 <HAL_GPIO_Init+0x344>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_GPIO_Init+0x226>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a51      	ldr	r2, [pc, #324]	@ (80064c4 <HAL_GPIO_Init+0x348>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00d      	beq.n	800639e <HAL_GPIO_Init+0x222>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a50      	ldr	r2, [pc, #320]	@ (80064c8 <HAL_GPIO_Init+0x34c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <HAL_GPIO_Init+0x21e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a4f      	ldr	r2, [pc, #316]	@ (80064cc <HAL_GPIO_Init+0x350>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d101      	bne.n	8006396 <HAL_GPIO_Init+0x21a>
 8006392:	2309      	movs	r3, #9
 8006394:	e012      	b.n	80063bc <HAL_GPIO_Init+0x240>
 8006396:	230a      	movs	r3, #10
 8006398:	e010      	b.n	80063bc <HAL_GPIO_Init+0x240>
 800639a:	2308      	movs	r3, #8
 800639c:	e00e      	b.n	80063bc <HAL_GPIO_Init+0x240>
 800639e:	2307      	movs	r3, #7
 80063a0:	e00c      	b.n	80063bc <HAL_GPIO_Init+0x240>
 80063a2:	2306      	movs	r3, #6
 80063a4:	e00a      	b.n	80063bc <HAL_GPIO_Init+0x240>
 80063a6:	2305      	movs	r3, #5
 80063a8:	e008      	b.n	80063bc <HAL_GPIO_Init+0x240>
 80063aa:	2304      	movs	r3, #4
 80063ac:	e006      	b.n	80063bc <HAL_GPIO_Init+0x240>
 80063ae:	2303      	movs	r3, #3
 80063b0:	e004      	b.n	80063bc <HAL_GPIO_Init+0x240>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e002      	b.n	80063bc <HAL_GPIO_Init+0x240>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <HAL_GPIO_Init+0x240>
 80063ba:	2300      	movs	r3, #0
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	f002 0203 	and.w	r2, r2, #3
 80063c2:	0092      	lsls	r2, r2, #2
 80063c4:	4093      	lsls	r3, r2
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063cc:	4935      	ldr	r1, [pc, #212]	@ (80064a4 <HAL_GPIO_Init+0x328>)
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	089b      	lsrs	r3, r3, #2
 80063d2:	3302      	adds	r3, #2
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063da:	4b3d      	ldr	r3, [pc, #244]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063fe:	4a34      	ldr	r2, [pc, #208]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006404:	4b32      	ldr	r3, [pc, #200]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	43db      	mvns	r3, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4013      	ands	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006428:	4a29      	ldr	r2, [pc, #164]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800642e:	4b28      	ldr	r3, [pc, #160]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	43db      	mvns	r3, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4013      	ands	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006452:	4a1f      	ldr	r2, [pc, #124]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006458:	4b1d      	ldr	r3, [pc, #116]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	43db      	mvns	r3, r3
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4013      	ands	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800647c:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <HAL_GPIO_Init+0x354>)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3301      	adds	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b0f      	cmp	r3, #15
 800648c:	f67f ae84 	bls.w	8006198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	3724      	adds	r7, #36	@ 0x24
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800
 80064a4:	40013800 	.word	0x40013800
 80064a8:	40020000 	.word	0x40020000
 80064ac:	40020400 	.word	0x40020400
 80064b0:	40020800 	.word	0x40020800
 80064b4:	40020c00 	.word	0x40020c00
 80064b8:	40021000 	.word	0x40021000
 80064bc:	40021400 	.word	0x40021400
 80064c0:	40021800 	.word	0x40021800
 80064c4:	40021c00 	.word	0x40021c00
 80064c8:	40022000 	.word	0x40022000
 80064cc:	40022400 	.word	0x40022400
 80064d0:	40013c00 	.word	0x40013c00

080064d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e0d9      	b.n	80066a4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064f0:	2201      	movs	r2, #1
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4013      	ands	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	429a      	cmp	r2, r3
 8006508:	f040 80c9 	bne.w	800669e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800650c:	4a6b      	ldr	r2, [pc, #428]	@ (80066bc <HAL_GPIO_DeInit+0x1e8>)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	089b      	lsrs	r3, r3, #2
 8006512:	3302      	adds	r3, #2
 8006514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006518:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	220f      	movs	r2, #15
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a63      	ldr	r2, [pc, #396]	@ (80066c0 <HAL_GPIO_DeInit+0x1ec>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d037      	beq.n	80065a6 <HAL_GPIO_DeInit+0xd2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a62      	ldr	r2, [pc, #392]	@ (80066c4 <HAL_GPIO_DeInit+0x1f0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d031      	beq.n	80065a2 <HAL_GPIO_DeInit+0xce>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a61      	ldr	r2, [pc, #388]	@ (80066c8 <HAL_GPIO_DeInit+0x1f4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d02b      	beq.n	800659e <HAL_GPIO_DeInit+0xca>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a60      	ldr	r2, [pc, #384]	@ (80066cc <HAL_GPIO_DeInit+0x1f8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d025      	beq.n	800659a <HAL_GPIO_DeInit+0xc6>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a5f      	ldr	r2, [pc, #380]	@ (80066d0 <HAL_GPIO_DeInit+0x1fc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01f      	beq.n	8006596 <HAL_GPIO_DeInit+0xc2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a5e      	ldr	r2, [pc, #376]	@ (80066d4 <HAL_GPIO_DeInit+0x200>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d019      	beq.n	8006592 <HAL_GPIO_DeInit+0xbe>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a5d      	ldr	r2, [pc, #372]	@ (80066d8 <HAL_GPIO_DeInit+0x204>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <HAL_GPIO_DeInit+0xba>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a5c      	ldr	r2, [pc, #368]	@ (80066dc <HAL_GPIO_DeInit+0x208>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00d      	beq.n	800658a <HAL_GPIO_DeInit+0xb6>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a5b      	ldr	r2, [pc, #364]	@ (80066e0 <HAL_GPIO_DeInit+0x20c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <HAL_GPIO_DeInit+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a5a      	ldr	r2, [pc, #360]	@ (80066e4 <HAL_GPIO_DeInit+0x210>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d101      	bne.n	8006582 <HAL_GPIO_DeInit+0xae>
 800657e:	2309      	movs	r3, #9
 8006580:	e012      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 8006582:	230a      	movs	r3, #10
 8006584:	e010      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 8006586:	2308      	movs	r3, #8
 8006588:	e00e      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 800658a:	2307      	movs	r3, #7
 800658c:	e00c      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 800658e:	2306      	movs	r3, #6
 8006590:	e00a      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 8006592:	2305      	movs	r3, #5
 8006594:	e008      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 8006596:	2304      	movs	r3, #4
 8006598:	e006      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 800659a:	2303      	movs	r3, #3
 800659c:	e004      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 800659e:	2302      	movs	r3, #2
 80065a0:	e002      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <HAL_GPIO_DeInit+0xd4>
 80065a6:	2300      	movs	r3, #0
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	f002 0203 	and.w	r2, r2, #3
 80065ae:	0092      	lsls	r2, r2, #2
 80065b0:	4093      	lsls	r3, r2
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d132      	bne.n	800661e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065b8:	4b4b      	ldr	r3, [pc, #300]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	43db      	mvns	r3, r3
 80065c0:	4949      	ldr	r1, [pc, #292]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065c6:	4b48      	ldr	r3, [pc, #288]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	43db      	mvns	r3, r3
 80065ce:	4946      	ldr	r1, [pc, #280]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065d4:	4b44      	ldr	r3, [pc, #272]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	43db      	mvns	r3, r3
 80065dc:	4942      	ldr	r1, [pc, #264]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065de:	4013      	ands	r3, r2
 80065e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065e2:	4b41      	ldr	r3, [pc, #260]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	493f      	ldr	r1, [pc, #252]	@ (80066e8 <HAL_GPIO_DeInit+0x214>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	220f      	movs	r2, #15
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006600:	4a2e      	ldr	r2, [pc, #184]	@ (80066bc <HAL_GPIO_DeInit+0x1e8>)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	089b      	lsrs	r3, r3, #2
 8006606:	3302      	adds	r3, #2
 8006608:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	43da      	mvns	r2, r3
 8006610:	482a      	ldr	r0, [pc, #168]	@ (80066bc <HAL_GPIO_DeInit+0x1e8>)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	089b      	lsrs	r3, r3, #2
 8006616:	400a      	ands	r2, r1
 8006618:	3302      	adds	r3, #2
 800661a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	2103      	movs	r1, #3
 8006628:	fa01 f303 	lsl.w	r3, r1, r3
 800662c:	43db      	mvns	r3, r3
 800662e:	401a      	ands	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	08da      	lsrs	r2, r3, #3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3208      	adds	r2, #8
 800663c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	220f      	movs	r2, #15
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43db      	mvns	r3, r3
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	08d2      	lsrs	r2, r2, #3
 8006654:	4019      	ands	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3208      	adds	r2, #8
 800665a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	2103      	movs	r1, #3
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	401a      	ands	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	2101      	movs	r1, #1
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	401a      	ands	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	2103      	movs	r1, #3
 8006692:	fa01 f303 	lsl.w	r3, r1, r3
 8006696:	43db      	mvns	r3, r3
 8006698:	401a      	ands	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	3301      	adds	r3, #1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	f67f af22 	bls.w	80064f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40013800 	.word	0x40013800
 80066c0:	40020000 	.word	0x40020000
 80066c4:	40020400 	.word	0x40020400
 80066c8:	40020800 	.word	0x40020800
 80066cc:	40020c00 	.word	0x40020c00
 80066d0:	40021000 	.word	0x40021000
 80066d4:	40021400 	.word	0x40021400
 80066d8:	40021800 	.word	0x40021800
 80066dc:	40021c00 	.word	0x40021c00
 80066e0:	40022000 	.word	0x40022000
 80066e4:	40022400 	.word	0x40022400
 80066e8:	40013c00 	.word	0x40013c00

080066ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
 80066f8:	4613      	mov	r3, r2
 80066fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066fc:	787b      	ldrb	r3, [r7, #1]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006708:	e003      	b.n	8006712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	041a      	lsls	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	619a      	str	r2, [r3, #24]
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e12b      	b.n	800698a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fd f81c 	bl	8003784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2224      	movs	r2, #36	@ 0x24
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006784:	f002 f8fc 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 8006788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4a81      	ldr	r2, [pc, #516]	@ (8006994 <HAL_I2C_Init+0x274>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d807      	bhi.n	80067a4 <HAL_I2C_Init+0x84>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a80      	ldr	r2, [pc, #512]	@ (8006998 <HAL_I2C_Init+0x278>)
 8006798:	4293      	cmp	r3, r2
 800679a:	bf94      	ite	ls
 800679c:	2301      	movls	r3, #1
 800679e:	2300      	movhi	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	e006      	b.n	80067b2 <HAL_I2C_Init+0x92>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a7d      	ldr	r2, [pc, #500]	@ (800699c <HAL_I2C_Init+0x27c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	bf94      	ite	ls
 80067ac:	2301      	movls	r3, #1
 80067ae:	2300      	movhi	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e0e7      	b.n	800698a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4a78      	ldr	r2, [pc, #480]	@ (80069a0 <HAL_I2C_Init+0x280>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0c9b      	lsrs	r3, r3, #18
 80067c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	4a6a      	ldr	r2, [pc, #424]	@ (8006994 <HAL_I2C_Init+0x274>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d802      	bhi.n	80067f4 <HAL_I2C_Init+0xd4>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	3301      	adds	r3, #1
 80067f2:	e009      	b.n	8006808 <HAL_I2C_Init+0xe8>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80067fa:	fb02 f303 	mul.w	r3, r2, r3
 80067fe:	4a69      	ldr	r2, [pc, #420]	@ (80069a4 <HAL_I2C_Init+0x284>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	099b      	lsrs	r3, r3, #6
 8006806:	3301      	adds	r3, #1
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	430b      	orrs	r3, r1
 800680e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800681a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	495c      	ldr	r1, [pc, #368]	@ (8006994 <HAL_I2C_Init+0x274>)
 8006824:	428b      	cmp	r3, r1
 8006826:	d819      	bhi.n	800685c <HAL_I2C_Init+0x13c>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1e59      	subs	r1, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	fbb1 f3f3 	udiv	r3, r1, r3
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800683c:	400b      	ands	r3, r1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_I2C_Init+0x138>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1e59      	subs	r1, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006850:	3301      	adds	r3, #1
 8006852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006856:	e051      	b.n	80068fc <HAL_I2C_Init+0x1dc>
 8006858:	2304      	movs	r3, #4
 800685a:	e04f      	b.n	80068fc <HAL_I2C_Init+0x1dc>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d111      	bne.n	8006888 <HAL_I2C_Init+0x168>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	1e58      	subs	r0, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6859      	ldr	r1, [r3, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	440b      	add	r3, r1
 8006872:	fbb0 f3f3 	udiv	r3, r0, r3
 8006876:	3301      	adds	r3, #1
 8006878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf0c      	ite	eq
 8006880:	2301      	moveq	r3, #1
 8006882:	2300      	movne	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e012      	b.n	80068ae <HAL_I2C_Init+0x18e>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	1e58      	subs	r0, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6859      	ldr	r1, [r3, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	0099      	lsls	r1, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	fbb0 f3f3 	udiv	r3, r0, r3
 800689e:	3301      	adds	r3, #1
 80068a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_I2C_Init+0x196>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e022      	b.n	80068fc <HAL_I2C_Init+0x1dc>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10e      	bne.n	80068dc <HAL_I2C_Init+0x1bc>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1e58      	subs	r0, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6859      	ldr	r1, [r3, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	440b      	add	r3, r1
 80068cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80068d0:	3301      	adds	r3, #1
 80068d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068da:	e00f      	b.n	80068fc <HAL_I2C_Init+0x1dc>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	1e58      	subs	r0, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	0099      	lsls	r1, r3, #2
 80068ec:	440b      	add	r3, r1
 80068ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80068f2:	3301      	adds	r3, #1
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	6809      	ldr	r1, [r1, #0]
 8006900:	4313      	orrs	r3, r2
 8006902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69da      	ldr	r2, [r3, #28]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800692a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6911      	ldr	r1, [r2, #16]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68d2      	ldr	r2, [r2, #12]
 8006936:	4311      	orrs	r1, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	430b      	orrs	r3, r1
 800693e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	000186a0 	.word	0x000186a0
 8006998:	001e847f 	.word	0x001e847f
 800699c:	003d08ff 	.word	0x003d08ff
 80069a0:	431bde83 	.word	0x431bde83
 80069a4:	10624dd3 	.word	0x10624dd3

080069a8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e021      	b.n	80069fe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2224      	movs	r2, #36	@ 0x24
 80069be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fc ff40 	bl	8003858 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	4608      	mov	r0, r1
 8006a12:	4611      	mov	r1, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	817b      	strh	r3, [r7, #10]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	813b      	strh	r3, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a22:	f7fd fe51 	bl	80046c8 <HAL_GetTick>
 8006a26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	f040 80d9 	bne.w	8006be8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	2319      	movs	r3, #25
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	496d      	ldr	r1, [pc, #436]	@ (8006bf4 <HAL_I2C_Mem_Write+0x1ec>)
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fc99 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e0cc      	b.n	8006bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_I2C_Mem_Write+0x56>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e0c5      	b.n	8006bea <HAL_I2C_Mem_Write+0x1e2>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d007      	beq.n	8006a84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2221      	movs	r2, #33	@ 0x21
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2240      	movs	r2, #64	@ 0x40
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8006bf8 <HAL_I2C_Mem_Write+0x1f0>)
 8006ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ac6:	88f8      	ldrh	r0, [r7, #6]
 8006ac8:	893a      	ldrh	r2, [r7, #8]
 8006aca:	8979      	ldrh	r1, [r7, #10]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fad0 	bl	800707c <I2C_RequestMemoryWrite>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d052      	beq.n	8006b88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e081      	b.n	8006bea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fd5e 	bl	80075ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00d      	beq.n	8006b12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d107      	bne.n	8006b0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e06b      	b.n	8006bea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	781a      	ldrb	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d11b      	bne.n	8006b88 <HAL_I2C_Mem_Write+0x180>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d017      	beq.n	8006b88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1aa      	bne.n	8006ae6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fd51 	bl	800763c <I2C_WaitOnBTFFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d107      	bne.n	8006bb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e016      	b.n	8006bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	e000      	b.n	8006bea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006be8:	2302      	movs	r3, #2
  }
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	00100002 	.word	0x00100002
 8006bf8:	ffff0000 	.word	0xffff0000

08006bfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08c      	sub	sp, #48	@ 0x30
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	817b      	strh	r3, [r7, #10]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	813b      	strh	r3, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c16:	f7fd fd57 	bl	80046c8 <HAL_GetTick>
 8006c1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	f040 8214 	bne.w	8007052 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	2319      	movs	r3, #25
 8006c30:	2201      	movs	r2, #1
 8006c32:	497b      	ldr	r1, [pc, #492]	@ (8006e20 <HAL_I2C_Mem_Read+0x224>)
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fb9f 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
 8006c42:	e207      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_I2C_Mem_Read+0x56>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e200      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d007      	beq.n	8006c78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2222      	movs	r2, #34	@ 0x22
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2240      	movs	r2, #64	@ 0x40
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8006e24 <HAL_I2C_Mem_Read+0x228>)
 8006cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cba:	88f8      	ldrh	r0, [r7, #6]
 8006cbc:	893a      	ldrh	r2, [r7, #8]
 8006cbe:	8979      	ldrh	r1, [r7, #10]
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4603      	mov	r3, r0
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 fa6c 	bl	80071a8 <I2C_RequestMemoryRead>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e1bc      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d113      	bne.n	8006d0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	e190      	b.n	800702c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d11b      	bne.n	8006d4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d22:	2300      	movs	r3, #0
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	e170      	b.n	800702c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d11b      	bne.n	8006d8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d72:	2300      	movs	r3, #0
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	e150      	b.n	800702c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006da0:	e144      	b.n	800702c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	f200 80f1 	bhi.w	8006f8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d123      	bne.n	8006dfc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fc87 	bl	80076cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e145      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691a      	ldr	r2, [r3, #16]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dfa:	e117      	b.n	800702c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d14e      	bne.n	8006ea2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4906      	ldr	r1, [pc, #24]	@ (8006e28 <HAL_I2C_Mem_Read+0x22c>)
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fab2 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d008      	beq.n	8006e2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e11a      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
 8006e1e:	bf00      	nop
 8006e20:	00100002 	.word	0x00100002
 8006e24:	ffff0000 	.word	0xffff0000
 8006e28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ea0:	e0c4      	b.n	800702c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	496c      	ldr	r1, [pc, #432]	@ (800705c <HAL_I2C_Mem_Read+0x460>)
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fa63 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0cb      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	2200      	movs	r2, #0
 8006f06:	4955      	ldr	r1, [pc, #340]	@ (800705c <HAL_I2C_Mem_Read+0x460>)
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fa35 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e09d      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f8c:	e04e      	b.n	800702c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fb9a 	bl	80076cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e058      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d124      	bne.n	800702c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d107      	bne.n	8006ffa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ff8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691a      	ldr	r2, [r3, #16]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007030:	2b00      	cmp	r3, #0
 8007032:	f47f aeb6 	bne.w	8006da2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e000      	b.n	8007054 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007052:	2302      	movs	r3, #2
  }
}
 8007054:	4618      	mov	r0, r3
 8007056:	3728      	adds	r7, #40	@ 0x28
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	00010004 	.word	0x00010004

08007060 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800706e:	b2db      	uxtb	r3, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	461a      	mov	r2, r3
 800708a:	4603      	mov	r3, r0
 800708c:	817b      	strh	r3, [r7, #10]
 800708e:	460b      	mov	r3, r1
 8007090:	813b      	strh	r3, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f960 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070cc:	d103      	bne.n	80070d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e05f      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070da:	897b      	ldrh	r3, [r7, #10]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	6a3a      	ldr	r2, [r7, #32]
 80070ee:	492d      	ldr	r1, [pc, #180]	@ (80071a4 <I2C_RequestMemoryWrite+0x128>)
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f9bb 	bl	800746c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e04c      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007118:	6a39      	ldr	r1, [r7, #32]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fa46 	bl	80075ac <I2C_WaitOnTXEFlagUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00d      	beq.n	8007142 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	2b04      	cmp	r3, #4
 800712c:	d107      	bne.n	800713e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800713c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e02b      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d105      	bne.n	8007154 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007148:	893b      	ldrh	r3, [r7, #8]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]
 8007152:	e021      	b.n	8007198 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007154:	893b      	ldrh	r3, [r7, #8]
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	b29b      	uxth	r3, r3
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007164:	6a39      	ldr	r1, [r7, #32]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 fa20 	bl	80075ac <I2C_WaitOnTXEFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	2b04      	cmp	r3, #4
 8007178:	d107      	bne.n	800718a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007188:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e005      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800718e:	893b      	ldrh	r3, [r7, #8]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	00010002 	.word	0x00010002

080071a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	4608      	mov	r0, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	461a      	mov	r2, r3
 80071b6:	4603      	mov	r3, r0
 80071b8:	817b      	strh	r3, [r7, #10]
 80071ba:	460b      	mov	r3, r1
 80071bc:	813b      	strh	r3, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f8c2 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007208:	d103      	bne.n	8007212 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007210:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e0aa      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007216:	897b      	ldrh	r3, [r7, #10]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	6a3a      	ldr	r2, [r7, #32]
 800722a:	4952      	ldr	r1, [pc, #328]	@ (8007374 <I2C_RequestMemoryRead+0x1cc>)
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f91d 	bl	800746c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e097      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007254:	6a39      	ldr	r1, [r7, #32]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f9a8 	bl	80075ac <I2C_WaitOnTXEFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00d      	beq.n	800727e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	2b04      	cmp	r3, #4
 8007268:	d107      	bne.n	800727a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e076      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d105      	bne.n	8007290 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007284:	893b      	ldrh	r3, [r7, #8]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	611a      	str	r2, [r3, #16]
 800728e:	e021      	b.n	80072d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007290:	893b      	ldrh	r3, [r7, #8]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b29b      	uxth	r3, r3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800729e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a0:	6a39      	ldr	r1, [r7, #32]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f982 	bl	80075ac <I2C_WaitOnTXEFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d107      	bne.n	80072c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e050      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072ca:	893b      	ldrh	r3, [r7, #8]
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d6:	6a39      	ldr	r1, [r7, #32]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f967 	bl	80075ac <I2C_WaitOnTXEFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00d      	beq.n	8007300 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d107      	bne.n	80072fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e035      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800730e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	2200      	movs	r2, #0
 8007318:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f82b 	bl	8007378 <I2C_WaitOnFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007336:	d103      	bne.n	8007340 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800733e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e013      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007344:	897b      	ldrh	r3, [r7, #10]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	b2da      	uxtb	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	6a3a      	ldr	r2, [r7, #32]
 8007358:	4906      	ldr	r1, [pc, #24]	@ (8007374 <I2C_RequestMemoryRead+0x1cc>)
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f886 	bl	800746c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	00010002 	.word	0x00010002

08007378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	4613      	mov	r3, r2
 8007386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007388:	e048      	b.n	800741c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007390:	d044      	beq.n	800741c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007392:	f7fd f999 	bl	80046c8 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d139      	bne.n	800741c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	0c1b      	lsrs	r3, r3, #16
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10d      	bne.n	80073ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	43da      	mvns	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4013      	ands	r3, r2
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bf0c      	ite	eq
 80073c4:	2301      	moveq	r3, #1
 80073c6:	2300      	movne	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	e00c      	b.n	80073e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	43da      	mvns	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4013      	ands	r3, r2
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bf0c      	ite	eq
 80073e0:	2301      	moveq	r3, #1
 80073e2:	2300      	movne	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d116      	bne.n	800741c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	f043 0220 	orr.w	r2, r3, #32
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e023      	b.n	8007464 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d10d      	bne.n	8007442 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	43da      	mvns	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4013      	ands	r3, r2
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	e00c      	b.n	800745c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	43da      	mvns	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	4013      	ands	r3, r2
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	bf0c      	ite	eq
 8007454:	2301      	moveq	r3, #1
 8007456:	2300      	movne	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	429a      	cmp	r2, r3
 8007460:	d093      	beq.n	800738a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800747a:	e071      	b.n	8007560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800748a:	d123      	bne.n	80074d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800749a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	f043 0204 	orr.w	r2, r3, #4
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e067      	b.n	80075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d041      	beq.n	8007560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074dc:	f7fd f8f4 	bl	80046c8 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d302      	bcc.n	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d136      	bne.n	8007560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d10c      	bne.n	8007516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	43da      	mvns	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4013      	ands	r3, r2
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf14      	ite	ne
 800750e:	2301      	movne	r3, #1
 8007510:	2300      	moveq	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	e00b      	b.n	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	43da      	mvns	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4013      	ands	r3, r2
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	bf14      	ite	ne
 8007528:	2301      	movne	r3, #1
 800752a:	2300      	moveq	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d016      	beq.n	8007560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754c:	f043 0220 	orr.w	r2, r3, #32
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e021      	b.n	80075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	0c1b      	lsrs	r3, r3, #16
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10c      	bne.n	8007584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	43da      	mvns	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	4013      	ands	r3, r2
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	bf14      	ite	ne
 800757c:	2301      	movne	r3, #1
 800757e:	2300      	moveq	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e00b      	b.n	800759c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	43da      	mvns	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4013      	ands	r3, r2
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f af6d 	bne.w	800747c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075b8:	e034      	b.n	8007624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f8e3 	bl	8007786 <I2C_IsAcknowledgeFailed>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e034      	b.n	8007634 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d028      	beq.n	8007624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d2:	f7fd f879 	bl	80046c8 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d11d      	bne.n	8007624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f2:	2b80      	cmp	r3, #128	@ 0x80
 80075f4:	d016      	beq.n	8007624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	f043 0220 	orr.w	r2, r3, #32
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e007      	b.n	8007634 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762e:	2b80      	cmp	r3, #128	@ 0x80
 8007630:	d1c3      	bne.n	80075ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007648:	e034      	b.n	80076b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f89b 	bl	8007786 <I2C_IsAcknowledgeFailed>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e034      	b.n	80076c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d028      	beq.n	80076b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007662:	f7fd f831 	bl	80046c8 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	429a      	cmp	r2, r3
 8007670:	d302      	bcc.n	8007678 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11d      	bne.n	80076b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b04      	cmp	r3, #4
 8007684:	d016      	beq.n	80076b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e007      	b.n	80076c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d1c3      	bne.n	800764a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076d8:	e049      	b.n	800776e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b10      	cmp	r3, #16
 80076e6:	d119      	bne.n	800771c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0210 	mvn.w	r2, #16
 80076f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e030      	b.n	800777e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771c:	f7fc ffd4 	bl	80046c8 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d11d      	bne.n	800776e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773c:	2b40      	cmp	r3, #64	@ 0x40
 800773e:	d016      	beq.n	800776e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	f043 0220 	orr.w	r2, r3, #32
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e007      	b.n	800777e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007778:	2b40      	cmp	r3, #64	@ 0x40
 800777a:	d1ae      	bne.n	80076da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800779c:	d11b      	bne.n	80077d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	f043 0204 	orr.w	r2, r3, #4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e000      	b.n	80077d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d129      	bne.n	800784e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2224      	movs	r2, #36	@ 0x24
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0210 	bic.w	r2, r2, #16
 8007820:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e000      	b.n	8007850 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800784e:	2302      	movs	r3, #2
  }
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b20      	cmp	r3, #32
 8007874:	d12a      	bne.n	80078cc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2224      	movs	r2, #36	@ 0x24
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007896:	89fb      	ldrh	r3, [r7, #14]
 8007898:	f023 030f 	bic.w	r3, r3, #15
 800789c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	89fb      	ldrh	r3, [r7, #14]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	89fa      	ldrh	r2, [r7, #14]
 80078ae:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e000      	b.n	80078ce <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80078cc:	2302      	movs	r3, #2
  }
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e0bf      	b.n	8007a6e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fc f84e 	bl	80039a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800791e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6999      	ldr	r1, [r3, #24]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007934:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6899      	ldr	r1, [r3, #8]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a78 <HAL_LTDC_Init+0x19c>)
 8007950:	400b      	ands	r3, r1
 8007952:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	041b      	lsls	r3, r3, #16
 800795a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6899      	ldr	r1, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	431a      	orrs	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68d9      	ldr	r1, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	4b3e      	ldr	r3, [pc, #248]	@ (8007a78 <HAL_LTDC_Init+0x19c>)
 800797e:	400b      	ands	r3, r1
 8007980:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	041b      	lsls	r3, r3, #16
 8007988:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68d9      	ldr	r1, [r3, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6919      	ldr	r1, [r3, #16]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b33      	ldr	r3, [pc, #204]	@ (8007a78 <HAL_LTDC_Init+0x19c>)
 80079ac:	400b      	ands	r3, r1
 80079ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6919      	ldr	r1, [r3, #16]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6959      	ldr	r1, [r3, #20]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b27      	ldr	r3, [pc, #156]	@ (8007a78 <HAL_LTDC_Init+0x19c>)
 80079da:	400b      	ands	r3, r1
 80079dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6959      	ldr	r1, [r3, #20]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007a0c:	041b      	lsls	r3, r3, #16
 8007a0e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0206 	orr.w	r2, r2, #6
 8007a4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	f000f800 	.word	0xf000f800

08007a7c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a92:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d023      	beq.n	8007ae6 <HAL_LTDC_IRQHandler+0x6a>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01e      	beq.n	8007ae6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0204 	bic.w	r2, r2, #4
 8007ab6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2204      	movs	r2, #4
 8007abe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ac6:	f043 0201 	orr.w	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f86f 	bl	8007bc4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d023      	beq.n	8007b38 <HAL_LTDC_IRQHandler+0xbc>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01e      	beq.n	8007b38 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0202 	bic.w	r2, r2, #2
 8007b08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b18:	f043 0202 	orr.w	r2, r3, #2
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2204      	movs	r2, #4
 8007b26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f846 	bl	8007bc4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d01b      	beq.n	8007b7a <HAL_LTDC_IRQHandler+0xfe>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d016      	beq.n	8007b7a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2201      	movs	r2, #1
 8007b62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f82f 	bl	8007bd8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01b      	beq.n	8007bbc <HAL_LTDC_IRQHandler+0x140>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d016      	beq.n	8007bbc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0208 	bic.w	r2, r2, #8
 8007b9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f818 	bl	8007bec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007c00:	b5b0      	push	{r4, r5, r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_LTDC_ConfigLayer+0x1a>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e02c      	b.n	8007c74 <HAL_LTDC_ConfigLayer+0x74>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2134      	movs	r1, #52	@ 0x34
 8007c30:	fb01 f303 	mul.w	r3, r1, r3
 8007c34:	4413      	add	r3, r2
 8007c36:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	461d      	mov	r5, r3
 8007c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f83b 	bl	8007cd0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bdb0      	pop	{r4, r5, r7, pc}

08007c7c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_LTDC_EnableDither+0x16>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e016      	b.n	8007cc0 <HAL_LTDC_EnableDither+0x44>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <HAL_LTDC_EnableDither+0x50>)
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	4a09      	ldr	r2, [pc, #36]	@ (8007ccc <HAL_LTDC_EnableDither+0x50>)
 8007ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cac:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	40016800 	.word	0x40016800

08007cd0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b089      	sub	sp, #36	@ 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cec:	4413      	add	r3, r2
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	01db      	lsls	r3, r3, #7
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3384      	adds	r3, #132	@ 0x84
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	6812      	ldr	r2, [r2, #0]
 8007d06:	4611      	mov	r1, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	01d2      	lsls	r2, r2, #7
 8007d0c:	440a      	add	r2, r1
 8007d0e:	3284      	adds	r2, #132	@ 0x84
 8007d10:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007d14:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	0c1b      	lsrs	r3, r3, #16
 8007d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007d26:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d28:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	01db      	lsls	r3, r3, #7
 8007d34:	440b      	add	r3, r1
 8007d36:	3384      	adds	r3, #132	@ 0x84
 8007d38:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007d3e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d4e:	4413      	add	r3, r2
 8007d50:	041b      	lsls	r3, r3, #16
 8007d52:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	01db      	lsls	r3, r3, #7
 8007d5e:	4413      	add	r3, r2
 8007d60:	3384      	adds	r3, #132	@ 0x84
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	6812      	ldr	r2, [r2, #0]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	01d2      	lsls	r2, r2, #7
 8007d6e:	440a      	add	r2, r1
 8007d70:	3284      	adds	r2, #132	@ 0x84
 8007d72:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007d76:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d86:	4413      	add	r3, r2
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	01db      	lsls	r3, r3, #7
 8007d94:	440b      	add	r3, r1
 8007d96:	3384      	adds	r3, #132	@ 0x84
 8007d98:	4619      	mov	r1, r3
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	01db      	lsls	r3, r3, #7
 8007daa:	4413      	add	r3, r2
 8007dac:	3384      	adds	r3, #132	@ 0x84
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	4611      	mov	r1, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	01d2      	lsls	r2, r2, #7
 8007dba:	440a      	add	r2, r1
 8007dbc:	3284      	adds	r2, #132	@ 0x84
 8007dbe:	f023 0307 	bic.w	r3, r3, #7
 8007dc2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	01db      	lsls	r3, r3, #7
 8007dce:	4413      	add	r3, r2
 8007dd0:	3384      	adds	r3, #132	@ 0x84
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	061b      	lsls	r3, r3, #24
 8007df4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	01db      	lsls	r3, r3, #7
 8007e00:	4413      	add	r3, r2
 8007e02:	3384      	adds	r3, #132	@ 0x84
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	01db      	lsls	r3, r3, #7
 8007e10:	4413      	add	r3, r2
 8007e12:	3384      	adds	r3, #132	@ 0x84
 8007e14:	461a      	mov	r2, r3
 8007e16:	2300      	movs	r3, #0
 8007e18:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e20:	461a      	mov	r2, r3
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	01db      	lsls	r3, r3, #7
 8007e34:	440b      	add	r3, r1
 8007e36:	3384      	adds	r3, #132	@ 0x84
 8007e38:	4619      	mov	r1, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	01db      	lsls	r3, r3, #7
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3384      	adds	r3, #132	@ 0x84
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	6812      	ldr	r2, [r2, #0]
 8007e54:	4611      	mov	r1, r2
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	01d2      	lsls	r2, r2, #7
 8007e5a:	440a      	add	r2, r1
 8007e5c:	3284      	adds	r2, #132	@ 0x84
 8007e5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007e62:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	01db      	lsls	r3, r3, #7
 8007e6e:	4413      	add	r3, r2
 8007e70:	3384      	adds	r3, #132	@ 0x84
 8007e72:	461a      	mov	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	01db      	lsls	r3, r3, #7
 8007e84:	4413      	add	r3, r2
 8007e86:	3384      	adds	r3, #132	@ 0x84
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	01d2      	lsls	r2, r2, #7
 8007e94:	440a      	add	r2, r1
 8007e96:	3284      	adds	r2, #132	@ 0x84
 8007e98:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007e9c:	f023 0307 	bic.w	r3, r3, #7
 8007ea0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	69da      	ldr	r2, [r3, #28]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	6809      	ldr	r1, [r1, #0]
 8007eae:	4608      	mov	r0, r1
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	01c9      	lsls	r1, r1, #7
 8007eb4:	4401      	add	r1, r0
 8007eb6:	3184      	adds	r1, #132	@ 0x84
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	01db      	lsls	r3, r3, #7
 8007ec6:	4413      	add	r3, r2
 8007ec8:	3384      	adds	r3, #132	@ 0x84
 8007eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	01db      	lsls	r3, r3, #7
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3384      	adds	r3, #132	@ 0x84
 8007eda:	461a      	mov	r2, r3
 8007edc:	2300      	movs	r3, #0
 8007ede:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	01db      	lsls	r3, r3, #7
 8007eea:	4413      	add	r3, r2
 8007eec:	3384      	adds	r3, #132	@ 0x84
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007efe:	2304      	movs	r3, #4
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	e01b      	b.n	8007f3c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d102      	bne.n	8007f12 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	61fb      	str	r3, [r7, #28]
 8007f10:	e014      	b.n	8007f3c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d00b      	beq.n	8007f32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d007      	beq.n	8007f32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d003      	beq.n	8007f32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007f2e:	2b07      	cmp	r3, #7
 8007f30:	d102      	bne.n	8007f38 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007f32:	2302      	movs	r3, #2
 8007f34:	61fb      	str	r3, [r7, #28]
 8007f36:	e001      	b.n	8007f3c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	461a      	mov	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	01db      	lsls	r3, r3, #7
 8007f46:	4413      	add	r3, r2
 8007f48:	3384      	adds	r3, #132	@ 0x84
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	4611      	mov	r1, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	01d2      	lsls	r2, r2, #7
 8007f56:	440a      	add	r2, r1
 8007f58:	3284      	adds	r2, #132	@ 0x84
 8007f5a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	fb02 f303 	mul.w	r3, r2, r3
 8007f6a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	6859      	ldr	r1, [r3, #4]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	1acb      	subs	r3, r1, r3
 8007f76:	69f9      	ldr	r1, [r7, #28]
 8007f78:	fb01 f303 	mul.w	r3, r1, r3
 8007f7c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	6809      	ldr	r1, [r1, #0]
 8007f82:	4608      	mov	r0, r1
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	01c9      	lsls	r1, r1, #7
 8007f88:	4401      	add	r1, r0
 8007f8a:	3184      	adds	r1, #132	@ 0x84
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	01db      	lsls	r3, r3, #7
 8007f9a:	4413      	add	r3, r2
 8007f9c:	3384      	adds	r3, #132	@ 0x84
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	01d2      	lsls	r2, r2, #7
 8007faa:	440a      	add	r2, r1
 8007fac:	3284      	adds	r2, #132	@ 0x84
 8007fae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007fb2:	f023 0307 	bic.w	r3, r3, #7
 8007fb6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	01db      	lsls	r3, r3, #7
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3384      	adds	r3, #132	@ 0x84
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	01db      	lsls	r3, r3, #7
 8007fd8:	4413      	add	r3, r2
 8007fda:	3384      	adds	r3, #132	@ 0x84
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	01d2      	lsls	r2, r2, #7
 8007fe8:	440a      	add	r2, r1
 8007fea:	3284      	adds	r2, #132	@ 0x84
 8007fec:	f043 0301 	orr.w	r3, r3, #1
 8007ff0:	6013      	str	r3, [r2, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	3724      	adds	r7, #36	@ 0x24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
	...

08008000 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800800a:	2300      	movs	r3, #0
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	4b20      	ldr	r3, [pc, #128]	@ (8008090 <HAL_PWREx_EnableOverDrive+0x90>)
 8008010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008012:	4a1f      	ldr	r2, [pc, #124]	@ (8008090 <HAL_PWREx_EnableOverDrive+0x90>)
 8008014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008018:	6413      	str	r3, [r2, #64]	@ 0x40
 800801a:	4b1d      	ldr	r3, [pc, #116]	@ (8008090 <HAL_PWREx_EnableOverDrive+0x90>)
 800801c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008026:	4b1b      	ldr	r3, [pc, #108]	@ (8008094 <HAL_PWREx_EnableOverDrive+0x94>)
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800802c:	f7fc fb4c 	bl	80046c8 <HAL_GetTick>
 8008030:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008032:	e009      	b.n	8008048 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008034:	f7fc fb48 	bl	80046c8 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008042:	d901      	bls.n	8008048 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e01f      	b.n	8008088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008048:	4b13      	ldr	r3, [pc, #76]	@ (8008098 <HAL_PWREx_EnableOverDrive+0x98>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008054:	d1ee      	bne.n	8008034 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008056:	4b11      	ldr	r3, [pc, #68]	@ (800809c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008058:	2201      	movs	r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800805c:	f7fc fb34 	bl	80046c8 <HAL_GetTick>
 8008060:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008062:	e009      	b.n	8008078 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008064:	f7fc fb30 	bl	80046c8 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008072:	d901      	bls.n	8008078 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e007      	b.n	8008088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008078:	4b07      	ldr	r3, [pc, #28]	@ (8008098 <HAL_PWREx_EnableOverDrive+0x98>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008084:	d1ee      	bne.n	8008064 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40023800 	.word	0x40023800
 8008094:	420e0040 	.word	0x420e0040
 8008098:	40007000 	.word	0x40007000
 800809c:	420e0044 	.word	0x420e0044

080080a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e267      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d075      	beq.n	80081aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80080be:	4b88      	ldr	r3, [pc, #544]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 030c 	and.w	r3, r3, #12
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d00c      	beq.n	80080e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ca:	4b85      	ldr	r3, [pc, #532]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d112      	bne.n	80080fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080d6:	4b82      	ldr	r3, [pc, #520]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080e2:	d10b      	bne.n	80080fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e4:	4b7e      	ldr	r3, [pc, #504]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d05b      	beq.n	80081a8 <HAL_RCC_OscConfig+0x108>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d157      	bne.n	80081a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e242      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008104:	d106      	bne.n	8008114 <HAL_RCC_OscConfig+0x74>
 8008106:	4b76      	ldr	r3, [pc, #472]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a75      	ldr	r2, [pc, #468]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800810c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	e01d      	b.n	8008150 <HAL_RCC_OscConfig+0xb0>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800811c:	d10c      	bne.n	8008138 <HAL_RCC_OscConfig+0x98>
 800811e:	4b70      	ldr	r3, [pc, #448]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a6f      	ldr	r2, [pc, #444]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	4b6d      	ldr	r3, [pc, #436]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a6c      	ldr	r2, [pc, #432]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	e00b      	b.n	8008150 <HAL_RCC_OscConfig+0xb0>
 8008138:	4b69      	ldr	r3, [pc, #420]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a68      	ldr	r2, [pc, #416]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800813e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	4b66      	ldr	r3, [pc, #408]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a65      	ldr	r2, [pc, #404]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800814a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800814e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d013      	beq.n	8008180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008158:	f7fc fab6 	bl	80046c8 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008160:	f7fc fab2 	bl	80046c8 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b64      	cmp	r3, #100	@ 0x64
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e207      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008172:	4b5b      	ldr	r3, [pc, #364]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f0      	beq.n	8008160 <HAL_RCC_OscConfig+0xc0>
 800817e:	e014      	b.n	80081aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008180:	f7fc faa2 	bl	80046c8 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008188:	f7fc fa9e 	bl	80046c8 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b64      	cmp	r3, #100	@ 0x64
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e1f3      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800819a:	4b51      	ldr	r3, [pc, #324]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCC_OscConfig+0xe8>
 80081a6:	e000      	b.n	80081aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d063      	beq.n	800827e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80081b6:	4b4a      	ldr	r3, [pc, #296]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 030c 	and.w	r3, r3, #12
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081c2:	4b47      	ldr	r3, [pc, #284]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d11c      	bne.n	8008208 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ce:	4b44      	ldr	r3, [pc, #272]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d116      	bne.n	8008208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081da:	4b41      	ldr	r3, [pc, #260]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <HAL_RCC_OscConfig+0x152>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d001      	beq.n	80081f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e1c7      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f2:	4b3b      	ldr	r3, [pc, #236]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	4937      	ldr	r1, [pc, #220]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008202:	4313      	orrs	r3, r2
 8008204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008206:	e03a      	b.n	800827e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d020      	beq.n	8008252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008210:	4b34      	ldr	r3, [pc, #208]	@ (80082e4 <HAL_RCC_OscConfig+0x244>)
 8008212:	2201      	movs	r2, #1
 8008214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008216:	f7fc fa57 	bl	80046c8 <HAL_GetTick>
 800821a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800821c:	e008      	b.n	8008230 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800821e:	f7fc fa53 	bl	80046c8 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e1a8      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008230:	4b2b      	ldr	r3, [pc, #172]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0f0      	beq.n	800821e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823c:	4b28      	ldr	r3, [pc, #160]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4925      	ldr	r1, [pc, #148]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 800824c:	4313      	orrs	r3, r2
 800824e:	600b      	str	r3, [r1, #0]
 8008250:	e015      	b.n	800827e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008252:	4b24      	ldr	r3, [pc, #144]	@ (80082e4 <HAL_RCC_OscConfig+0x244>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008258:	f7fc fa36 	bl	80046c8 <HAL_GetTick>
 800825c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008260:	f7fc fa32 	bl	80046c8 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e187      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008272:	4b1b      	ldr	r3, [pc, #108]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1f0      	bne.n	8008260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d036      	beq.n	80082f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d016      	beq.n	80082c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008292:	4b15      	ldr	r3, [pc, #84]	@ (80082e8 <HAL_RCC_OscConfig+0x248>)
 8008294:	2201      	movs	r2, #1
 8008296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008298:	f7fc fa16 	bl	80046c8 <HAL_GetTick>
 800829c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800829e:	e008      	b.n	80082b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082a0:	f7fc fa12 	bl	80046c8 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e167      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082b2:	4b0b      	ldr	r3, [pc, #44]	@ (80082e0 <HAL_RCC_OscConfig+0x240>)
 80082b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f0      	beq.n	80082a0 <HAL_RCC_OscConfig+0x200>
 80082be:	e01b      	b.n	80082f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082c0:	4b09      	ldr	r3, [pc, #36]	@ (80082e8 <HAL_RCC_OscConfig+0x248>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082c6:	f7fc f9ff 	bl	80046c8 <HAL_GetTick>
 80082ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082cc:	e00e      	b.n	80082ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082ce:	f7fc f9fb 	bl	80046c8 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d907      	bls.n	80082ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e150      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
 80082e0:	40023800 	.word	0x40023800
 80082e4:	42470000 	.word	0x42470000
 80082e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082ec:	4b88      	ldr	r3, [pc, #544]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80082ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1ea      	bne.n	80082ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8097 	beq.w	8008434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008306:	2300      	movs	r3, #0
 8008308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800830a:	4b81      	ldr	r3, [pc, #516]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10f      	bne.n	8008336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008316:	2300      	movs	r3, #0
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	4b7d      	ldr	r3, [pc, #500]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831e:	4a7c      	ldr	r2, [pc, #496]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008324:	6413      	str	r3, [r2, #64]	@ 0x40
 8008326:	4b7a      	ldr	r3, [pc, #488]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008336:	4b77      	ldr	r3, [pc, #476]	@ (8008514 <HAL_RCC_OscConfig+0x474>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d118      	bne.n	8008374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008342:	4b74      	ldr	r3, [pc, #464]	@ (8008514 <HAL_RCC_OscConfig+0x474>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a73      	ldr	r2, [pc, #460]	@ (8008514 <HAL_RCC_OscConfig+0x474>)
 8008348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800834c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800834e:	f7fc f9bb 	bl	80046c8 <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008356:	f7fc f9b7 	bl	80046c8 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e10c      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008368:	4b6a      	ldr	r3, [pc, #424]	@ (8008514 <HAL_RCC_OscConfig+0x474>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0f0      	beq.n	8008356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d106      	bne.n	800838a <HAL_RCC_OscConfig+0x2ea>
 800837c:	4b64      	ldr	r3, [pc, #400]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008380:	4a63      	ldr	r2, [pc, #396]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	6713      	str	r3, [r2, #112]	@ 0x70
 8008388:	e01c      	b.n	80083c4 <HAL_RCC_OscConfig+0x324>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b05      	cmp	r3, #5
 8008390:	d10c      	bne.n	80083ac <HAL_RCC_OscConfig+0x30c>
 8008392:	4b5f      	ldr	r3, [pc, #380]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008396:	4a5e      	ldr	r2, [pc, #376]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008398:	f043 0304 	orr.w	r3, r3, #4
 800839c:	6713      	str	r3, [r2, #112]	@ 0x70
 800839e:	4b5c      	ldr	r3, [pc, #368]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80083a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a2:	4a5b      	ldr	r2, [pc, #364]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083aa:	e00b      	b.n	80083c4 <HAL_RCC_OscConfig+0x324>
 80083ac:	4b58      	ldr	r3, [pc, #352]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80083ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b0:	4a57      	ldr	r2, [pc, #348]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b8:	4b55      	ldr	r3, [pc, #340]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80083ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083bc:	4a54      	ldr	r2, [pc, #336]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80083be:	f023 0304 	bic.w	r3, r3, #4
 80083c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d015      	beq.n	80083f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083cc:	f7fc f97c 	bl	80046c8 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d2:	e00a      	b.n	80083ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083d4:	f7fc f978 	bl	80046c8 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e0cb      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ea:	4b49      	ldr	r3, [pc, #292]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0ee      	beq.n	80083d4 <HAL_RCC_OscConfig+0x334>
 80083f6:	e014      	b.n	8008422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083f8:	f7fc f966 	bl	80046c8 <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083fe:	e00a      	b.n	8008416 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008400:	f7fc f962 	bl	80046c8 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e0b5      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008416:	4b3e      	ldr	r3, [pc, #248]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1ee      	bne.n	8008400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008422:	7dfb      	ldrb	r3, [r7, #23]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d105      	bne.n	8008434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008428:	4b39      	ldr	r3, [pc, #228]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 800842a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842c:	4a38      	ldr	r2, [pc, #224]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 800842e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008432:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80a1 	beq.w	8008580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800843e:	4b34      	ldr	r3, [pc, #208]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 030c 	and.w	r3, r3, #12
 8008446:	2b08      	cmp	r3, #8
 8008448:	d05c      	beq.n	8008504 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d141      	bne.n	80084d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008452:	4b31      	ldr	r3, [pc, #196]	@ (8008518 <HAL_RCC_OscConfig+0x478>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008458:	f7fc f936 	bl	80046c8 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008460:	f7fc f932 	bl	80046c8 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e087      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008472:	4b27      	ldr	r3, [pc, #156]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69da      	ldr	r2, [r3, #28]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	019b      	lsls	r3, r3, #6
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	3b01      	subs	r3, #1
 8008498:	041b      	lsls	r3, r3, #16
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	491b      	ldr	r1, [pc, #108]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008518 <HAL_RCC_OscConfig+0x478>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ae:	f7fc f90b 	bl	80046c8 <HAL_GetTick>
 80084b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b4:	e008      	b.n	80084c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084b6:	f7fc f907 	bl	80046c8 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d901      	bls.n	80084c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e05c      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084c8:	4b11      	ldr	r3, [pc, #68]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0f0      	beq.n	80084b6 <HAL_RCC_OscConfig+0x416>
 80084d4:	e054      	b.n	8008580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d6:	4b10      	ldr	r3, [pc, #64]	@ (8008518 <HAL_RCC_OscConfig+0x478>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084dc:	f7fc f8f4 	bl	80046c8 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fc f8f0 	bl	80046c8 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e045      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f6:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <HAL_RCC_OscConfig+0x470>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x444>
 8008502:	e03d      	b.n	8008580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d107      	bne.n	800851c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e038      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
 8008510:	40023800 	.word	0x40023800
 8008514:	40007000 	.word	0x40007000
 8008518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800851c:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <HAL_RCC_OscConfig+0x4ec>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d028      	beq.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008534:	429a      	cmp	r2, r3
 8008536:	d121      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008542:	429a      	cmp	r2, r3
 8008544:	d11a      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008554:	4293      	cmp	r3, r2
 8008556:	d111      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	3b01      	subs	r3, #1
 8008566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008568:	429a      	cmp	r2, r3
 800856a:	d107      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008578:	429a      	cmp	r2, r3
 800857a:	d001      	beq.n	8008580 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800

08008590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e0cc      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085a4:	4b68      	ldr	r3, [pc, #416]	@ (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 030f 	and.w	r3, r3, #15
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d90c      	bls.n	80085cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b2:	4b65      	ldr	r3, [pc, #404]	@ (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ba:	4b63      	ldr	r3, [pc, #396]	@ (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d001      	beq.n	80085cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e0b8      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d020      	beq.n	800861a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085e4:	4b59      	ldr	r3, [pc, #356]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a58      	ldr	r2, [pc, #352]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80085ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085fc:	4b53      	ldr	r3, [pc, #332]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	4a52      	ldr	r2, [pc, #328]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008602:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008608:	4b50      	ldr	r3, [pc, #320]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	494d      	ldr	r1, [pc, #308]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	4313      	orrs	r3, r2
 8008618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d044      	beq.n	80086b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d107      	bne.n	800863e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800862e:	4b47      	ldr	r3, [pc, #284]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d119      	bne.n	800866e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e07f      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d003      	beq.n	800864e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800864a:	2b03      	cmp	r3, #3
 800864c:	d107      	bne.n	800865e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800864e:	4b3f      	ldr	r3, [pc, #252]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e06f      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865e:	4b3b      	ldr	r3, [pc, #236]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e067      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800866e:	4b37      	ldr	r3, [pc, #220]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f023 0203 	bic.w	r2, r3, #3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	4934      	ldr	r1, [pc, #208]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 800867c:	4313      	orrs	r3, r2
 800867e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008680:	f7fc f822 	bl	80046c8 <HAL_GetTick>
 8008684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008686:	e00a      	b.n	800869e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008688:	f7fc f81e 	bl	80046c8 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008696:	4293      	cmp	r3, r2
 8008698:	d901      	bls.n	800869e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e04f      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800869e:	4b2b      	ldr	r3, [pc, #172]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 020c 	and.w	r2, r3, #12
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d1eb      	bne.n	8008688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086b0:	4b25      	ldr	r3, [pc, #148]	@ (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d20c      	bcs.n	80086d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086be:	4b22      	ldr	r3, [pc, #136]	@ (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c6:	4b20      	ldr	r3, [pc, #128]	@ (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d001      	beq.n	80086d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e032      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086e4:	4b19      	ldr	r3, [pc, #100]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	4916      	ldr	r1, [pc, #88]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008702:	4b12      	ldr	r3, [pc, #72]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	490e      	ldr	r1, [pc, #56]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	4313      	orrs	r3, r2
 8008714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008716:	f000 f821 	bl	800875c <HAL_RCC_GetSysClockFreq>
 800871a:	4602      	mov	r2, r0
 800871c:	4b0b      	ldr	r3, [pc, #44]	@ (800874c <HAL_RCC_ClockConfig+0x1bc>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	091b      	lsrs	r3, r3, #4
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	490a      	ldr	r1, [pc, #40]	@ (8008750 <HAL_RCC_ClockConfig+0x1c0>)
 8008728:	5ccb      	ldrb	r3, [r1, r3]
 800872a:	fa22 f303 	lsr.w	r3, r2, r3
 800872e:	4a09      	ldr	r2, [pc, #36]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 8008730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008732:	4b09      	ldr	r3, [pc, #36]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f7fb fcce 	bl	80040d8 <HAL_InitTick>

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	40023c00 	.word	0x40023c00
 800874c:	40023800 	.word	0x40023800
 8008750:	08011ec0 	.word	0x08011ec0
 8008754:	2000007c 	.word	0x2000007c
 8008758:	20000080 	.word	0x20000080

0800875c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800875c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008760:	b094      	sub	sp, #80	@ 0x50
 8008762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008774:	4b79      	ldr	r3, [pc, #484]	@ (800895c <HAL_RCC_GetSysClockFreq+0x200>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 030c 	and.w	r3, r3, #12
 800877c:	2b08      	cmp	r3, #8
 800877e:	d00d      	beq.n	800879c <HAL_RCC_GetSysClockFreq+0x40>
 8008780:	2b08      	cmp	r3, #8
 8008782:	f200 80e1 	bhi.w	8008948 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_RCC_GetSysClockFreq+0x34>
 800878a:	2b04      	cmp	r3, #4
 800878c:	d003      	beq.n	8008796 <HAL_RCC_GetSysClockFreq+0x3a>
 800878e:	e0db      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008790:	4b73      	ldr	r3, [pc, #460]	@ (8008960 <HAL_RCC_GetSysClockFreq+0x204>)
 8008792:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008794:	e0db      	b.n	800894e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008796:	4b73      	ldr	r3, [pc, #460]	@ (8008964 <HAL_RCC_GetSysClockFreq+0x208>)
 8008798:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800879a:	e0d8      	b.n	800894e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800879c:	4b6f      	ldr	r3, [pc, #444]	@ (800895c <HAL_RCC_GetSysClockFreq+0x200>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087a6:	4b6d      	ldr	r3, [pc, #436]	@ (800895c <HAL_RCC_GetSysClockFreq+0x200>)
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d063      	beq.n	800887a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087b2:	4b6a      	ldr	r3, [pc, #424]	@ (800895c <HAL_RCC_GetSysClockFreq+0x200>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	099b      	lsrs	r3, r3, #6
 80087b8:	2200      	movs	r2, #0
 80087ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80087c6:	2300      	movs	r3, #0
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80087ce:	4622      	mov	r2, r4
 80087d0:	462b      	mov	r3, r5
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f04f 0100 	mov.w	r1, #0
 80087da:	0159      	lsls	r1, r3, #5
 80087dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087e0:	0150      	lsls	r0, r2, #5
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4621      	mov	r1, r4
 80087e8:	1a51      	subs	r1, r2, r1
 80087ea:	6139      	str	r1, [r7, #16]
 80087ec:	4629      	mov	r1, r5
 80087ee:	eb63 0301 	sbc.w	r3, r3, r1
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008800:	4659      	mov	r1, fp
 8008802:	018b      	lsls	r3, r1, #6
 8008804:	4651      	mov	r1, sl
 8008806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800880a:	4651      	mov	r1, sl
 800880c:	018a      	lsls	r2, r1, #6
 800880e:	4651      	mov	r1, sl
 8008810:	ebb2 0801 	subs.w	r8, r2, r1
 8008814:	4659      	mov	r1, fp
 8008816:	eb63 0901 	sbc.w	r9, r3, r1
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800882a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800882e:	4690      	mov	r8, r2
 8008830:	4699      	mov	r9, r3
 8008832:	4623      	mov	r3, r4
 8008834:	eb18 0303 	adds.w	r3, r8, r3
 8008838:	60bb      	str	r3, [r7, #8]
 800883a:	462b      	mov	r3, r5
 800883c:	eb49 0303 	adc.w	r3, r9, r3
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800884e:	4629      	mov	r1, r5
 8008850:	024b      	lsls	r3, r1, #9
 8008852:	4621      	mov	r1, r4
 8008854:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008858:	4621      	mov	r1, r4
 800885a:	024a      	lsls	r2, r1, #9
 800885c:	4610      	mov	r0, r2
 800885e:	4619      	mov	r1, r3
 8008860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008862:	2200      	movs	r2, #0
 8008864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800886c:	f7f8 fa1c 	bl	8000ca8 <__aeabi_uldivmod>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4613      	mov	r3, r2
 8008876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008878:	e058      	b.n	800892c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800887a:	4b38      	ldr	r3, [pc, #224]	@ (800895c <HAL_RCC_GetSysClockFreq+0x200>)
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	099b      	lsrs	r3, r3, #6
 8008880:	2200      	movs	r2, #0
 8008882:	4618      	mov	r0, r3
 8008884:	4611      	mov	r1, r2
 8008886:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800888a:	623b      	str	r3, [r7, #32]
 800888c:	2300      	movs	r3, #0
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008894:	4642      	mov	r2, r8
 8008896:	464b      	mov	r3, r9
 8008898:	f04f 0000 	mov.w	r0, #0
 800889c:	f04f 0100 	mov.w	r1, #0
 80088a0:	0159      	lsls	r1, r3, #5
 80088a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088a6:	0150      	lsls	r0, r2, #5
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4641      	mov	r1, r8
 80088ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80088b2:	4649      	mov	r1, r9
 80088b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	f04f 0300 	mov.w	r3, #0
 80088c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088cc:	ebb2 040a 	subs.w	r4, r2, sl
 80088d0:	eb63 050b 	sbc.w	r5, r3, fp
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	00eb      	lsls	r3, r5, #3
 80088de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088e2:	00e2      	lsls	r2, r4, #3
 80088e4:	4614      	mov	r4, r2
 80088e6:	461d      	mov	r5, r3
 80088e8:	4643      	mov	r3, r8
 80088ea:	18e3      	adds	r3, r4, r3
 80088ec:	603b      	str	r3, [r7, #0]
 80088ee:	464b      	mov	r3, r9
 80088f0:	eb45 0303 	adc.w	r3, r5, r3
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	f04f 0200 	mov.w	r2, #0
 80088fa:	f04f 0300 	mov.w	r3, #0
 80088fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008902:	4629      	mov	r1, r5
 8008904:	028b      	lsls	r3, r1, #10
 8008906:	4621      	mov	r1, r4
 8008908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800890c:	4621      	mov	r1, r4
 800890e:	028a      	lsls	r2, r1, #10
 8008910:	4610      	mov	r0, r2
 8008912:	4619      	mov	r1, r3
 8008914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008916:	2200      	movs	r2, #0
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	61fa      	str	r2, [r7, #28]
 800891c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008920:	f7f8 f9c2 	bl	8000ca8 <__aeabi_uldivmod>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4613      	mov	r3, r2
 800892a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800892c:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <HAL_RCC_GetSysClockFreq+0x200>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	0c1b      	lsrs	r3, r3, #16
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	3301      	adds	r3, #1
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800893c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800893e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008940:	fbb2 f3f3 	udiv	r3, r2, r3
 8008944:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008946:	e002      	b.n	800894e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008948:	4b05      	ldr	r3, [pc, #20]	@ (8008960 <HAL_RCC_GetSysClockFreq+0x204>)
 800894a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800894c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800894e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008950:	4618      	mov	r0, r3
 8008952:	3750      	adds	r7, #80	@ 0x50
 8008954:	46bd      	mov	sp, r7
 8008956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800895a:	bf00      	nop
 800895c:	40023800 	.word	0x40023800
 8008960:	00f42400 	.word	0x00f42400
 8008964:	007a1200 	.word	0x007a1200

08008968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800896c:	4b03      	ldr	r3, [pc, #12]	@ (800897c <HAL_RCC_GetHCLKFreq+0x14>)
 800896e:	681b      	ldr	r3, [r3, #0]
}
 8008970:	4618      	mov	r0, r3
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	2000007c 	.word	0x2000007c

08008980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008984:	f7ff fff0 	bl	8008968 <HAL_RCC_GetHCLKFreq>
 8008988:	4602      	mov	r2, r0
 800898a:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	0a9b      	lsrs	r3, r3, #10
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	4903      	ldr	r1, [pc, #12]	@ (80089a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008996:	5ccb      	ldrb	r3, [r1, r3]
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800899c:	4618      	mov	r0, r3
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40023800 	.word	0x40023800
 80089a4:	08011ed0 	.word	0x08011ed0

080089a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	220f      	movs	r2, #15
 80089b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80089b8:	4b12      	ldr	r3, [pc, #72]	@ (8008a04 <HAL_RCC_GetClockConfig+0x5c>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f003 0203 	and.w	r2, r3, #3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80089c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a04 <HAL_RCC_GetClockConfig+0x5c>)
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80089d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008a04 <HAL_RCC_GetClockConfig+0x5c>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80089dc:	4b09      	ldr	r3, [pc, #36]	@ (8008a04 <HAL_RCC_GetClockConfig+0x5c>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	08db      	lsrs	r3, r3, #3
 80089e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80089ea:	4b07      	ldr	r3, [pc, #28]	@ (8008a08 <HAL_RCC_GetClockConfig+0x60>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	601a      	str	r2, [r3, #0]
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40023800 	.word	0x40023800
 8008a08:	40023c00 	.word	0x40023c00

08008a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10b      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d105      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d075      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a40:	4b91      	ldr	r3, [pc, #580]	@ (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a46:	f7fb fe3f 	bl	80046c8 <HAL_GetTick>
 8008a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a4c:	e008      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a4e:	f7fb fe3b 	bl	80046c8 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e189      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a60:	4b8a      	ldr	r3, [pc, #552]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1f0      	bne.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d009      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	019a      	lsls	r2, r3, #6
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	071b      	lsls	r3, r3, #28
 8008a84:	4981      	ldr	r1, [pc, #516]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01f      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a98:	4b7c      	ldr	r3, [pc, #496]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a9e:	0f1b      	lsrs	r3, r3, #28
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	019a      	lsls	r2, r3, #6
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	061b      	lsls	r3, r3, #24
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	071b      	lsls	r3, r3, #28
 8008ab8:	4974      	ldr	r1, [pc, #464]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008ac0:	4b72      	ldr	r3, [pc, #456]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ac6:	f023 021f 	bic.w	r2, r3, #31
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	496e      	ldr	r1, [pc, #440]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00d      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	019a      	lsls	r2, r3, #6
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	061b      	lsls	r3, r3, #24
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	071b      	lsls	r3, r3, #28
 8008af8:	4964      	ldr	r1, [pc, #400]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b00:	4b61      	ldr	r3, [pc, #388]	@ (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008b02:	2201      	movs	r2, #1
 8008b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b06:	f7fb fddf 	bl	80046c8 <HAL_GetTick>
 8008b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b0c:	e008      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b0e:	f7fb fddb 	bl	80046c8 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e129      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b20:	4b5a      	ldr	r3, [pc, #360]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0f0      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d105      	bne.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d079      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008b44:	4b52      	ldr	r3, [pc, #328]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b4a:	f7fb fdbd 	bl	80046c8 <HAL_GetTick>
 8008b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b50:	e008      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b52:	f7fb fdb9 	bl	80046c8 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e107      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b64:	4b49      	ldr	r3, [pc, #292]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b70:	d0ef      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d020      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b7e:	4b43      	ldr	r3, [pc, #268]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b84:	0f1b      	lsrs	r3, r3, #28
 8008b86:	f003 0307 	and.w	r3, r3, #7
 8008b8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	019a      	lsls	r2, r3, #6
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	061b      	lsls	r3, r3, #24
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	071b      	lsls	r3, r3, #28
 8008b9e:	493b      	ldr	r1, [pc, #236]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008ba6:	4b39      	ldr	r3, [pc, #228]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	4934      	ldr	r1, [pc, #208]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0308 	and.w	r3, r3, #8
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01e      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd2:	0e1b      	lsrs	r3, r3, #24
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	019a      	lsls	r2, r3, #6
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	061b      	lsls	r3, r3, #24
 8008be4:	431a      	orrs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	071b      	lsls	r3, r3, #28
 8008bec:	4927      	ldr	r1, [pc, #156]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008bf4:	4b25      	ldr	r3, [pc, #148]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	4922      	ldr	r1, [pc, #136]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008c0a:	4b21      	ldr	r3, [pc, #132]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c10:	f7fb fd5a 	bl	80046c8 <HAL_GetTick>
 8008c14:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c16:	e008      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c18:	f7fb fd56 	bl	80046c8 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e0a4      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c2a:	4b18      	ldr	r3, [pc, #96]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c36:	d1ef      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0320 	and.w	r3, r3, #32
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 808b 	beq.w	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	4b10      	ldr	r3, [pc, #64]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c56:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008c62:	4b0c      	ldr	r3, [pc, #48]	@ (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a0b      	ldr	r2, [pc, #44]	@ (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c6e:	f7fb fd2b 	bl	80046c8 <HAL_GetTick>
 8008c72:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008c74:	e010      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c76:	f7fb fd27 	bl	80046c8 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d909      	bls.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e075      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008c88:	42470068 	.word	0x42470068
 8008c8c:	40023800 	.word	0x40023800
 8008c90:	42470070 	.word	0x42470070
 8008c94:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008c98:	4b38      	ldr	r3, [pc, #224]	@ (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0e8      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ca4:	4b36      	ldr	r3, [pc, #216]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cac:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d02f      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d028      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008cce:	2201      	movs	r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008cd8:	4a29      	ldr	r2, [pc, #164]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008cde:	4b28      	ldr	r3, [pc, #160]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d114      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008cea:	f7fb fced 	bl	80046c8 <HAL_GetTick>
 8008cee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cf0:	e00a      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cf2:	f7fb fce9 	bl	80046c8 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d901      	bls.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e035      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d08:	4b1d      	ldr	r3, [pc, #116]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0ee      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d20:	d10d      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008d22:	4b17      	ldr	r3, [pc, #92]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d36:	4912      	ldr	r1, [pc, #72]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	608b      	str	r3, [r1, #8]
 8008d3c:	e005      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008d3e:	4b10      	ldr	r3, [pc, #64]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	4a0f      	ldr	r2, [pc, #60]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d44:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008d48:	6093      	str	r3, [r2, #8]
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d56:	490a      	ldr	r1, [pc, #40]	@ (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008d6e:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008d70:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	40007000 	.word	0x40007000
 8008d80:	40023800 	.word	0x40023800
 8008d84:	42470e40 	.word	0x42470e40
 8008d88:	424711e0 	.word	0x424711e0

08008d8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e025      	b.n	8008dec <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7fa fb5d 	bl	8003474 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4610      	mov	r0, r2
 8008dce:	f001 fb53 	bl	800a478 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	f001 fba8 	bl	800a532 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e06:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d101      	bne.n	8008e12 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e021      	b.n	8008e56 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d002      	beq.n	8008e1e <HAL_SDRAM_SendCommand+0x2a>
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d118      	bne.n	8008e50 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2202      	movs	r2, #2
 8008e22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 fbe8 	bl	800a604 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d104      	bne.n	8008e46 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2205      	movs	r2, #5
 8008e40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e44:	e006      	b.n	8008e54 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e4e:	e001      	b.n	8008e54 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e000      	b.n	8008e56 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d101      	bne.n	8008e78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008e74:	2302      	movs	r3, #2
 8008e76:	e016      	b.n	8008ea6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10f      	bne.n	8008ea4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 fbf3 	bl	800a67e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e000      	b.n	8008ea6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e07b      	b.n	8008fb8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d108      	bne.n	8008eda <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ed0:	d009      	beq.n	8008ee6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	61da      	str	r2, [r3, #28]
 8008ed8:	e005      	b.n	8008ee6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d106      	bne.n	8008f06 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fb f85b 	bl	8003fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f6a:	ea42 0103 	orr.w	r1, r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	0c1b      	lsrs	r3, r3, #16
 8008f84:	f003 0104 	and.w	r1, r3, #4
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8c:	f003 0210 	and.w	r2, r3, #16
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69da      	ldr	r2, [r3, #28]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e01a      	b.n	8009008 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fe8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fb f82e 	bl	800404c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	4613      	mov	r3, r2
 800901e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009020:	f7fb fb52 	bl	80046c8 <HAL_GetTick>
 8009024:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b01      	cmp	r3, #1
 8009034:	d001      	beq.n	800903a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009036:	2302      	movs	r3, #2
 8009038:	e12a      	b.n	8009290 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <HAL_SPI_Transmit+0x36>
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e122      	b.n	8009290 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_SPI_Transmit+0x48>
 8009054:	2302      	movs	r3, #2
 8009056:	e11b      	b.n	8009290 <HAL_SPI_Transmit+0x280>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2203      	movs	r2, #3
 8009064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	88fa      	ldrh	r2, [r7, #6]
 8009078:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	88fa      	ldrh	r2, [r7, #6]
 800907e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090a6:	d10f      	bne.n	80090c8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d2:	2b40      	cmp	r3, #64	@ 0x40
 80090d4:	d007      	beq.n	80090e6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090ee:	d152      	bne.n	8009196 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <HAL_SPI_Transmit+0xee>
 80090f8:	8b7b      	ldrh	r3, [r7, #26]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d145      	bne.n	800918a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009102:	881a      	ldrh	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800910e:	1c9a      	adds	r2, r3, #2
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009118:	b29b      	uxth	r3, r3
 800911a:	3b01      	subs	r3, #1
 800911c:	b29a      	uxth	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009122:	e032      	b.n	800918a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b02      	cmp	r3, #2
 8009130:	d112      	bne.n	8009158 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	881a      	ldrh	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	1c9a      	adds	r2, r3, #2
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800914c:	b29b      	uxth	r3, r3
 800914e:	3b01      	subs	r3, #1
 8009150:	b29a      	uxth	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009156:	e018      	b.n	800918a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009158:	f7fb fab6 	bl	80046c8 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d803      	bhi.n	8009170 <HAL_SPI_Transmit+0x160>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d102      	bne.n	8009176 <HAL_SPI_Transmit+0x166>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e082      	b.n	8009290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800918e:	b29b      	uxth	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1c7      	bne.n	8009124 <HAL_SPI_Transmit+0x114>
 8009194:	e053      	b.n	800923e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <HAL_SPI_Transmit+0x194>
 800919e:	8b7b      	ldrh	r3, [r7, #26]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d147      	bne.n	8009234 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330c      	adds	r3, #12
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80091ca:	e033      	b.n	8009234 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d113      	bne.n	8009202 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	7812      	ldrb	r2, [r2, #0]
 80091e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009200:	e018      	b.n	8009234 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009202:	f7fb fa61 	bl	80046c8 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d803      	bhi.n	800921a <HAL_SPI_Transmit+0x20a>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009218:	d102      	bne.n	8009220 <HAL_SPI_Transmit+0x210>
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e02d      	b.n	8009290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1c6      	bne.n	80091cc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fbe6 	bl	8009a14 <SPI_EndRxTxTransaction>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2220      	movs	r2, #32
 8009252:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800928e:	2300      	movs	r3, #0
  }
}
 8009290:	4618      	mov	r0, r3
 8009292:	3720      	adds	r7, #32
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af02      	add	r7, sp, #8
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	4613      	mov	r3, r2
 80092a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d001      	beq.n	80092b8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80092b4:	2302      	movs	r3, #2
 80092b6:	e104      	b.n	80094c2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092c0:	d112      	bne.n	80092e8 <HAL_SPI_Receive+0x50>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10e      	bne.n	80092e8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2204      	movs	r2, #4
 80092ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4613      	mov	r3, r2
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f8f3 	bl	80094ca <HAL_SPI_TransmitReceive>
 80092e4:	4603      	mov	r3, r0
 80092e6:	e0ec      	b.n	80094c2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092e8:	f7fb f9ee 	bl	80046c8 <HAL_GetTick>
 80092ec:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <HAL_SPI_Receive+0x62>
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e0e1      	b.n	80094c2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_SPI_Receive+0x74>
 8009308:	2302      	movs	r3, #2
 800930a:	e0da      	b.n	80094c2 <HAL_SPI_Receive+0x22a>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2204      	movs	r2, #4
 8009318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	88fa      	ldrh	r2, [r7, #6]
 800932c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	88fa      	ldrh	r2, [r7, #6]
 8009332:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800935a:	d10f      	bne.n	800937c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800936a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800937a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009386:	2b40      	cmp	r3, #64	@ 0x40
 8009388:	d007      	beq.n	800939a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009398:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d170      	bne.n	8009484 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80093a2:	e035      	b.n	8009410 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d115      	bne.n	80093de <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f103 020c 	add.w	r2, r3, #12
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	7812      	ldrb	r2, [r2, #0]
 80093c0:	b2d2      	uxtb	r2, r2
 80093c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	3b01      	subs	r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80093dc:	e018      	b.n	8009410 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093de:	f7fb f973 	bl	80046c8 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d803      	bhi.n	80093f6 <HAL_SPI_Receive+0x15e>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d102      	bne.n	80093fc <HAL_SPI_Receive+0x164>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d109      	bne.n	8009410 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e058      	b.n	80094c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1c4      	bne.n	80093a4 <HAL_SPI_Receive+0x10c>
 800941a:	e038      	b.n	800948e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b01      	cmp	r3, #1
 8009428:	d113      	bne.n	8009452 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009434:	b292      	uxth	r2, r2
 8009436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943c:	1c9a      	adds	r2, r3, #2
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009446:	b29b      	uxth	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009450:	e018      	b.n	8009484 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009452:	f7fb f939 	bl	80046c8 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d803      	bhi.n	800946a <HAL_SPI_Receive+0x1d2>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d102      	bne.n	8009470 <HAL_SPI_Receive+0x1d8>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e01e      	b.n	80094c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1c6      	bne.n	800941c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 fa58 	bl	8009948 <SPI_EndRxTransaction>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e000      	b.n	80094c2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80094c0:	2300      	movs	r3, #0
  }
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b08a      	sub	sp, #40	@ 0x28
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80094d8:	2301      	movs	r3, #1
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094dc:	f7fb f8f4 	bl	80046c8 <HAL_GetTick>
 80094e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80094e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80094f0:	887b      	ldrh	r3, [r7, #2]
 80094f2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094f4:	7ffb      	ldrb	r3, [r7, #31]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d00c      	beq.n	8009514 <HAL_SPI_TransmitReceive+0x4a>
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009500:	d106      	bne.n	8009510 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d102      	bne.n	8009510 <HAL_SPI_TransmitReceive+0x46>
 800950a:	7ffb      	ldrb	r3, [r7, #31]
 800950c:	2b04      	cmp	r3, #4
 800950e:	d001      	beq.n	8009514 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8009510:	2302      	movs	r3, #2
 8009512:	e17f      	b.n	8009814 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <HAL_SPI_TransmitReceive+0x5c>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <HAL_SPI_TransmitReceive+0x5c>
 8009520:	887b      	ldrh	r3, [r7, #2]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e174      	b.n	8009814 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_SPI_TransmitReceive+0x6e>
 8009534:	2302      	movs	r3, #2
 8009536:	e16d      	b.n	8009814 <HAL_SPI_TransmitReceive+0x34a>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b04      	cmp	r3, #4
 800954a:	d003      	beq.n	8009554 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2205      	movs	r2, #5
 8009550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	887a      	ldrh	r2, [r7, #2]
 8009564:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	887a      	ldrh	r2, [r7, #2]
 800956a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	887a      	ldrh	r2, [r7, #2]
 8009576:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	887a      	ldrh	r2, [r7, #2]
 800957c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009594:	2b40      	cmp	r3, #64	@ 0x40
 8009596:	d007      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095b0:	d17e      	bne.n	80096b0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <HAL_SPI_TransmitReceive+0xf6>
 80095ba:	8afb      	ldrh	r3, [r7, #22]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d16c      	bne.n	800969a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c4:	881a      	ldrh	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	1c9a      	adds	r2, r3, #2
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095da:	b29b      	uxth	r3, r3
 80095dc:	3b01      	subs	r3, #1
 80095de:	b29a      	uxth	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095e4:	e059      	b.n	800969a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d11b      	bne.n	800962c <HAL_SPI_TransmitReceive+0x162>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d016      	beq.n	800962c <HAL_SPI_TransmitReceive+0x162>
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	2b01      	cmp	r3, #1
 8009602:	d113      	bne.n	800962c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009608:	881a      	ldrh	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009614:	1c9a      	adds	r2, r3, #2
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800961e:	b29b      	uxth	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009628:	2300      	movs	r3, #0
 800962a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b01      	cmp	r3, #1
 8009638:	d119      	bne.n	800966e <HAL_SPI_TransmitReceive+0x1a4>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d014      	beq.n	800966e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964e:	b292      	uxth	r2, r2
 8009650:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009656:	1c9a      	adds	r2, r3, #2
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800966a:	2301      	movs	r3, #1
 800966c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800966e:	f7fb f82b 	bl	80046c8 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800967a:	429a      	cmp	r2, r3
 800967c:	d80d      	bhi.n	800969a <HAL_SPI_TransmitReceive+0x1d0>
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d009      	beq.n	800969a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e0bc      	b.n	8009814 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800969e:	b29b      	uxth	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1a0      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x11c>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d19b      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x11c>
 80096ae:	e082      	b.n	80097b6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <HAL_SPI_TransmitReceive+0x1f4>
 80096b8:	8afb      	ldrh	r3, [r7, #22]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d171      	bne.n	80097a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	330c      	adds	r3, #12
 80096c8:	7812      	ldrb	r2, [r2, #0]
 80096ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096e4:	e05d      	b.n	80097a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d11c      	bne.n	800972e <HAL_SPI_TransmitReceive+0x264>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d017      	beq.n	800972e <HAL_SPI_TransmitReceive+0x264>
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	2b01      	cmp	r3, #1
 8009702:	d114      	bne.n	800972e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	330c      	adds	r3, #12
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b29a      	uxth	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b01      	cmp	r3, #1
 800973a:	d119      	bne.n	8009770 <HAL_SPI_TransmitReceive+0x2a6>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d014      	beq.n	8009770 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	b2d2      	uxtb	r2, r2
 8009752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009762:	b29b      	uxth	r3, r3
 8009764:	3b01      	subs	r3, #1
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800976c:	2301      	movs	r3, #1
 800976e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009770:	f7fa ffaa 	bl	80046c8 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800977c:	429a      	cmp	r2, r3
 800977e:	d803      	bhi.n	8009788 <HAL_SPI_TransmitReceive+0x2be>
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d102      	bne.n	800978e <HAL_SPI_TransmitReceive+0x2c4>
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	2b00      	cmp	r3, #0
 800978c:	d109      	bne.n	80097a2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e038      	b.n	8009814 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d19c      	bne.n	80096e6 <HAL_SPI_TransmitReceive+0x21c>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d197      	bne.n	80096e6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097b6:	6a3a      	ldr	r2, [r7, #32]
 80097b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 f92a 	bl	8009a14 <SPI_EndRxTxTransaction>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d008      	beq.n	80097d8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2220      	movs	r2, #32
 80097ca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e01d      	b.n	8009814 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097e0:	2300      	movs	r3, #0
 80097e2:	613b      	str	r3, [r7, #16]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	613b      	str	r3, [r7, #16]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e000      	b.n	8009814 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009812:	2300      	movs	r3, #0
  }
}
 8009814:	4618      	mov	r0, r3
 8009816:	3728      	adds	r7, #40	@ 0x28
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800982a:	b2db      	uxtb	r3, r3
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	4613      	mov	r3, r2
 8009846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009848:	f7fa ff3e 	bl	80046c8 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4413      	add	r3, r2
 8009856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009858:	f7fa ff36 	bl	80046c8 <HAL_GetTick>
 800985c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800985e:	4b39      	ldr	r3, [pc, #228]	@ (8009944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	015b      	lsls	r3, r3, #5
 8009864:	0d1b      	lsrs	r3, r3, #20
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	fb02 f303 	mul.w	r3, r2, r3
 800986c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800986e:	e054      	b.n	800991a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009876:	d050      	beq.n	800991a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009878:	f7fa ff26 	bl	80046c8 <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	69fa      	ldr	r2, [r7, #28]
 8009884:	429a      	cmp	r2, r3
 8009886:	d902      	bls.n	800988e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d13d      	bne.n	800990a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800989c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098a6:	d111      	bne.n	80098cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098b0:	d004      	beq.n	80098bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ba:	d107      	bne.n	80098cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d4:	d10f      	bne.n	80098f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e017      	b.n	800993a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	3b01      	subs	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	4013      	ands	r3, r2
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	429a      	cmp	r2, r3
 8009928:	bf0c      	ite	eq
 800992a:	2301      	moveq	r3, #1
 800992c:	2300      	movne	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	429a      	cmp	r2, r3
 8009936:	d19b      	bne.n	8009870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3720      	adds	r7, #32
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	2000007c 	.word	0x2000007c

08009948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800995c:	d111      	bne.n	8009982 <SPI_EndRxTransaction+0x3a>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009966:	d004      	beq.n	8009972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009970:	d107      	bne.n	8009982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009980:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800998a:	d12a      	bne.n	80099e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009994:	d012      	beq.n	80099bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2200      	movs	r2, #0
 800999e:	2180      	movs	r1, #128	@ 0x80
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff ff49 	bl	8009838 <SPI_WaitFlagStateUntilTimeout>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02d      	beq.n	8009a08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b0:	f043 0220 	orr.w	r2, r3, #32
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e026      	b.n	8009a0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2200      	movs	r2, #0
 80099c4:	2101      	movs	r1, #1
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f7ff ff36 	bl	8009838 <SPI_WaitFlagStateUntilTimeout>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01a      	beq.n	8009a08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d6:	f043 0220 	orr.w	r2, r3, #32
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e013      	b.n	8009a0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2200      	movs	r2, #0
 80099ea:	2101      	movs	r1, #1
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f7ff ff23 	bl	8009838 <SPI_WaitFlagStateUntilTimeout>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fc:	f043 0220 	orr.w	r2, r3, #32
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e000      	b.n	8009a0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2201      	movs	r2, #1
 8009a28:	2102      	movs	r1, #2
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7ff ff04 	bl	8009838 <SPI_WaitFlagStateUntilTimeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a3a:	f043 0220 	orr.w	r2, r3, #32
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e032      	b.n	8009aac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a46:	4b1b      	ldr	r3, [pc, #108]	@ (8009ab4 <SPI_EndRxTxTransaction+0xa0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab8 <SPI_EndRxTxTransaction+0xa4>)
 8009a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a50:	0d5b      	lsrs	r3, r3, #21
 8009a52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a56:	fb02 f303 	mul.w	r3, r2, r3
 8009a5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a64:	d112      	bne.n	8009a8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2180      	movs	r1, #128	@ 0x80
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff fee1 	bl	8009838 <SPI_WaitFlagStateUntilTimeout>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d016      	beq.n	8009aaa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a80:	f043 0220 	orr.w	r2, r3, #32
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e00f      	b.n	8009aac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa2:	2b80      	cmp	r3, #128	@ 0x80
 8009aa4:	d0f2      	beq.n	8009a8c <SPI_EndRxTxTransaction+0x78>
 8009aa6:	e000      	b.n	8009aaa <SPI_EndRxTxTransaction+0x96>
        break;
 8009aa8:	bf00      	nop
  }

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	2000007c 	.word	0x2000007c
 8009ab8:	165e9f81 	.word	0x165e9f81

08009abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e041      	b.n	8009b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d106      	bne.n	8009ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fa fd54 	bl	8004590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3304      	adds	r3, #4
 8009af8:	4619      	mov	r1, r3
 8009afa:	4610      	mov	r0, r2
 8009afc:	f000 fae6 	bl	800a0cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d001      	beq.n	8009b74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e046      	b.n	8009c02 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a23      	ldr	r2, [pc, #140]	@ (8009c10 <HAL_TIM_Base_Start+0xb4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d022      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b8e:	d01d      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a1f      	ldr	r2, [pc, #124]	@ (8009c14 <HAL_TIM_Base_Start+0xb8>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d018      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8009c18 <HAL_TIM_Base_Start+0xbc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d013      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8009c1c <HAL_TIM_Base_Start+0xc0>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d00e      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8009c20 <HAL_TIM_Base_Start+0xc4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d009      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a19      	ldr	r2, [pc, #100]	@ (8009c24 <HAL_TIM_Base_Start+0xc8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d004      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a18      	ldr	r2, [pc, #96]	@ (8009c28 <HAL_TIM_Base_Start+0xcc>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d111      	bne.n	8009bf0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b06      	cmp	r3, #6
 8009bdc:	d010      	beq.n	8009c00 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0201 	orr.w	r2, r2, #1
 8009bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bee:	e007      	b.n	8009c00 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40000400 	.word	0x40000400
 8009c18:	40000800 	.word	0x40000800
 8009c1c:	40000c00 	.word	0x40000c00
 8009c20:	40010400 	.word	0x40010400
 8009c24:	40014000 	.word	0x40014000
 8009c28:	40001800 	.word	0x40001800

08009c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d001      	beq.n	8009c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e04e      	b.n	8009ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0201 	orr.w	r2, r2, #1
 8009c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a23      	ldr	r2, [pc, #140]	@ (8009cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d022      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x80>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c6e:	d01d      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x80>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d018      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x80>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8009cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d013      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x80>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a1c      	ldr	r2, [pc, #112]	@ (8009cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00e      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x80>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a1b      	ldr	r2, [pc, #108]	@ (8009d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d009      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x80>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a19      	ldr	r2, [pc, #100]	@ (8009d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d004      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0x80>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a18      	ldr	r2, [pc, #96]	@ (8009d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d111      	bne.n	8009cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0307 	and.w	r3, r3, #7
 8009cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b06      	cmp	r3, #6
 8009cbc:	d010      	beq.n	8009ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f042 0201 	orr.w	r2, r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cce:	e007      	b.n	8009ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0201 	orr.w	r2, r2, #1
 8009cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40010000 	.word	0x40010000
 8009cf4:	40000400 	.word	0x40000400
 8009cf8:	40000800 	.word	0x40000800
 8009cfc:	40000c00 	.word	0x40000c00
 8009d00:	40010400 	.word	0x40010400
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40001800 	.word	0x40001800

08009d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d020      	beq.n	8009d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01b      	beq.n	8009d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f06f 0202 	mvn.w	r2, #2
 8009d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	f003 0303 	and.w	r3, r3, #3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f999 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009d5c:	e005      	b.n	8009d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f98b 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f99c 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f003 0304 	and.w	r3, r3, #4
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d020      	beq.n	8009dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01b      	beq.n	8009dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f06f 0204 	mvn.w	r2, #4
 8009d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2202      	movs	r2, #2
 8009d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f973 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009da8:	e005      	b.n	8009db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f965 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f976 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f003 0308 	and.w	r3, r3, #8
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d020      	beq.n	8009e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f003 0308 	and.w	r3, r3, #8
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01b      	beq.n	8009e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f06f 0208 	mvn.w	r2, #8
 8009dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2204      	movs	r2, #4
 8009dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f94d 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009df4:	e005      	b.n	8009e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f93f 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f950 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f003 0310 	and.w	r3, r3, #16
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d020      	beq.n	8009e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f003 0310 	and.w	r3, r3, #16
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01b      	beq.n	8009e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f06f 0210 	mvn.w	r2, #16
 8009e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2208      	movs	r2, #8
 8009e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f927 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009e40:	e005      	b.n	8009e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f919 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f92a 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00c      	beq.n	8009e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f06f 0201 	mvn.w	r2, #1
 8009e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7fa f854 	bl	8003f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00c      	beq.n	8009e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d007      	beq.n	8009e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fae4 	bl	800a464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00c      	beq.n	8009ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d007      	beq.n	8009ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f8fb 	bl	800a0b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f003 0320 	and.w	r3, r3, #32
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00c      	beq.n	8009ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d007      	beq.n	8009ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0220 	mvn.w	r2, #32
 8009edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fab6 	bl	800a450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_TIM_ConfigClockSource+0x1c>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e0b4      	b.n	800a072 <HAL_TIM_ConfigClockSource+0x186>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f40:	d03e      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0xd4>
 8009f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f46:	f200 8087 	bhi.w	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f4e:	f000 8086 	beq.w	800a05e <HAL_TIM_ConfigClockSource+0x172>
 8009f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f56:	d87f      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f58:	2b70      	cmp	r3, #112	@ 0x70
 8009f5a:	d01a      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0xa6>
 8009f5c:	2b70      	cmp	r3, #112	@ 0x70
 8009f5e:	d87b      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f60:	2b60      	cmp	r3, #96	@ 0x60
 8009f62:	d050      	beq.n	800a006 <HAL_TIM_ConfigClockSource+0x11a>
 8009f64:	2b60      	cmp	r3, #96	@ 0x60
 8009f66:	d877      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f68:	2b50      	cmp	r3, #80	@ 0x50
 8009f6a:	d03c      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8009f6c:	2b50      	cmp	r3, #80	@ 0x50
 8009f6e:	d873      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f70:	2b40      	cmp	r3, #64	@ 0x40
 8009f72:	d058      	beq.n	800a026 <HAL_TIM_ConfigClockSource+0x13a>
 8009f74:	2b40      	cmp	r3, #64	@ 0x40
 8009f76:	d86f      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f78:	2b30      	cmp	r3, #48	@ 0x30
 8009f7a:	d064      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f7c:	2b30      	cmp	r3, #48	@ 0x30
 8009f7e:	d86b      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f80:	2b20      	cmp	r3, #32
 8009f82:	d060      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d867      	bhi.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d05c      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d05a      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0x15a>
 8009f90:	e062      	b.n	800a058 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fa2:	f000 f9b9 	bl	800a318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	609a      	str	r2, [r3, #8]
      break;
 8009fbe:	e04f      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fd0:	f000 f9a2 	bl	800a318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689a      	ldr	r2, [r3, #8]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fe2:	609a      	str	r2, [r3, #8]
      break;
 8009fe4:	e03c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f000 f916 	bl	800a224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2150      	movs	r1, #80	@ 0x50
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 f96f 	bl	800a2e2 <TIM_ITRx_SetConfig>
      break;
 800a004:	e02c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a012:	461a      	mov	r2, r3
 800a014:	f000 f935 	bl	800a282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2160      	movs	r1, #96	@ 0x60
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f95f 	bl	800a2e2 <TIM_ITRx_SetConfig>
      break;
 800a024:	e01c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a032:	461a      	mov	r2, r3
 800a034:	f000 f8f6 	bl	800a224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2140      	movs	r1, #64	@ 0x40
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 f94f 	bl	800a2e2 <TIM_ITRx_SetConfig>
      break;
 800a044:	e00c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f000 f946 	bl	800a2e2 <TIM_ITRx_SetConfig>
      break;
 800a056:	e003      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]
      break;
 800a05c:	e000      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a05e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a096:	bf00      	nop
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a46      	ldr	r2, [pc, #280]	@ (800a1f8 <TIM_Base_SetConfig+0x12c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d013      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ea:	d00f      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a43      	ldr	r2, [pc, #268]	@ (800a1fc <TIM_Base_SetConfig+0x130>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00b      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a42      	ldr	r2, [pc, #264]	@ (800a200 <TIM_Base_SetConfig+0x134>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d007      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a41      	ldr	r2, [pc, #260]	@ (800a204 <TIM_Base_SetConfig+0x138>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d003      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a40      	ldr	r2, [pc, #256]	@ (800a208 <TIM_Base_SetConfig+0x13c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d108      	bne.n	800a11e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a35      	ldr	r2, [pc, #212]	@ (800a1f8 <TIM_Base_SetConfig+0x12c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d02b      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12c:	d027      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a32      	ldr	r2, [pc, #200]	@ (800a1fc <TIM_Base_SetConfig+0x130>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d023      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a31      	ldr	r2, [pc, #196]	@ (800a200 <TIM_Base_SetConfig+0x134>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d01f      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a30      	ldr	r2, [pc, #192]	@ (800a204 <TIM_Base_SetConfig+0x138>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d01b      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a2f      	ldr	r2, [pc, #188]	@ (800a208 <TIM_Base_SetConfig+0x13c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d017      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a2e      	ldr	r2, [pc, #184]	@ (800a20c <TIM_Base_SetConfig+0x140>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d013      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a2d      	ldr	r2, [pc, #180]	@ (800a210 <TIM_Base_SetConfig+0x144>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00f      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a2c      	ldr	r2, [pc, #176]	@ (800a214 <TIM_Base_SetConfig+0x148>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d00b      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a2b      	ldr	r2, [pc, #172]	@ (800a218 <TIM_Base_SetConfig+0x14c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d007      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a2a      	ldr	r2, [pc, #168]	@ (800a21c <TIM_Base_SetConfig+0x150>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d003      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a29      	ldr	r2, [pc, #164]	@ (800a220 <TIM_Base_SetConfig+0x154>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d108      	bne.n	800a190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a10      	ldr	r2, [pc, #64]	@ (800a1f8 <TIM_Base_SetConfig+0x12c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_Base_SetConfig+0xf8>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a12      	ldr	r2, [pc, #72]	@ (800a208 <TIM_Base_SetConfig+0x13c>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d103      	bne.n	800a1cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	691a      	ldr	r2, [r3, #16]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d105      	bne.n	800a1ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f023 0201 	bic.w	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	611a      	str	r2, [r3, #16]
  }
}
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	40010000 	.word	0x40010000
 800a1fc:	40000400 	.word	0x40000400
 800a200:	40000800 	.word	0x40000800
 800a204:	40000c00 	.word	0x40000c00
 800a208:	40010400 	.word	0x40010400
 800a20c:	40014000 	.word	0x40014000
 800a210:	40014400 	.word	0x40014400
 800a214:	40014800 	.word	0x40014800
 800a218:	40001800 	.word	0x40001800
 800a21c:	40001c00 	.word	0x40001c00
 800a220:	40002000 	.word	0x40002000

0800a224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f023 0201 	bic.w	r2, r3, #1
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a24e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f023 030a 	bic.w	r3, r3, #10
 800a260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4313      	orrs	r3, r2
 800a268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	621a      	str	r2, [r3, #32]
}
 800a276:	bf00      	nop
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a282:	b480      	push	{r7}
 800a284:	b087      	sub	sp, #28
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	f023 0210 	bic.w	r2, r3, #16
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	031b      	lsls	r3, r3, #12
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a2be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	011b      	lsls	r3, r3, #4
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	621a      	str	r2, [r3, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	371c      	adds	r7, #28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b085      	sub	sp, #20
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	f043 0307 	orr.w	r3, r3, #7
 800a304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	609a      	str	r2, [r3, #8]
}
 800a30c:	bf00      	nop
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	021a      	lsls	r2, r3, #8
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	431a      	orrs	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4313      	orrs	r3, r2
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	4313      	orrs	r3, r2
 800a344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	609a      	str	r2, [r3, #8]
}
 800a34c:	bf00      	nop
 800a34e:	371c      	adds	r7, #28
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e05a      	b.n	800a426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a21      	ldr	r2, [pc, #132]	@ (800a434 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d022      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3bc:	d01d      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a1d      	ldr	r2, [pc, #116]	@ (800a438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d018      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a43c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d013      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a1a      	ldr	r2, [pc, #104]	@ (800a440 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d00e      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a18      	ldr	r2, [pc, #96]	@ (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d009      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a17      	ldr	r2, [pc, #92]	@ (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d004      	beq.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a15      	ldr	r2, [pc, #84]	@ (800a44c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d10c      	bne.n	800a414 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	4313      	orrs	r3, r2
 800a40a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	40010000 	.word	0x40010000
 800a438:	40000400 	.word	0x40000400
 800a43c:	40000800 	.word	0x40000800
 800a440:	40000c00 	.word	0x40000c00
 800a444:	40010400 	.word	0x40010400
 800a448:	40014000 	.word	0x40014000
 800a44c:	40001800 	.word	0x40001800

0800a450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d123      	bne.n	800a4d2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a492:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	6851      	ldr	r1, [r2, #4]
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	6892      	ldr	r2, [r2, #8]
 800a49e:	4311      	orrs	r1, r2
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	68d2      	ldr	r2, [r2, #12]
 800a4a4:	4311      	orrs	r1, r2
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	6912      	ldr	r2, [r2, #16]
 800a4aa:	4311      	orrs	r1, r2
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	6952      	ldr	r2, [r2, #20]
 800a4b0:	4311      	orrs	r1, r2
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	6992      	ldr	r2, [r2, #24]
 800a4b6:	4311      	orrs	r1, r2
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	69d2      	ldr	r2, [r2, #28]
 800a4bc:	4311      	orrs	r1, r2
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	6a12      	ldr	r2, [r2, #32]
 800a4c2:	4311      	orrs	r1, r2
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	e028      	b.n	800a524 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	69d9      	ldr	r1, [r3, #28]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	4319      	orrs	r1, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	430b      	orrs	r3, r1
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a4f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	6851      	ldr	r1, [r2, #4]
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	6892      	ldr	r2, [r2, #8]
 800a504:	4311      	orrs	r1, r2
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	68d2      	ldr	r2, [r2, #12]
 800a50a:	4311      	orrs	r1, r2
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	6912      	ldr	r2, [r2, #16]
 800a510:	4311      	orrs	r1, r2
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	6952      	ldr	r2, [r2, #20]
 800a516:	4311      	orrs	r1, r2
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	6992      	ldr	r2, [r2, #24]
 800a51c:	430a      	orrs	r2, r1
 800a51e:	431a      	orrs	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a532:	b480      	push	{r7}
 800a534:	b085      	sub	sp, #20
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d128      	bne.n	800a596 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	1e59      	subs	r1, r3, #1
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	3b01      	subs	r3, #1
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	4319      	orrs	r1, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	3b01      	subs	r3, #1
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	4319      	orrs	r1, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	031b      	lsls	r3, r3, #12
 800a56e:	4319      	orrs	r1, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	3b01      	subs	r3, #1
 800a576:	041b      	lsls	r3, r3, #16
 800a578:	4319      	orrs	r1, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	3b01      	subs	r3, #1
 800a580:	051b      	lsls	r3, r3, #20
 800a582:	4319      	orrs	r1, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	3b01      	subs	r3, #1
 800a58a:	061b      	lsls	r3, r3, #24
 800a58c:	430b      	orrs	r3, r1
 800a58e:	431a      	orrs	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	609a      	str	r2, [r3, #8]
 800a594:	e02f      	b.n	800a5f6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a59e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	68d2      	ldr	r2, [r2, #12]
 800a5a6:	3a01      	subs	r2, #1
 800a5a8:	0311      	lsls	r1, r2, #12
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	6952      	ldr	r2, [r2, #20]
 800a5ae:	3a01      	subs	r2, #1
 800a5b0:	0512      	lsls	r2, r2, #20
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	1e59      	subs	r1, r3, #1
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	4319      	orrs	r1, r3
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	4319      	orrs	r1, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	041b      	lsls	r3, r3, #16
 800a5e4:	4319      	orrs	r1, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	061b      	lsls	r3, r3, #24
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	0d9b      	lsrs	r3, r3, #22
 800a61a:	059b      	lsls	r3, r3, #22
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	6811      	ldr	r1, [r2, #0]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	6852      	ldr	r2, [r2, #4]
 800a624:	4311      	orrs	r1, r2
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	6892      	ldr	r2, [r2, #8]
 800a62a:	3a01      	subs	r2, #1
 800a62c:	0152      	lsls	r2, r2, #5
 800a62e:	4311      	orrs	r1, r2
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	68d2      	ldr	r2, [r2, #12]
 800a634:	0252      	lsls	r2, r2, #9
 800a636:	430a      	orrs	r2, r1
 800a638:	431a      	orrs	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a63e:	f7fa f843 	bl	80046c8 <HAL_GetTick>
 800a642:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a644:	e010      	b.n	800a668 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64c:	d00c      	beq.n	800a668 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <FMC_SDRAM_SendCommand+0x60>
 800a654:	f7fa f838 	bl	80046c8 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	429a      	cmp	r2, r3
 800a662:	d201      	bcs.n	800a668 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e006      	b.n	800a676 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b20      	cmp	r3, #32
 800a672:	d0e8      	beq.n	800a646 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a690:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	0052      	lsls	r2, r2, #1
 800a698:	431a      	orrs	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <__cvt>:
 800a6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	ec57 6b10 	vmov	r6, r7, d0
 800a6b4:	2f00      	cmp	r7, #0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	bfbb      	ittet	lt
 800a6be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a6c2:	461f      	movlt	r7, r3
 800a6c4:	2300      	movge	r3, #0
 800a6c6:	232d      	movlt	r3, #45	@ 0x2d
 800a6c8:	700b      	strb	r3, [r1, #0]
 800a6ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a6d0:	4691      	mov	r9, r2
 800a6d2:	f023 0820 	bic.w	r8, r3, #32
 800a6d6:	bfbc      	itt	lt
 800a6d8:	4632      	movlt	r2, r6
 800a6da:	4616      	movlt	r6, r2
 800a6dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6e0:	d005      	beq.n	800a6ee <__cvt+0x42>
 800a6e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a6e6:	d100      	bne.n	800a6ea <__cvt+0x3e>
 800a6e8:	3401      	adds	r4, #1
 800a6ea:	2102      	movs	r1, #2
 800a6ec:	e000      	b.n	800a6f0 <__cvt+0x44>
 800a6ee:	2103      	movs	r1, #3
 800a6f0:	ab03      	add	r3, sp, #12
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	ab02      	add	r3, sp, #8
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	ec47 6b10 	vmov	d0, r6, r7
 800a6fc:	4653      	mov	r3, sl
 800a6fe:	4622      	mov	r2, r4
 800a700:	f001 f876 	bl	800b7f0 <_dtoa_r>
 800a704:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a708:	4605      	mov	r5, r0
 800a70a:	d119      	bne.n	800a740 <__cvt+0x94>
 800a70c:	f019 0f01 	tst.w	r9, #1
 800a710:	d00e      	beq.n	800a730 <__cvt+0x84>
 800a712:	eb00 0904 	add.w	r9, r0, r4
 800a716:	2200      	movs	r2, #0
 800a718:	2300      	movs	r3, #0
 800a71a:	4630      	mov	r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	f7f6 f9e3 	bl	8000ae8 <__aeabi_dcmpeq>
 800a722:	b108      	cbz	r0, 800a728 <__cvt+0x7c>
 800a724:	f8cd 900c 	str.w	r9, [sp, #12]
 800a728:	2230      	movs	r2, #48	@ 0x30
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	454b      	cmp	r3, r9
 800a72e:	d31e      	bcc.n	800a76e <__cvt+0xc2>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a734:	1b5b      	subs	r3, r3, r5
 800a736:	4628      	mov	r0, r5
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	b004      	add	sp, #16
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a744:	eb00 0904 	add.w	r9, r0, r4
 800a748:	d1e5      	bne.n	800a716 <__cvt+0x6a>
 800a74a:	7803      	ldrb	r3, [r0, #0]
 800a74c:	2b30      	cmp	r3, #48	@ 0x30
 800a74e:	d10a      	bne.n	800a766 <__cvt+0xba>
 800a750:	2200      	movs	r2, #0
 800a752:	2300      	movs	r3, #0
 800a754:	4630      	mov	r0, r6
 800a756:	4639      	mov	r1, r7
 800a758:	f7f6 f9c6 	bl	8000ae8 <__aeabi_dcmpeq>
 800a75c:	b918      	cbnz	r0, 800a766 <__cvt+0xba>
 800a75e:	f1c4 0401 	rsb	r4, r4, #1
 800a762:	f8ca 4000 	str.w	r4, [sl]
 800a766:	f8da 3000 	ldr.w	r3, [sl]
 800a76a:	4499      	add	r9, r3
 800a76c:	e7d3      	b.n	800a716 <__cvt+0x6a>
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	9103      	str	r1, [sp, #12]
 800a772:	701a      	strb	r2, [r3, #0]
 800a774:	e7d9      	b.n	800a72a <__cvt+0x7e>

0800a776 <__exponent>:
 800a776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a778:	2900      	cmp	r1, #0
 800a77a:	bfba      	itte	lt
 800a77c:	4249      	neglt	r1, r1
 800a77e:	232d      	movlt	r3, #45	@ 0x2d
 800a780:	232b      	movge	r3, #43	@ 0x2b
 800a782:	2909      	cmp	r1, #9
 800a784:	7002      	strb	r2, [r0, #0]
 800a786:	7043      	strb	r3, [r0, #1]
 800a788:	dd29      	ble.n	800a7de <__exponent+0x68>
 800a78a:	f10d 0307 	add.w	r3, sp, #7
 800a78e:	461d      	mov	r5, r3
 800a790:	270a      	movs	r7, #10
 800a792:	461a      	mov	r2, r3
 800a794:	fbb1 f6f7 	udiv	r6, r1, r7
 800a798:	fb07 1416 	mls	r4, r7, r6, r1
 800a79c:	3430      	adds	r4, #48	@ 0x30
 800a79e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	2c63      	cmp	r4, #99	@ 0x63
 800a7a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	dcf1      	bgt.n	800a792 <__exponent+0x1c>
 800a7ae:	3130      	adds	r1, #48	@ 0x30
 800a7b0:	1e94      	subs	r4, r2, #2
 800a7b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7b6:	1c41      	adds	r1, r0, #1
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	42ab      	cmp	r3, r5
 800a7bc:	d30a      	bcc.n	800a7d4 <__exponent+0x5e>
 800a7be:	f10d 0309 	add.w	r3, sp, #9
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	42ac      	cmp	r4, r5
 800a7c6:	bf88      	it	hi
 800a7c8:	2300      	movhi	r3, #0
 800a7ca:	3302      	adds	r3, #2
 800a7cc:	4403      	add	r3, r0
 800a7ce:	1a18      	subs	r0, r3, r0
 800a7d0:	b003      	add	sp, #12
 800a7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a7d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a7dc:	e7ed      	b.n	800a7ba <__exponent+0x44>
 800a7de:	2330      	movs	r3, #48	@ 0x30
 800a7e0:	3130      	adds	r1, #48	@ 0x30
 800a7e2:	7083      	strb	r3, [r0, #2]
 800a7e4:	70c1      	strb	r1, [r0, #3]
 800a7e6:	1d03      	adds	r3, r0, #4
 800a7e8:	e7f1      	b.n	800a7ce <__exponent+0x58>
	...

0800a7ec <_printf_float>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	b08d      	sub	sp, #52	@ 0x34
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	f000 feef 	bl	800b5e0 <_localeconv_r>
 800a802:	6803      	ldr	r3, [r0, #0]
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	4618      	mov	r0, r3
 800a808:	f7f5 fd42 	bl	8000290 <strlen>
 800a80c:	2300      	movs	r3, #0
 800a80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a810:	f8d8 3000 	ldr.w	r3, [r8]
 800a814:	9005      	str	r0, [sp, #20]
 800a816:	3307      	adds	r3, #7
 800a818:	f023 0307 	bic.w	r3, r3, #7
 800a81c:	f103 0208 	add.w	r2, r3, #8
 800a820:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a824:	f8d4 b000 	ldr.w	fp, [r4]
 800a828:	f8c8 2000 	str.w	r2, [r8]
 800a82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a830:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a834:	9307      	str	r3, [sp, #28]
 800a836:	f8cd 8018 	str.w	r8, [sp, #24]
 800a83a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a83e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a842:	4b9c      	ldr	r3, [pc, #624]	@ (800aab4 <_printf_float+0x2c8>)
 800a844:	f04f 32ff 	mov.w	r2, #4294967295
 800a848:	f7f6 f980 	bl	8000b4c <__aeabi_dcmpun>
 800a84c:	bb70      	cbnz	r0, 800a8ac <_printf_float+0xc0>
 800a84e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a852:	4b98      	ldr	r3, [pc, #608]	@ (800aab4 <_printf_float+0x2c8>)
 800a854:	f04f 32ff 	mov.w	r2, #4294967295
 800a858:	f7f6 f95a 	bl	8000b10 <__aeabi_dcmple>
 800a85c:	bb30      	cbnz	r0, 800a8ac <_printf_float+0xc0>
 800a85e:	2200      	movs	r2, #0
 800a860:	2300      	movs	r3, #0
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f6 f949 	bl	8000afc <__aeabi_dcmplt>
 800a86a:	b110      	cbz	r0, 800a872 <_printf_float+0x86>
 800a86c:	232d      	movs	r3, #45	@ 0x2d
 800a86e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a872:	4a91      	ldr	r2, [pc, #580]	@ (800aab8 <_printf_float+0x2cc>)
 800a874:	4b91      	ldr	r3, [pc, #580]	@ (800aabc <_printf_float+0x2d0>)
 800a876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a87a:	bf94      	ite	ls
 800a87c:	4690      	movls	r8, r2
 800a87e:	4698      	movhi	r8, r3
 800a880:	2303      	movs	r3, #3
 800a882:	6123      	str	r3, [r4, #16]
 800a884:	f02b 0304 	bic.w	r3, fp, #4
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	f04f 0900 	mov.w	r9, #0
 800a88e:	9700      	str	r7, [sp, #0]
 800a890:	4633      	mov	r3, r6
 800a892:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a894:	4621      	mov	r1, r4
 800a896:	4628      	mov	r0, r5
 800a898:	f000 f9d2 	bl	800ac40 <_printf_common>
 800a89c:	3001      	adds	r0, #1
 800a89e:	f040 808d 	bne.w	800a9bc <_printf_float+0x1d0>
 800a8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a6:	b00d      	add	sp, #52	@ 0x34
 800a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	f7f6 f94a 	bl	8000b4c <__aeabi_dcmpun>
 800a8b8:	b140      	cbz	r0, 800a8cc <_printf_float+0xe0>
 800a8ba:	464b      	mov	r3, r9
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bfbc      	itt	lt
 800a8c0:	232d      	movlt	r3, #45	@ 0x2d
 800a8c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a8c6:	4a7e      	ldr	r2, [pc, #504]	@ (800aac0 <_printf_float+0x2d4>)
 800a8c8:	4b7e      	ldr	r3, [pc, #504]	@ (800aac4 <_printf_float+0x2d8>)
 800a8ca:	e7d4      	b.n	800a876 <_printf_float+0x8a>
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a8d2:	9206      	str	r2, [sp, #24]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	d13b      	bne.n	800a950 <_printf_float+0x164>
 800a8d8:	2306      	movs	r3, #6
 800a8da:	6063      	str	r3, [r4, #4]
 800a8dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	6022      	str	r2, [r4, #0]
 800a8e4:	9303      	str	r3, [sp, #12]
 800a8e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a8e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a8ec:	ab09      	add	r3, sp, #36	@ 0x24
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	6861      	ldr	r1, [r4, #4]
 800a8f2:	ec49 8b10 	vmov	d0, r8, r9
 800a8f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f7ff fed6 	bl	800a6ac <__cvt>
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a904:	2b47      	cmp	r3, #71	@ 0x47
 800a906:	4680      	mov	r8, r0
 800a908:	d129      	bne.n	800a95e <_printf_float+0x172>
 800a90a:	1cc8      	adds	r0, r1, #3
 800a90c:	db02      	blt.n	800a914 <_printf_float+0x128>
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	4299      	cmp	r1, r3
 800a912:	dd41      	ble.n	800a998 <_printf_float+0x1ac>
 800a914:	f1aa 0a02 	sub.w	sl, sl, #2
 800a918:	fa5f fa8a 	uxtb.w	sl, sl
 800a91c:	3901      	subs	r1, #1
 800a91e:	4652      	mov	r2, sl
 800a920:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a924:	9109      	str	r1, [sp, #36]	@ 0x24
 800a926:	f7ff ff26 	bl	800a776 <__exponent>
 800a92a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a92c:	1813      	adds	r3, r2, r0
 800a92e:	2a01      	cmp	r2, #1
 800a930:	4681      	mov	r9, r0
 800a932:	6123      	str	r3, [r4, #16]
 800a934:	dc02      	bgt.n	800a93c <_printf_float+0x150>
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	07d2      	lsls	r2, r2, #31
 800a93a:	d501      	bpl.n	800a940 <_printf_float+0x154>
 800a93c:	3301      	adds	r3, #1
 800a93e:	6123      	str	r3, [r4, #16]
 800a940:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a944:	2b00      	cmp	r3, #0
 800a946:	d0a2      	beq.n	800a88e <_printf_float+0xa2>
 800a948:	232d      	movs	r3, #45	@ 0x2d
 800a94a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a94e:	e79e      	b.n	800a88e <_printf_float+0xa2>
 800a950:	9a06      	ldr	r2, [sp, #24]
 800a952:	2a47      	cmp	r2, #71	@ 0x47
 800a954:	d1c2      	bne.n	800a8dc <_printf_float+0xf0>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1c0      	bne.n	800a8dc <_printf_float+0xf0>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e7bd      	b.n	800a8da <_printf_float+0xee>
 800a95e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a962:	d9db      	bls.n	800a91c <_printf_float+0x130>
 800a964:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a968:	d118      	bne.n	800a99c <_printf_float+0x1b0>
 800a96a:	2900      	cmp	r1, #0
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	dd0b      	ble.n	800a988 <_printf_float+0x19c>
 800a970:	6121      	str	r1, [r4, #16]
 800a972:	b913      	cbnz	r3, 800a97a <_printf_float+0x18e>
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	07d0      	lsls	r0, r2, #31
 800a978:	d502      	bpl.n	800a980 <_printf_float+0x194>
 800a97a:	3301      	adds	r3, #1
 800a97c:	440b      	add	r3, r1
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a982:	f04f 0900 	mov.w	r9, #0
 800a986:	e7db      	b.n	800a940 <_printf_float+0x154>
 800a988:	b913      	cbnz	r3, 800a990 <_printf_float+0x1a4>
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	07d2      	lsls	r2, r2, #31
 800a98e:	d501      	bpl.n	800a994 <_printf_float+0x1a8>
 800a990:	3302      	adds	r3, #2
 800a992:	e7f4      	b.n	800a97e <_printf_float+0x192>
 800a994:	2301      	movs	r3, #1
 800a996:	e7f2      	b.n	800a97e <_printf_float+0x192>
 800a998:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	db05      	blt.n	800a9ae <_printf_float+0x1c2>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	6121      	str	r1, [r4, #16]
 800a9a6:	07d8      	lsls	r0, r3, #31
 800a9a8:	d5ea      	bpl.n	800a980 <_printf_float+0x194>
 800a9aa:	1c4b      	adds	r3, r1, #1
 800a9ac:	e7e7      	b.n	800a97e <_printf_float+0x192>
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	bfd4      	ite	le
 800a9b2:	f1c1 0202 	rsble	r2, r1, #2
 800a9b6:	2201      	movgt	r2, #1
 800a9b8:	4413      	add	r3, r2
 800a9ba:	e7e0      	b.n	800a97e <_printf_float+0x192>
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	055a      	lsls	r2, r3, #21
 800a9c0:	d407      	bmi.n	800a9d2 <_printf_float+0x1e6>
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d12b      	bne.n	800aa28 <_printf_float+0x23c>
 800a9d0:	e767      	b.n	800a8a2 <_printf_float+0xb6>
 800a9d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9d6:	f240 80dd 	bls.w	800ab94 <_printf_float+0x3a8>
 800a9da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f7f6 f881 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d033      	beq.n	800aa52 <_printf_float+0x266>
 800a9ea:	4a37      	ldr	r2, [pc, #220]	@ (800aac8 <_printf_float+0x2dc>)
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f43f af54 	beq.w	800a8a2 <_printf_float+0xb6>
 800a9fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a9fe:	4543      	cmp	r3, r8
 800aa00:	db02      	blt.n	800aa08 <_printf_float+0x21c>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	07d8      	lsls	r0, r3, #31
 800aa06:	d50f      	bpl.n	800aa28 <_printf_float+0x23c>
 800aa08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b8      	blx	r7
 800aa12:	3001      	adds	r0, #1
 800aa14:	f43f af45 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa18:	f04f 0900 	mov.w	r9, #0
 800aa1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa20:	f104 0a1a 	add.w	sl, r4, #26
 800aa24:	45c8      	cmp	r8, r9
 800aa26:	dc09      	bgt.n	800aa3c <_printf_float+0x250>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	079b      	lsls	r3, r3, #30
 800aa2c:	f100 8103 	bmi.w	800ac36 <_printf_float+0x44a>
 800aa30:	68e0      	ldr	r0, [r4, #12]
 800aa32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa34:	4298      	cmp	r0, r3
 800aa36:	bfb8      	it	lt
 800aa38:	4618      	movlt	r0, r3
 800aa3a:	e734      	b.n	800a8a6 <_printf_float+0xba>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4652      	mov	r2, sl
 800aa40:	4631      	mov	r1, r6
 800aa42:	4628      	mov	r0, r5
 800aa44:	47b8      	blx	r7
 800aa46:	3001      	adds	r0, #1
 800aa48:	f43f af2b 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa4c:	f109 0901 	add.w	r9, r9, #1
 800aa50:	e7e8      	b.n	800aa24 <_printf_float+0x238>
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dc39      	bgt.n	800aacc <_printf_float+0x2e0>
 800aa58:	4a1b      	ldr	r2, [pc, #108]	@ (800aac8 <_printf_float+0x2dc>)
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4628      	mov	r0, r5
 800aa60:	47b8      	blx	r7
 800aa62:	3001      	adds	r0, #1
 800aa64:	f43f af1d 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa6c:	ea59 0303 	orrs.w	r3, r9, r3
 800aa70:	d102      	bne.n	800aa78 <_printf_float+0x28c>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	07d9      	lsls	r1, r3, #31
 800aa76:	d5d7      	bpl.n	800aa28 <_printf_float+0x23c>
 800aa78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b8      	blx	r7
 800aa82:	3001      	adds	r0, #1
 800aa84:	f43f af0d 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa88:	f04f 0a00 	mov.w	sl, #0
 800aa8c:	f104 0b1a 	add.w	fp, r4, #26
 800aa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa92:	425b      	negs	r3, r3
 800aa94:	4553      	cmp	r3, sl
 800aa96:	dc01      	bgt.n	800aa9c <_printf_float+0x2b0>
 800aa98:	464b      	mov	r3, r9
 800aa9a:	e793      	b.n	800a9c4 <_printf_float+0x1d8>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	465a      	mov	r2, fp
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f43f aefb 	beq.w	800a8a2 <_printf_float+0xb6>
 800aaac:	f10a 0a01 	add.w	sl, sl, #1
 800aab0:	e7ee      	b.n	800aa90 <_printf_float+0x2a4>
 800aab2:	bf00      	nop
 800aab4:	7fefffff 	.word	0x7fefffff
 800aab8:	08011ee0 	.word	0x08011ee0
 800aabc:	08011ee4 	.word	0x08011ee4
 800aac0:	08011ee8 	.word	0x08011ee8
 800aac4:	08011eec 	.word	0x08011eec
 800aac8:	08011ef0 	.word	0x08011ef0
 800aacc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aace:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aad2:	4553      	cmp	r3, sl
 800aad4:	bfa8      	it	ge
 800aad6:	4653      	movge	r3, sl
 800aad8:	2b00      	cmp	r3, #0
 800aada:	4699      	mov	r9, r3
 800aadc:	dc36      	bgt.n	800ab4c <_printf_float+0x360>
 800aade:	f04f 0b00 	mov.w	fp, #0
 800aae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aae6:	f104 021a 	add.w	r2, r4, #26
 800aaea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aaec:	9306      	str	r3, [sp, #24]
 800aaee:	eba3 0309 	sub.w	r3, r3, r9
 800aaf2:	455b      	cmp	r3, fp
 800aaf4:	dc31      	bgt.n	800ab5a <_printf_float+0x36e>
 800aaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf8:	459a      	cmp	sl, r3
 800aafa:	dc3a      	bgt.n	800ab72 <_printf_float+0x386>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	07da      	lsls	r2, r3, #31
 800ab00:	d437      	bmi.n	800ab72 <_printf_float+0x386>
 800ab02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab04:	ebaa 0903 	sub.w	r9, sl, r3
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	ebaa 0303 	sub.w	r3, sl, r3
 800ab0e:	4599      	cmp	r9, r3
 800ab10:	bfa8      	it	ge
 800ab12:	4699      	movge	r9, r3
 800ab14:	f1b9 0f00 	cmp.w	r9, #0
 800ab18:	dc33      	bgt.n	800ab82 <_printf_float+0x396>
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab22:	f104 0b1a 	add.w	fp, r4, #26
 800ab26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab28:	ebaa 0303 	sub.w	r3, sl, r3
 800ab2c:	eba3 0309 	sub.w	r3, r3, r9
 800ab30:	4543      	cmp	r3, r8
 800ab32:	f77f af79 	ble.w	800aa28 <_printf_float+0x23c>
 800ab36:	2301      	movs	r3, #1
 800ab38:	465a      	mov	r2, fp
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	47b8      	blx	r7
 800ab40:	3001      	adds	r0, #1
 800ab42:	f43f aeae 	beq.w	800a8a2 <_printf_float+0xb6>
 800ab46:	f108 0801 	add.w	r8, r8, #1
 800ab4a:	e7ec      	b.n	800ab26 <_printf_float+0x33a>
 800ab4c:	4642      	mov	r2, r8
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b8      	blx	r7
 800ab54:	3001      	adds	r0, #1
 800ab56:	d1c2      	bne.n	800aade <_printf_float+0x2f2>
 800ab58:	e6a3      	b.n	800a8a2 <_printf_float+0xb6>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	9206      	str	r2, [sp, #24]
 800ab62:	47b8      	blx	r7
 800ab64:	3001      	adds	r0, #1
 800ab66:	f43f ae9c 	beq.w	800a8a2 <_printf_float+0xb6>
 800ab6a:	9a06      	ldr	r2, [sp, #24]
 800ab6c:	f10b 0b01 	add.w	fp, fp, #1
 800ab70:	e7bb      	b.n	800aaea <_printf_float+0x2fe>
 800ab72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d1c0      	bne.n	800ab02 <_printf_float+0x316>
 800ab80:	e68f      	b.n	800a8a2 <_printf_float+0xb6>
 800ab82:	9a06      	ldr	r2, [sp, #24]
 800ab84:	464b      	mov	r3, r9
 800ab86:	4442      	add	r2, r8
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	47b8      	blx	r7
 800ab8e:	3001      	adds	r0, #1
 800ab90:	d1c3      	bne.n	800ab1a <_printf_float+0x32e>
 800ab92:	e686      	b.n	800a8a2 <_printf_float+0xb6>
 800ab94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab98:	f1ba 0f01 	cmp.w	sl, #1
 800ab9c:	dc01      	bgt.n	800aba2 <_printf_float+0x3b6>
 800ab9e:	07db      	lsls	r3, r3, #31
 800aba0:	d536      	bpl.n	800ac10 <_printf_float+0x424>
 800aba2:	2301      	movs	r3, #1
 800aba4:	4642      	mov	r2, r8
 800aba6:	4631      	mov	r1, r6
 800aba8:	4628      	mov	r0, r5
 800abaa:	47b8      	blx	r7
 800abac:	3001      	adds	r0, #1
 800abae:	f43f ae78 	beq.w	800a8a2 <_printf_float+0xb6>
 800abb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abb6:	4631      	mov	r1, r6
 800abb8:	4628      	mov	r0, r5
 800abba:	47b8      	blx	r7
 800abbc:	3001      	adds	r0, #1
 800abbe:	f43f ae70 	beq.w	800a8a2 <_printf_float+0xb6>
 800abc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abc6:	2200      	movs	r2, #0
 800abc8:	2300      	movs	r3, #0
 800abca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abce:	f7f5 ff8b 	bl	8000ae8 <__aeabi_dcmpeq>
 800abd2:	b9c0      	cbnz	r0, 800ac06 <_printf_float+0x41a>
 800abd4:	4653      	mov	r3, sl
 800abd6:	f108 0201 	add.w	r2, r8, #1
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	d10c      	bne.n	800abfe <_printf_float+0x412>
 800abe4:	e65d      	b.n	800a8a2 <_printf_float+0xb6>
 800abe6:	2301      	movs	r3, #1
 800abe8:	465a      	mov	r2, fp
 800abea:	4631      	mov	r1, r6
 800abec:	4628      	mov	r0, r5
 800abee:	47b8      	blx	r7
 800abf0:	3001      	adds	r0, #1
 800abf2:	f43f ae56 	beq.w	800a8a2 <_printf_float+0xb6>
 800abf6:	f108 0801 	add.w	r8, r8, #1
 800abfa:	45d0      	cmp	r8, sl
 800abfc:	dbf3      	blt.n	800abe6 <_printf_float+0x3fa>
 800abfe:	464b      	mov	r3, r9
 800ac00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac04:	e6df      	b.n	800a9c6 <_printf_float+0x1da>
 800ac06:	f04f 0800 	mov.w	r8, #0
 800ac0a:	f104 0b1a 	add.w	fp, r4, #26
 800ac0e:	e7f4      	b.n	800abfa <_printf_float+0x40e>
 800ac10:	2301      	movs	r3, #1
 800ac12:	4642      	mov	r2, r8
 800ac14:	e7e1      	b.n	800abda <_printf_float+0x3ee>
 800ac16:	2301      	movs	r3, #1
 800ac18:	464a      	mov	r2, r9
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	f43f ae3e 	beq.w	800a8a2 <_printf_float+0xb6>
 800ac26:	f108 0801 	add.w	r8, r8, #1
 800ac2a:	68e3      	ldr	r3, [r4, #12]
 800ac2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac2e:	1a5b      	subs	r3, r3, r1
 800ac30:	4543      	cmp	r3, r8
 800ac32:	dcf0      	bgt.n	800ac16 <_printf_float+0x42a>
 800ac34:	e6fc      	b.n	800aa30 <_printf_float+0x244>
 800ac36:	f04f 0800 	mov.w	r8, #0
 800ac3a:	f104 0919 	add.w	r9, r4, #25
 800ac3e:	e7f4      	b.n	800ac2a <_printf_float+0x43e>

0800ac40 <_printf_common>:
 800ac40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac44:	4616      	mov	r6, r2
 800ac46:	4698      	mov	r8, r3
 800ac48:	688a      	ldr	r2, [r1, #8]
 800ac4a:	690b      	ldr	r3, [r1, #16]
 800ac4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac50:	4293      	cmp	r3, r2
 800ac52:	bfb8      	it	lt
 800ac54:	4613      	movlt	r3, r2
 800ac56:	6033      	str	r3, [r6, #0]
 800ac58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	b10a      	cbz	r2, 800ac66 <_printf_common+0x26>
 800ac62:	3301      	adds	r3, #1
 800ac64:	6033      	str	r3, [r6, #0]
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	0699      	lsls	r1, r3, #26
 800ac6a:	bf42      	ittt	mi
 800ac6c:	6833      	ldrmi	r3, [r6, #0]
 800ac6e:	3302      	addmi	r3, #2
 800ac70:	6033      	strmi	r3, [r6, #0]
 800ac72:	6825      	ldr	r5, [r4, #0]
 800ac74:	f015 0506 	ands.w	r5, r5, #6
 800ac78:	d106      	bne.n	800ac88 <_printf_common+0x48>
 800ac7a:	f104 0a19 	add.w	sl, r4, #25
 800ac7e:	68e3      	ldr	r3, [r4, #12]
 800ac80:	6832      	ldr	r2, [r6, #0]
 800ac82:	1a9b      	subs	r3, r3, r2
 800ac84:	42ab      	cmp	r3, r5
 800ac86:	dc26      	bgt.n	800acd6 <_printf_common+0x96>
 800ac88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	3b00      	subs	r3, #0
 800ac90:	bf18      	it	ne
 800ac92:	2301      	movne	r3, #1
 800ac94:	0692      	lsls	r2, r2, #26
 800ac96:	d42b      	bmi.n	800acf0 <_printf_common+0xb0>
 800ac98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	4638      	mov	r0, r7
 800aca0:	47c8      	blx	r9
 800aca2:	3001      	adds	r0, #1
 800aca4:	d01e      	beq.n	800ace4 <_printf_common+0xa4>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	6922      	ldr	r2, [r4, #16]
 800acaa:	f003 0306 	and.w	r3, r3, #6
 800acae:	2b04      	cmp	r3, #4
 800acb0:	bf02      	ittt	eq
 800acb2:	68e5      	ldreq	r5, [r4, #12]
 800acb4:	6833      	ldreq	r3, [r6, #0]
 800acb6:	1aed      	subeq	r5, r5, r3
 800acb8:	68a3      	ldr	r3, [r4, #8]
 800acba:	bf0c      	ite	eq
 800acbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acc0:	2500      	movne	r5, #0
 800acc2:	4293      	cmp	r3, r2
 800acc4:	bfc4      	itt	gt
 800acc6:	1a9b      	subgt	r3, r3, r2
 800acc8:	18ed      	addgt	r5, r5, r3
 800acca:	2600      	movs	r6, #0
 800accc:	341a      	adds	r4, #26
 800acce:	42b5      	cmp	r5, r6
 800acd0:	d11a      	bne.n	800ad08 <_printf_common+0xc8>
 800acd2:	2000      	movs	r0, #0
 800acd4:	e008      	b.n	800ace8 <_printf_common+0xa8>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4652      	mov	r2, sl
 800acda:	4641      	mov	r1, r8
 800acdc:	4638      	mov	r0, r7
 800acde:	47c8      	blx	r9
 800ace0:	3001      	adds	r0, #1
 800ace2:	d103      	bne.n	800acec <_printf_common+0xac>
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295
 800ace8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acec:	3501      	adds	r5, #1
 800acee:	e7c6      	b.n	800ac7e <_printf_common+0x3e>
 800acf0:	18e1      	adds	r1, r4, r3
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	2030      	movs	r0, #48	@ 0x30
 800acf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acfa:	4422      	add	r2, r4
 800acfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad04:	3302      	adds	r3, #2
 800ad06:	e7c7      	b.n	800ac98 <_printf_common+0x58>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	4641      	mov	r1, r8
 800ad0e:	4638      	mov	r0, r7
 800ad10:	47c8      	blx	r9
 800ad12:	3001      	adds	r0, #1
 800ad14:	d0e6      	beq.n	800ace4 <_printf_common+0xa4>
 800ad16:	3601      	adds	r6, #1
 800ad18:	e7d9      	b.n	800acce <_printf_common+0x8e>
	...

0800ad1c <_printf_i>:
 800ad1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	7e0f      	ldrb	r7, [r1, #24]
 800ad22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad24:	2f78      	cmp	r7, #120	@ 0x78
 800ad26:	4691      	mov	r9, r2
 800ad28:	4680      	mov	r8, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	469a      	mov	sl, r3
 800ad2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad32:	d807      	bhi.n	800ad44 <_printf_i+0x28>
 800ad34:	2f62      	cmp	r7, #98	@ 0x62
 800ad36:	d80a      	bhi.n	800ad4e <_printf_i+0x32>
 800ad38:	2f00      	cmp	r7, #0
 800ad3a:	f000 80d2 	beq.w	800aee2 <_printf_i+0x1c6>
 800ad3e:	2f58      	cmp	r7, #88	@ 0x58
 800ad40:	f000 80b9 	beq.w	800aeb6 <_printf_i+0x19a>
 800ad44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad4c:	e03a      	b.n	800adc4 <_printf_i+0xa8>
 800ad4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad52:	2b15      	cmp	r3, #21
 800ad54:	d8f6      	bhi.n	800ad44 <_printf_i+0x28>
 800ad56:	a101      	add	r1, pc, #4	@ (adr r1, 800ad5c <_printf_i+0x40>)
 800ad58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad5c:	0800adb5 	.word	0x0800adb5
 800ad60:	0800adc9 	.word	0x0800adc9
 800ad64:	0800ad45 	.word	0x0800ad45
 800ad68:	0800ad45 	.word	0x0800ad45
 800ad6c:	0800ad45 	.word	0x0800ad45
 800ad70:	0800ad45 	.word	0x0800ad45
 800ad74:	0800adc9 	.word	0x0800adc9
 800ad78:	0800ad45 	.word	0x0800ad45
 800ad7c:	0800ad45 	.word	0x0800ad45
 800ad80:	0800ad45 	.word	0x0800ad45
 800ad84:	0800ad45 	.word	0x0800ad45
 800ad88:	0800aec9 	.word	0x0800aec9
 800ad8c:	0800adf3 	.word	0x0800adf3
 800ad90:	0800ae83 	.word	0x0800ae83
 800ad94:	0800ad45 	.word	0x0800ad45
 800ad98:	0800ad45 	.word	0x0800ad45
 800ad9c:	0800aeeb 	.word	0x0800aeeb
 800ada0:	0800ad45 	.word	0x0800ad45
 800ada4:	0800adf3 	.word	0x0800adf3
 800ada8:	0800ad45 	.word	0x0800ad45
 800adac:	0800ad45 	.word	0x0800ad45
 800adb0:	0800ae8b 	.word	0x0800ae8b
 800adb4:	6833      	ldr	r3, [r6, #0]
 800adb6:	1d1a      	adds	r2, r3, #4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6032      	str	r2, [r6, #0]
 800adbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800adc4:	2301      	movs	r3, #1
 800adc6:	e09d      	b.n	800af04 <_printf_i+0x1e8>
 800adc8:	6833      	ldr	r3, [r6, #0]
 800adca:	6820      	ldr	r0, [r4, #0]
 800adcc:	1d19      	adds	r1, r3, #4
 800adce:	6031      	str	r1, [r6, #0]
 800add0:	0606      	lsls	r6, r0, #24
 800add2:	d501      	bpl.n	800add8 <_printf_i+0xbc>
 800add4:	681d      	ldr	r5, [r3, #0]
 800add6:	e003      	b.n	800ade0 <_printf_i+0xc4>
 800add8:	0645      	lsls	r5, r0, #25
 800adda:	d5fb      	bpl.n	800add4 <_printf_i+0xb8>
 800addc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ade0:	2d00      	cmp	r5, #0
 800ade2:	da03      	bge.n	800adec <_printf_i+0xd0>
 800ade4:	232d      	movs	r3, #45	@ 0x2d
 800ade6:	426d      	negs	r5, r5
 800ade8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adec:	4859      	ldr	r0, [pc, #356]	@ (800af54 <_printf_i+0x238>)
 800adee:	230a      	movs	r3, #10
 800adf0:	e011      	b.n	800ae16 <_printf_i+0xfa>
 800adf2:	6821      	ldr	r1, [r4, #0]
 800adf4:	6833      	ldr	r3, [r6, #0]
 800adf6:	0608      	lsls	r0, r1, #24
 800adf8:	f853 5b04 	ldr.w	r5, [r3], #4
 800adfc:	d402      	bmi.n	800ae04 <_printf_i+0xe8>
 800adfe:	0649      	lsls	r1, r1, #25
 800ae00:	bf48      	it	mi
 800ae02:	b2ad      	uxthmi	r5, r5
 800ae04:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae06:	4853      	ldr	r0, [pc, #332]	@ (800af54 <_printf_i+0x238>)
 800ae08:	6033      	str	r3, [r6, #0]
 800ae0a:	bf14      	ite	ne
 800ae0c:	230a      	movne	r3, #10
 800ae0e:	2308      	moveq	r3, #8
 800ae10:	2100      	movs	r1, #0
 800ae12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae16:	6866      	ldr	r6, [r4, #4]
 800ae18:	60a6      	str	r6, [r4, #8]
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	bfa2      	ittt	ge
 800ae1e:	6821      	ldrge	r1, [r4, #0]
 800ae20:	f021 0104 	bicge.w	r1, r1, #4
 800ae24:	6021      	strge	r1, [r4, #0]
 800ae26:	b90d      	cbnz	r5, 800ae2c <_printf_i+0x110>
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	d04b      	beq.n	800aec4 <_printf_i+0x1a8>
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae32:	fb03 5711 	mls	r7, r3, r1, r5
 800ae36:	5dc7      	ldrb	r7, [r0, r7]
 800ae38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae3c:	462f      	mov	r7, r5
 800ae3e:	42bb      	cmp	r3, r7
 800ae40:	460d      	mov	r5, r1
 800ae42:	d9f4      	bls.n	800ae2e <_printf_i+0x112>
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d10b      	bne.n	800ae60 <_printf_i+0x144>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	07df      	lsls	r7, r3, #31
 800ae4c:	d508      	bpl.n	800ae60 <_printf_i+0x144>
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	6861      	ldr	r1, [r4, #4]
 800ae52:	4299      	cmp	r1, r3
 800ae54:	bfde      	ittt	le
 800ae56:	2330      	movle	r3, #48	@ 0x30
 800ae58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae60:	1b92      	subs	r2, r2, r6
 800ae62:	6122      	str	r2, [r4, #16]
 800ae64:	f8cd a000 	str.w	sl, [sp]
 800ae68:	464b      	mov	r3, r9
 800ae6a:	aa03      	add	r2, sp, #12
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4640      	mov	r0, r8
 800ae70:	f7ff fee6 	bl	800ac40 <_printf_common>
 800ae74:	3001      	adds	r0, #1
 800ae76:	d14a      	bne.n	800af0e <_printf_i+0x1f2>
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	b004      	add	sp, #16
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	f043 0320 	orr.w	r3, r3, #32
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	4833      	ldr	r0, [pc, #204]	@ (800af58 <_printf_i+0x23c>)
 800ae8c:	2778      	movs	r7, #120	@ 0x78
 800ae8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	6831      	ldr	r1, [r6, #0]
 800ae96:	061f      	lsls	r7, r3, #24
 800ae98:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae9c:	d402      	bmi.n	800aea4 <_printf_i+0x188>
 800ae9e:	065f      	lsls	r7, r3, #25
 800aea0:	bf48      	it	mi
 800aea2:	b2ad      	uxthmi	r5, r5
 800aea4:	6031      	str	r1, [r6, #0]
 800aea6:	07d9      	lsls	r1, r3, #31
 800aea8:	bf44      	itt	mi
 800aeaa:	f043 0320 	orrmi.w	r3, r3, #32
 800aeae:	6023      	strmi	r3, [r4, #0]
 800aeb0:	b11d      	cbz	r5, 800aeba <_printf_i+0x19e>
 800aeb2:	2310      	movs	r3, #16
 800aeb4:	e7ac      	b.n	800ae10 <_printf_i+0xf4>
 800aeb6:	4827      	ldr	r0, [pc, #156]	@ (800af54 <_printf_i+0x238>)
 800aeb8:	e7e9      	b.n	800ae8e <_printf_i+0x172>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	f023 0320 	bic.w	r3, r3, #32
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	e7f6      	b.n	800aeb2 <_printf_i+0x196>
 800aec4:	4616      	mov	r6, r2
 800aec6:	e7bd      	b.n	800ae44 <_printf_i+0x128>
 800aec8:	6833      	ldr	r3, [r6, #0]
 800aeca:	6825      	ldr	r5, [r4, #0]
 800aecc:	6961      	ldr	r1, [r4, #20]
 800aece:	1d18      	adds	r0, r3, #4
 800aed0:	6030      	str	r0, [r6, #0]
 800aed2:	062e      	lsls	r6, r5, #24
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	d501      	bpl.n	800aedc <_printf_i+0x1c0>
 800aed8:	6019      	str	r1, [r3, #0]
 800aeda:	e002      	b.n	800aee2 <_printf_i+0x1c6>
 800aedc:	0668      	lsls	r0, r5, #25
 800aede:	d5fb      	bpl.n	800aed8 <_printf_i+0x1bc>
 800aee0:	8019      	strh	r1, [r3, #0]
 800aee2:	2300      	movs	r3, #0
 800aee4:	6123      	str	r3, [r4, #16]
 800aee6:	4616      	mov	r6, r2
 800aee8:	e7bc      	b.n	800ae64 <_printf_i+0x148>
 800aeea:	6833      	ldr	r3, [r6, #0]
 800aeec:	1d1a      	adds	r2, r3, #4
 800aeee:	6032      	str	r2, [r6, #0]
 800aef0:	681e      	ldr	r6, [r3, #0]
 800aef2:	6862      	ldr	r2, [r4, #4]
 800aef4:	2100      	movs	r1, #0
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7f5 f97a 	bl	80001f0 <memchr>
 800aefc:	b108      	cbz	r0, 800af02 <_printf_i+0x1e6>
 800aefe:	1b80      	subs	r0, r0, r6
 800af00:	6060      	str	r0, [r4, #4]
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	6123      	str	r3, [r4, #16]
 800af06:	2300      	movs	r3, #0
 800af08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af0c:	e7aa      	b.n	800ae64 <_printf_i+0x148>
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	4632      	mov	r2, r6
 800af12:	4649      	mov	r1, r9
 800af14:	4640      	mov	r0, r8
 800af16:	47d0      	blx	sl
 800af18:	3001      	adds	r0, #1
 800af1a:	d0ad      	beq.n	800ae78 <_printf_i+0x15c>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	079b      	lsls	r3, r3, #30
 800af20:	d413      	bmi.n	800af4a <_printf_i+0x22e>
 800af22:	68e0      	ldr	r0, [r4, #12]
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	4298      	cmp	r0, r3
 800af28:	bfb8      	it	lt
 800af2a:	4618      	movlt	r0, r3
 800af2c:	e7a6      	b.n	800ae7c <_printf_i+0x160>
 800af2e:	2301      	movs	r3, #1
 800af30:	4632      	mov	r2, r6
 800af32:	4649      	mov	r1, r9
 800af34:	4640      	mov	r0, r8
 800af36:	47d0      	blx	sl
 800af38:	3001      	adds	r0, #1
 800af3a:	d09d      	beq.n	800ae78 <_printf_i+0x15c>
 800af3c:	3501      	adds	r5, #1
 800af3e:	68e3      	ldr	r3, [r4, #12]
 800af40:	9903      	ldr	r1, [sp, #12]
 800af42:	1a5b      	subs	r3, r3, r1
 800af44:	42ab      	cmp	r3, r5
 800af46:	dcf2      	bgt.n	800af2e <_printf_i+0x212>
 800af48:	e7eb      	b.n	800af22 <_printf_i+0x206>
 800af4a:	2500      	movs	r5, #0
 800af4c:	f104 0619 	add.w	r6, r4, #25
 800af50:	e7f5      	b.n	800af3e <_printf_i+0x222>
 800af52:	bf00      	nop
 800af54:	08011ef2 	.word	0x08011ef2
 800af58:	08011f03 	.word	0x08011f03

0800af5c <_scanf_float>:
 800af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af60:	b087      	sub	sp, #28
 800af62:	4617      	mov	r7, r2
 800af64:	9303      	str	r3, [sp, #12]
 800af66:	688b      	ldr	r3, [r1, #8]
 800af68:	1e5a      	subs	r2, r3, #1
 800af6a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af6e:	bf81      	itttt	hi
 800af70:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af74:	eb03 0b05 	addhi.w	fp, r3, r5
 800af78:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af7c:	608b      	strhi	r3, [r1, #8]
 800af7e:	680b      	ldr	r3, [r1, #0]
 800af80:	460a      	mov	r2, r1
 800af82:	f04f 0500 	mov.w	r5, #0
 800af86:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800af8a:	f842 3b1c 	str.w	r3, [r2], #28
 800af8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af92:	4680      	mov	r8, r0
 800af94:	460c      	mov	r4, r1
 800af96:	bf98      	it	ls
 800af98:	f04f 0b00 	movls.w	fp, #0
 800af9c:	9201      	str	r2, [sp, #4]
 800af9e:	4616      	mov	r6, r2
 800afa0:	46aa      	mov	sl, r5
 800afa2:	46a9      	mov	r9, r5
 800afa4:	9502      	str	r5, [sp, #8]
 800afa6:	68a2      	ldr	r2, [r4, #8]
 800afa8:	b152      	cbz	r2, 800afc0 <_scanf_float+0x64>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b4e      	cmp	r3, #78	@ 0x4e
 800afb0:	d864      	bhi.n	800b07c <_scanf_float+0x120>
 800afb2:	2b40      	cmp	r3, #64	@ 0x40
 800afb4:	d83c      	bhi.n	800b030 <_scanf_float+0xd4>
 800afb6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800afba:	b2c8      	uxtb	r0, r1
 800afbc:	280e      	cmp	r0, #14
 800afbe:	d93a      	bls.n	800b036 <_scanf_float+0xda>
 800afc0:	f1b9 0f00 	cmp.w	r9, #0
 800afc4:	d003      	beq.n	800afce <_scanf_float+0x72>
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afd2:	f1ba 0f01 	cmp.w	sl, #1
 800afd6:	f200 8117 	bhi.w	800b208 <_scanf_float+0x2ac>
 800afda:	9b01      	ldr	r3, [sp, #4]
 800afdc:	429e      	cmp	r6, r3
 800afde:	f200 8108 	bhi.w	800b1f2 <_scanf_float+0x296>
 800afe2:	2001      	movs	r0, #1
 800afe4:	b007      	add	sp, #28
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800afee:	2a0d      	cmp	r2, #13
 800aff0:	d8e6      	bhi.n	800afc0 <_scanf_float+0x64>
 800aff2:	a101      	add	r1, pc, #4	@ (adr r1, 800aff8 <_scanf_float+0x9c>)
 800aff4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aff8:	0800b13f 	.word	0x0800b13f
 800affc:	0800afc1 	.word	0x0800afc1
 800b000:	0800afc1 	.word	0x0800afc1
 800b004:	0800afc1 	.word	0x0800afc1
 800b008:	0800b19f 	.word	0x0800b19f
 800b00c:	0800b177 	.word	0x0800b177
 800b010:	0800afc1 	.word	0x0800afc1
 800b014:	0800afc1 	.word	0x0800afc1
 800b018:	0800b14d 	.word	0x0800b14d
 800b01c:	0800afc1 	.word	0x0800afc1
 800b020:	0800afc1 	.word	0x0800afc1
 800b024:	0800afc1 	.word	0x0800afc1
 800b028:	0800afc1 	.word	0x0800afc1
 800b02c:	0800b105 	.word	0x0800b105
 800b030:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b034:	e7db      	b.n	800afee <_scanf_float+0x92>
 800b036:	290e      	cmp	r1, #14
 800b038:	d8c2      	bhi.n	800afc0 <_scanf_float+0x64>
 800b03a:	a001      	add	r0, pc, #4	@ (adr r0, 800b040 <_scanf_float+0xe4>)
 800b03c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b040:	0800b0f5 	.word	0x0800b0f5
 800b044:	0800afc1 	.word	0x0800afc1
 800b048:	0800b0f5 	.word	0x0800b0f5
 800b04c:	0800b18b 	.word	0x0800b18b
 800b050:	0800afc1 	.word	0x0800afc1
 800b054:	0800b09d 	.word	0x0800b09d
 800b058:	0800b0db 	.word	0x0800b0db
 800b05c:	0800b0db 	.word	0x0800b0db
 800b060:	0800b0db 	.word	0x0800b0db
 800b064:	0800b0db 	.word	0x0800b0db
 800b068:	0800b0db 	.word	0x0800b0db
 800b06c:	0800b0db 	.word	0x0800b0db
 800b070:	0800b0db 	.word	0x0800b0db
 800b074:	0800b0db 	.word	0x0800b0db
 800b078:	0800b0db 	.word	0x0800b0db
 800b07c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b07e:	d809      	bhi.n	800b094 <_scanf_float+0x138>
 800b080:	2b60      	cmp	r3, #96	@ 0x60
 800b082:	d8b2      	bhi.n	800afea <_scanf_float+0x8e>
 800b084:	2b54      	cmp	r3, #84	@ 0x54
 800b086:	d07b      	beq.n	800b180 <_scanf_float+0x224>
 800b088:	2b59      	cmp	r3, #89	@ 0x59
 800b08a:	d199      	bne.n	800afc0 <_scanf_float+0x64>
 800b08c:	2d07      	cmp	r5, #7
 800b08e:	d197      	bne.n	800afc0 <_scanf_float+0x64>
 800b090:	2508      	movs	r5, #8
 800b092:	e02c      	b.n	800b0ee <_scanf_float+0x192>
 800b094:	2b74      	cmp	r3, #116	@ 0x74
 800b096:	d073      	beq.n	800b180 <_scanf_float+0x224>
 800b098:	2b79      	cmp	r3, #121	@ 0x79
 800b09a:	e7f6      	b.n	800b08a <_scanf_float+0x12e>
 800b09c:	6821      	ldr	r1, [r4, #0]
 800b09e:	05c8      	lsls	r0, r1, #23
 800b0a0:	d51b      	bpl.n	800b0da <_scanf_float+0x17e>
 800b0a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b0a6:	6021      	str	r1, [r4, #0]
 800b0a8:	f109 0901 	add.w	r9, r9, #1
 800b0ac:	f1bb 0f00 	cmp.w	fp, #0
 800b0b0:	d003      	beq.n	800b0ba <_scanf_float+0x15e>
 800b0b2:	3201      	adds	r2, #1
 800b0b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0b8:	60a2      	str	r2, [r4, #8]
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	60a3      	str	r3, [r4, #8]
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	6123      	str	r3, [r4, #16]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	607b      	str	r3, [r7, #4]
 800b0ce:	f340 8087 	ble.w	800b1e0 <_scanf_float+0x284>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	e765      	b.n	800afa6 <_scanf_float+0x4a>
 800b0da:	eb1a 0105 	adds.w	r1, sl, r5
 800b0de:	f47f af6f 	bne.w	800afc0 <_scanf_float+0x64>
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b0e8:	6022      	str	r2, [r4, #0]
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	468a      	mov	sl, r1
 800b0ee:	f806 3b01 	strb.w	r3, [r6], #1
 800b0f2:	e7e2      	b.n	800b0ba <_scanf_float+0x15e>
 800b0f4:	6822      	ldr	r2, [r4, #0]
 800b0f6:	0610      	lsls	r0, r2, #24
 800b0f8:	f57f af62 	bpl.w	800afc0 <_scanf_float+0x64>
 800b0fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b100:	6022      	str	r2, [r4, #0]
 800b102:	e7f4      	b.n	800b0ee <_scanf_float+0x192>
 800b104:	f1ba 0f00 	cmp.w	sl, #0
 800b108:	d10e      	bne.n	800b128 <_scanf_float+0x1cc>
 800b10a:	f1b9 0f00 	cmp.w	r9, #0
 800b10e:	d10e      	bne.n	800b12e <_scanf_float+0x1d2>
 800b110:	6822      	ldr	r2, [r4, #0]
 800b112:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b116:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b11a:	d108      	bne.n	800b12e <_scanf_float+0x1d2>
 800b11c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b120:	6022      	str	r2, [r4, #0]
 800b122:	f04f 0a01 	mov.w	sl, #1
 800b126:	e7e2      	b.n	800b0ee <_scanf_float+0x192>
 800b128:	f1ba 0f02 	cmp.w	sl, #2
 800b12c:	d055      	beq.n	800b1da <_scanf_float+0x27e>
 800b12e:	2d01      	cmp	r5, #1
 800b130:	d002      	beq.n	800b138 <_scanf_float+0x1dc>
 800b132:	2d04      	cmp	r5, #4
 800b134:	f47f af44 	bne.w	800afc0 <_scanf_float+0x64>
 800b138:	3501      	adds	r5, #1
 800b13a:	b2ed      	uxtb	r5, r5
 800b13c:	e7d7      	b.n	800b0ee <_scanf_float+0x192>
 800b13e:	f1ba 0f01 	cmp.w	sl, #1
 800b142:	f47f af3d 	bne.w	800afc0 <_scanf_float+0x64>
 800b146:	f04f 0a02 	mov.w	sl, #2
 800b14a:	e7d0      	b.n	800b0ee <_scanf_float+0x192>
 800b14c:	b97d      	cbnz	r5, 800b16e <_scanf_float+0x212>
 800b14e:	f1b9 0f00 	cmp.w	r9, #0
 800b152:	f47f af38 	bne.w	800afc6 <_scanf_float+0x6a>
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b15c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b160:	f040 8108 	bne.w	800b374 <_scanf_float+0x418>
 800b164:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b168:	6022      	str	r2, [r4, #0]
 800b16a:	2501      	movs	r5, #1
 800b16c:	e7bf      	b.n	800b0ee <_scanf_float+0x192>
 800b16e:	2d03      	cmp	r5, #3
 800b170:	d0e2      	beq.n	800b138 <_scanf_float+0x1dc>
 800b172:	2d05      	cmp	r5, #5
 800b174:	e7de      	b.n	800b134 <_scanf_float+0x1d8>
 800b176:	2d02      	cmp	r5, #2
 800b178:	f47f af22 	bne.w	800afc0 <_scanf_float+0x64>
 800b17c:	2503      	movs	r5, #3
 800b17e:	e7b6      	b.n	800b0ee <_scanf_float+0x192>
 800b180:	2d06      	cmp	r5, #6
 800b182:	f47f af1d 	bne.w	800afc0 <_scanf_float+0x64>
 800b186:	2507      	movs	r5, #7
 800b188:	e7b1      	b.n	800b0ee <_scanf_float+0x192>
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	0591      	lsls	r1, r2, #22
 800b18e:	f57f af17 	bpl.w	800afc0 <_scanf_float+0x64>
 800b192:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b196:	6022      	str	r2, [r4, #0]
 800b198:	f8cd 9008 	str.w	r9, [sp, #8]
 800b19c:	e7a7      	b.n	800b0ee <_scanf_float+0x192>
 800b19e:	6822      	ldr	r2, [r4, #0]
 800b1a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b1a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b1a8:	d006      	beq.n	800b1b8 <_scanf_float+0x25c>
 800b1aa:	0550      	lsls	r0, r2, #21
 800b1ac:	f57f af08 	bpl.w	800afc0 <_scanf_float+0x64>
 800b1b0:	f1b9 0f00 	cmp.w	r9, #0
 800b1b4:	f000 80de 	beq.w	800b374 <_scanf_float+0x418>
 800b1b8:	0591      	lsls	r1, r2, #22
 800b1ba:	bf58      	it	pl
 800b1bc:	9902      	ldrpl	r1, [sp, #8]
 800b1be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1c2:	bf58      	it	pl
 800b1c4:	eba9 0101 	subpl.w	r1, r9, r1
 800b1c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b1cc:	bf58      	it	pl
 800b1ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1d2:	6022      	str	r2, [r4, #0]
 800b1d4:	f04f 0900 	mov.w	r9, #0
 800b1d8:	e789      	b.n	800b0ee <_scanf_float+0x192>
 800b1da:	f04f 0a03 	mov.w	sl, #3
 800b1de:	e786      	b.n	800b0ee <_scanf_float+0x192>
 800b1e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	4798      	blx	r3
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	f43f aedb 	beq.w	800afa6 <_scanf_float+0x4a>
 800b1f0:	e6e6      	b.n	800afc0 <_scanf_float+0x64>
 800b1f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1fa:	463a      	mov	r2, r7
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4798      	blx	r3
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	3b01      	subs	r3, #1
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	e6e8      	b.n	800afda <_scanf_float+0x7e>
 800b208:	1e6b      	subs	r3, r5, #1
 800b20a:	2b06      	cmp	r3, #6
 800b20c:	d824      	bhi.n	800b258 <_scanf_float+0x2fc>
 800b20e:	2d02      	cmp	r5, #2
 800b210:	d836      	bhi.n	800b280 <_scanf_float+0x324>
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	429e      	cmp	r6, r3
 800b216:	f67f aee4 	bls.w	800afe2 <_scanf_float+0x86>
 800b21a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b21e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b222:	463a      	mov	r2, r7
 800b224:	4640      	mov	r0, r8
 800b226:	4798      	blx	r3
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	e7f0      	b.n	800b212 <_scanf_float+0x2b6>
 800b230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b234:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b238:	463a      	mov	r2, r7
 800b23a:	4640      	mov	r0, r8
 800b23c:	4798      	blx	r3
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	3b01      	subs	r3, #1
 800b242:	6123      	str	r3, [r4, #16]
 800b244:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b248:	fa5f fa8a 	uxtb.w	sl, sl
 800b24c:	f1ba 0f02 	cmp.w	sl, #2
 800b250:	d1ee      	bne.n	800b230 <_scanf_float+0x2d4>
 800b252:	3d03      	subs	r5, #3
 800b254:	b2ed      	uxtb	r5, r5
 800b256:	1b76      	subs	r6, r6, r5
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	05da      	lsls	r2, r3, #23
 800b25c:	d530      	bpl.n	800b2c0 <_scanf_float+0x364>
 800b25e:	055b      	lsls	r3, r3, #21
 800b260:	d511      	bpl.n	800b286 <_scanf_float+0x32a>
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	429e      	cmp	r6, r3
 800b266:	f67f aebc 	bls.w	800afe2 <_scanf_float+0x86>
 800b26a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b26e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b272:	463a      	mov	r2, r7
 800b274:	4640      	mov	r0, r8
 800b276:	4798      	blx	r3
 800b278:	6923      	ldr	r3, [r4, #16]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	e7f0      	b.n	800b262 <_scanf_float+0x306>
 800b280:	46aa      	mov	sl, r5
 800b282:	46b3      	mov	fp, r6
 800b284:	e7de      	b.n	800b244 <_scanf_float+0x2e8>
 800b286:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b28a:	6923      	ldr	r3, [r4, #16]
 800b28c:	2965      	cmp	r1, #101	@ 0x65
 800b28e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b292:	f106 35ff 	add.w	r5, r6, #4294967295
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	d00c      	beq.n	800b2b4 <_scanf_float+0x358>
 800b29a:	2945      	cmp	r1, #69	@ 0x45
 800b29c:	d00a      	beq.n	800b2b4 <_scanf_float+0x358>
 800b29e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4798      	blx	r3
 800b2a8:	6923      	ldr	r3, [r4, #16]
 800b2aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	1eb5      	subs	r5, r6, #2
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2b8:	463a      	mov	r2, r7
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4798      	blx	r3
 800b2be:	462e      	mov	r6, r5
 800b2c0:	6822      	ldr	r2, [r4, #0]
 800b2c2:	f012 0210 	ands.w	r2, r2, #16
 800b2c6:	d001      	beq.n	800b2cc <_scanf_float+0x370>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e68b      	b.n	800afe4 <_scanf_float+0x88>
 800b2cc:	7032      	strb	r2, [r6, #0]
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2d8:	d11c      	bne.n	800b314 <_scanf_float+0x3b8>
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	454b      	cmp	r3, r9
 800b2de:	eba3 0209 	sub.w	r2, r3, r9
 800b2e2:	d123      	bne.n	800b32c <_scanf_float+0x3d0>
 800b2e4:	9901      	ldr	r1, [sp, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	f002 fbf9 	bl	800dae0 <_strtod_r>
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	6821      	ldr	r1, [r4, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f011 0f02 	tst.w	r1, #2
 800b2f8:	ec57 6b10 	vmov	r6, r7, d0
 800b2fc:	f103 0204 	add.w	r2, r3, #4
 800b300:	d01f      	beq.n	800b342 <_scanf_float+0x3e6>
 800b302:	9903      	ldr	r1, [sp, #12]
 800b304:	600a      	str	r2, [r1, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	e9c3 6700 	strd	r6, r7, [r3]
 800b30c:	68e3      	ldr	r3, [r4, #12]
 800b30e:	3301      	adds	r3, #1
 800b310:	60e3      	str	r3, [r4, #12]
 800b312:	e7d9      	b.n	800b2c8 <_scanf_float+0x36c>
 800b314:	9b04      	ldr	r3, [sp, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0e4      	beq.n	800b2e4 <_scanf_float+0x388>
 800b31a:	9905      	ldr	r1, [sp, #20]
 800b31c:	230a      	movs	r3, #10
 800b31e:	3101      	adds	r1, #1
 800b320:	4640      	mov	r0, r8
 800b322:	f002 fc5d 	bl	800dbe0 <_strtol_r>
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	9e05      	ldr	r6, [sp, #20]
 800b32a:	1ac2      	subs	r2, r0, r3
 800b32c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b330:	429e      	cmp	r6, r3
 800b332:	bf28      	it	cs
 800b334:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b338:	4910      	ldr	r1, [pc, #64]	@ (800b37c <_scanf_float+0x420>)
 800b33a:	4630      	mov	r0, r6
 800b33c:	f000 f8e4 	bl	800b508 <siprintf>
 800b340:	e7d0      	b.n	800b2e4 <_scanf_float+0x388>
 800b342:	f011 0f04 	tst.w	r1, #4
 800b346:	9903      	ldr	r1, [sp, #12]
 800b348:	600a      	str	r2, [r1, #0]
 800b34a:	d1dc      	bne.n	800b306 <_scanf_float+0x3aa>
 800b34c:	681d      	ldr	r5, [r3, #0]
 800b34e:	4632      	mov	r2, r6
 800b350:	463b      	mov	r3, r7
 800b352:	4630      	mov	r0, r6
 800b354:	4639      	mov	r1, r7
 800b356:	f7f5 fbf9 	bl	8000b4c <__aeabi_dcmpun>
 800b35a:	b128      	cbz	r0, 800b368 <_scanf_float+0x40c>
 800b35c:	4808      	ldr	r0, [pc, #32]	@ (800b380 <_scanf_float+0x424>)
 800b35e:	f000 f9b7 	bl	800b6d0 <nanf>
 800b362:	ed85 0a00 	vstr	s0, [r5]
 800b366:	e7d1      	b.n	800b30c <_scanf_float+0x3b0>
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f5 fc4c 	bl	8000c08 <__aeabi_d2f>
 800b370:	6028      	str	r0, [r5, #0]
 800b372:	e7cb      	b.n	800b30c <_scanf_float+0x3b0>
 800b374:	f04f 0900 	mov.w	r9, #0
 800b378:	e629      	b.n	800afce <_scanf_float+0x72>
 800b37a:	bf00      	nop
 800b37c:	08011f14 	.word	0x08011f14
 800b380:	080122ad 	.word	0x080122ad

0800b384 <std>:
 800b384:	2300      	movs	r3, #0
 800b386:	b510      	push	{r4, lr}
 800b388:	4604      	mov	r4, r0
 800b38a:	e9c0 3300 	strd	r3, r3, [r0]
 800b38e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b392:	6083      	str	r3, [r0, #8]
 800b394:	8181      	strh	r1, [r0, #12]
 800b396:	6643      	str	r3, [r0, #100]	@ 0x64
 800b398:	81c2      	strh	r2, [r0, #14]
 800b39a:	6183      	str	r3, [r0, #24]
 800b39c:	4619      	mov	r1, r3
 800b39e:	2208      	movs	r2, #8
 800b3a0:	305c      	adds	r0, #92	@ 0x5c
 800b3a2:	f000 f914 	bl	800b5ce <memset>
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <std+0x58>)
 800b3a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <std+0x5c>)
 800b3ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <std+0x60>)
 800b3b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e8 <std+0x64>)
 800b3b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ec <std+0x68>)
 800b3b8:	6224      	str	r4, [r4, #32]
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	d006      	beq.n	800b3cc <std+0x48>
 800b3be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3c2:	4294      	cmp	r4, r2
 800b3c4:	d002      	beq.n	800b3cc <std+0x48>
 800b3c6:	33d0      	adds	r3, #208	@ 0xd0
 800b3c8:	429c      	cmp	r4, r3
 800b3ca:	d105      	bne.n	800b3d8 <std+0x54>
 800b3cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d4:	f000 b978 	b.w	800b6c8 <__retarget_lock_init_recursive>
 800b3d8:	bd10      	pop	{r4, pc}
 800b3da:	bf00      	nop
 800b3dc:	0800b549 	.word	0x0800b549
 800b3e0:	0800b56b 	.word	0x0800b56b
 800b3e4:	0800b5a3 	.word	0x0800b5a3
 800b3e8:	0800b5c7 	.word	0x0800b5c7
 800b3ec:	20000bfc 	.word	0x20000bfc

0800b3f0 <stdio_exit_handler>:
 800b3f0:	4a02      	ldr	r2, [pc, #8]	@ (800b3fc <stdio_exit_handler+0xc>)
 800b3f2:	4903      	ldr	r1, [pc, #12]	@ (800b400 <stdio_exit_handler+0x10>)
 800b3f4:	4803      	ldr	r0, [pc, #12]	@ (800b404 <stdio_exit_handler+0x14>)
 800b3f6:	f000 b869 	b.w	800b4cc <_fwalk_sglue>
 800b3fa:	bf00      	nop
 800b3fc:	20000088 	.word	0x20000088
 800b400:	0800df9d 	.word	0x0800df9d
 800b404:	20000098 	.word	0x20000098

0800b408 <cleanup_stdio>:
 800b408:	6841      	ldr	r1, [r0, #4]
 800b40a:	4b0c      	ldr	r3, [pc, #48]	@ (800b43c <cleanup_stdio+0x34>)
 800b40c:	4299      	cmp	r1, r3
 800b40e:	b510      	push	{r4, lr}
 800b410:	4604      	mov	r4, r0
 800b412:	d001      	beq.n	800b418 <cleanup_stdio+0x10>
 800b414:	f002 fdc2 	bl	800df9c <_fflush_r>
 800b418:	68a1      	ldr	r1, [r4, #8]
 800b41a:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <cleanup_stdio+0x38>)
 800b41c:	4299      	cmp	r1, r3
 800b41e:	d002      	beq.n	800b426 <cleanup_stdio+0x1e>
 800b420:	4620      	mov	r0, r4
 800b422:	f002 fdbb 	bl	800df9c <_fflush_r>
 800b426:	68e1      	ldr	r1, [r4, #12]
 800b428:	4b06      	ldr	r3, [pc, #24]	@ (800b444 <cleanup_stdio+0x3c>)
 800b42a:	4299      	cmp	r1, r3
 800b42c:	d004      	beq.n	800b438 <cleanup_stdio+0x30>
 800b42e:	4620      	mov	r0, r4
 800b430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b434:	f002 bdb2 	b.w	800df9c <_fflush_r>
 800b438:	bd10      	pop	{r4, pc}
 800b43a:	bf00      	nop
 800b43c:	20000bfc 	.word	0x20000bfc
 800b440:	20000c64 	.word	0x20000c64
 800b444:	20000ccc 	.word	0x20000ccc

0800b448 <global_stdio_init.part.0>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	4b0b      	ldr	r3, [pc, #44]	@ (800b478 <global_stdio_init.part.0+0x30>)
 800b44c:	4c0b      	ldr	r4, [pc, #44]	@ (800b47c <global_stdio_init.part.0+0x34>)
 800b44e:	4a0c      	ldr	r2, [pc, #48]	@ (800b480 <global_stdio_init.part.0+0x38>)
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	4620      	mov	r0, r4
 800b454:	2200      	movs	r2, #0
 800b456:	2104      	movs	r1, #4
 800b458:	f7ff ff94 	bl	800b384 <std>
 800b45c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b460:	2201      	movs	r2, #1
 800b462:	2109      	movs	r1, #9
 800b464:	f7ff ff8e 	bl	800b384 <std>
 800b468:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b46c:	2202      	movs	r2, #2
 800b46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b472:	2112      	movs	r1, #18
 800b474:	f7ff bf86 	b.w	800b384 <std>
 800b478:	20000d34 	.word	0x20000d34
 800b47c:	20000bfc 	.word	0x20000bfc
 800b480:	0800b3f1 	.word	0x0800b3f1

0800b484 <__sfp_lock_acquire>:
 800b484:	4801      	ldr	r0, [pc, #4]	@ (800b48c <__sfp_lock_acquire+0x8>)
 800b486:	f000 b920 	b.w	800b6ca <__retarget_lock_acquire_recursive>
 800b48a:	bf00      	nop
 800b48c:	20000d3d 	.word	0x20000d3d

0800b490 <__sfp_lock_release>:
 800b490:	4801      	ldr	r0, [pc, #4]	@ (800b498 <__sfp_lock_release+0x8>)
 800b492:	f000 b91b 	b.w	800b6cc <__retarget_lock_release_recursive>
 800b496:	bf00      	nop
 800b498:	20000d3d 	.word	0x20000d3d

0800b49c <__sinit>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4604      	mov	r4, r0
 800b4a0:	f7ff fff0 	bl	800b484 <__sfp_lock_acquire>
 800b4a4:	6a23      	ldr	r3, [r4, #32]
 800b4a6:	b11b      	cbz	r3, 800b4b0 <__sinit+0x14>
 800b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ac:	f7ff bff0 	b.w	800b490 <__sfp_lock_release>
 800b4b0:	4b04      	ldr	r3, [pc, #16]	@ (800b4c4 <__sinit+0x28>)
 800b4b2:	6223      	str	r3, [r4, #32]
 800b4b4:	4b04      	ldr	r3, [pc, #16]	@ (800b4c8 <__sinit+0x2c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1f5      	bne.n	800b4a8 <__sinit+0xc>
 800b4bc:	f7ff ffc4 	bl	800b448 <global_stdio_init.part.0>
 800b4c0:	e7f2      	b.n	800b4a8 <__sinit+0xc>
 800b4c2:	bf00      	nop
 800b4c4:	0800b409 	.word	0x0800b409
 800b4c8:	20000d34 	.word	0x20000d34

0800b4cc <_fwalk_sglue>:
 800b4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	4688      	mov	r8, r1
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	2600      	movs	r6, #0
 800b4d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b4e0:	d505      	bpl.n	800b4ee <_fwalk_sglue+0x22>
 800b4e2:	6824      	ldr	r4, [r4, #0]
 800b4e4:	2c00      	cmp	r4, #0
 800b4e6:	d1f7      	bne.n	800b4d8 <_fwalk_sglue+0xc>
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d907      	bls.n	800b504 <_fwalk_sglue+0x38>
 800b4f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	d003      	beq.n	800b504 <_fwalk_sglue+0x38>
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	4638      	mov	r0, r7
 800b500:	47c0      	blx	r8
 800b502:	4306      	orrs	r6, r0
 800b504:	3568      	adds	r5, #104	@ 0x68
 800b506:	e7e9      	b.n	800b4dc <_fwalk_sglue+0x10>

0800b508 <siprintf>:
 800b508:	b40e      	push	{r1, r2, r3}
 800b50a:	b500      	push	{lr}
 800b50c:	b09c      	sub	sp, #112	@ 0x70
 800b50e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b510:	9002      	str	r0, [sp, #8]
 800b512:	9006      	str	r0, [sp, #24]
 800b514:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b518:	4809      	ldr	r0, [pc, #36]	@ (800b540 <siprintf+0x38>)
 800b51a:	9107      	str	r1, [sp, #28]
 800b51c:	9104      	str	r1, [sp, #16]
 800b51e:	4909      	ldr	r1, [pc, #36]	@ (800b544 <siprintf+0x3c>)
 800b520:	f853 2b04 	ldr.w	r2, [r3], #4
 800b524:	9105      	str	r1, [sp, #20]
 800b526:	6800      	ldr	r0, [r0, #0]
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	a902      	add	r1, sp, #8
 800b52c:	f002 fbb6 	bl	800dc9c <_svfiprintf_r>
 800b530:	9b02      	ldr	r3, [sp, #8]
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	b01c      	add	sp, #112	@ 0x70
 800b538:	f85d eb04 	ldr.w	lr, [sp], #4
 800b53c:	b003      	add	sp, #12
 800b53e:	4770      	bx	lr
 800b540:	20000094 	.word	0x20000094
 800b544:	ffff0208 	.word	0xffff0208

0800b548 <__sread>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	460c      	mov	r4, r1
 800b54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b550:	f000 f86c 	bl	800b62c <_read_r>
 800b554:	2800      	cmp	r0, #0
 800b556:	bfab      	itete	ge
 800b558:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b55a:	89a3      	ldrhlt	r3, [r4, #12]
 800b55c:	181b      	addge	r3, r3, r0
 800b55e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b562:	bfac      	ite	ge
 800b564:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b566:	81a3      	strhlt	r3, [r4, #12]
 800b568:	bd10      	pop	{r4, pc}

0800b56a <__swrite>:
 800b56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56e:	461f      	mov	r7, r3
 800b570:	898b      	ldrh	r3, [r1, #12]
 800b572:	05db      	lsls	r3, r3, #23
 800b574:	4605      	mov	r5, r0
 800b576:	460c      	mov	r4, r1
 800b578:	4616      	mov	r6, r2
 800b57a:	d505      	bpl.n	800b588 <__swrite+0x1e>
 800b57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b580:	2302      	movs	r3, #2
 800b582:	2200      	movs	r2, #0
 800b584:	f000 f840 	bl	800b608 <_lseek_r>
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	4632      	mov	r2, r6
 800b596:	463b      	mov	r3, r7
 800b598:	4628      	mov	r0, r5
 800b59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	f000 b857 	b.w	800b650 <_write_r>

0800b5a2 <__sseek>:
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5aa:	f000 f82d 	bl	800b608 <_lseek_r>
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	bf15      	itete	ne
 800b5b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5be:	81a3      	strheq	r3, [r4, #12]
 800b5c0:	bf18      	it	ne
 800b5c2:	81a3      	strhne	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__sclose>:
 800b5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ca:	f000 b80d 	b.w	800b5e8 <_close_r>

0800b5ce <memset>:
 800b5ce:	4402      	add	r2, r0
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d100      	bne.n	800b5d8 <memset+0xa>
 800b5d6:	4770      	bx	lr
 800b5d8:	f803 1b01 	strb.w	r1, [r3], #1
 800b5dc:	e7f9      	b.n	800b5d2 <memset+0x4>
	...

0800b5e0 <_localeconv_r>:
 800b5e0:	4800      	ldr	r0, [pc, #0]	@ (800b5e4 <_localeconv_r+0x4>)
 800b5e2:	4770      	bx	lr
 800b5e4:	200001d4 	.word	0x200001d4

0800b5e8 <_close_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d06      	ldr	r5, [pc, #24]	@ (800b604 <_close_r+0x1c>)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	f7f8 feb4 	bl	8004360 <_close>
 800b5f8:	1c43      	adds	r3, r0, #1
 800b5fa:	d102      	bne.n	800b602 <_close_r+0x1a>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	b103      	cbz	r3, 800b602 <_close_r+0x1a>
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	bd38      	pop	{r3, r4, r5, pc}
 800b604:	20000d38 	.word	0x20000d38

0800b608 <_lseek_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d07      	ldr	r5, [pc, #28]	@ (800b628 <_lseek_r+0x20>)
 800b60c:	4604      	mov	r4, r0
 800b60e:	4608      	mov	r0, r1
 800b610:	4611      	mov	r1, r2
 800b612:	2200      	movs	r2, #0
 800b614:	602a      	str	r2, [r5, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	f7f8 fec9 	bl	80043ae <_lseek>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_lseek_r+0x1e>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_lseek_r+0x1e>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	20000d38 	.word	0x20000d38

0800b62c <_read_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d07      	ldr	r5, [pc, #28]	@ (800b64c <_read_r+0x20>)
 800b630:	4604      	mov	r4, r0
 800b632:	4608      	mov	r0, r1
 800b634:	4611      	mov	r1, r2
 800b636:	2200      	movs	r2, #0
 800b638:	602a      	str	r2, [r5, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f7f8 fe57 	bl	80042ee <_read>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_read_r+0x1e>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_read_r+0x1e>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20000d38 	.word	0x20000d38

0800b650 <_write_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	@ (800b670 <_write_r+0x20>)
 800b654:	4604      	mov	r4, r0
 800b656:	4608      	mov	r0, r1
 800b658:	4611      	mov	r1, r2
 800b65a:	2200      	movs	r2, #0
 800b65c:	602a      	str	r2, [r5, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	f7f8 fe62 	bl	8004328 <_write>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_write_r+0x1e>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_write_r+0x1e>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	20000d38 	.word	0x20000d38

0800b674 <__errno>:
 800b674:	4b01      	ldr	r3, [pc, #4]	@ (800b67c <__errno+0x8>)
 800b676:	6818      	ldr	r0, [r3, #0]
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	20000094 	.word	0x20000094

0800b680 <__libc_init_array>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	4d0d      	ldr	r5, [pc, #52]	@ (800b6b8 <__libc_init_array+0x38>)
 800b684:	4c0d      	ldr	r4, [pc, #52]	@ (800b6bc <__libc_init_array+0x3c>)
 800b686:	1b64      	subs	r4, r4, r5
 800b688:	10a4      	asrs	r4, r4, #2
 800b68a:	2600      	movs	r6, #0
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	d109      	bne.n	800b6a4 <__libc_init_array+0x24>
 800b690:	4d0b      	ldr	r5, [pc, #44]	@ (800b6c0 <__libc_init_array+0x40>)
 800b692:	4c0c      	ldr	r4, [pc, #48]	@ (800b6c4 <__libc_init_array+0x44>)
 800b694:	f004 f8ac 	bl	800f7f0 <_init>
 800b698:	1b64      	subs	r4, r4, r5
 800b69a:	10a4      	asrs	r4, r4, #2
 800b69c:	2600      	movs	r6, #0
 800b69e:	42a6      	cmp	r6, r4
 800b6a0:	d105      	bne.n	800b6ae <__libc_init_array+0x2e>
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a8:	4798      	blx	r3
 800b6aa:	3601      	adds	r6, #1
 800b6ac:	e7ee      	b.n	800b68c <__libc_init_array+0xc>
 800b6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b2:	4798      	blx	r3
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	e7f2      	b.n	800b69e <__libc_init_array+0x1e>
 800b6b8:	080126e8 	.word	0x080126e8
 800b6bc:	080126e8 	.word	0x080126e8
 800b6c0:	080126e8 	.word	0x080126e8
 800b6c4:	080126ec 	.word	0x080126ec

0800b6c8 <__retarget_lock_init_recursive>:
 800b6c8:	4770      	bx	lr

0800b6ca <__retarget_lock_acquire_recursive>:
 800b6ca:	4770      	bx	lr

0800b6cc <__retarget_lock_release_recursive>:
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <nanf>:
 800b6d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b6d8 <nanf+0x8>
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	7fc00000 	.word	0x7fc00000

0800b6dc <quorem>:
 800b6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	6903      	ldr	r3, [r0, #16]
 800b6e2:	690c      	ldr	r4, [r1, #16]
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	db7e      	blt.n	800b7e8 <quorem+0x10c>
 800b6ea:	3c01      	subs	r4, #1
 800b6ec:	f101 0814 	add.w	r8, r1, #20
 800b6f0:	00a3      	lsls	r3, r4, #2
 800b6f2:	f100 0514 	add.w	r5, r0, #20
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b706:	3301      	adds	r3, #1
 800b708:	429a      	cmp	r2, r3
 800b70a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b70e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b712:	d32e      	bcc.n	800b772 <quorem+0x96>
 800b714:	f04f 0a00 	mov.w	sl, #0
 800b718:	46c4      	mov	ip, r8
 800b71a:	46ae      	mov	lr, r5
 800b71c:	46d3      	mov	fp, sl
 800b71e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b722:	b298      	uxth	r0, r3
 800b724:	fb06 a000 	mla	r0, r6, r0, sl
 800b728:	0c02      	lsrs	r2, r0, #16
 800b72a:	0c1b      	lsrs	r3, r3, #16
 800b72c:	fb06 2303 	mla	r3, r6, r3, r2
 800b730:	f8de 2000 	ldr.w	r2, [lr]
 800b734:	b280      	uxth	r0, r0
 800b736:	b292      	uxth	r2, r2
 800b738:	1a12      	subs	r2, r2, r0
 800b73a:	445a      	add	r2, fp
 800b73c:	f8de 0000 	ldr.w	r0, [lr]
 800b740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b744:	b29b      	uxth	r3, r3
 800b746:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b74a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b74e:	b292      	uxth	r2, r2
 800b750:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b754:	45e1      	cmp	r9, ip
 800b756:	f84e 2b04 	str.w	r2, [lr], #4
 800b75a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b75e:	d2de      	bcs.n	800b71e <quorem+0x42>
 800b760:	9b00      	ldr	r3, [sp, #0]
 800b762:	58eb      	ldr	r3, [r5, r3]
 800b764:	b92b      	cbnz	r3, 800b772 <quorem+0x96>
 800b766:	9b01      	ldr	r3, [sp, #4]
 800b768:	3b04      	subs	r3, #4
 800b76a:	429d      	cmp	r5, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	d32f      	bcc.n	800b7d0 <quorem+0xf4>
 800b770:	613c      	str	r4, [r7, #16]
 800b772:	4638      	mov	r0, r7
 800b774:	f001 f9c4 	bl	800cb00 <__mcmp>
 800b778:	2800      	cmp	r0, #0
 800b77a:	db25      	blt.n	800b7c8 <quorem+0xec>
 800b77c:	4629      	mov	r1, r5
 800b77e:	2000      	movs	r0, #0
 800b780:	f858 2b04 	ldr.w	r2, [r8], #4
 800b784:	f8d1 c000 	ldr.w	ip, [r1]
 800b788:	fa1f fe82 	uxth.w	lr, r2
 800b78c:	fa1f f38c 	uxth.w	r3, ip
 800b790:	eba3 030e 	sub.w	r3, r3, lr
 800b794:	4403      	add	r3, r0
 800b796:	0c12      	lsrs	r2, r2, #16
 800b798:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b79c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a6:	45c1      	cmp	r9, r8
 800b7a8:	f841 3b04 	str.w	r3, [r1], #4
 800b7ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7b0:	d2e6      	bcs.n	800b780 <quorem+0xa4>
 800b7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ba:	b922      	cbnz	r2, 800b7c6 <quorem+0xea>
 800b7bc:	3b04      	subs	r3, #4
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	d30b      	bcc.n	800b7dc <quorem+0x100>
 800b7c4:	613c      	str	r4, [r7, #16]
 800b7c6:	3601      	adds	r6, #1
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	b003      	add	sp, #12
 800b7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d0:	6812      	ldr	r2, [r2, #0]
 800b7d2:	3b04      	subs	r3, #4
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	d1cb      	bne.n	800b770 <quorem+0x94>
 800b7d8:	3c01      	subs	r4, #1
 800b7da:	e7c6      	b.n	800b76a <quorem+0x8e>
 800b7dc:	6812      	ldr	r2, [r2, #0]
 800b7de:	3b04      	subs	r3, #4
 800b7e0:	2a00      	cmp	r2, #0
 800b7e2:	d1ef      	bne.n	800b7c4 <quorem+0xe8>
 800b7e4:	3c01      	subs	r4, #1
 800b7e6:	e7ea      	b.n	800b7be <quorem+0xe2>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	e7ee      	b.n	800b7ca <quorem+0xee>
 800b7ec:	0000      	movs	r0, r0
	...

0800b7f0 <_dtoa_r>:
 800b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	69c7      	ldr	r7, [r0, #28]
 800b7f6:	b099      	sub	sp, #100	@ 0x64
 800b7f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7fc:	ec55 4b10 	vmov	r4, r5, d0
 800b800:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b802:	9109      	str	r1, [sp, #36]	@ 0x24
 800b804:	4683      	mov	fp, r0
 800b806:	920e      	str	r2, [sp, #56]	@ 0x38
 800b808:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b80a:	b97f      	cbnz	r7, 800b82c <_dtoa_r+0x3c>
 800b80c:	2010      	movs	r0, #16
 800b80e:	f000 fdfd 	bl	800c40c <malloc>
 800b812:	4602      	mov	r2, r0
 800b814:	f8cb 001c 	str.w	r0, [fp, #28]
 800b818:	b920      	cbnz	r0, 800b824 <_dtoa_r+0x34>
 800b81a:	4ba7      	ldr	r3, [pc, #668]	@ (800bab8 <_dtoa_r+0x2c8>)
 800b81c:	21ef      	movs	r1, #239	@ 0xef
 800b81e:	48a7      	ldr	r0, [pc, #668]	@ (800babc <_dtoa_r+0x2cc>)
 800b820:	f002 fc36 	bl	800e090 <__assert_func>
 800b824:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b828:	6007      	str	r7, [r0, #0]
 800b82a:	60c7      	str	r7, [r0, #12]
 800b82c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b830:	6819      	ldr	r1, [r3, #0]
 800b832:	b159      	cbz	r1, 800b84c <_dtoa_r+0x5c>
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	604a      	str	r2, [r1, #4]
 800b838:	2301      	movs	r3, #1
 800b83a:	4093      	lsls	r3, r2
 800b83c:	608b      	str	r3, [r1, #8]
 800b83e:	4658      	mov	r0, fp
 800b840:	f000 feda 	bl	800c5f8 <_Bfree>
 800b844:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	1e2b      	subs	r3, r5, #0
 800b84e:	bfb9      	ittee	lt
 800b850:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b854:	9303      	strlt	r3, [sp, #12]
 800b856:	2300      	movge	r3, #0
 800b858:	6033      	strge	r3, [r6, #0]
 800b85a:	9f03      	ldr	r7, [sp, #12]
 800b85c:	4b98      	ldr	r3, [pc, #608]	@ (800bac0 <_dtoa_r+0x2d0>)
 800b85e:	bfbc      	itt	lt
 800b860:	2201      	movlt	r2, #1
 800b862:	6032      	strlt	r2, [r6, #0]
 800b864:	43bb      	bics	r3, r7
 800b866:	d112      	bne.n	800b88e <_dtoa_r+0x9e>
 800b868:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b86a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b874:	4323      	orrs	r3, r4
 800b876:	f000 854d 	beq.w	800c314 <_dtoa_r+0xb24>
 800b87a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b87c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bad4 <_dtoa_r+0x2e4>
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 854f 	beq.w	800c324 <_dtoa_r+0xb34>
 800b886:	f10a 0303 	add.w	r3, sl, #3
 800b88a:	f000 bd49 	b.w	800c320 <_dtoa_r+0xb30>
 800b88e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b892:	2200      	movs	r2, #0
 800b894:	ec51 0b17 	vmov	r0, r1, d7
 800b898:	2300      	movs	r3, #0
 800b89a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b89e:	f7f5 f923 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8a2:	4680      	mov	r8, r0
 800b8a4:	b158      	cbz	r0, 800b8be <_dtoa_r+0xce>
 800b8a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8ae:	b113      	cbz	r3, 800b8b6 <_dtoa_r+0xc6>
 800b8b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8b2:	4b84      	ldr	r3, [pc, #528]	@ (800bac4 <_dtoa_r+0x2d4>)
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bad8 <_dtoa_r+0x2e8>
 800b8ba:	f000 bd33 	b.w	800c324 <_dtoa_r+0xb34>
 800b8be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8c2:	aa16      	add	r2, sp, #88	@ 0x58
 800b8c4:	a917      	add	r1, sp, #92	@ 0x5c
 800b8c6:	4658      	mov	r0, fp
 800b8c8:	f001 fa3a 	bl	800cd40 <__d2b>
 800b8cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b8d0:	4681      	mov	r9, r0
 800b8d2:	2e00      	cmp	r6, #0
 800b8d4:	d077      	beq.n	800b9c6 <_dtoa_r+0x1d6>
 800b8d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b8dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b8e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b8ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	4b74      	ldr	r3, [pc, #464]	@ (800bac8 <_dtoa_r+0x2d8>)
 800b8f6:	f7f4 fcd7 	bl	80002a8 <__aeabi_dsub>
 800b8fa:	a369      	add	r3, pc, #420	@ (adr r3, 800baa0 <_dtoa_r+0x2b0>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f7f4 fe8a 	bl	8000618 <__aeabi_dmul>
 800b904:	a368      	add	r3, pc, #416	@ (adr r3, 800baa8 <_dtoa_r+0x2b8>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	f7f4 fccf 	bl	80002ac <__adddf3>
 800b90e:	4604      	mov	r4, r0
 800b910:	4630      	mov	r0, r6
 800b912:	460d      	mov	r5, r1
 800b914:	f7f4 fe16 	bl	8000544 <__aeabi_i2d>
 800b918:	a365      	add	r3, pc, #404	@ (adr r3, 800bab0 <_dtoa_r+0x2c0>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f7f4 fe7b 	bl	8000618 <__aeabi_dmul>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4620      	mov	r0, r4
 800b928:	4629      	mov	r1, r5
 800b92a:	f7f4 fcbf 	bl	80002ac <__adddf3>
 800b92e:	4604      	mov	r4, r0
 800b930:	460d      	mov	r5, r1
 800b932:	f7f5 f921 	bl	8000b78 <__aeabi_d2iz>
 800b936:	2200      	movs	r2, #0
 800b938:	4607      	mov	r7, r0
 800b93a:	2300      	movs	r3, #0
 800b93c:	4620      	mov	r0, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	f7f5 f8dc 	bl	8000afc <__aeabi_dcmplt>
 800b944:	b140      	cbz	r0, 800b958 <_dtoa_r+0x168>
 800b946:	4638      	mov	r0, r7
 800b948:	f7f4 fdfc 	bl	8000544 <__aeabi_i2d>
 800b94c:	4622      	mov	r2, r4
 800b94e:	462b      	mov	r3, r5
 800b950:	f7f5 f8ca 	bl	8000ae8 <__aeabi_dcmpeq>
 800b954:	b900      	cbnz	r0, 800b958 <_dtoa_r+0x168>
 800b956:	3f01      	subs	r7, #1
 800b958:	2f16      	cmp	r7, #22
 800b95a:	d851      	bhi.n	800ba00 <_dtoa_r+0x210>
 800b95c:	4b5b      	ldr	r3, [pc, #364]	@ (800bacc <_dtoa_r+0x2dc>)
 800b95e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b96a:	f7f5 f8c7 	bl	8000afc <__aeabi_dcmplt>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d048      	beq.n	800ba04 <_dtoa_r+0x214>
 800b972:	3f01      	subs	r7, #1
 800b974:	2300      	movs	r3, #0
 800b976:	9312      	str	r3, [sp, #72]	@ 0x48
 800b978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b97a:	1b9b      	subs	r3, r3, r6
 800b97c:	1e5a      	subs	r2, r3, #1
 800b97e:	bf44      	itt	mi
 800b980:	f1c3 0801 	rsbmi	r8, r3, #1
 800b984:	2300      	movmi	r3, #0
 800b986:	9208      	str	r2, [sp, #32]
 800b988:	bf54      	ite	pl
 800b98a:	f04f 0800 	movpl.w	r8, #0
 800b98e:	9308      	strmi	r3, [sp, #32]
 800b990:	2f00      	cmp	r7, #0
 800b992:	db39      	blt.n	800ba08 <_dtoa_r+0x218>
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b998:	443b      	add	r3, r7
 800b99a:	9308      	str	r3, [sp, #32]
 800b99c:	2300      	movs	r3, #0
 800b99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9a2:	2b09      	cmp	r3, #9
 800b9a4:	d864      	bhi.n	800ba70 <_dtoa_r+0x280>
 800b9a6:	2b05      	cmp	r3, #5
 800b9a8:	bfc4      	itt	gt
 800b9aa:	3b04      	subgt	r3, #4
 800b9ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b0:	f1a3 0302 	sub.w	r3, r3, #2
 800b9b4:	bfcc      	ite	gt
 800b9b6:	2400      	movgt	r4, #0
 800b9b8:	2401      	movle	r4, #1
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d863      	bhi.n	800ba86 <_dtoa_r+0x296>
 800b9be:	e8df f003 	tbb	[pc, r3]
 800b9c2:	372a      	.short	0x372a
 800b9c4:	5535      	.short	0x5535
 800b9c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b9ca:	441e      	add	r6, r3
 800b9cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b9d0:	2b20      	cmp	r3, #32
 800b9d2:	bfc1      	itttt	gt
 800b9d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b9d8:	409f      	lslgt	r7, r3
 800b9da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b9de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b9e2:	bfd6      	itet	le
 800b9e4:	f1c3 0320 	rsble	r3, r3, #32
 800b9e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b9ec:	fa04 f003 	lslle.w	r0, r4, r3
 800b9f0:	f7f4 fd98 	bl	8000524 <__aeabi_ui2d>
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b9fa:	3e01      	subs	r6, #1
 800b9fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b9fe:	e777      	b.n	800b8f0 <_dtoa_r+0x100>
 800ba00:	2301      	movs	r3, #1
 800ba02:	e7b8      	b.n	800b976 <_dtoa_r+0x186>
 800ba04:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba06:	e7b7      	b.n	800b978 <_dtoa_r+0x188>
 800ba08:	427b      	negs	r3, r7
 800ba0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	eba8 0807 	sub.w	r8, r8, r7
 800ba12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba14:	e7c4      	b.n	800b9a0 <_dtoa_r+0x1b0>
 800ba16:	2300      	movs	r3, #0
 800ba18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dc35      	bgt.n	800ba8c <_dtoa_r+0x29c>
 800ba20:	2301      	movs	r3, #1
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	9307      	str	r3, [sp, #28]
 800ba26:	461a      	mov	r2, r3
 800ba28:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba2a:	e00b      	b.n	800ba44 <_dtoa_r+0x254>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e7f3      	b.n	800ba18 <_dtoa_r+0x228>
 800ba30:	2300      	movs	r3, #0
 800ba32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba36:	18fb      	adds	r3, r7, r3
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	9307      	str	r3, [sp, #28]
 800ba40:	bfb8      	it	lt
 800ba42:	2301      	movlt	r3, #1
 800ba44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	2204      	movs	r2, #4
 800ba4c:	f102 0514 	add.w	r5, r2, #20
 800ba50:	429d      	cmp	r5, r3
 800ba52:	d91f      	bls.n	800ba94 <_dtoa_r+0x2a4>
 800ba54:	6041      	str	r1, [r0, #4]
 800ba56:	4658      	mov	r0, fp
 800ba58:	f000 fd8e 	bl	800c578 <_Balloc>
 800ba5c:	4682      	mov	sl, r0
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d13c      	bne.n	800badc <_dtoa_r+0x2ec>
 800ba62:	4b1b      	ldr	r3, [pc, #108]	@ (800bad0 <_dtoa_r+0x2e0>)
 800ba64:	4602      	mov	r2, r0
 800ba66:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba6a:	e6d8      	b.n	800b81e <_dtoa_r+0x2e>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7e0      	b.n	800ba32 <_dtoa_r+0x242>
 800ba70:	2401      	movs	r4, #1
 800ba72:	2300      	movs	r3, #0
 800ba74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba78:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	9307      	str	r3, [sp, #28]
 800ba80:	2200      	movs	r2, #0
 800ba82:	2312      	movs	r3, #18
 800ba84:	e7d0      	b.n	800ba28 <_dtoa_r+0x238>
 800ba86:	2301      	movs	r3, #1
 800ba88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba8a:	e7f5      	b.n	800ba78 <_dtoa_r+0x288>
 800ba8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	9307      	str	r3, [sp, #28]
 800ba92:	e7d7      	b.n	800ba44 <_dtoa_r+0x254>
 800ba94:	3101      	adds	r1, #1
 800ba96:	0052      	lsls	r2, r2, #1
 800ba98:	e7d8      	b.n	800ba4c <_dtoa_r+0x25c>
 800ba9a:	bf00      	nop
 800ba9c:	f3af 8000 	nop.w
 800baa0:	636f4361 	.word	0x636f4361
 800baa4:	3fd287a7 	.word	0x3fd287a7
 800baa8:	8b60c8b3 	.word	0x8b60c8b3
 800baac:	3fc68a28 	.word	0x3fc68a28
 800bab0:	509f79fb 	.word	0x509f79fb
 800bab4:	3fd34413 	.word	0x3fd34413
 800bab8:	08011f26 	.word	0x08011f26
 800babc:	08011f3d 	.word	0x08011f3d
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	08011ef1 	.word	0x08011ef1
 800bac8:	3ff80000 	.word	0x3ff80000
 800bacc:	08012038 	.word	0x08012038
 800bad0:	08011f95 	.word	0x08011f95
 800bad4:	08011f22 	.word	0x08011f22
 800bad8:	08011ef0 	.word	0x08011ef0
 800badc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bae0:	6018      	str	r0, [r3, #0]
 800bae2:	9b07      	ldr	r3, [sp, #28]
 800bae4:	2b0e      	cmp	r3, #14
 800bae6:	f200 80a4 	bhi.w	800bc32 <_dtoa_r+0x442>
 800baea:	2c00      	cmp	r4, #0
 800baec:	f000 80a1 	beq.w	800bc32 <_dtoa_r+0x442>
 800baf0:	2f00      	cmp	r7, #0
 800baf2:	dd33      	ble.n	800bb5c <_dtoa_r+0x36c>
 800baf4:	4bad      	ldr	r3, [pc, #692]	@ (800bdac <_dtoa_r+0x5bc>)
 800baf6:	f007 020f 	and.w	r2, r7, #15
 800bafa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bafe:	ed93 7b00 	vldr	d7, [r3]
 800bb02:	05f8      	lsls	r0, r7, #23
 800bb04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb0c:	d516      	bpl.n	800bb3c <_dtoa_r+0x34c>
 800bb0e:	4ba8      	ldr	r3, [pc, #672]	@ (800bdb0 <_dtoa_r+0x5c0>)
 800bb10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb18:	f7f4 fea8 	bl	800086c <__aeabi_ddiv>
 800bb1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb20:	f004 040f 	and.w	r4, r4, #15
 800bb24:	2603      	movs	r6, #3
 800bb26:	4da2      	ldr	r5, [pc, #648]	@ (800bdb0 <_dtoa_r+0x5c0>)
 800bb28:	b954      	cbnz	r4, 800bb40 <_dtoa_r+0x350>
 800bb2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb32:	f7f4 fe9b 	bl	800086c <__aeabi_ddiv>
 800bb36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb3a:	e028      	b.n	800bb8e <_dtoa_r+0x39e>
 800bb3c:	2602      	movs	r6, #2
 800bb3e:	e7f2      	b.n	800bb26 <_dtoa_r+0x336>
 800bb40:	07e1      	lsls	r1, r4, #31
 800bb42:	d508      	bpl.n	800bb56 <_dtoa_r+0x366>
 800bb44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb4c:	f7f4 fd64 	bl	8000618 <__aeabi_dmul>
 800bb50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb54:	3601      	adds	r6, #1
 800bb56:	1064      	asrs	r4, r4, #1
 800bb58:	3508      	adds	r5, #8
 800bb5a:	e7e5      	b.n	800bb28 <_dtoa_r+0x338>
 800bb5c:	f000 80d2 	beq.w	800bd04 <_dtoa_r+0x514>
 800bb60:	427c      	negs	r4, r7
 800bb62:	4b92      	ldr	r3, [pc, #584]	@ (800bdac <_dtoa_r+0x5bc>)
 800bb64:	4d92      	ldr	r5, [pc, #584]	@ (800bdb0 <_dtoa_r+0x5c0>)
 800bb66:	f004 020f 	and.w	r2, r4, #15
 800bb6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb76:	f7f4 fd4f 	bl	8000618 <__aeabi_dmul>
 800bb7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb7e:	1124      	asrs	r4, r4, #4
 800bb80:	2300      	movs	r3, #0
 800bb82:	2602      	movs	r6, #2
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	f040 80b2 	bne.w	800bcee <_dtoa_r+0x4fe>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1d3      	bne.n	800bb36 <_dtoa_r+0x346>
 800bb8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 80b7 	beq.w	800bd08 <_dtoa_r+0x518>
 800bb9a:	4b86      	ldr	r3, [pc, #536]	@ (800bdb4 <_dtoa_r+0x5c4>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4620      	mov	r0, r4
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7f4 ffab 	bl	8000afc <__aeabi_dcmplt>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f000 80ae 	beq.w	800bd08 <_dtoa_r+0x518>
 800bbac:	9b07      	ldr	r3, [sp, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 80aa 	beq.w	800bd08 <_dtoa_r+0x518>
 800bbb4:	9b00      	ldr	r3, [sp, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	dd37      	ble.n	800bc2a <_dtoa_r+0x43a>
 800bbba:	1e7b      	subs	r3, r7, #1
 800bbbc:	9304      	str	r3, [sp, #16]
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4b7d      	ldr	r3, [pc, #500]	@ (800bdb8 <_dtoa_r+0x5c8>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	f7f4 fd27 	bl	8000618 <__aeabi_dmul>
 800bbca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbce:	9c00      	ldr	r4, [sp, #0]
 800bbd0:	3601      	adds	r6, #1
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7f4 fcb6 	bl	8000544 <__aeabi_i2d>
 800bbd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbdc:	f7f4 fd1c 	bl	8000618 <__aeabi_dmul>
 800bbe0:	4b76      	ldr	r3, [pc, #472]	@ (800bdbc <_dtoa_r+0x5cc>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f7f4 fb62 	bl	80002ac <__adddf3>
 800bbe8:	4605      	mov	r5, r0
 800bbea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bbee:	2c00      	cmp	r4, #0
 800bbf0:	f040 808d 	bne.w	800bd0e <_dtoa_r+0x51e>
 800bbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf8:	4b71      	ldr	r3, [pc, #452]	@ (800bdc0 <_dtoa_r+0x5d0>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f7f4 fb54 	bl	80002a8 <__aeabi_dsub>
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc08:	462a      	mov	r2, r5
 800bc0a:	4633      	mov	r3, r6
 800bc0c:	f7f4 ff94 	bl	8000b38 <__aeabi_dcmpgt>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	f040 828b 	bne.w	800c12c <_dtoa_r+0x93c>
 800bc16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc1a:	462a      	mov	r2, r5
 800bc1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc20:	f7f4 ff6c 	bl	8000afc <__aeabi_dcmplt>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	f040 8128 	bne.w	800be7a <_dtoa_r+0x68a>
 800bc2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f2c0 815a 	blt.w	800beee <_dtoa_r+0x6fe>
 800bc3a:	2f0e      	cmp	r7, #14
 800bc3c:	f300 8157 	bgt.w	800beee <_dtoa_r+0x6fe>
 800bc40:	4b5a      	ldr	r3, [pc, #360]	@ (800bdac <_dtoa_r+0x5bc>)
 800bc42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc46:	ed93 7b00 	vldr	d7, [r3]
 800bc4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	ed8d 7b00 	vstr	d7, [sp]
 800bc52:	da03      	bge.n	800bc5c <_dtoa_r+0x46c>
 800bc54:	9b07      	ldr	r3, [sp, #28]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f340 8101 	ble.w	800be5e <_dtoa_r+0x66e>
 800bc5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc60:	4656      	mov	r6, sl
 800bc62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f4 fdff 	bl	800086c <__aeabi_ddiv>
 800bc6e:	f7f4 ff83 	bl	8000b78 <__aeabi_d2iz>
 800bc72:	4680      	mov	r8, r0
 800bc74:	f7f4 fc66 	bl	8000544 <__aeabi_i2d>
 800bc78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc7c:	f7f4 fccc 	bl	8000618 <__aeabi_dmul>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4620      	mov	r0, r4
 800bc86:	4629      	mov	r1, r5
 800bc88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc8c:	f7f4 fb0c 	bl	80002a8 <__aeabi_dsub>
 800bc90:	f806 4b01 	strb.w	r4, [r6], #1
 800bc94:	9d07      	ldr	r5, [sp, #28]
 800bc96:	eba6 040a 	sub.w	r4, r6, sl
 800bc9a:	42a5      	cmp	r5, r4
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	f040 8117 	bne.w	800bed2 <_dtoa_r+0x6e2>
 800bca4:	f7f4 fb02 	bl	80002ac <__adddf3>
 800bca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcac:	4604      	mov	r4, r0
 800bcae:	460d      	mov	r5, r1
 800bcb0:	f7f4 ff42 	bl	8000b38 <__aeabi_dcmpgt>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	f040 80f9 	bne.w	800beac <_dtoa_r+0x6bc>
 800bcba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	f7f4 ff11 	bl	8000ae8 <__aeabi_dcmpeq>
 800bcc6:	b118      	cbz	r0, 800bcd0 <_dtoa_r+0x4e0>
 800bcc8:	f018 0f01 	tst.w	r8, #1
 800bccc:	f040 80ee 	bne.w	800beac <_dtoa_r+0x6bc>
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	4658      	mov	r0, fp
 800bcd4:	f000 fc90 	bl	800c5f8 <_Bfree>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	7033      	strb	r3, [r6, #0]
 800bcdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcde:	3701      	adds	r7, #1
 800bce0:	601f      	str	r7, [r3, #0]
 800bce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 831d 	beq.w	800c324 <_dtoa_r+0xb34>
 800bcea:	601e      	str	r6, [r3, #0]
 800bcec:	e31a      	b.n	800c324 <_dtoa_r+0xb34>
 800bcee:	07e2      	lsls	r2, r4, #31
 800bcf0:	d505      	bpl.n	800bcfe <_dtoa_r+0x50e>
 800bcf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcf6:	f7f4 fc8f 	bl	8000618 <__aeabi_dmul>
 800bcfa:	3601      	adds	r6, #1
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	1064      	asrs	r4, r4, #1
 800bd00:	3508      	adds	r5, #8
 800bd02:	e73f      	b.n	800bb84 <_dtoa_r+0x394>
 800bd04:	2602      	movs	r6, #2
 800bd06:	e742      	b.n	800bb8e <_dtoa_r+0x39e>
 800bd08:	9c07      	ldr	r4, [sp, #28]
 800bd0a:	9704      	str	r7, [sp, #16]
 800bd0c:	e761      	b.n	800bbd2 <_dtoa_r+0x3e2>
 800bd0e:	4b27      	ldr	r3, [pc, #156]	@ (800bdac <_dtoa_r+0x5bc>)
 800bd10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd1a:	4454      	add	r4, sl
 800bd1c:	2900      	cmp	r1, #0
 800bd1e:	d053      	beq.n	800bdc8 <_dtoa_r+0x5d8>
 800bd20:	4928      	ldr	r1, [pc, #160]	@ (800bdc4 <_dtoa_r+0x5d4>)
 800bd22:	2000      	movs	r0, #0
 800bd24:	f7f4 fda2 	bl	800086c <__aeabi_ddiv>
 800bd28:	4633      	mov	r3, r6
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	f7f4 fabc 	bl	80002a8 <__aeabi_dsub>
 800bd30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd34:	4656      	mov	r6, sl
 800bd36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd3a:	f7f4 ff1d 	bl	8000b78 <__aeabi_d2iz>
 800bd3e:	4605      	mov	r5, r0
 800bd40:	f7f4 fc00 	bl	8000544 <__aeabi_i2d>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd4c:	f7f4 faac 	bl	80002a8 <__aeabi_dsub>
 800bd50:	3530      	adds	r5, #48	@ 0x30
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd5a:	f806 5b01 	strb.w	r5, [r6], #1
 800bd5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd62:	f7f4 fecb 	bl	8000afc <__aeabi_dcmplt>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d171      	bne.n	800be4e <_dtoa_r+0x65e>
 800bd6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd6e:	4911      	ldr	r1, [pc, #68]	@ (800bdb4 <_dtoa_r+0x5c4>)
 800bd70:	2000      	movs	r0, #0
 800bd72:	f7f4 fa99 	bl	80002a8 <__aeabi_dsub>
 800bd76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd7a:	f7f4 febf 	bl	8000afc <__aeabi_dcmplt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f040 8095 	bne.w	800beae <_dtoa_r+0x6be>
 800bd84:	42a6      	cmp	r6, r4
 800bd86:	f43f af50 	beq.w	800bc2a <_dtoa_r+0x43a>
 800bd8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd8e:	4b0a      	ldr	r3, [pc, #40]	@ (800bdb8 <_dtoa_r+0x5c8>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	f7f4 fc41 	bl	8000618 <__aeabi_dmul>
 800bd96:	4b08      	ldr	r3, [pc, #32]	@ (800bdb8 <_dtoa_r+0x5c8>)
 800bd98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda2:	f7f4 fc39 	bl	8000618 <__aeabi_dmul>
 800bda6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdaa:	e7c4      	b.n	800bd36 <_dtoa_r+0x546>
 800bdac:	08012038 	.word	0x08012038
 800bdb0:	08012010 	.word	0x08012010
 800bdb4:	3ff00000 	.word	0x3ff00000
 800bdb8:	40240000 	.word	0x40240000
 800bdbc:	401c0000 	.word	0x401c0000
 800bdc0:	40140000 	.word	0x40140000
 800bdc4:	3fe00000 	.word	0x3fe00000
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f7f4 fc24 	bl	8000618 <__aeabi_dmul>
 800bdd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdd4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bdd6:	4656      	mov	r6, sl
 800bdd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bddc:	f7f4 fecc 	bl	8000b78 <__aeabi_d2iz>
 800bde0:	4605      	mov	r5, r0
 800bde2:	f7f4 fbaf 	bl	8000544 <__aeabi_i2d>
 800bde6:	4602      	mov	r2, r0
 800bde8:	460b      	mov	r3, r1
 800bdea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdee:	f7f4 fa5b 	bl	80002a8 <__aeabi_dsub>
 800bdf2:	3530      	adds	r5, #48	@ 0x30
 800bdf4:	f806 5b01 	strb.w	r5, [r6], #1
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	42a6      	cmp	r6, r4
 800bdfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	d124      	bne.n	800be52 <_dtoa_r+0x662>
 800be08:	4bac      	ldr	r3, [pc, #688]	@ (800c0bc <_dtoa_r+0x8cc>)
 800be0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be0e:	f7f4 fa4d 	bl	80002ac <__adddf3>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1a:	f7f4 fe8d 	bl	8000b38 <__aeabi_dcmpgt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d145      	bne.n	800beae <_dtoa_r+0x6be>
 800be22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be26:	49a5      	ldr	r1, [pc, #660]	@ (800c0bc <_dtoa_r+0x8cc>)
 800be28:	2000      	movs	r0, #0
 800be2a:	f7f4 fa3d 	bl	80002a8 <__aeabi_dsub>
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be36:	f7f4 fe61 	bl	8000afc <__aeabi_dcmplt>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f43f aef5 	beq.w	800bc2a <_dtoa_r+0x43a>
 800be40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be42:	1e73      	subs	r3, r6, #1
 800be44:	9315      	str	r3, [sp, #84]	@ 0x54
 800be46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be4a:	2b30      	cmp	r3, #48	@ 0x30
 800be4c:	d0f8      	beq.n	800be40 <_dtoa_r+0x650>
 800be4e:	9f04      	ldr	r7, [sp, #16]
 800be50:	e73e      	b.n	800bcd0 <_dtoa_r+0x4e0>
 800be52:	4b9b      	ldr	r3, [pc, #620]	@ (800c0c0 <_dtoa_r+0x8d0>)
 800be54:	f7f4 fbe0 	bl	8000618 <__aeabi_dmul>
 800be58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be5c:	e7bc      	b.n	800bdd8 <_dtoa_r+0x5e8>
 800be5e:	d10c      	bne.n	800be7a <_dtoa_r+0x68a>
 800be60:	4b98      	ldr	r3, [pc, #608]	@ (800c0c4 <_dtoa_r+0x8d4>)
 800be62:	2200      	movs	r2, #0
 800be64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be68:	f7f4 fbd6 	bl	8000618 <__aeabi_dmul>
 800be6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be70:	f7f4 fe58 	bl	8000b24 <__aeabi_dcmpge>
 800be74:	2800      	cmp	r0, #0
 800be76:	f000 8157 	beq.w	800c128 <_dtoa_r+0x938>
 800be7a:	2400      	movs	r4, #0
 800be7c:	4625      	mov	r5, r4
 800be7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be80:	43db      	mvns	r3, r3
 800be82:	9304      	str	r3, [sp, #16]
 800be84:	4656      	mov	r6, sl
 800be86:	2700      	movs	r7, #0
 800be88:	4621      	mov	r1, r4
 800be8a:	4658      	mov	r0, fp
 800be8c:	f000 fbb4 	bl	800c5f8 <_Bfree>
 800be90:	2d00      	cmp	r5, #0
 800be92:	d0dc      	beq.n	800be4e <_dtoa_r+0x65e>
 800be94:	b12f      	cbz	r7, 800bea2 <_dtoa_r+0x6b2>
 800be96:	42af      	cmp	r7, r5
 800be98:	d003      	beq.n	800bea2 <_dtoa_r+0x6b2>
 800be9a:	4639      	mov	r1, r7
 800be9c:	4658      	mov	r0, fp
 800be9e:	f000 fbab 	bl	800c5f8 <_Bfree>
 800bea2:	4629      	mov	r1, r5
 800bea4:	4658      	mov	r0, fp
 800bea6:	f000 fba7 	bl	800c5f8 <_Bfree>
 800beaa:	e7d0      	b.n	800be4e <_dtoa_r+0x65e>
 800beac:	9704      	str	r7, [sp, #16]
 800beae:	4633      	mov	r3, r6
 800beb0:	461e      	mov	r6, r3
 800beb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beb6:	2a39      	cmp	r2, #57	@ 0x39
 800beb8:	d107      	bne.n	800beca <_dtoa_r+0x6da>
 800beba:	459a      	cmp	sl, r3
 800bebc:	d1f8      	bne.n	800beb0 <_dtoa_r+0x6c0>
 800bebe:	9a04      	ldr	r2, [sp, #16]
 800bec0:	3201      	adds	r2, #1
 800bec2:	9204      	str	r2, [sp, #16]
 800bec4:	2230      	movs	r2, #48	@ 0x30
 800bec6:	f88a 2000 	strb.w	r2, [sl]
 800beca:	781a      	ldrb	r2, [r3, #0]
 800becc:	3201      	adds	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	e7bd      	b.n	800be4e <_dtoa_r+0x65e>
 800bed2:	4b7b      	ldr	r3, [pc, #492]	@ (800c0c0 <_dtoa_r+0x8d0>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	f7f4 fb9f 	bl	8000618 <__aeabi_dmul>
 800beda:	2200      	movs	r2, #0
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	460d      	mov	r5, r1
 800bee2:	f7f4 fe01 	bl	8000ae8 <__aeabi_dcmpeq>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f43f aebb 	beq.w	800bc62 <_dtoa_r+0x472>
 800beec:	e6f0      	b.n	800bcd0 <_dtoa_r+0x4e0>
 800beee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	f000 80db 	beq.w	800c0ac <_dtoa_r+0x8bc>
 800bef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bef8:	2a01      	cmp	r2, #1
 800befa:	f300 80bf 	bgt.w	800c07c <_dtoa_r+0x88c>
 800befe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	f000 80b7 	beq.w	800c074 <_dtoa_r+0x884>
 800bf06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf0c:	4646      	mov	r6, r8
 800bf0e:	9a08      	ldr	r2, [sp, #32]
 800bf10:	2101      	movs	r1, #1
 800bf12:	441a      	add	r2, r3
 800bf14:	4658      	mov	r0, fp
 800bf16:	4498      	add	r8, r3
 800bf18:	9208      	str	r2, [sp, #32]
 800bf1a:	f000 fc6b 	bl	800c7f4 <__i2b>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	b15e      	cbz	r6, 800bf3a <_dtoa_r+0x74a>
 800bf22:	9b08      	ldr	r3, [sp, #32]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dd08      	ble.n	800bf3a <_dtoa_r+0x74a>
 800bf28:	42b3      	cmp	r3, r6
 800bf2a:	9a08      	ldr	r2, [sp, #32]
 800bf2c:	bfa8      	it	ge
 800bf2e:	4633      	movge	r3, r6
 800bf30:	eba8 0803 	sub.w	r8, r8, r3
 800bf34:	1af6      	subs	r6, r6, r3
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	9308      	str	r3, [sp, #32]
 800bf3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf3c:	b1f3      	cbz	r3, 800bf7c <_dtoa_r+0x78c>
 800bf3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 80b7 	beq.w	800c0b4 <_dtoa_r+0x8c4>
 800bf46:	b18c      	cbz	r4, 800bf6c <_dtoa_r+0x77c>
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	f000 fd11 	bl	800c974 <__pow5mult>
 800bf52:	464a      	mov	r2, r9
 800bf54:	4601      	mov	r1, r0
 800bf56:	4605      	mov	r5, r0
 800bf58:	4658      	mov	r0, fp
 800bf5a:	f000 fc61 	bl	800c820 <__multiply>
 800bf5e:	4649      	mov	r1, r9
 800bf60:	9004      	str	r0, [sp, #16]
 800bf62:	4658      	mov	r0, fp
 800bf64:	f000 fb48 	bl	800c5f8 <_Bfree>
 800bf68:	9b04      	ldr	r3, [sp, #16]
 800bf6a:	4699      	mov	r9, r3
 800bf6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6e:	1b1a      	subs	r2, r3, r4
 800bf70:	d004      	beq.n	800bf7c <_dtoa_r+0x78c>
 800bf72:	4649      	mov	r1, r9
 800bf74:	4658      	mov	r0, fp
 800bf76:	f000 fcfd 	bl	800c974 <__pow5mult>
 800bf7a:	4681      	mov	r9, r0
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	4658      	mov	r0, fp
 800bf80:	f000 fc38 	bl	800c7f4 <__i2b>
 800bf84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf86:	4604      	mov	r4, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 81cf 	beq.w	800c32c <_dtoa_r+0xb3c>
 800bf8e:	461a      	mov	r2, r3
 800bf90:	4601      	mov	r1, r0
 800bf92:	4658      	mov	r0, fp
 800bf94:	f000 fcee 	bl	800c974 <__pow5mult>
 800bf98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	f300 8095 	bgt.w	800c0cc <_dtoa_r+0x8dc>
 800bfa2:	9b02      	ldr	r3, [sp, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f040 8087 	bne.w	800c0b8 <_dtoa_r+0x8c8>
 800bfaa:	9b03      	ldr	r3, [sp, #12]
 800bfac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f040 8089 	bne.w	800c0c8 <_dtoa_r+0x8d8>
 800bfb6:	9b03      	ldr	r3, [sp, #12]
 800bfb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfbc:	0d1b      	lsrs	r3, r3, #20
 800bfbe:	051b      	lsls	r3, r3, #20
 800bfc0:	b12b      	cbz	r3, 800bfce <_dtoa_r+0x7de>
 800bfc2:	9b08      	ldr	r3, [sp, #32]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	9308      	str	r3, [sp, #32]
 800bfc8:	f108 0801 	add.w	r8, r8, #1
 800bfcc:	2301      	movs	r3, #1
 800bfce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 81b0 	beq.w	800c338 <_dtoa_r+0xb48>
 800bfd8:	6923      	ldr	r3, [r4, #16]
 800bfda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfde:	6918      	ldr	r0, [r3, #16]
 800bfe0:	f000 fbbc 	bl	800c75c <__hi0bits>
 800bfe4:	f1c0 0020 	rsb	r0, r0, #32
 800bfe8:	9b08      	ldr	r3, [sp, #32]
 800bfea:	4418      	add	r0, r3
 800bfec:	f010 001f 	ands.w	r0, r0, #31
 800bff0:	d077      	beq.n	800c0e2 <_dtoa_r+0x8f2>
 800bff2:	f1c0 0320 	rsb	r3, r0, #32
 800bff6:	2b04      	cmp	r3, #4
 800bff8:	dd6b      	ble.n	800c0d2 <_dtoa_r+0x8e2>
 800bffa:	9b08      	ldr	r3, [sp, #32]
 800bffc:	f1c0 001c 	rsb	r0, r0, #28
 800c000:	4403      	add	r3, r0
 800c002:	4480      	add	r8, r0
 800c004:	4406      	add	r6, r0
 800c006:	9308      	str	r3, [sp, #32]
 800c008:	f1b8 0f00 	cmp.w	r8, #0
 800c00c:	dd05      	ble.n	800c01a <_dtoa_r+0x82a>
 800c00e:	4649      	mov	r1, r9
 800c010:	4642      	mov	r2, r8
 800c012:	4658      	mov	r0, fp
 800c014:	f000 fd08 	bl	800ca28 <__lshift>
 800c018:	4681      	mov	r9, r0
 800c01a:	9b08      	ldr	r3, [sp, #32]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	dd05      	ble.n	800c02c <_dtoa_r+0x83c>
 800c020:	4621      	mov	r1, r4
 800c022:	461a      	mov	r2, r3
 800c024:	4658      	mov	r0, fp
 800c026:	f000 fcff 	bl	800ca28 <__lshift>
 800c02a:	4604      	mov	r4, r0
 800c02c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d059      	beq.n	800c0e6 <_dtoa_r+0x8f6>
 800c032:	4621      	mov	r1, r4
 800c034:	4648      	mov	r0, r9
 800c036:	f000 fd63 	bl	800cb00 <__mcmp>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	da53      	bge.n	800c0e6 <_dtoa_r+0x8f6>
 800c03e:	1e7b      	subs	r3, r7, #1
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	4649      	mov	r1, r9
 800c044:	2300      	movs	r3, #0
 800c046:	220a      	movs	r2, #10
 800c048:	4658      	mov	r0, fp
 800c04a:	f000 faf7 	bl	800c63c <__multadd>
 800c04e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c050:	4681      	mov	r9, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 8172 	beq.w	800c33c <_dtoa_r+0xb4c>
 800c058:	2300      	movs	r3, #0
 800c05a:	4629      	mov	r1, r5
 800c05c:	220a      	movs	r2, #10
 800c05e:	4658      	mov	r0, fp
 800c060:	f000 faec 	bl	800c63c <__multadd>
 800c064:	9b00      	ldr	r3, [sp, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	4605      	mov	r5, r0
 800c06a:	dc67      	bgt.n	800c13c <_dtoa_r+0x94c>
 800c06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06e:	2b02      	cmp	r3, #2
 800c070:	dc41      	bgt.n	800c0f6 <_dtoa_r+0x906>
 800c072:	e063      	b.n	800c13c <_dtoa_r+0x94c>
 800c074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c07a:	e746      	b.n	800bf0a <_dtoa_r+0x71a>
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	1e5c      	subs	r4, r3, #1
 800c080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c082:	42a3      	cmp	r3, r4
 800c084:	bfbf      	itttt	lt
 800c086:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c088:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c08a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c08c:	1ae3      	sublt	r3, r4, r3
 800c08e:	bfb4      	ite	lt
 800c090:	18d2      	addlt	r2, r2, r3
 800c092:	1b1c      	subge	r4, r3, r4
 800c094:	9b07      	ldr	r3, [sp, #28]
 800c096:	bfbc      	itt	lt
 800c098:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c09a:	2400      	movlt	r4, #0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bfb5      	itete	lt
 800c0a0:	eba8 0603 	sublt.w	r6, r8, r3
 800c0a4:	9b07      	ldrge	r3, [sp, #28]
 800c0a6:	2300      	movlt	r3, #0
 800c0a8:	4646      	movge	r6, r8
 800c0aa:	e730      	b.n	800bf0e <_dtoa_r+0x71e>
 800c0ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0b0:	4646      	mov	r6, r8
 800c0b2:	e735      	b.n	800bf20 <_dtoa_r+0x730>
 800c0b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0b6:	e75c      	b.n	800bf72 <_dtoa_r+0x782>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	e788      	b.n	800bfce <_dtoa_r+0x7de>
 800c0bc:	3fe00000 	.word	0x3fe00000
 800c0c0:	40240000 	.word	0x40240000
 800c0c4:	40140000 	.word	0x40140000
 800c0c8:	9b02      	ldr	r3, [sp, #8]
 800c0ca:	e780      	b.n	800bfce <_dtoa_r+0x7de>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0d0:	e782      	b.n	800bfd8 <_dtoa_r+0x7e8>
 800c0d2:	d099      	beq.n	800c008 <_dtoa_r+0x818>
 800c0d4:	9a08      	ldr	r2, [sp, #32]
 800c0d6:	331c      	adds	r3, #28
 800c0d8:	441a      	add	r2, r3
 800c0da:	4498      	add	r8, r3
 800c0dc:	441e      	add	r6, r3
 800c0de:	9208      	str	r2, [sp, #32]
 800c0e0:	e792      	b.n	800c008 <_dtoa_r+0x818>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	e7f6      	b.n	800c0d4 <_dtoa_r+0x8e4>
 800c0e6:	9b07      	ldr	r3, [sp, #28]
 800c0e8:	9704      	str	r7, [sp, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dc20      	bgt.n	800c130 <_dtoa_r+0x940>
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	dd1e      	ble.n	800c134 <_dtoa_r+0x944>
 800c0f6:	9b00      	ldr	r3, [sp, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f47f aec0 	bne.w	800be7e <_dtoa_r+0x68e>
 800c0fe:	4621      	mov	r1, r4
 800c100:	2205      	movs	r2, #5
 800c102:	4658      	mov	r0, fp
 800c104:	f000 fa9a 	bl	800c63c <__multadd>
 800c108:	4601      	mov	r1, r0
 800c10a:	4604      	mov	r4, r0
 800c10c:	4648      	mov	r0, r9
 800c10e:	f000 fcf7 	bl	800cb00 <__mcmp>
 800c112:	2800      	cmp	r0, #0
 800c114:	f77f aeb3 	ble.w	800be7e <_dtoa_r+0x68e>
 800c118:	4656      	mov	r6, sl
 800c11a:	2331      	movs	r3, #49	@ 0x31
 800c11c:	f806 3b01 	strb.w	r3, [r6], #1
 800c120:	9b04      	ldr	r3, [sp, #16]
 800c122:	3301      	adds	r3, #1
 800c124:	9304      	str	r3, [sp, #16]
 800c126:	e6ae      	b.n	800be86 <_dtoa_r+0x696>
 800c128:	9c07      	ldr	r4, [sp, #28]
 800c12a:	9704      	str	r7, [sp, #16]
 800c12c:	4625      	mov	r5, r4
 800c12e:	e7f3      	b.n	800c118 <_dtoa_r+0x928>
 800c130:	9b07      	ldr	r3, [sp, #28]
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 8104 	beq.w	800c344 <_dtoa_r+0xb54>
 800c13c:	2e00      	cmp	r6, #0
 800c13e:	dd05      	ble.n	800c14c <_dtoa_r+0x95c>
 800c140:	4629      	mov	r1, r5
 800c142:	4632      	mov	r2, r6
 800c144:	4658      	mov	r0, fp
 800c146:	f000 fc6f 	bl	800ca28 <__lshift>
 800c14a:	4605      	mov	r5, r0
 800c14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d05a      	beq.n	800c208 <_dtoa_r+0xa18>
 800c152:	6869      	ldr	r1, [r5, #4]
 800c154:	4658      	mov	r0, fp
 800c156:	f000 fa0f 	bl	800c578 <_Balloc>
 800c15a:	4606      	mov	r6, r0
 800c15c:	b928      	cbnz	r0, 800c16a <_dtoa_r+0x97a>
 800c15e:	4b84      	ldr	r3, [pc, #528]	@ (800c370 <_dtoa_r+0xb80>)
 800c160:	4602      	mov	r2, r0
 800c162:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c166:	f7ff bb5a 	b.w	800b81e <_dtoa_r+0x2e>
 800c16a:	692a      	ldr	r2, [r5, #16]
 800c16c:	3202      	adds	r2, #2
 800c16e:	0092      	lsls	r2, r2, #2
 800c170:	f105 010c 	add.w	r1, r5, #12
 800c174:	300c      	adds	r0, #12
 800c176:	f001 ff75 	bl	800e064 <memcpy>
 800c17a:	2201      	movs	r2, #1
 800c17c:	4631      	mov	r1, r6
 800c17e:	4658      	mov	r0, fp
 800c180:	f000 fc52 	bl	800ca28 <__lshift>
 800c184:	f10a 0301 	add.w	r3, sl, #1
 800c188:	9307      	str	r3, [sp, #28]
 800c18a:	9b00      	ldr	r3, [sp, #0]
 800c18c:	4453      	add	r3, sl
 800c18e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c190:	9b02      	ldr	r3, [sp, #8]
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	462f      	mov	r7, r5
 800c198:	930a      	str	r3, [sp, #40]	@ 0x28
 800c19a:	4605      	mov	r5, r0
 800c19c:	9b07      	ldr	r3, [sp, #28]
 800c19e:	4621      	mov	r1, r4
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	4648      	mov	r0, r9
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	f7ff fa99 	bl	800b6dc <quorem>
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	9002      	str	r0, [sp, #8]
 800c1ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1b2:	4648      	mov	r0, r9
 800c1b4:	f000 fca4 	bl	800cb00 <__mcmp>
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	9008      	str	r0, [sp, #32]
 800c1bc:	4621      	mov	r1, r4
 800c1be:	4658      	mov	r0, fp
 800c1c0:	f000 fcba 	bl	800cb38 <__mdiff>
 800c1c4:	68c2      	ldr	r2, [r0, #12]
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	bb02      	cbnz	r2, 800c20c <_dtoa_r+0xa1c>
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	4648      	mov	r0, r9
 800c1ce:	f000 fc97 	bl	800cb00 <__mcmp>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4658      	mov	r0, fp
 800c1d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1da:	f000 fa0d 	bl	800c5f8 <_Bfree>
 800c1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1e2:	9e07      	ldr	r6, [sp, #28]
 800c1e4:	ea43 0102 	orr.w	r1, r3, r2
 800c1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ea:	4319      	orrs	r1, r3
 800c1ec:	d110      	bne.n	800c210 <_dtoa_r+0xa20>
 800c1ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1f2:	d029      	beq.n	800c248 <_dtoa_r+0xa58>
 800c1f4:	9b08      	ldr	r3, [sp, #32]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dd02      	ble.n	800c200 <_dtoa_r+0xa10>
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c200:	9b00      	ldr	r3, [sp, #0]
 800c202:	f883 8000 	strb.w	r8, [r3]
 800c206:	e63f      	b.n	800be88 <_dtoa_r+0x698>
 800c208:	4628      	mov	r0, r5
 800c20a:	e7bb      	b.n	800c184 <_dtoa_r+0x994>
 800c20c:	2201      	movs	r2, #1
 800c20e:	e7e1      	b.n	800c1d4 <_dtoa_r+0x9e4>
 800c210:	9b08      	ldr	r3, [sp, #32]
 800c212:	2b00      	cmp	r3, #0
 800c214:	db04      	blt.n	800c220 <_dtoa_r+0xa30>
 800c216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c218:	430b      	orrs	r3, r1
 800c21a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c21c:	430b      	orrs	r3, r1
 800c21e:	d120      	bne.n	800c262 <_dtoa_r+0xa72>
 800c220:	2a00      	cmp	r2, #0
 800c222:	dded      	ble.n	800c200 <_dtoa_r+0xa10>
 800c224:	4649      	mov	r1, r9
 800c226:	2201      	movs	r2, #1
 800c228:	4658      	mov	r0, fp
 800c22a:	f000 fbfd 	bl	800ca28 <__lshift>
 800c22e:	4621      	mov	r1, r4
 800c230:	4681      	mov	r9, r0
 800c232:	f000 fc65 	bl	800cb00 <__mcmp>
 800c236:	2800      	cmp	r0, #0
 800c238:	dc03      	bgt.n	800c242 <_dtoa_r+0xa52>
 800c23a:	d1e1      	bne.n	800c200 <_dtoa_r+0xa10>
 800c23c:	f018 0f01 	tst.w	r8, #1
 800c240:	d0de      	beq.n	800c200 <_dtoa_r+0xa10>
 800c242:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c246:	d1d8      	bne.n	800c1fa <_dtoa_r+0xa0a>
 800c248:	9a00      	ldr	r2, [sp, #0]
 800c24a:	2339      	movs	r3, #57	@ 0x39
 800c24c:	7013      	strb	r3, [r2, #0]
 800c24e:	4633      	mov	r3, r6
 800c250:	461e      	mov	r6, r3
 800c252:	3b01      	subs	r3, #1
 800c254:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c258:	2a39      	cmp	r2, #57	@ 0x39
 800c25a:	d052      	beq.n	800c302 <_dtoa_r+0xb12>
 800c25c:	3201      	adds	r2, #1
 800c25e:	701a      	strb	r2, [r3, #0]
 800c260:	e612      	b.n	800be88 <_dtoa_r+0x698>
 800c262:	2a00      	cmp	r2, #0
 800c264:	dd07      	ble.n	800c276 <_dtoa_r+0xa86>
 800c266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c26a:	d0ed      	beq.n	800c248 <_dtoa_r+0xa58>
 800c26c:	9a00      	ldr	r2, [sp, #0]
 800c26e:	f108 0301 	add.w	r3, r8, #1
 800c272:	7013      	strb	r3, [r2, #0]
 800c274:	e608      	b.n	800be88 <_dtoa_r+0x698>
 800c276:	9b07      	ldr	r3, [sp, #28]
 800c278:	9a07      	ldr	r2, [sp, #28]
 800c27a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c280:	4293      	cmp	r3, r2
 800c282:	d028      	beq.n	800c2d6 <_dtoa_r+0xae6>
 800c284:	4649      	mov	r1, r9
 800c286:	2300      	movs	r3, #0
 800c288:	220a      	movs	r2, #10
 800c28a:	4658      	mov	r0, fp
 800c28c:	f000 f9d6 	bl	800c63c <__multadd>
 800c290:	42af      	cmp	r7, r5
 800c292:	4681      	mov	r9, r0
 800c294:	f04f 0300 	mov.w	r3, #0
 800c298:	f04f 020a 	mov.w	r2, #10
 800c29c:	4639      	mov	r1, r7
 800c29e:	4658      	mov	r0, fp
 800c2a0:	d107      	bne.n	800c2b2 <_dtoa_r+0xac2>
 800c2a2:	f000 f9cb 	bl	800c63c <__multadd>
 800c2a6:	4607      	mov	r7, r0
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	9b07      	ldr	r3, [sp, #28]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	9307      	str	r3, [sp, #28]
 800c2b0:	e774      	b.n	800c19c <_dtoa_r+0x9ac>
 800c2b2:	f000 f9c3 	bl	800c63c <__multadd>
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4607      	mov	r7, r0
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	220a      	movs	r2, #10
 800c2be:	4658      	mov	r0, fp
 800c2c0:	f000 f9bc 	bl	800c63c <__multadd>
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	e7f0      	b.n	800c2aa <_dtoa_r+0xaba>
 800c2c8:	9b00      	ldr	r3, [sp, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	bfcc      	ite	gt
 800c2ce:	461e      	movgt	r6, r3
 800c2d0:	2601      	movle	r6, #1
 800c2d2:	4456      	add	r6, sl
 800c2d4:	2700      	movs	r7, #0
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	2201      	movs	r2, #1
 800c2da:	4658      	mov	r0, fp
 800c2dc:	f000 fba4 	bl	800ca28 <__lshift>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4681      	mov	r9, r0
 800c2e4:	f000 fc0c 	bl	800cb00 <__mcmp>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	dcb0      	bgt.n	800c24e <_dtoa_r+0xa5e>
 800c2ec:	d102      	bne.n	800c2f4 <_dtoa_r+0xb04>
 800c2ee:	f018 0f01 	tst.w	r8, #1
 800c2f2:	d1ac      	bne.n	800c24e <_dtoa_r+0xa5e>
 800c2f4:	4633      	mov	r3, r6
 800c2f6:	461e      	mov	r6, r3
 800c2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2fc:	2a30      	cmp	r2, #48	@ 0x30
 800c2fe:	d0fa      	beq.n	800c2f6 <_dtoa_r+0xb06>
 800c300:	e5c2      	b.n	800be88 <_dtoa_r+0x698>
 800c302:	459a      	cmp	sl, r3
 800c304:	d1a4      	bne.n	800c250 <_dtoa_r+0xa60>
 800c306:	9b04      	ldr	r3, [sp, #16]
 800c308:	3301      	adds	r3, #1
 800c30a:	9304      	str	r3, [sp, #16]
 800c30c:	2331      	movs	r3, #49	@ 0x31
 800c30e:	f88a 3000 	strb.w	r3, [sl]
 800c312:	e5b9      	b.n	800be88 <_dtoa_r+0x698>
 800c314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c316:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c374 <_dtoa_r+0xb84>
 800c31a:	b11b      	cbz	r3, 800c324 <_dtoa_r+0xb34>
 800c31c:	f10a 0308 	add.w	r3, sl, #8
 800c320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c322:	6013      	str	r3, [r2, #0]
 800c324:	4650      	mov	r0, sl
 800c326:	b019      	add	sp, #100	@ 0x64
 800c328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32e:	2b01      	cmp	r3, #1
 800c330:	f77f ae37 	ble.w	800bfa2 <_dtoa_r+0x7b2>
 800c334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c336:	930a      	str	r3, [sp, #40]	@ 0x28
 800c338:	2001      	movs	r0, #1
 800c33a:	e655      	b.n	800bfe8 <_dtoa_r+0x7f8>
 800c33c:	9b00      	ldr	r3, [sp, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f77f aed6 	ble.w	800c0f0 <_dtoa_r+0x900>
 800c344:	4656      	mov	r6, sl
 800c346:	4621      	mov	r1, r4
 800c348:	4648      	mov	r0, r9
 800c34a:	f7ff f9c7 	bl	800b6dc <quorem>
 800c34e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c352:	f806 8b01 	strb.w	r8, [r6], #1
 800c356:	9b00      	ldr	r3, [sp, #0]
 800c358:	eba6 020a 	sub.w	r2, r6, sl
 800c35c:	4293      	cmp	r3, r2
 800c35e:	ddb3      	ble.n	800c2c8 <_dtoa_r+0xad8>
 800c360:	4649      	mov	r1, r9
 800c362:	2300      	movs	r3, #0
 800c364:	220a      	movs	r2, #10
 800c366:	4658      	mov	r0, fp
 800c368:	f000 f968 	bl	800c63c <__multadd>
 800c36c:	4681      	mov	r9, r0
 800c36e:	e7ea      	b.n	800c346 <_dtoa_r+0xb56>
 800c370:	08011f95 	.word	0x08011f95
 800c374:	08011f19 	.word	0x08011f19

0800c378 <_free_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4605      	mov	r5, r0
 800c37c:	2900      	cmp	r1, #0
 800c37e:	d041      	beq.n	800c404 <_free_r+0x8c>
 800c380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c384:	1f0c      	subs	r4, r1, #4
 800c386:	2b00      	cmp	r3, #0
 800c388:	bfb8      	it	lt
 800c38a:	18e4      	addlt	r4, r4, r3
 800c38c:	f000 f8e8 	bl	800c560 <__malloc_lock>
 800c390:	4a1d      	ldr	r2, [pc, #116]	@ (800c408 <_free_r+0x90>)
 800c392:	6813      	ldr	r3, [r2, #0]
 800c394:	b933      	cbnz	r3, 800c3a4 <_free_r+0x2c>
 800c396:	6063      	str	r3, [r4, #4]
 800c398:	6014      	str	r4, [r2, #0]
 800c39a:	4628      	mov	r0, r5
 800c39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3a0:	f000 b8e4 	b.w	800c56c <__malloc_unlock>
 800c3a4:	42a3      	cmp	r3, r4
 800c3a6:	d908      	bls.n	800c3ba <_free_r+0x42>
 800c3a8:	6820      	ldr	r0, [r4, #0]
 800c3aa:	1821      	adds	r1, r4, r0
 800c3ac:	428b      	cmp	r3, r1
 800c3ae:	bf01      	itttt	eq
 800c3b0:	6819      	ldreq	r1, [r3, #0]
 800c3b2:	685b      	ldreq	r3, [r3, #4]
 800c3b4:	1809      	addeq	r1, r1, r0
 800c3b6:	6021      	streq	r1, [r4, #0]
 800c3b8:	e7ed      	b.n	800c396 <_free_r+0x1e>
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	b10b      	cbz	r3, 800c3c4 <_free_r+0x4c>
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	d9fa      	bls.n	800c3ba <_free_r+0x42>
 800c3c4:	6811      	ldr	r1, [r2, #0]
 800c3c6:	1850      	adds	r0, r2, r1
 800c3c8:	42a0      	cmp	r0, r4
 800c3ca:	d10b      	bne.n	800c3e4 <_free_r+0x6c>
 800c3cc:	6820      	ldr	r0, [r4, #0]
 800c3ce:	4401      	add	r1, r0
 800c3d0:	1850      	adds	r0, r2, r1
 800c3d2:	4283      	cmp	r3, r0
 800c3d4:	6011      	str	r1, [r2, #0]
 800c3d6:	d1e0      	bne.n	800c39a <_free_r+0x22>
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	6053      	str	r3, [r2, #4]
 800c3de:	4408      	add	r0, r1
 800c3e0:	6010      	str	r0, [r2, #0]
 800c3e2:	e7da      	b.n	800c39a <_free_r+0x22>
 800c3e4:	d902      	bls.n	800c3ec <_free_r+0x74>
 800c3e6:	230c      	movs	r3, #12
 800c3e8:	602b      	str	r3, [r5, #0]
 800c3ea:	e7d6      	b.n	800c39a <_free_r+0x22>
 800c3ec:	6820      	ldr	r0, [r4, #0]
 800c3ee:	1821      	adds	r1, r4, r0
 800c3f0:	428b      	cmp	r3, r1
 800c3f2:	bf04      	itt	eq
 800c3f4:	6819      	ldreq	r1, [r3, #0]
 800c3f6:	685b      	ldreq	r3, [r3, #4]
 800c3f8:	6063      	str	r3, [r4, #4]
 800c3fa:	bf04      	itt	eq
 800c3fc:	1809      	addeq	r1, r1, r0
 800c3fe:	6021      	streq	r1, [r4, #0]
 800c400:	6054      	str	r4, [r2, #4]
 800c402:	e7ca      	b.n	800c39a <_free_r+0x22>
 800c404:	bd38      	pop	{r3, r4, r5, pc}
 800c406:	bf00      	nop
 800c408:	20000d44 	.word	0x20000d44

0800c40c <malloc>:
 800c40c:	4b02      	ldr	r3, [pc, #8]	@ (800c418 <malloc+0xc>)
 800c40e:	4601      	mov	r1, r0
 800c410:	6818      	ldr	r0, [r3, #0]
 800c412:	f000 b825 	b.w	800c460 <_malloc_r>
 800c416:	bf00      	nop
 800c418:	20000094 	.word	0x20000094

0800c41c <sbrk_aligned>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	4e0f      	ldr	r6, [pc, #60]	@ (800c45c <sbrk_aligned+0x40>)
 800c420:	460c      	mov	r4, r1
 800c422:	6831      	ldr	r1, [r6, #0]
 800c424:	4605      	mov	r5, r0
 800c426:	b911      	cbnz	r1, 800c42e <sbrk_aligned+0x12>
 800c428:	f001 fe0c 	bl	800e044 <_sbrk_r>
 800c42c:	6030      	str	r0, [r6, #0]
 800c42e:	4621      	mov	r1, r4
 800c430:	4628      	mov	r0, r5
 800c432:	f001 fe07 	bl	800e044 <_sbrk_r>
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	d103      	bne.n	800c442 <sbrk_aligned+0x26>
 800c43a:	f04f 34ff 	mov.w	r4, #4294967295
 800c43e:	4620      	mov	r0, r4
 800c440:	bd70      	pop	{r4, r5, r6, pc}
 800c442:	1cc4      	adds	r4, r0, #3
 800c444:	f024 0403 	bic.w	r4, r4, #3
 800c448:	42a0      	cmp	r0, r4
 800c44a:	d0f8      	beq.n	800c43e <sbrk_aligned+0x22>
 800c44c:	1a21      	subs	r1, r4, r0
 800c44e:	4628      	mov	r0, r5
 800c450:	f001 fdf8 	bl	800e044 <_sbrk_r>
 800c454:	3001      	adds	r0, #1
 800c456:	d1f2      	bne.n	800c43e <sbrk_aligned+0x22>
 800c458:	e7ef      	b.n	800c43a <sbrk_aligned+0x1e>
 800c45a:	bf00      	nop
 800c45c:	20000d40 	.word	0x20000d40

0800c460 <_malloc_r>:
 800c460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c464:	1ccd      	adds	r5, r1, #3
 800c466:	f025 0503 	bic.w	r5, r5, #3
 800c46a:	3508      	adds	r5, #8
 800c46c:	2d0c      	cmp	r5, #12
 800c46e:	bf38      	it	cc
 800c470:	250c      	movcc	r5, #12
 800c472:	2d00      	cmp	r5, #0
 800c474:	4606      	mov	r6, r0
 800c476:	db01      	blt.n	800c47c <_malloc_r+0x1c>
 800c478:	42a9      	cmp	r1, r5
 800c47a:	d904      	bls.n	800c486 <_malloc_r+0x26>
 800c47c:	230c      	movs	r3, #12
 800c47e:	6033      	str	r3, [r6, #0]
 800c480:	2000      	movs	r0, #0
 800c482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c55c <_malloc_r+0xfc>
 800c48a:	f000 f869 	bl	800c560 <__malloc_lock>
 800c48e:	f8d8 3000 	ldr.w	r3, [r8]
 800c492:	461c      	mov	r4, r3
 800c494:	bb44      	cbnz	r4, 800c4e8 <_malloc_r+0x88>
 800c496:	4629      	mov	r1, r5
 800c498:	4630      	mov	r0, r6
 800c49a:	f7ff ffbf 	bl	800c41c <sbrk_aligned>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	d158      	bne.n	800c556 <_malloc_r+0xf6>
 800c4a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c4a8:	4627      	mov	r7, r4
 800c4aa:	2f00      	cmp	r7, #0
 800c4ac:	d143      	bne.n	800c536 <_malloc_r+0xd6>
 800c4ae:	2c00      	cmp	r4, #0
 800c4b0:	d04b      	beq.n	800c54a <_malloc_r+0xea>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	eb04 0903 	add.w	r9, r4, r3
 800c4bc:	f001 fdc2 	bl	800e044 <_sbrk_r>
 800c4c0:	4581      	cmp	r9, r0
 800c4c2:	d142      	bne.n	800c54a <_malloc_r+0xea>
 800c4c4:	6821      	ldr	r1, [r4, #0]
 800c4c6:	1a6d      	subs	r5, r5, r1
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f7ff ffa6 	bl	800c41c <sbrk_aligned>
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	d03a      	beq.n	800c54a <_malloc_r+0xea>
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	442b      	add	r3, r5
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	f8d8 3000 	ldr.w	r3, [r8]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	bb62      	cbnz	r2, 800c53c <_malloc_r+0xdc>
 800c4e2:	f8c8 7000 	str.w	r7, [r8]
 800c4e6:	e00f      	b.n	800c508 <_malloc_r+0xa8>
 800c4e8:	6822      	ldr	r2, [r4, #0]
 800c4ea:	1b52      	subs	r2, r2, r5
 800c4ec:	d420      	bmi.n	800c530 <_malloc_r+0xd0>
 800c4ee:	2a0b      	cmp	r2, #11
 800c4f0:	d917      	bls.n	800c522 <_malloc_r+0xc2>
 800c4f2:	1961      	adds	r1, r4, r5
 800c4f4:	42a3      	cmp	r3, r4
 800c4f6:	6025      	str	r5, [r4, #0]
 800c4f8:	bf18      	it	ne
 800c4fa:	6059      	strne	r1, [r3, #4]
 800c4fc:	6863      	ldr	r3, [r4, #4]
 800c4fe:	bf08      	it	eq
 800c500:	f8c8 1000 	streq.w	r1, [r8]
 800c504:	5162      	str	r2, [r4, r5]
 800c506:	604b      	str	r3, [r1, #4]
 800c508:	4630      	mov	r0, r6
 800c50a:	f000 f82f 	bl	800c56c <__malloc_unlock>
 800c50e:	f104 000b 	add.w	r0, r4, #11
 800c512:	1d23      	adds	r3, r4, #4
 800c514:	f020 0007 	bic.w	r0, r0, #7
 800c518:	1ac2      	subs	r2, r0, r3
 800c51a:	bf1c      	itt	ne
 800c51c:	1a1b      	subne	r3, r3, r0
 800c51e:	50a3      	strne	r3, [r4, r2]
 800c520:	e7af      	b.n	800c482 <_malloc_r+0x22>
 800c522:	6862      	ldr	r2, [r4, #4]
 800c524:	42a3      	cmp	r3, r4
 800c526:	bf0c      	ite	eq
 800c528:	f8c8 2000 	streq.w	r2, [r8]
 800c52c:	605a      	strne	r2, [r3, #4]
 800c52e:	e7eb      	b.n	800c508 <_malloc_r+0xa8>
 800c530:	4623      	mov	r3, r4
 800c532:	6864      	ldr	r4, [r4, #4]
 800c534:	e7ae      	b.n	800c494 <_malloc_r+0x34>
 800c536:	463c      	mov	r4, r7
 800c538:	687f      	ldr	r7, [r7, #4]
 800c53a:	e7b6      	b.n	800c4aa <_malloc_r+0x4a>
 800c53c:	461a      	mov	r2, r3
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	42a3      	cmp	r3, r4
 800c542:	d1fb      	bne.n	800c53c <_malloc_r+0xdc>
 800c544:	2300      	movs	r3, #0
 800c546:	6053      	str	r3, [r2, #4]
 800c548:	e7de      	b.n	800c508 <_malloc_r+0xa8>
 800c54a:	230c      	movs	r3, #12
 800c54c:	6033      	str	r3, [r6, #0]
 800c54e:	4630      	mov	r0, r6
 800c550:	f000 f80c 	bl	800c56c <__malloc_unlock>
 800c554:	e794      	b.n	800c480 <_malloc_r+0x20>
 800c556:	6005      	str	r5, [r0, #0]
 800c558:	e7d6      	b.n	800c508 <_malloc_r+0xa8>
 800c55a:	bf00      	nop
 800c55c:	20000d44 	.word	0x20000d44

0800c560 <__malloc_lock>:
 800c560:	4801      	ldr	r0, [pc, #4]	@ (800c568 <__malloc_lock+0x8>)
 800c562:	f7ff b8b2 	b.w	800b6ca <__retarget_lock_acquire_recursive>
 800c566:	bf00      	nop
 800c568:	20000d3c 	.word	0x20000d3c

0800c56c <__malloc_unlock>:
 800c56c:	4801      	ldr	r0, [pc, #4]	@ (800c574 <__malloc_unlock+0x8>)
 800c56e:	f7ff b8ad 	b.w	800b6cc <__retarget_lock_release_recursive>
 800c572:	bf00      	nop
 800c574:	20000d3c 	.word	0x20000d3c

0800c578 <_Balloc>:
 800c578:	b570      	push	{r4, r5, r6, lr}
 800c57a:	69c6      	ldr	r6, [r0, #28]
 800c57c:	4604      	mov	r4, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	b976      	cbnz	r6, 800c5a0 <_Balloc+0x28>
 800c582:	2010      	movs	r0, #16
 800c584:	f7ff ff42 	bl	800c40c <malloc>
 800c588:	4602      	mov	r2, r0
 800c58a:	61e0      	str	r0, [r4, #28]
 800c58c:	b920      	cbnz	r0, 800c598 <_Balloc+0x20>
 800c58e:	4b18      	ldr	r3, [pc, #96]	@ (800c5f0 <_Balloc+0x78>)
 800c590:	4818      	ldr	r0, [pc, #96]	@ (800c5f4 <_Balloc+0x7c>)
 800c592:	216b      	movs	r1, #107	@ 0x6b
 800c594:	f001 fd7c 	bl	800e090 <__assert_func>
 800c598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c59c:	6006      	str	r6, [r0, #0]
 800c59e:	60c6      	str	r6, [r0, #12]
 800c5a0:	69e6      	ldr	r6, [r4, #28]
 800c5a2:	68f3      	ldr	r3, [r6, #12]
 800c5a4:	b183      	cbz	r3, 800c5c8 <_Balloc+0x50>
 800c5a6:	69e3      	ldr	r3, [r4, #28]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5ae:	b9b8      	cbnz	r0, 800c5e0 <_Balloc+0x68>
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5b6:	1d72      	adds	r2, r6, #5
 800c5b8:	0092      	lsls	r2, r2, #2
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f001 fd86 	bl	800e0cc <_calloc_r>
 800c5c0:	b160      	cbz	r0, 800c5dc <_Balloc+0x64>
 800c5c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5c6:	e00e      	b.n	800c5e6 <_Balloc+0x6e>
 800c5c8:	2221      	movs	r2, #33	@ 0x21
 800c5ca:	2104      	movs	r1, #4
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f001 fd7d 	bl	800e0cc <_calloc_r>
 800c5d2:	69e3      	ldr	r3, [r4, #28]
 800c5d4:	60f0      	str	r0, [r6, #12]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1e4      	bne.n	800c5a6 <_Balloc+0x2e>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	bd70      	pop	{r4, r5, r6, pc}
 800c5e0:	6802      	ldr	r2, [r0, #0]
 800c5e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5ec:	e7f7      	b.n	800c5de <_Balloc+0x66>
 800c5ee:	bf00      	nop
 800c5f0:	08011f26 	.word	0x08011f26
 800c5f4:	08011fa6 	.word	0x08011fa6

0800c5f8 <_Bfree>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	69c6      	ldr	r6, [r0, #28]
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	460c      	mov	r4, r1
 800c600:	b976      	cbnz	r6, 800c620 <_Bfree+0x28>
 800c602:	2010      	movs	r0, #16
 800c604:	f7ff ff02 	bl	800c40c <malloc>
 800c608:	4602      	mov	r2, r0
 800c60a:	61e8      	str	r0, [r5, #28]
 800c60c:	b920      	cbnz	r0, 800c618 <_Bfree+0x20>
 800c60e:	4b09      	ldr	r3, [pc, #36]	@ (800c634 <_Bfree+0x3c>)
 800c610:	4809      	ldr	r0, [pc, #36]	@ (800c638 <_Bfree+0x40>)
 800c612:	218f      	movs	r1, #143	@ 0x8f
 800c614:	f001 fd3c 	bl	800e090 <__assert_func>
 800c618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c61c:	6006      	str	r6, [r0, #0]
 800c61e:	60c6      	str	r6, [r0, #12]
 800c620:	b13c      	cbz	r4, 800c632 <_Bfree+0x3a>
 800c622:	69eb      	ldr	r3, [r5, #28]
 800c624:	6862      	ldr	r2, [r4, #4]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c62c:	6021      	str	r1, [r4, #0]
 800c62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	08011f26 	.word	0x08011f26
 800c638:	08011fa6 	.word	0x08011fa6

0800c63c <__multadd>:
 800c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	690d      	ldr	r5, [r1, #16]
 800c642:	4607      	mov	r7, r0
 800c644:	460c      	mov	r4, r1
 800c646:	461e      	mov	r6, r3
 800c648:	f101 0c14 	add.w	ip, r1, #20
 800c64c:	2000      	movs	r0, #0
 800c64e:	f8dc 3000 	ldr.w	r3, [ip]
 800c652:	b299      	uxth	r1, r3
 800c654:	fb02 6101 	mla	r1, r2, r1, r6
 800c658:	0c1e      	lsrs	r6, r3, #16
 800c65a:	0c0b      	lsrs	r3, r1, #16
 800c65c:	fb02 3306 	mla	r3, r2, r6, r3
 800c660:	b289      	uxth	r1, r1
 800c662:	3001      	adds	r0, #1
 800c664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c668:	4285      	cmp	r5, r0
 800c66a:	f84c 1b04 	str.w	r1, [ip], #4
 800c66e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c672:	dcec      	bgt.n	800c64e <__multadd+0x12>
 800c674:	b30e      	cbz	r6, 800c6ba <__multadd+0x7e>
 800c676:	68a3      	ldr	r3, [r4, #8]
 800c678:	42ab      	cmp	r3, r5
 800c67a:	dc19      	bgt.n	800c6b0 <__multadd+0x74>
 800c67c:	6861      	ldr	r1, [r4, #4]
 800c67e:	4638      	mov	r0, r7
 800c680:	3101      	adds	r1, #1
 800c682:	f7ff ff79 	bl	800c578 <_Balloc>
 800c686:	4680      	mov	r8, r0
 800c688:	b928      	cbnz	r0, 800c696 <__multadd+0x5a>
 800c68a:	4602      	mov	r2, r0
 800c68c:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c0 <__multadd+0x84>)
 800c68e:	480d      	ldr	r0, [pc, #52]	@ (800c6c4 <__multadd+0x88>)
 800c690:	21ba      	movs	r1, #186	@ 0xba
 800c692:	f001 fcfd 	bl	800e090 <__assert_func>
 800c696:	6922      	ldr	r2, [r4, #16]
 800c698:	3202      	adds	r2, #2
 800c69a:	f104 010c 	add.w	r1, r4, #12
 800c69e:	0092      	lsls	r2, r2, #2
 800c6a0:	300c      	adds	r0, #12
 800c6a2:	f001 fcdf 	bl	800e064 <memcpy>
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff ffa5 	bl	800c5f8 <_Bfree>
 800c6ae:	4644      	mov	r4, r8
 800c6b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6b4:	3501      	adds	r5, #1
 800c6b6:	615e      	str	r6, [r3, #20]
 800c6b8:	6125      	str	r5, [r4, #16]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c0:	08011f95 	.word	0x08011f95
 800c6c4:	08011fa6 	.word	0x08011fa6

0800c6c8 <__s2b>:
 800c6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	4615      	mov	r5, r2
 800c6d0:	461f      	mov	r7, r3
 800c6d2:	2209      	movs	r2, #9
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6dc:	2100      	movs	r1, #0
 800c6de:	2201      	movs	r2, #1
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	db09      	blt.n	800c6f8 <__s2b+0x30>
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7ff ff47 	bl	800c578 <_Balloc>
 800c6ea:	b940      	cbnz	r0, 800c6fe <__s2b+0x36>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	4b19      	ldr	r3, [pc, #100]	@ (800c754 <__s2b+0x8c>)
 800c6f0:	4819      	ldr	r0, [pc, #100]	@ (800c758 <__s2b+0x90>)
 800c6f2:	21d3      	movs	r1, #211	@ 0xd3
 800c6f4:	f001 fccc 	bl	800e090 <__assert_func>
 800c6f8:	0052      	lsls	r2, r2, #1
 800c6fa:	3101      	adds	r1, #1
 800c6fc:	e7f0      	b.n	800c6e0 <__s2b+0x18>
 800c6fe:	9b08      	ldr	r3, [sp, #32]
 800c700:	6143      	str	r3, [r0, #20]
 800c702:	2d09      	cmp	r5, #9
 800c704:	f04f 0301 	mov.w	r3, #1
 800c708:	6103      	str	r3, [r0, #16]
 800c70a:	dd16      	ble.n	800c73a <__s2b+0x72>
 800c70c:	f104 0909 	add.w	r9, r4, #9
 800c710:	46c8      	mov	r8, r9
 800c712:	442c      	add	r4, r5
 800c714:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c718:	4601      	mov	r1, r0
 800c71a:	3b30      	subs	r3, #48	@ 0x30
 800c71c:	220a      	movs	r2, #10
 800c71e:	4630      	mov	r0, r6
 800c720:	f7ff ff8c 	bl	800c63c <__multadd>
 800c724:	45a0      	cmp	r8, r4
 800c726:	d1f5      	bne.n	800c714 <__s2b+0x4c>
 800c728:	f1a5 0408 	sub.w	r4, r5, #8
 800c72c:	444c      	add	r4, r9
 800c72e:	1b2d      	subs	r5, r5, r4
 800c730:	1963      	adds	r3, r4, r5
 800c732:	42bb      	cmp	r3, r7
 800c734:	db04      	blt.n	800c740 <__s2b+0x78>
 800c736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73a:	340a      	adds	r4, #10
 800c73c:	2509      	movs	r5, #9
 800c73e:	e7f6      	b.n	800c72e <__s2b+0x66>
 800c740:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c744:	4601      	mov	r1, r0
 800c746:	3b30      	subs	r3, #48	@ 0x30
 800c748:	220a      	movs	r2, #10
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7ff ff76 	bl	800c63c <__multadd>
 800c750:	e7ee      	b.n	800c730 <__s2b+0x68>
 800c752:	bf00      	nop
 800c754:	08011f95 	.word	0x08011f95
 800c758:	08011fa6 	.word	0x08011fa6

0800c75c <__hi0bits>:
 800c75c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c760:	4603      	mov	r3, r0
 800c762:	bf36      	itet	cc
 800c764:	0403      	lslcc	r3, r0, #16
 800c766:	2000      	movcs	r0, #0
 800c768:	2010      	movcc	r0, #16
 800c76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c76e:	bf3c      	itt	cc
 800c770:	021b      	lslcc	r3, r3, #8
 800c772:	3008      	addcc	r0, #8
 800c774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c778:	bf3c      	itt	cc
 800c77a:	011b      	lslcc	r3, r3, #4
 800c77c:	3004      	addcc	r0, #4
 800c77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c782:	bf3c      	itt	cc
 800c784:	009b      	lslcc	r3, r3, #2
 800c786:	3002      	addcc	r0, #2
 800c788:	2b00      	cmp	r3, #0
 800c78a:	db05      	blt.n	800c798 <__hi0bits+0x3c>
 800c78c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c790:	f100 0001 	add.w	r0, r0, #1
 800c794:	bf08      	it	eq
 800c796:	2020      	moveq	r0, #32
 800c798:	4770      	bx	lr

0800c79a <__lo0bits>:
 800c79a:	6803      	ldr	r3, [r0, #0]
 800c79c:	4602      	mov	r2, r0
 800c79e:	f013 0007 	ands.w	r0, r3, #7
 800c7a2:	d00b      	beq.n	800c7bc <__lo0bits+0x22>
 800c7a4:	07d9      	lsls	r1, r3, #31
 800c7a6:	d421      	bmi.n	800c7ec <__lo0bits+0x52>
 800c7a8:	0798      	lsls	r0, r3, #30
 800c7aa:	bf49      	itett	mi
 800c7ac:	085b      	lsrmi	r3, r3, #1
 800c7ae:	089b      	lsrpl	r3, r3, #2
 800c7b0:	2001      	movmi	r0, #1
 800c7b2:	6013      	strmi	r3, [r2, #0]
 800c7b4:	bf5c      	itt	pl
 800c7b6:	6013      	strpl	r3, [r2, #0]
 800c7b8:	2002      	movpl	r0, #2
 800c7ba:	4770      	bx	lr
 800c7bc:	b299      	uxth	r1, r3
 800c7be:	b909      	cbnz	r1, 800c7c4 <__lo0bits+0x2a>
 800c7c0:	0c1b      	lsrs	r3, r3, #16
 800c7c2:	2010      	movs	r0, #16
 800c7c4:	b2d9      	uxtb	r1, r3
 800c7c6:	b909      	cbnz	r1, 800c7cc <__lo0bits+0x32>
 800c7c8:	3008      	adds	r0, #8
 800c7ca:	0a1b      	lsrs	r3, r3, #8
 800c7cc:	0719      	lsls	r1, r3, #28
 800c7ce:	bf04      	itt	eq
 800c7d0:	091b      	lsreq	r3, r3, #4
 800c7d2:	3004      	addeq	r0, #4
 800c7d4:	0799      	lsls	r1, r3, #30
 800c7d6:	bf04      	itt	eq
 800c7d8:	089b      	lsreq	r3, r3, #2
 800c7da:	3002      	addeq	r0, #2
 800c7dc:	07d9      	lsls	r1, r3, #31
 800c7de:	d403      	bmi.n	800c7e8 <__lo0bits+0x4e>
 800c7e0:	085b      	lsrs	r3, r3, #1
 800c7e2:	f100 0001 	add.w	r0, r0, #1
 800c7e6:	d003      	beq.n	800c7f0 <__lo0bits+0x56>
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	4770      	bx	lr
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	4770      	bx	lr
 800c7f0:	2020      	movs	r0, #32
 800c7f2:	4770      	bx	lr

0800c7f4 <__i2b>:
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	2101      	movs	r1, #1
 800c7fa:	f7ff febd 	bl	800c578 <_Balloc>
 800c7fe:	4602      	mov	r2, r0
 800c800:	b928      	cbnz	r0, 800c80e <__i2b+0x1a>
 800c802:	4b05      	ldr	r3, [pc, #20]	@ (800c818 <__i2b+0x24>)
 800c804:	4805      	ldr	r0, [pc, #20]	@ (800c81c <__i2b+0x28>)
 800c806:	f240 1145 	movw	r1, #325	@ 0x145
 800c80a:	f001 fc41 	bl	800e090 <__assert_func>
 800c80e:	2301      	movs	r3, #1
 800c810:	6144      	str	r4, [r0, #20]
 800c812:	6103      	str	r3, [r0, #16]
 800c814:	bd10      	pop	{r4, pc}
 800c816:	bf00      	nop
 800c818:	08011f95 	.word	0x08011f95
 800c81c:	08011fa6 	.word	0x08011fa6

0800c820 <__multiply>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	4614      	mov	r4, r2
 800c826:	690a      	ldr	r2, [r1, #16]
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	bfa8      	it	ge
 800c82e:	4623      	movge	r3, r4
 800c830:	460f      	mov	r7, r1
 800c832:	bfa4      	itt	ge
 800c834:	460c      	movge	r4, r1
 800c836:	461f      	movge	r7, r3
 800c838:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c83c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c840:	68a3      	ldr	r3, [r4, #8]
 800c842:	6861      	ldr	r1, [r4, #4]
 800c844:	eb0a 0609 	add.w	r6, sl, r9
 800c848:	42b3      	cmp	r3, r6
 800c84a:	b085      	sub	sp, #20
 800c84c:	bfb8      	it	lt
 800c84e:	3101      	addlt	r1, #1
 800c850:	f7ff fe92 	bl	800c578 <_Balloc>
 800c854:	b930      	cbnz	r0, 800c864 <__multiply+0x44>
 800c856:	4602      	mov	r2, r0
 800c858:	4b44      	ldr	r3, [pc, #272]	@ (800c96c <__multiply+0x14c>)
 800c85a:	4845      	ldr	r0, [pc, #276]	@ (800c970 <__multiply+0x150>)
 800c85c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c860:	f001 fc16 	bl	800e090 <__assert_func>
 800c864:	f100 0514 	add.w	r5, r0, #20
 800c868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c86c:	462b      	mov	r3, r5
 800c86e:	2200      	movs	r2, #0
 800c870:	4543      	cmp	r3, r8
 800c872:	d321      	bcc.n	800c8b8 <__multiply+0x98>
 800c874:	f107 0114 	add.w	r1, r7, #20
 800c878:	f104 0214 	add.w	r2, r4, #20
 800c87c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c880:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c884:	9302      	str	r3, [sp, #8]
 800c886:	1b13      	subs	r3, r2, r4
 800c888:	3b15      	subs	r3, #21
 800c88a:	f023 0303 	bic.w	r3, r3, #3
 800c88e:	3304      	adds	r3, #4
 800c890:	f104 0715 	add.w	r7, r4, #21
 800c894:	42ba      	cmp	r2, r7
 800c896:	bf38      	it	cc
 800c898:	2304      	movcc	r3, #4
 800c89a:	9301      	str	r3, [sp, #4]
 800c89c:	9b02      	ldr	r3, [sp, #8]
 800c89e:	9103      	str	r1, [sp, #12]
 800c8a0:	428b      	cmp	r3, r1
 800c8a2:	d80c      	bhi.n	800c8be <__multiply+0x9e>
 800c8a4:	2e00      	cmp	r6, #0
 800c8a6:	dd03      	ble.n	800c8b0 <__multiply+0x90>
 800c8a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d05b      	beq.n	800c968 <__multiply+0x148>
 800c8b0:	6106      	str	r6, [r0, #16]
 800c8b2:	b005      	add	sp, #20
 800c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b8:	f843 2b04 	str.w	r2, [r3], #4
 800c8bc:	e7d8      	b.n	800c870 <__multiply+0x50>
 800c8be:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8c2:	f1ba 0f00 	cmp.w	sl, #0
 800c8c6:	d024      	beq.n	800c912 <__multiply+0xf2>
 800c8c8:	f104 0e14 	add.w	lr, r4, #20
 800c8cc:	46a9      	mov	r9, r5
 800c8ce:	f04f 0c00 	mov.w	ip, #0
 800c8d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8d6:	f8d9 3000 	ldr.w	r3, [r9]
 800c8da:	fa1f fb87 	uxth.w	fp, r7
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c8e8:	f8d9 7000 	ldr.w	r7, [r9]
 800c8ec:	4463      	add	r3, ip
 800c8ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8f2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c900:	4572      	cmp	r2, lr
 800c902:	f849 3b04 	str.w	r3, [r9], #4
 800c906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c90a:	d8e2      	bhi.n	800c8d2 <__multiply+0xb2>
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	f845 c003 	str.w	ip, [r5, r3]
 800c912:	9b03      	ldr	r3, [sp, #12]
 800c914:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c918:	3104      	adds	r1, #4
 800c91a:	f1b9 0f00 	cmp.w	r9, #0
 800c91e:	d021      	beq.n	800c964 <__multiply+0x144>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	f104 0c14 	add.w	ip, r4, #20
 800c926:	46ae      	mov	lr, r5
 800c928:	f04f 0a00 	mov.w	sl, #0
 800c92c:	f8bc b000 	ldrh.w	fp, [ip]
 800c930:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c934:	fb09 770b 	mla	r7, r9, fp, r7
 800c938:	4457      	add	r7, sl
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c940:	f84e 3b04 	str.w	r3, [lr], #4
 800c944:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c94c:	f8be 3000 	ldrh.w	r3, [lr]
 800c950:	fb09 330a 	mla	r3, r9, sl, r3
 800c954:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c958:	4562      	cmp	r2, ip
 800c95a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c95e:	d8e5      	bhi.n	800c92c <__multiply+0x10c>
 800c960:	9f01      	ldr	r7, [sp, #4]
 800c962:	51eb      	str	r3, [r5, r7]
 800c964:	3504      	adds	r5, #4
 800c966:	e799      	b.n	800c89c <__multiply+0x7c>
 800c968:	3e01      	subs	r6, #1
 800c96a:	e79b      	b.n	800c8a4 <__multiply+0x84>
 800c96c:	08011f95 	.word	0x08011f95
 800c970:	08011fa6 	.word	0x08011fa6

0800c974 <__pow5mult>:
 800c974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c978:	4615      	mov	r5, r2
 800c97a:	f012 0203 	ands.w	r2, r2, #3
 800c97e:	4607      	mov	r7, r0
 800c980:	460e      	mov	r6, r1
 800c982:	d007      	beq.n	800c994 <__pow5mult+0x20>
 800c984:	4c25      	ldr	r4, [pc, #148]	@ (800ca1c <__pow5mult+0xa8>)
 800c986:	3a01      	subs	r2, #1
 800c988:	2300      	movs	r3, #0
 800c98a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c98e:	f7ff fe55 	bl	800c63c <__multadd>
 800c992:	4606      	mov	r6, r0
 800c994:	10ad      	asrs	r5, r5, #2
 800c996:	d03d      	beq.n	800ca14 <__pow5mult+0xa0>
 800c998:	69fc      	ldr	r4, [r7, #28]
 800c99a:	b97c      	cbnz	r4, 800c9bc <__pow5mult+0x48>
 800c99c:	2010      	movs	r0, #16
 800c99e:	f7ff fd35 	bl	800c40c <malloc>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	61f8      	str	r0, [r7, #28]
 800c9a6:	b928      	cbnz	r0, 800c9b4 <__pow5mult+0x40>
 800c9a8:	4b1d      	ldr	r3, [pc, #116]	@ (800ca20 <__pow5mult+0xac>)
 800c9aa:	481e      	ldr	r0, [pc, #120]	@ (800ca24 <__pow5mult+0xb0>)
 800c9ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9b0:	f001 fb6e 	bl	800e090 <__assert_func>
 800c9b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9b8:	6004      	str	r4, [r0, #0]
 800c9ba:	60c4      	str	r4, [r0, #12]
 800c9bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9c4:	b94c      	cbnz	r4, 800c9da <__pow5mult+0x66>
 800c9c6:	f240 2171 	movw	r1, #625	@ 0x271
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	f7ff ff12 	bl	800c7f4 <__i2b>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	6003      	str	r3, [r0, #0]
 800c9da:	f04f 0900 	mov.w	r9, #0
 800c9de:	07eb      	lsls	r3, r5, #31
 800c9e0:	d50a      	bpl.n	800c9f8 <__pow5mult+0x84>
 800c9e2:	4631      	mov	r1, r6
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	4638      	mov	r0, r7
 800c9e8:	f7ff ff1a 	bl	800c820 <__multiply>
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	4680      	mov	r8, r0
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7ff fe01 	bl	800c5f8 <_Bfree>
 800c9f6:	4646      	mov	r6, r8
 800c9f8:	106d      	asrs	r5, r5, #1
 800c9fa:	d00b      	beq.n	800ca14 <__pow5mult+0xa0>
 800c9fc:	6820      	ldr	r0, [r4, #0]
 800c9fe:	b938      	cbnz	r0, 800ca10 <__pow5mult+0x9c>
 800ca00:	4622      	mov	r2, r4
 800ca02:	4621      	mov	r1, r4
 800ca04:	4638      	mov	r0, r7
 800ca06:	f7ff ff0b 	bl	800c820 <__multiply>
 800ca0a:	6020      	str	r0, [r4, #0]
 800ca0c:	f8c0 9000 	str.w	r9, [r0]
 800ca10:	4604      	mov	r4, r0
 800ca12:	e7e4      	b.n	800c9de <__pow5mult+0x6a>
 800ca14:	4630      	mov	r0, r6
 800ca16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca1a:	bf00      	nop
 800ca1c:	08012000 	.word	0x08012000
 800ca20:	08011f26 	.word	0x08011f26
 800ca24:	08011fa6 	.word	0x08011fa6

0800ca28 <__lshift>:
 800ca28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	6849      	ldr	r1, [r1, #4]
 800ca30:	6923      	ldr	r3, [r4, #16]
 800ca32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca36:	68a3      	ldr	r3, [r4, #8]
 800ca38:	4607      	mov	r7, r0
 800ca3a:	4691      	mov	r9, r2
 800ca3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca40:	f108 0601 	add.w	r6, r8, #1
 800ca44:	42b3      	cmp	r3, r6
 800ca46:	db0b      	blt.n	800ca60 <__lshift+0x38>
 800ca48:	4638      	mov	r0, r7
 800ca4a:	f7ff fd95 	bl	800c578 <_Balloc>
 800ca4e:	4605      	mov	r5, r0
 800ca50:	b948      	cbnz	r0, 800ca66 <__lshift+0x3e>
 800ca52:	4602      	mov	r2, r0
 800ca54:	4b28      	ldr	r3, [pc, #160]	@ (800caf8 <__lshift+0xd0>)
 800ca56:	4829      	ldr	r0, [pc, #164]	@ (800cafc <__lshift+0xd4>)
 800ca58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca5c:	f001 fb18 	bl	800e090 <__assert_func>
 800ca60:	3101      	adds	r1, #1
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	e7ee      	b.n	800ca44 <__lshift+0x1c>
 800ca66:	2300      	movs	r3, #0
 800ca68:	f100 0114 	add.w	r1, r0, #20
 800ca6c:	f100 0210 	add.w	r2, r0, #16
 800ca70:	4618      	mov	r0, r3
 800ca72:	4553      	cmp	r3, sl
 800ca74:	db33      	blt.n	800cade <__lshift+0xb6>
 800ca76:	6920      	ldr	r0, [r4, #16]
 800ca78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca7c:	f104 0314 	add.w	r3, r4, #20
 800ca80:	f019 091f 	ands.w	r9, r9, #31
 800ca84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca8c:	d02b      	beq.n	800cae6 <__lshift+0xbe>
 800ca8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ca92:	468a      	mov	sl, r1
 800ca94:	2200      	movs	r2, #0
 800ca96:	6818      	ldr	r0, [r3, #0]
 800ca98:	fa00 f009 	lsl.w	r0, r0, r9
 800ca9c:	4310      	orrs	r0, r2
 800ca9e:	f84a 0b04 	str.w	r0, [sl], #4
 800caa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800caa6:	459c      	cmp	ip, r3
 800caa8:	fa22 f20e 	lsr.w	r2, r2, lr
 800caac:	d8f3      	bhi.n	800ca96 <__lshift+0x6e>
 800caae:	ebac 0304 	sub.w	r3, ip, r4
 800cab2:	3b15      	subs	r3, #21
 800cab4:	f023 0303 	bic.w	r3, r3, #3
 800cab8:	3304      	adds	r3, #4
 800caba:	f104 0015 	add.w	r0, r4, #21
 800cabe:	4584      	cmp	ip, r0
 800cac0:	bf38      	it	cc
 800cac2:	2304      	movcc	r3, #4
 800cac4:	50ca      	str	r2, [r1, r3]
 800cac6:	b10a      	cbz	r2, 800cacc <__lshift+0xa4>
 800cac8:	f108 0602 	add.w	r6, r8, #2
 800cacc:	3e01      	subs	r6, #1
 800cace:	4638      	mov	r0, r7
 800cad0:	612e      	str	r6, [r5, #16]
 800cad2:	4621      	mov	r1, r4
 800cad4:	f7ff fd90 	bl	800c5f8 <_Bfree>
 800cad8:	4628      	mov	r0, r5
 800cada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cade:	f842 0f04 	str.w	r0, [r2, #4]!
 800cae2:	3301      	adds	r3, #1
 800cae4:	e7c5      	b.n	800ca72 <__lshift+0x4a>
 800cae6:	3904      	subs	r1, #4
 800cae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800caec:	f841 2f04 	str.w	r2, [r1, #4]!
 800caf0:	459c      	cmp	ip, r3
 800caf2:	d8f9      	bhi.n	800cae8 <__lshift+0xc0>
 800caf4:	e7ea      	b.n	800cacc <__lshift+0xa4>
 800caf6:	bf00      	nop
 800caf8:	08011f95 	.word	0x08011f95
 800cafc:	08011fa6 	.word	0x08011fa6

0800cb00 <__mcmp>:
 800cb00:	690a      	ldr	r2, [r1, #16]
 800cb02:	4603      	mov	r3, r0
 800cb04:	6900      	ldr	r0, [r0, #16]
 800cb06:	1a80      	subs	r0, r0, r2
 800cb08:	b530      	push	{r4, r5, lr}
 800cb0a:	d10e      	bne.n	800cb2a <__mcmp+0x2a>
 800cb0c:	3314      	adds	r3, #20
 800cb0e:	3114      	adds	r1, #20
 800cb10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb20:	4295      	cmp	r5, r2
 800cb22:	d003      	beq.n	800cb2c <__mcmp+0x2c>
 800cb24:	d205      	bcs.n	800cb32 <__mcmp+0x32>
 800cb26:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2a:	bd30      	pop	{r4, r5, pc}
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	d3f3      	bcc.n	800cb18 <__mcmp+0x18>
 800cb30:	e7fb      	b.n	800cb2a <__mcmp+0x2a>
 800cb32:	2001      	movs	r0, #1
 800cb34:	e7f9      	b.n	800cb2a <__mcmp+0x2a>
	...

0800cb38 <__mdiff>:
 800cb38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	4689      	mov	r9, r1
 800cb3e:	4606      	mov	r6, r0
 800cb40:	4611      	mov	r1, r2
 800cb42:	4648      	mov	r0, r9
 800cb44:	4614      	mov	r4, r2
 800cb46:	f7ff ffdb 	bl	800cb00 <__mcmp>
 800cb4a:	1e05      	subs	r5, r0, #0
 800cb4c:	d112      	bne.n	800cb74 <__mdiff+0x3c>
 800cb4e:	4629      	mov	r1, r5
 800cb50:	4630      	mov	r0, r6
 800cb52:	f7ff fd11 	bl	800c578 <_Balloc>
 800cb56:	4602      	mov	r2, r0
 800cb58:	b928      	cbnz	r0, 800cb66 <__mdiff+0x2e>
 800cb5a:	4b3f      	ldr	r3, [pc, #252]	@ (800cc58 <__mdiff+0x120>)
 800cb5c:	f240 2137 	movw	r1, #567	@ 0x237
 800cb60:	483e      	ldr	r0, [pc, #248]	@ (800cc5c <__mdiff+0x124>)
 800cb62:	f001 fa95 	bl	800e090 <__assert_func>
 800cb66:	2301      	movs	r3, #1
 800cb68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	b003      	add	sp, #12
 800cb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb74:	bfbc      	itt	lt
 800cb76:	464b      	movlt	r3, r9
 800cb78:	46a1      	movlt	r9, r4
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb80:	bfba      	itte	lt
 800cb82:	461c      	movlt	r4, r3
 800cb84:	2501      	movlt	r5, #1
 800cb86:	2500      	movge	r5, #0
 800cb88:	f7ff fcf6 	bl	800c578 <_Balloc>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	b918      	cbnz	r0, 800cb98 <__mdiff+0x60>
 800cb90:	4b31      	ldr	r3, [pc, #196]	@ (800cc58 <__mdiff+0x120>)
 800cb92:	f240 2145 	movw	r1, #581	@ 0x245
 800cb96:	e7e3      	b.n	800cb60 <__mdiff+0x28>
 800cb98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb9c:	6926      	ldr	r6, [r4, #16]
 800cb9e:	60c5      	str	r5, [r0, #12]
 800cba0:	f109 0310 	add.w	r3, r9, #16
 800cba4:	f109 0514 	add.w	r5, r9, #20
 800cba8:	f104 0e14 	add.w	lr, r4, #20
 800cbac:	f100 0b14 	add.w	fp, r0, #20
 800cbb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cbb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	46d9      	mov	r9, fp
 800cbbc:	f04f 0c00 	mov.w	ip, #0
 800cbc0:	9b01      	ldr	r3, [sp, #4]
 800cbc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	fa1f f38a 	uxth.w	r3, sl
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	b283      	uxth	r3, r0
 800cbd4:	1acb      	subs	r3, r1, r3
 800cbd6:	0c00      	lsrs	r0, r0, #16
 800cbd8:	4463      	add	r3, ip
 800cbda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbe8:	4576      	cmp	r6, lr
 800cbea:	f849 3b04 	str.w	r3, [r9], #4
 800cbee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbf2:	d8e5      	bhi.n	800cbc0 <__mdiff+0x88>
 800cbf4:	1b33      	subs	r3, r6, r4
 800cbf6:	3b15      	subs	r3, #21
 800cbf8:	f023 0303 	bic.w	r3, r3, #3
 800cbfc:	3415      	adds	r4, #21
 800cbfe:	3304      	adds	r3, #4
 800cc00:	42a6      	cmp	r6, r4
 800cc02:	bf38      	it	cc
 800cc04:	2304      	movcc	r3, #4
 800cc06:	441d      	add	r5, r3
 800cc08:	445b      	add	r3, fp
 800cc0a:	461e      	mov	r6, r3
 800cc0c:	462c      	mov	r4, r5
 800cc0e:	4544      	cmp	r4, r8
 800cc10:	d30e      	bcc.n	800cc30 <__mdiff+0xf8>
 800cc12:	f108 0103 	add.w	r1, r8, #3
 800cc16:	1b49      	subs	r1, r1, r5
 800cc18:	f021 0103 	bic.w	r1, r1, #3
 800cc1c:	3d03      	subs	r5, #3
 800cc1e:	45a8      	cmp	r8, r5
 800cc20:	bf38      	it	cc
 800cc22:	2100      	movcc	r1, #0
 800cc24:	440b      	add	r3, r1
 800cc26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc2a:	b191      	cbz	r1, 800cc52 <__mdiff+0x11a>
 800cc2c:	6117      	str	r7, [r2, #16]
 800cc2e:	e79d      	b.n	800cb6c <__mdiff+0x34>
 800cc30:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc34:	46e6      	mov	lr, ip
 800cc36:	0c08      	lsrs	r0, r1, #16
 800cc38:	fa1c fc81 	uxtah	ip, ip, r1
 800cc3c:	4471      	add	r1, lr
 800cc3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc42:	b289      	uxth	r1, r1
 800cc44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc48:	f846 1b04 	str.w	r1, [r6], #4
 800cc4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc50:	e7dd      	b.n	800cc0e <__mdiff+0xd6>
 800cc52:	3f01      	subs	r7, #1
 800cc54:	e7e7      	b.n	800cc26 <__mdiff+0xee>
 800cc56:	bf00      	nop
 800cc58:	08011f95 	.word	0x08011f95
 800cc5c:	08011fa6 	.word	0x08011fa6

0800cc60 <__ulp>:
 800cc60:	b082      	sub	sp, #8
 800cc62:	ed8d 0b00 	vstr	d0, [sp]
 800cc66:	9a01      	ldr	r2, [sp, #4]
 800cc68:	4b0f      	ldr	r3, [pc, #60]	@ (800cca8 <__ulp+0x48>)
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	dc08      	bgt.n	800cc86 <__ulp+0x26>
 800cc74:	425b      	negs	r3, r3
 800cc76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc7e:	da04      	bge.n	800cc8a <__ulp+0x2a>
 800cc80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc84:	4113      	asrs	r3, r2
 800cc86:	2200      	movs	r2, #0
 800cc88:	e008      	b.n	800cc9c <__ulp+0x3c>
 800cc8a:	f1a2 0314 	sub.w	r3, r2, #20
 800cc8e:	2b1e      	cmp	r3, #30
 800cc90:	bfda      	itte	le
 800cc92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cc96:	40da      	lsrle	r2, r3
 800cc98:	2201      	movgt	r2, #1
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4610      	mov	r0, r2
 800cca0:	ec41 0b10 	vmov	d0, r0, r1
 800cca4:	b002      	add	sp, #8
 800cca6:	4770      	bx	lr
 800cca8:	7ff00000 	.word	0x7ff00000

0800ccac <__b2d>:
 800ccac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb0:	6906      	ldr	r6, [r0, #16]
 800ccb2:	f100 0814 	add.w	r8, r0, #20
 800ccb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ccba:	1f37      	subs	r7, r6, #4
 800ccbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	f7ff fd4b 	bl	800c75c <__hi0bits>
 800ccc6:	f1c0 0320 	rsb	r3, r0, #32
 800ccca:	280a      	cmp	r0, #10
 800cccc:	600b      	str	r3, [r1, #0]
 800ccce:	491b      	ldr	r1, [pc, #108]	@ (800cd3c <__b2d+0x90>)
 800ccd0:	dc15      	bgt.n	800ccfe <__b2d+0x52>
 800ccd2:	f1c0 0c0b 	rsb	ip, r0, #11
 800ccd6:	fa22 f30c 	lsr.w	r3, r2, ip
 800ccda:	45b8      	cmp	r8, r7
 800ccdc:	ea43 0501 	orr.w	r5, r3, r1
 800cce0:	bf34      	ite	cc
 800cce2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cce6:	2300      	movcs	r3, #0
 800cce8:	3015      	adds	r0, #21
 800ccea:	fa02 f000 	lsl.w	r0, r2, r0
 800ccee:	fa23 f30c 	lsr.w	r3, r3, ip
 800ccf2:	4303      	orrs	r3, r0
 800ccf4:	461c      	mov	r4, r3
 800ccf6:	ec45 4b10 	vmov	d0, r4, r5
 800ccfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfe:	45b8      	cmp	r8, r7
 800cd00:	bf3a      	itte	cc
 800cd02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd06:	f1a6 0708 	subcc.w	r7, r6, #8
 800cd0a:	2300      	movcs	r3, #0
 800cd0c:	380b      	subs	r0, #11
 800cd0e:	d012      	beq.n	800cd36 <__b2d+0x8a>
 800cd10:	f1c0 0120 	rsb	r1, r0, #32
 800cd14:	fa23 f401 	lsr.w	r4, r3, r1
 800cd18:	4082      	lsls	r2, r0
 800cd1a:	4322      	orrs	r2, r4
 800cd1c:	4547      	cmp	r7, r8
 800cd1e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cd22:	bf8c      	ite	hi
 800cd24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd28:	2200      	movls	r2, #0
 800cd2a:	4083      	lsls	r3, r0
 800cd2c:	40ca      	lsrs	r2, r1
 800cd2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd32:	4313      	orrs	r3, r2
 800cd34:	e7de      	b.n	800ccf4 <__b2d+0x48>
 800cd36:	ea42 0501 	orr.w	r5, r2, r1
 800cd3a:	e7db      	b.n	800ccf4 <__b2d+0x48>
 800cd3c:	3ff00000 	.word	0x3ff00000

0800cd40 <__d2b>:
 800cd40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd44:	460f      	mov	r7, r1
 800cd46:	2101      	movs	r1, #1
 800cd48:	ec59 8b10 	vmov	r8, r9, d0
 800cd4c:	4616      	mov	r6, r2
 800cd4e:	f7ff fc13 	bl	800c578 <_Balloc>
 800cd52:	4604      	mov	r4, r0
 800cd54:	b930      	cbnz	r0, 800cd64 <__d2b+0x24>
 800cd56:	4602      	mov	r2, r0
 800cd58:	4b23      	ldr	r3, [pc, #140]	@ (800cde8 <__d2b+0xa8>)
 800cd5a:	4824      	ldr	r0, [pc, #144]	@ (800cdec <__d2b+0xac>)
 800cd5c:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd60:	f001 f996 	bl	800e090 <__assert_func>
 800cd64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd6c:	b10d      	cbz	r5, 800cd72 <__d2b+0x32>
 800cd6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd72:	9301      	str	r3, [sp, #4]
 800cd74:	f1b8 0300 	subs.w	r3, r8, #0
 800cd78:	d023      	beq.n	800cdc2 <__d2b+0x82>
 800cd7a:	4668      	mov	r0, sp
 800cd7c:	9300      	str	r3, [sp, #0]
 800cd7e:	f7ff fd0c 	bl	800c79a <__lo0bits>
 800cd82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd86:	b1d0      	cbz	r0, 800cdbe <__d2b+0x7e>
 800cd88:	f1c0 0320 	rsb	r3, r0, #32
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	430b      	orrs	r3, r1
 800cd92:	40c2      	lsrs	r2, r0
 800cd94:	6163      	str	r3, [r4, #20]
 800cd96:	9201      	str	r2, [sp, #4]
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	61a3      	str	r3, [r4, #24]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	bf0c      	ite	eq
 800cda0:	2201      	moveq	r2, #1
 800cda2:	2202      	movne	r2, #2
 800cda4:	6122      	str	r2, [r4, #16]
 800cda6:	b1a5      	cbz	r5, 800cdd2 <__d2b+0x92>
 800cda8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cdac:	4405      	add	r5, r0
 800cdae:	603d      	str	r5, [r7, #0]
 800cdb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cdb4:	6030      	str	r0, [r6, #0]
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	b003      	add	sp, #12
 800cdba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdbe:	6161      	str	r1, [r4, #20]
 800cdc0:	e7ea      	b.n	800cd98 <__d2b+0x58>
 800cdc2:	a801      	add	r0, sp, #4
 800cdc4:	f7ff fce9 	bl	800c79a <__lo0bits>
 800cdc8:	9b01      	ldr	r3, [sp, #4]
 800cdca:	6163      	str	r3, [r4, #20]
 800cdcc:	3020      	adds	r0, #32
 800cdce:	2201      	movs	r2, #1
 800cdd0:	e7e8      	b.n	800cda4 <__d2b+0x64>
 800cdd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cdda:	6038      	str	r0, [r7, #0]
 800cddc:	6918      	ldr	r0, [r3, #16]
 800cdde:	f7ff fcbd 	bl	800c75c <__hi0bits>
 800cde2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cde6:	e7e5      	b.n	800cdb4 <__d2b+0x74>
 800cde8:	08011f95 	.word	0x08011f95
 800cdec:	08011fa6 	.word	0x08011fa6

0800cdf0 <__ratio>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	e9cd 1000 	strd	r1, r0, [sp]
 800cdfa:	a902      	add	r1, sp, #8
 800cdfc:	f7ff ff56 	bl	800ccac <__b2d>
 800ce00:	9800      	ldr	r0, [sp, #0]
 800ce02:	a903      	add	r1, sp, #12
 800ce04:	ec55 4b10 	vmov	r4, r5, d0
 800ce08:	f7ff ff50 	bl	800ccac <__b2d>
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	6919      	ldr	r1, [r3, #16]
 800ce10:	9b00      	ldr	r3, [sp, #0]
 800ce12:	691b      	ldr	r3, [r3, #16]
 800ce14:	1ac9      	subs	r1, r1, r3
 800ce16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	ec5b ab10 	vmov	sl, fp, d0
 800ce20:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	bfce      	itee	gt
 800ce28:	462a      	movgt	r2, r5
 800ce2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce2e:	465a      	movle	r2, fp
 800ce30:	462f      	mov	r7, r5
 800ce32:	46d9      	mov	r9, fp
 800ce34:	bfcc      	ite	gt
 800ce36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce3a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ce3e:	464b      	mov	r3, r9
 800ce40:	4652      	mov	r2, sl
 800ce42:	4620      	mov	r0, r4
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fd11 	bl	800086c <__aeabi_ddiv>
 800ce4a:	ec41 0b10 	vmov	d0, r0, r1
 800ce4e:	b005      	add	sp, #20
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce54 <__copybits>:
 800ce54:	3901      	subs	r1, #1
 800ce56:	b570      	push	{r4, r5, r6, lr}
 800ce58:	1149      	asrs	r1, r1, #5
 800ce5a:	6914      	ldr	r4, [r2, #16]
 800ce5c:	3101      	adds	r1, #1
 800ce5e:	f102 0314 	add.w	r3, r2, #20
 800ce62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce6a:	1f05      	subs	r5, r0, #4
 800ce6c:	42a3      	cmp	r3, r4
 800ce6e:	d30c      	bcc.n	800ce8a <__copybits+0x36>
 800ce70:	1aa3      	subs	r3, r4, r2
 800ce72:	3b11      	subs	r3, #17
 800ce74:	f023 0303 	bic.w	r3, r3, #3
 800ce78:	3211      	adds	r2, #17
 800ce7a:	42a2      	cmp	r2, r4
 800ce7c:	bf88      	it	hi
 800ce7e:	2300      	movhi	r3, #0
 800ce80:	4418      	add	r0, r3
 800ce82:	2300      	movs	r3, #0
 800ce84:	4288      	cmp	r0, r1
 800ce86:	d305      	bcc.n	800ce94 <__copybits+0x40>
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
 800ce8a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce8e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce92:	e7eb      	b.n	800ce6c <__copybits+0x18>
 800ce94:	f840 3b04 	str.w	r3, [r0], #4
 800ce98:	e7f4      	b.n	800ce84 <__copybits+0x30>

0800ce9a <__any_on>:
 800ce9a:	f100 0214 	add.w	r2, r0, #20
 800ce9e:	6900      	ldr	r0, [r0, #16]
 800cea0:	114b      	asrs	r3, r1, #5
 800cea2:	4298      	cmp	r0, r3
 800cea4:	b510      	push	{r4, lr}
 800cea6:	db11      	blt.n	800cecc <__any_on+0x32>
 800cea8:	dd0a      	ble.n	800cec0 <__any_on+0x26>
 800ceaa:	f011 011f 	ands.w	r1, r1, #31
 800ceae:	d007      	beq.n	800cec0 <__any_on+0x26>
 800ceb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ceb4:	fa24 f001 	lsr.w	r0, r4, r1
 800ceb8:	fa00 f101 	lsl.w	r1, r0, r1
 800cebc:	428c      	cmp	r4, r1
 800cebe:	d10b      	bne.n	800ced8 <__any_on+0x3e>
 800cec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d803      	bhi.n	800ced0 <__any_on+0x36>
 800cec8:	2000      	movs	r0, #0
 800ceca:	bd10      	pop	{r4, pc}
 800cecc:	4603      	mov	r3, r0
 800cece:	e7f7      	b.n	800cec0 <__any_on+0x26>
 800ced0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ced4:	2900      	cmp	r1, #0
 800ced6:	d0f5      	beq.n	800cec4 <__any_on+0x2a>
 800ced8:	2001      	movs	r0, #1
 800ceda:	e7f6      	b.n	800ceca <__any_on+0x30>

0800cedc <sulp>:
 800cedc:	b570      	push	{r4, r5, r6, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	460d      	mov	r5, r1
 800cee2:	ec45 4b10 	vmov	d0, r4, r5
 800cee6:	4616      	mov	r6, r2
 800cee8:	f7ff feba 	bl	800cc60 <__ulp>
 800ceec:	ec51 0b10 	vmov	r0, r1, d0
 800cef0:	b17e      	cbz	r6, 800cf12 <sulp+0x36>
 800cef2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cef6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	dd09      	ble.n	800cf12 <sulp+0x36>
 800cefe:	051b      	lsls	r3, r3, #20
 800cf00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cf04:	2400      	movs	r4, #0
 800cf06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cf0a:	4622      	mov	r2, r4
 800cf0c:	462b      	mov	r3, r5
 800cf0e:	f7f3 fb83 	bl	8000618 <__aeabi_dmul>
 800cf12:	ec41 0b10 	vmov	d0, r0, r1
 800cf16:	bd70      	pop	{r4, r5, r6, pc}

0800cf18 <_strtod_l>:
 800cf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1c:	b09f      	sub	sp, #124	@ 0x7c
 800cf1e:	460c      	mov	r4, r1
 800cf20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cf22:	2200      	movs	r2, #0
 800cf24:	921a      	str	r2, [sp, #104]	@ 0x68
 800cf26:	9005      	str	r0, [sp, #20]
 800cf28:	f04f 0a00 	mov.w	sl, #0
 800cf2c:	f04f 0b00 	mov.w	fp, #0
 800cf30:	460a      	mov	r2, r1
 800cf32:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf34:	7811      	ldrb	r1, [r2, #0]
 800cf36:	292b      	cmp	r1, #43	@ 0x2b
 800cf38:	d04a      	beq.n	800cfd0 <_strtod_l+0xb8>
 800cf3a:	d838      	bhi.n	800cfae <_strtod_l+0x96>
 800cf3c:	290d      	cmp	r1, #13
 800cf3e:	d832      	bhi.n	800cfa6 <_strtod_l+0x8e>
 800cf40:	2908      	cmp	r1, #8
 800cf42:	d832      	bhi.n	800cfaa <_strtod_l+0x92>
 800cf44:	2900      	cmp	r1, #0
 800cf46:	d03b      	beq.n	800cfc0 <_strtod_l+0xa8>
 800cf48:	2200      	movs	r2, #0
 800cf4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cf4e:	782a      	ldrb	r2, [r5, #0]
 800cf50:	2a30      	cmp	r2, #48	@ 0x30
 800cf52:	f040 80b3 	bne.w	800d0bc <_strtod_l+0x1a4>
 800cf56:	786a      	ldrb	r2, [r5, #1]
 800cf58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf5c:	2a58      	cmp	r2, #88	@ 0x58
 800cf5e:	d16e      	bne.n	800d03e <_strtod_l+0x126>
 800cf60:	9302      	str	r3, [sp, #8]
 800cf62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	4a8e      	ldr	r2, [pc, #568]	@ (800d1a4 <_strtod_l+0x28c>)
 800cf6c:	9805      	ldr	r0, [sp, #20]
 800cf6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cf70:	a919      	add	r1, sp, #100	@ 0x64
 800cf72:	f001 f927 	bl	800e1c4 <__gethex>
 800cf76:	f010 060f 	ands.w	r6, r0, #15
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	d005      	beq.n	800cf8a <_strtod_l+0x72>
 800cf7e:	2e06      	cmp	r6, #6
 800cf80:	d128      	bne.n	800cfd4 <_strtod_l+0xbc>
 800cf82:	3501      	adds	r5, #1
 800cf84:	2300      	movs	r3, #0
 800cf86:	9519      	str	r5, [sp, #100]	@ 0x64
 800cf88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f040 858e 	bne.w	800daae <_strtod_l+0xb96>
 800cf92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf94:	b1cb      	cbz	r3, 800cfca <_strtod_l+0xb2>
 800cf96:	4652      	mov	r2, sl
 800cf98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cf9c:	ec43 2b10 	vmov	d0, r2, r3
 800cfa0:	b01f      	add	sp, #124	@ 0x7c
 800cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa6:	2920      	cmp	r1, #32
 800cfa8:	d1ce      	bne.n	800cf48 <_strtod_l+0x30>
 800cfaa:	3201      	adds	r2, #1
 800cfac:	e7c1      	b.n	800cf32 <_strtod_l+0x1a>
 800cfae:	292d      	cmp	r1, #45	@ 0x2d
 800cfb0:	d1ca      	bne.n	800cf48 <_strtod_l+0x30>
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cfb6:	1c51      	adds	r1, r2, #1
 800cfb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cfba:	7852      	ldrb	r2, [r2, #1]
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	d1c5      	bne.n	800cf4c <_strtod_l+0x34>
 800cfc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfc2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f040 8570 	bne.w	800daaa <_strtod_l+0xb92>
 800cfca:	4652      	mov	r2, sl
 800cfcc:	465b      	mov	r3, fp
 800cfce:	e7e5      	b.n	800cf9c <_strtod_l+0x84>
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	e7ef      	b.n	800cfb4 <_strtod_l+0x9c>
 800cfd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cfd6:	b13a      	cbz	r2, 800cfe8 <_strtod_l+0xd0>
 800cfd8:	2135      	movs	r1, #53	@ 0x35
 800cfda:	a81c      	add	r0, sp, #112	@ 0x70
 800cfdc:	f7ff ff3a 	bl	800ce54 <__copybits>
 800cfe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfe2:	9805      	ldr	r0, [sp, #20]
 800cfe4:	f7ff fb08 	bl	800c5f8 <_Bfree>
 800cfe8:	3e01      	subs	r6, #1
 800cfea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cfec:	2e04      	cmp	r6, #4
 800cfee:	d806      	bhi.n	800cffe <_strtod_l+0xe6>
 800cff0:	e8df f006 	tbb	[pc, r6]
 800cff4:	201d0314 	.word	0x201d0314
 800cff8:	14          	.byte	0x14
 800cff9:	00          	.byte	0x00
 800cffa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cffe:	05e1      	lsls	r1, r4, #23
 800d000:	bf48      	it	mi
 800d002:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d00a:	0d1b      	lsrs	r3, r3, #20
 800d00c:	051b      	lsls	r3, r3, #20
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1bb      	bne.n	800cf8a <_strtod_l+0x72>
 800d012:	f7fe fb2f 	bl	800b674 <__errno>
 800d016:	2322      	movs	r3, #34	@ 0x22
 800d018:	6003      	str	r3, [r0, #0]
 800d01a:	e7b6      	b.n	800cf8a <_strtod_l+0x72>
 800d01c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d020:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d024:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d028:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d02c:	e7e7      	b.n	800cffe <_strtod_l+0xe6>
 800d02e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d1ac <_strtod_l+0x294>
 800d032:	e7e4      	b.n	800cffe <_strtod_l+0xe6>
 800d034:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d038:	f04f 3aff 	mov.w	sl, #4294967295
 800d03c:	e7df      	b.n	800cffe <_strtod_l+0xe6>
 800d03e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	9219      	str	r2, [sp, #100]	@ 0x64
 800d044:	785b      	ldrb	r3, [r3, #1]
 800d046:	2b30      	cmp	r3, #48	@ 0x30
 800d048:	d0f9      	beq.n	800d03e <_strtod_l+0x126>
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d09d      	beq.n	800cf8a <_strtod_l+0x72>
 800d04e:	2301      	movs	r3, #1
 800d050:	9309      	str	r3, [sp, #36]	@ 0x24
 800d052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d054:	930c      	str	r3, [sp, #48]	@ 0x30
 800d056:	2300      	movs	r3, #0
 800d058:	9308      	str	r3, [sp, #32]
 800d05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d05c:	461f      	mov	r7, r3
 800d05e:	220a      	movs	r2, #10
 800d060:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d062:	7805      	ldrb	r5, [r0, #0]
 800d064:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d068:	b2d9      	uxtb	r1, r3
 800d06a:	2909      	cmp	r1, #9
 800d06c:	d928      	bls.n	800d0c0 <_strtod_l+0x1a8>
 800d06e:	494e      	ldr	r1, [pc, #312]	@ (800d1a8 <_strtod_l+0x290>)
 800d070:	2201      	movs	r2, #1
 800d072:	f000 ffd5 	bl	800e020 <strncmp>
 800d076:	2800      	cmp	r0, #0
 800d078:	d032      	beq.n	800d0e0 <_strtod_l+0x1c8>
 800d07a:	2000      	movs	r0, #0
 800d07c:	462a      	mov	r2, r5
 800d07e:	4681      	mov	r9, r0
 800d080:	463d      	mov	r5, r7
 800d082:	4603      	mov	r3, r0
 800d084:	2a65      	cmp	r2, #101	@ 0x65
 800d086:	d001      	beq.n	800d08c <_strtod_l+0x174>
 800d088:	2a45      	cmp	r2, #69	@ 0x45
 800d08a:	d114      	bne.n	800d0b6 <_strtod_l+0x19e>
 800d08c:	b91d      	cbnz	r5, 800d096 <_strtod_l+0x17e>
 800d08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d090:	4302      	orrs	r2, r0
 800d092:	d095      	beq.n	800cfc0 <_strtod_l+0xa8>
 800d094:	2500      	movs	r5, #0
 800d096:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d098:	1c62      	adds	r2, r4, #1
 800d09a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d09c:	7862      	ldrb	r2, [r4, #1]
 800d09e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d0a0:	d077      	beq.n	800d192 <_strtod_l+0x27a>
 800d0a2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d0a4:	d07b      	beq.n	800d19e <_strtod_l+0x286>
 800d0a6:	f04f 0c00 	mov.w	ip, #0
 800d0aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d0ae:	2909      	cmp	r1, #9
 800d0b0:	f240 8082 	bls.w	800d1b8 <_strtod_l+0x2a0>
 800d0b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0b6:	f04f 0800 	mov.w	r8, #0
 800d0ba:	e0a2      	b.n	800d202 <_strtod_l+0x2ea>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e7c7      	b.n	800d050 <_strtod_l+0x138>
 800d0c0:	2f08      	cmp	r7, #8
 800d0c2:	bfd5      	itete	le
 800d0c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d0c6:	9908      	ldrgt	r1, [sp, #32]
 800d0c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d0cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d0d0:	f100 0001 	add.w	r0, r0, #1
 800d0d4:	bfd4      	ite	le
 800d0d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d0d8:	9308      	strgt	r3, [sp, #32]
 800d0da:	3701      	adds	r7, #1
 800d0dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d0de:	e7bf      	b.n	800d060 <_strtod_l+0x148>
 800d0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0e6:	785a      	ldrb	r2, [r3, #1]
 800d0e8:	b37f      	cbz	r7, 800d14a <_strtod_l+0x232>
 800d0ea:	4681      	mov	r9, r0
 800d0ec:	463d      	mov	r5, r7
 800d0ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d0f2:	2b09      	cmp	r3, #9
 800d0f4:	d912      	bls.n	800d11c <_strtod_l+0x204>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e7c4      	b.n	800d084 <_strtod_l+0x16c>
 800d0fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0fc:	1c5a      	adds	r2, r3, #1
 800d0fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800d100:	785a      	ldrb	r2, [r3, #1]
 800d102:	3001      	adds	r0, #1
 800d104:	2a30      	cmp	r2, #48	@ 0x30
 800d106:	d0f8      	beq.n	800d0fa <_strtod_l+0x1e2>
 800d108:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d10c:	2b08      	cmp	r3, #8
 800d10e:	f200 84d3 	bhi.w	800dab8 <_strtod_l+0xba0>
 800d112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d114:	930c      	str	r3, [sp, #48]	@ 0x30
 800d116:	4681      	mov	r9, r0
 800d118:	2000      	movs	r0, #0
 800d11a:	4605      	mov	r5, r0
 800d11c:	3a30      	subs	r2, #48	@ 0x30
 800d11e:	f100 0301 	add.w	r3, r0, #1
 800d122:	d02a      	beq.n	800d17a <_strtod_l+0x262>
 800d124:	4499      	add	r9, r3
 800d126:	eb00 0c05 	add.w	ip, r0, r5
 800d12a:	462b      	mov	r3, r5
 800d12c:	210a      	movs	r1, #10
 800d12e:	4563      	cmp	r3, ip
 800d130:	d10d      	bne.n	800d14e <_strtod_l+0x236>
 800d132:	1c69      	adds	r1, r5, #1
 800d134:	4401      	add	r1, r0
 800d136:	4428      	add	r0, r5
 800d138:	2808      	cmp	r0, #8
 800d13a:	dc16      	bgt.n	800d16a <_strtod_l+0x252>
 800d13c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d13e:	230a      	movs	r3, #10
 800d140:	fb03 2300 	mla	r3, r3, r0, r2
 800d144:	930a      	str	r3, [sp, #40]	@ 0x28
 800d146:	2300      	movs	r3, #0
 800d148:	e018      	b.n	800d17c <_strtod_l+0x264>
 800d14a:	4638      	mov	r0, r7
 800d14c:	e7da      	b.n	800d104 <_strtod_l+0x1ec>
 800d14e:	2b08      	cmp	r3, #8
 800d150:	f103 0301 	add.w	r3, r3, #1
 800d154:	dc03      	bgt.n	800d15e <_strtod_l+0x246>
 800d156:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d158:	434e      	muls	r6, r1
 800d15a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d15c:	e7e7      	b.n	800d12e <_strtod_l+0x216>
 800d15e:	2b10      	cmp	r3, #16
 800d160:	bfde      	ittt	le
 800d162:	9e08      	ldrle	r6, [sp, #32]
 800d164:	434e      	mulle	r6, r1
 800d166:	9608      	strle	r6, [sp, #32]
 800d168:	e7e1      	b.n	800d12e <_strtod_l+0x216>
 800d16a:	280f      	cmp	r0, #15
 800d16c:	dceb      	bgt.n	800d146 <_strtod_l+0x22e>
 800d16e:	9808      	ldr	r0, [sp, #32]
 800d170:	230a      	movs	r3, #10
 800d172:	fb03 2300 	mla	r3, r3, r0, r2
 800d176:	9308      	str	r3, [sp, #32]
 800d178:	e7e5      	b.n	800d146 <_strtod_l+0x22e>
 800d17a:	4629      	mov	r1, r5
 800d17c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d17e:	1c50      	adds	r0, r2, #1
 800d180:	9019      	str	r0, [sp, #100]	@ 0x64
 800d182:	7852      	ldrb	r2, [r2, #1]
 800d184:	4618      	mov	r0, r3
 800d186:	460d      	mov	r5, r1
 800d188:	e7b1      	b.n	800d0ee <_strtod_l+0x1d6>
 800d18a:	f04f 0900 	mov.w	r9, #0
 800d18e:	2301      	movs	r3, #1
 800d190:	e77d      	b.n	800d08e <_strtod_l+0x176>
 800d192:	f04f 0c00 	mov.w	ip, #0
 800d196:	1ca2      	adds	r2, r4, #2
 800d198:	9219      	str	r2, [sp, #100]	@ 0x64
 800d19a:	78a2      	ldrb	r2, [r4, #2]
 800d19c:	e785      	b.n	800d0aa <_strtod_l+0x192>
 800d19e:	f04f 0c01 	mov.w	ip, #1
 800d1a2:	e7f8      	b.n	800d196 <_strtod_l+0x27e>
 800d1a4:	08012118 	.word	0x08012118
 800d1a8:	08012100 	.word	0x08012100
 800d1ac:	7ff00000 	.word	0x7ff00000
 800d1b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1b2:	1c51      	adds	r1, r2, #1
 800d1b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d1b6:	7852      	ldrb	r2, [r2, #1]
 800d1b8:	2a30      	cmp	r2, #48	@ 0x30
 800d1ba:	d0f9      	beq.n	800d1b0 <_strtod_l+0x298>
 800d1bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d1c0:	2908      	cmp	r1, #8
 800d1c2:	f63f af78 	bhi.w	800d0b6 <_strtod_l+0x19e>
 800d1c6:	3a30      	subs	r2, #48	@ 0x30
 800d1c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1ce:	f04f 080a 	mov.w	r8, #10
 800d1d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1d4:	1c56      	adds	r6, r2, #1
 800d1d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800d1d8:	7852      	ldrb	r2, [r2, #1]
 800d1da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d1de:	f1be 0f09 	cmp.w	lr, #9
 800d1e2:	d939      	bls.n	800d258 <_strtod_l+0x340>
 800d1e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d1e6:	1a76      	subs	r6, r6, r1
 800d1e8:	2e08      	cmp	r6, #8
 800d1ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d1ee:	dc03      	bgt.n	800d1f8 <_strtod_l+0x2e0>
 800d1f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1f2:	4588      	cmp	r8, r1
 800d1f4:	bfa8      	it	ge
 800d1f6:	4688      	movge	r8, r1
 800d1f8:	f1bc 0f00 	cmp.w	ip, #0
 800d1fc:	d001      	beq.n	800d202 <_strtod_l+0x2ea>
 800d1fe:	f1c8 0800 	rsb	r8, r8, #0
 800d202:	2d00      	cmp	r5, #0
 800d204:	d14e      	bne.n	800d2a4 <_strtod_l+0x38c>
 800d206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d208:	4308      	orrs	r0, r1
 800d20a:	f47f aebe 	bne.w	800cf8a <_strtod_l+0x72>
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f47f aed6 	bne.w	800cfc0 <_strtod_l+0xa8>
 800d214:	2a69      	cmp	r2, #105	@ 0x69
 800d216:	d028      	beq.n	800d26a <_strtod_l+0x352>
 800d218:	dc25      	bgt.n	800d266 <_strtod_l+0x34e>
 800d21a:	2a49      	cmp	r2, #73	@ 0x49
 800d21c:	d025      	beq.n	800d26a <_strtod_l+0x352>
 800d21e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d220:	f47f aece 	bne.w	800cfc0 <_strtod_l+0xa8>
 800d224:	499b      	ldr	r1, [pc, #620]	@ (800d494 <_strtod_l+0x57c>)
 800d226:	a819      	add	r0, sp, #100	@ 0x64
 800d228:	f001 f9ee 	bl	800e608 <__match>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	f43f aec7 	beq.w	800cfc0 <_strtod_l+0xa8>
 800d232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b28      	cmp	r3, #40	@ 0x28
 800d238:	d12e      	bne.n	800d298 <_strtod_l+0x380>
 800d23a:	4997      	ldr	r1, [pc, #604]	@ (800d498 <_strtod_l+0x580>)
 800d23c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d23e:	a819      	add	r0, sp, #100	@ 0x64
 800d240:	f001 f9f6 	bl	800e630 <__hexnan>
 800d244:	2805      	cmp	r0, #5
 800d246:	d127      	bne.n	800d298 <_strtod_l+0x380>
 800d248:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d24a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d24e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d252:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d256:	e698      	b.n	800cf8a <_strtod_l+0x72>
 800d258:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d25a:	fb08 2101 	mla	r1, r8, r1, r2
 800d25e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d262:	920e      	str	r2, [sp, #56]	@ 0x38
 800d264:	e7b5      	b.n	800d1d2 <_strtod_l+0x2ba>
 800d266:	2a6e      	cmp	r2, #110	@ 0x6e
 800d268:	e7da      	b.n	800d220 <_strtod_l+0x308>
 800d26a:	498c      	ldr	r1, [pc, #560]	@ (800d49c <_strtod_l+0x584>)
 800d26c:	a819      	add	r0, sp, #100	@ 0x64
 800d26e:	f001 f9cb 	bl	800e608 <__match>
 800d272:	2800      	cmp	r0, #0
 800d274:	f43f aea4 	beq.w	800cfc0 <_strtod_l+0xa8>
 800d278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d27a:	4989      	ldr	r1, [pc, #548]	@ (800d4a0 <_strtod_l+0x588>)
 800d27c:	3b01      	subs	r3, #1
 800d27e:	a819      	add	r0, sp, #100	@ 0x64
 800d280:	9319      	str	r3, [sp, #100]	@ 0x64
 800d282:	f001 f9c1 	bl	800e608 <__match>
 800d286:	b910      	cbnz	r0, 800d28e <_strtod_l+0x376>
 800d288:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d28a:	3301      	adds	r3, #1
 800d28c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d28e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d4b0 <_strtod_l+0x598>
 800d292:	f04f 0a00 	mov.w	sl, #0
 800d296:	e678      	b.n	800cf8a <_strtod_l+0x72>
 800d298:	4882      	ldr	r0, [pc, #520]	@ (800d4a4 <_strtod_l+0x58c>)
 800d29a:	f000 fef1 	bl	800e080 <nan>
 800d29e:	ec5b ab10 	vmov	sl, fp, d0
 800d2a2:	e672      	b.n	800cf8a <_strtod_l+0x72>
 800d2a4:	eba8 0309 	sub.w	r3, r8, r9
 800d2a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ac:	2f00      	cmp	r7, #0
 800d2ae:	bf08      	it	eq
 800d2b0:	462f      	moveq	r7, r5
 800d2b2:	2d10      	cmp	r5, #16
 800d2b4:	462c      	mov	r4, r5
 800d2b6:	bfa8      	it	ge
 800d2b8:	2410      	movge	r4, #16
 800d2ba:	f7f3 f933 	bl	8000524 <__aeabi_ui2d>
 800d2be:	2d09      	cmp	r5, #9
 800d2c0:	4682      	mov	sl, r0
 800d2c2:	468b      	mov	fp, r1
 800d2c4:	dc13      	bgt.n	800d2ee <_strtod_l+0x3d6>
 800d2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f43f ae5e 	beq.w	800cf8a <_strtod_l+0x72>
 800d2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d0:	dd78      	ble.n	800d3c4 <_strtod_l+0x4ac>
 800d2d2:	2b16      	cmp	r3, #22
 800d2d4:	dc5f      	bgt.n	800d396 <_strtod_l+0x47e>
 800d2d6:	4974      	ldr	r1, [pc, #464]	@ (800d4a8 <_strtod_l+0x590>)
 800d2d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2e0:	4652      	mov	r2, sl
 800d2e2:	465b      	mov	r3, fp
 800d2e4:	f7f3 f998 	bl	8000618 <__aeabi_dmul>
 800d2e8:	4682      	mov	sl, r0
 800d2ea:	468b      	mov	fp, r1
 800d2ec:	e64d      	b.n	800cf8a <_strtod_l+0x72>
 800d2ee:	4b6e      	ldr	r3, [pc, #440]	@ (800d4a8 <_strtod_l+0x590>)
 800d2f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d2f8:	f7f3 f98e 	bl	8000618 <__aeabi_dmul>
 800d2fc:	4682      	mov	sl, r0
 800d2fe:	9808      	ldr	r0, [sp, #32]
 800d300:	468b      	mov	fp, r1
 800d302:	f7f3 f90f 	bl	8000524 <__aeabi_ui2d>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4650      	mov	r0, sl
 800d30c:	4659      	mov	r1, fp
 800d30e:	f7f2 ffcd 	bl	80002ac <__adddf3>
 800d312:	2d0f      	cmp	r5, #15
 800d314:	4682      	mov	sl, r0
 800d316:	468b      	mov	fp, r1
 800d318:	ddd5      	ble.n	800d2c6 <_strtod_l+0x3ae>
 800d31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d31c:	1b2c      	subs	r4, r5, r4
 800d31e:	441c      	add	r4, r3
 800d320:	2c00      	cmp	r4, #0
 800d322:	f340 8096 	ble.w	800d452 <_strtod_l+0x53a>
 800d326:	f014 030f 	ands.w	r3, r4, #15
 800d32a:	d00a      	beq.n	800d342 <_strtod_l+0x42a>
 800d32c:	495e      	ldr	r1, [pc, #376]	@ (800d4a8 <_strtod_l+0x590>)
 800d32e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d332:	4652      	mov	r2, sl
 800d334:	465b      	mov	r3, fp
 800d336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d33a:	f7f3 f96d 	bl	8000618 <__aeabi_dmul>
 800d33e:	4682      	mov	sl, r0
 800d340:	468b      	mov	fp, r1
 800d342:	f034 040f 	bics.w	r4, r4, #15
 800d346:	d073      	beq.n	800d430 <_strtod_l+0x518>
 800d348:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d34c:	dd48      	ble.n	800d3e0 <_strtod_l+0x4c8>
 800d34e:	2400      	movs	r4, #0
 800d350:	46a0      	mov	r8, r4
 800d352:	940a      	str	r4, [sp, #40]	@ 0x28
 800d354:	46a1      	mov	r9, r4
 800d356:	9a05      	ldr	r2, [sp, #20]
 800d358:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d4b0 <_strtod_l+0x598>
 800d35c:	2322      	movs	r3, #34	@ 0x22
 800d35e:	6013      	str	r3, [r2, #0]
 800d360:	f04f 0a00 	mov.w	sl, #0
 800d364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d366:	2b00      	cmp	r3, #0
 800d368:	f43f ae0f 	beq.w	800cf8a <_strtod_l+0x72>
 800d36c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d36e:	9805      	ldr	r0, [sp, #20]
 800d370:	f7ff f942 	bl	800c5f8 <_Bfree>
 800d374:	9805      	ldr	r0, [sp, #20]
 800d376:	4649      	mov	r1, r9
 800d378:	f7ff f93e 	bl	800c5f8 <_Bfree>
 800d37c:	9805      	ldr	r0, [sp, #20]
 800d37e:	4641      	mov	r1, r8
 800d380:	f7ff f93a 	bl	800c5f8 <_Bfree>
 800d384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d386:	9805      	ldr	r0, [sp, #20]
 800d388:	f7ff f936 	bl	800c5f8 <_Bfree>
 800d38c:	9805      	ldr	r0, [sp, #20]
 800d38e:	4621      	mov	r1, r4
 800d390:	f7ff f932 	bl	800c5f8 <_Bfree>
 800d394:	e5f9      	b.n	800cf8a <_strtod_l+0x72>
 800d396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d398:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d39c:	4293      	cmp	r3, r2
 800d39e:	dbbc      	blt.n	800d31a <_strtod_l+0x402>
 800d3a0:	4c41      	ldr	r4, [pc, #260]	@ (800d4a8 <_strtod_l+0x590>)
 800d3a2:	f1c5 050f 	rsb	r5, r5, #15
 800d3a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d3aa:	4652      	mov	r2, sl
 800d3ac:	465b      	mov	r3, fp
 800d3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3b2:	f7f3 f931 	bl	8000618 <__aeabi_dmul>
 800d3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3b8:	1b5d      	subs	r5, r3, r5
 800d3ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d3be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d3c2:	e78f      	b.n	800d2e4 <_strtod_l+0x3cc>
 800d3c4:	3316      	adds	r3, #22
 800d3c6:	dba8      	blt.n	800d31a <_strtod_l+0x402>
 800d3c8:	4b37      	ldr	r3, [pc, #220]	@ (800d4a8 <_strtod_l+0x590>)
 800d3ca:	eba9 0808 	sub.w	r8, r9, r8
 800d3ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d3d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d3d6:	4650      	mov	r0, sl
 800d3d8:	4659      	mov	r1, fp
 800d3da:	f7f3 fa47 	bl	800086c <__aeabi_ddiv>
 800d3de:	e783      	b.n	800d2e8 <_strtod_l+0x3d0>
 800d3e0:	4b32      	ldr	r3, [pc, #200]	@ (800d4ac <_strtod_l+0x594>)
 800d3e2:	9308      	str	r3, [sp, #32]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	1124      	asrs	r4, r4, #4
 800d3e8:	4650      	mov	r0, sl
 800d3ea:	4659      	mov	r1, fp
 800d3ec:	461e      	mov	r6, r3
 800d3ee:	2c01      	cmp	r4, #1
 800d3f0:	dc21      	bgt.n	800d436 <_strtod_l+0x51e>
 800d3f2:	b10b      	cbz	r3, 800d3f8 <_strtod_l+0x4e0>
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	468b      	mov	fp, r1
 800d3f8:	492c      	ldr	r1, [pc, #176]	@ (800d4ac <_strtod_l+0x594>)
 800d3fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d3fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d402:	4652      	mov	r2, sl
 800d404:	465b      	mov	r3, fp
 800d406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d40a:	f7f3 f905 	bl	8000618 <__aeabi_dmul>
 800d40e:	4b28      	ldr	r3, [pc, #160]	@ (800d4b0 <_strtod_l+0x598>)
 800d410:	460a      	mov	r2, r1
 800d412:	400b      	ands	r3, r1
 800d414:	4927      	ldr	r1, [pc, #156]	@ (800d4b4 <_strtod_l+0x59c>)
 800d416:	428b      	cmp	r3, r1
 800d418:	4682      	mov	sl, r0
 800d41a:	d898      	bhi.n	800d34e <_strtod_l+0x436>
 800d41c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d420:	428b      	cmp	r3, r1
 800d422:	bf86      	itte	hi
 800d424:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d4b8 <_strtod_l+0x5a0>
 800d428:	f04f 3aff 	movhi.w	sl, #4294967295
 800d42c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d430:	2300      	movs	r3, #0
 800d432:	9308      	str	r3, [sp, #32]
 800d434:	e07a      	b.n	800d52c <_strtod_l+0x614>
 800d436:	07e2      	lsls	r2, r4, #31
 800d438:	d505      	bpl.n	800d446 <_strtod_l+0x52e>
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	f7f3 f8ea 	bl	8000618 <__aeabi_dmul>
 800d444:	2301      	movs	r3, #1
 800d446:	9a08      	ldr	r2, [sp, #32]
 800d448:	3208      	adds	r2, #8
 800d44a:	3601      	adds	r6, #1
 800d44c:	1064      	asrs	r4, r4, #1
 800d44e:	9208      	str	r2, [sp, #32]
 800d450:	e7cd      	b.n	800d3ee <_strtod_l+0x4d6>
 800d452:	d0ed      	beq.n	800d430 <_strtod_l+0x518>
 800d454:	4264      	negs	r4, r4
 800d456:	f014 020f 	ands.w	r2, r4, #15
 800d45a:	d00a      	beq.n	800d472 <_strtod_l+0x55a>
 800d45c:	4b12      	ldr	r3, [pc, #72]	@ (800d4a8 <_strtod_l+0x590>)
 800d45e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d462:	4650      	mov	r0, sl
 800d464:	4659      	mov	r1, fp
 800d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46a:	f7f3 f9ff 	bl	800086c <__aeabi_ddiv>
 800d46e:	4682      	mov	sl, r0
 800d470:	468b      	mov	fp, r1
 800d472:	1124      	asrs	r4, r4, #4
 800d474:	d0dc      	beq.n	800d430 <_strtod_l+0x518>
 800d476:	2c1f      	cmp	r4, #31
 800d478:	dd20      	ble.n	800d4bc <_strtod_l+0x5a4>
 800d47a:	2400      	movs	r4, #0
 800d47c:	46a0      	mov	r8, r4
 800d47e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d480:	46a1      	mov	r9, r4
 800d482:	9a05      	ldr	r2, [sp, #20]
 800d484:	2322      	movs	r3, #34	@ 0x22
 800d486:	f04f 0a00 	mov.w	sl, #0
 800d48a:	f04f 0b00 	mov.w	fp, #0
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	e768      	b.n	800d364 <_strtod_l+0x44c>
 800d492:	bf00      	nop
 800d494:	08011eed 	.word	0x08011eed
 800d498:	08012104 	.word	0x08012104
 800d49c:	08011ee5 	.word	0x08011ee5
 800d4a0:	08011f1c 	.word	0x08011f1c
 800d4a4:	080122ad 	.word	0x080122ad
 800d4a8:	08012038 	.word	0x08012038
 800d4ac:	08012010 	.word	0x08012010
 800d4b0:	7ff00000 	.word	0x7ff00000
 800d4b4:	7ca00000 	.word	0x7ca00000
 800d4b8:	7fefffff 	.word	0x7fefffff
 800d4bc:	f014 0310 	ands.w	r3, r4, #16
 800d4c0:	bf18      	it	ne
 800d4c2:	236a      	movne	r3, #106	@ 0x6a
 800d4c4:	4ea9      	ldr	r6, [pc, #676]	@ (800d76c <_strtod_l+0x854>)
 800d4c6:	9308      	str	r3, [sp, #32]
 800d4c8:	4650      	mov	r0, sl
 800d4ca:	4659      	mov	r1, fp
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	07e2      	lsls	r2, r4, #31
 800d4d0:	d504      	bpl.n	800d4dc <_strtod_l+0x5c4>
 800d4d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4d6:	f7f3 f89f 	bl	8000618 <__aeabi_dmul>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	1064      	asrs	r4, r4, #1
 800d4de:	f106 0608 	add.w	r6, r6, #8
 800d4e2:	d1f4      	bne.n	800d4ce <_strtod_l+0x5b6>
 800d4e4:	b10b      	cbz	r3, 800d4ea <_strtod_l+0x5d2>
 800d4e6:	4682      	mov	sl, r0
 800d4e8:	468b      	mov	fp, r1
 800d4ea:	9b08      	ldr	r3, [sp, #32]
 800d4ec:	b1b3      	cbz	r3, 800d51c <_strtod_l+0x604>
 800d4ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d4f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	4659      	mov	r1, fp
 800d4fa:	dd0f      	ble.n	800d51c <_strtod_l+0x604>
 800d4fc:	2b1f      	cmp	r3, #31
 800d4fe:	dd55      	ble.n	800d5ac <_strtod_l+0x694>
 800d500:	2b34      	cmp	r3, #52	@ 0x34
 800d502:	bfde      	ittt	le
 800d504:	f04f 33ff 	movle.w	r3, #4294967295
 800d508:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d50c:	4093      	lslle	r3, r2
 800d50e:	f04f 0a00 	mov.w	sl, #0
 800d512:	bfcc      	ite	gt
 800d514:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d518:	ea03 0b01 	andle.w	fp, r3, r1
 800d51c:	2200      	movs	r2, #0
 800d51e:	2300      	movs	r3, #0
 800d520:	4650      	mov	r0, sl
 800d522:	4659      	mov	r1, fp
 800d524:	f7f3 fae0 	bl	8000ae8 <__aeabi_dcmpeq>
 800d528:	2800      	cmp	r0, #0
 800d52a:	d1a6      	bne.n	800d47a <_strtod_l+0x562>
 800d52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d532:	9805      	ldr	r0, [sp, #20]
 800d534:	462b      	mov	r3, r5
 800d536:	463a      	mov	r2, r7
 800d538:	f7ff f8c6 	bl	800c6c8 <__s2b>
 800d53c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d53e:	2800      	cmp	r0, #0
 800d540:	f43f af05 	beq.w	800d34e <_strtod_l+0x436>
 800d544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d546:	2a00      	cmp	r2, #0
 800d548:	eba9 0308 	sub.w	r3, r9, r8
 800d54c:	bfa8      	it	ge
 800d54e:	2300      	movge	r3, #0
 800d550:	9312      	str	r3, [sp, #72]	@ 0x48
 800d552:	2400      	movs	r4, #0
 800d554:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d558:	9316      	str	r3, [sp, #88]	@ 0x58
 800d55a:	46a0      	mov	r8, r4
 800d55c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d55e:	9805      	ldr	r0, [sp, #20]
 800d560:	6859      	ldr	r1, [r3, #4]
 800d562:	f7ff f809 	bl	800c578 <_Balloc>
 800d566:	4681      	mov	r9, r0
 800d568:	2800      	cmp	r0, #0
 800d56a:	f43f aef4 	beq.w	800d356 <_strtod_l+0x43e>
 800d56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d570:	691a      	ldr	r2, [r3, #16]
 800d572:	3202      	adds	r2, #2
 800d574:	f103 010c 	add.w	r1, r3, #12
 800d578:	0092      	lsls	r2, r2, #2
 800d57a:	300c      	adds	r0, #12
 800d57c:	f000 fd72 	bl	800e064 <memcpy>
 800d580:	ec4b ab10 	vmov	d0, sl, fp
 800d584:	9805      	ldr	r0, [sp, #20]
 800d586:	aa1c      	add	r2, sp, #112	@ 0x70
 800d588:	a91b      	add	r1, sp, #108	@ 0x6c
 800d58a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d58e:	f7ff fbd7 	bl	800cd40 <__d2b>
 800d592:	901a      	str	r0, [sp, #104]	@ 0x68
 800d594:	2800      	cmp	r0, #0
 800d596:	f43f aede 	beq.w	800d356 <_strtod_l+0x43e>
 800d59a:	9805      	ldr	r0, [sp, #20]
 800d59c:	2101      	movs	r1, #1
 800d59e:	f7ff f929 	bl	800c7f4 <__i2b>
 800d5a2:	4680      	mov	r8, r0
 800d5a4:	b948      	cbnz	r0, 800d5ba <_strtod_l+0x6a2>
 800d5a6:	f04f 0800 	mov.w	r8, #0
 800d5aa:	e6d4      	b.n	800d356 <_strtod_l+0x43e>
 800d5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b4:	ea03 0a0a 	and.w	sl, r3, sl
 800d5b8:	e7b0      	b.n	800d51c <_strtod_l+0x604>
 800d5ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d5bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	bfab      	itete	ge
 800d5c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d5c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d5c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d5c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d5ca:	bfac      	ite	ge
 800d5cc:	18ef      	addge	r7, r5, r3
 800d5ce:	1b5e      	sublt	r6, r3, r5
 800d5d0:	9b08      	ldr	r3, [sp, #32]
 800d5d2:	1aed      	subs	r5, r5, r3
 800d5d4:	4415      	add	r5, r2
 800d5d6:	4b66      	ldr	r3, [pc, #408]	@ (800d770 <_strtod_l+0x858>)
 800d5d8:	3d01      	subs	r5, #1
 800d5da:	429d      	cmp	r5, r3
 800d5dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d5e0:	da50      	bge.n	800d684 <_strtod_l+0x76c>
 800d5e2:	1b5b      	subs	r3, r3, r5
 800d5e4:	2b1f      	cmp	r3, #31
 800d5e6:	eba2 0203 	sub.w	r2, r2, r3
 800d5ea:	f04f 0101 	mov.w	r1, #1
 800d5ee:	dc3d      	bgt.n	800d66c <_strtod_l+0x754>
 800d5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5fa:	18bd      	adds	r5, r7, r2
 800d5fc:	9b08      	ldr	r3, [sp, #32]
 800d5fe:	42af      	cmp	r7, r5
 800d600:	4416      	add	r6, r2
 800d602:	441e      	add	r6, r3
 800d604:	463b      	mov	r3, r7
 800d606:	bfa8      	it	ge
 800d608:	462b      	movge	r3, r5
 800d60a:	42b3      	cmp	r3, r6
 800d60c:	bfa8      	it	ge
 800d60e:	4633      	movge	r3, r6
 800d610:	2b00      	cmp	r3, #0
 800d612:	bfc2      	ittt	gt
 800d614:	1aed      	subgt	r5, r5, r3
 800d616:	1af6      	subgt	r6, r6, r3
 800d618:	1aff      	subgt	r7, r7, r3
 800d61a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	dd16      	ble.n	800d64e <_strtod_l+0x736>
 800d620:	4641      	mov	r1, r8
 800d622:	9805      	ldr	r0, [sp, #20]
 800d624:	461a      	mov	r2, r3
 800d626:	f7ff f9a5 	bl	800c974 <__pow5mult>
 800d62a:	4680      	mov	r8, r0
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d0ba      	beq.n	800d5a6 <_strtod_l+0x68e>
 800d630:	4601      	mov	r1, r0
 800d632:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d634:	9805      	ldr	r0, [sp, #20]
 800d636:	f7ff f8f3 	bl	800c820 <__multiply>
 800d63a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d63c:	2800      	cmp	r0, #0
 800d63e:	f43f ae8a 	beq.w	800d356 <_strtod_l+0x43e>
 800d642:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d644:	9805      	ldr	r0, [sp, #20]
 800d646:	f7fe ffd7 	bl	800c5f8 <_Bfree>
 800d64a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d64c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d64e:	2d00      	cmp	r5, #0
 800d650:	dc1d      	bgt.n	800d68e <_strtod_l+0x776>
 800d652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d654:	2b00      	cmp	r3, #0
 800d656:	dd23      	ble.n	800d6a0 <_strtod_l+0x788>
 800d658:	4649      	mov	r1, r9
 800d65a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d65c:	9805      	ldr	r0, [sp, #20]
 800d65e:	f7ff f989 	bl	800c974 <__pow5mult>
 800d662:	4681      	mov	r9, r0
 800d664:	b9e0      	cbnz	r0, 800d6a0 <_strtod_l+0x788>
 800d666:	f04f 0900 	mov.w	r9, #0
 800d66a:	e674      	b.n	800d356 <_strtod_l+0x43e>
 800d66c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d670:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d674:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d678:	35e2      	adds	r5, #226	@ 0xe2
 800d67a:	fa01 f305 	lsl.w	r3, r1, r5
 800d67e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d680:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d682:	e7ba      	b.n	800d5fa <_strtod_l+0x6e2>
 800d684:	2300      	movs	r3, #0
 800d686:	9310      	str	r3, [sp, #64]	@ 0x40
 800d688:	2301      	movs	r3, #1
 800d68a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d68c:	e7b5      	b.n	800d5fa <_strtod_l+0x6e2>
 800d68e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d690:	9805      	ldr	r0, [sp, #20]
 800d692:	462a      	mov	r2, r5
 800d694:	f7ff f9c8 	bl	800ca28 <__lshift>
 800d698:	901a      	str	r0, [sp, #104]	@ 0x68
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d1d9      	bne.n	800d652 <_strtod_l+0x73a>
 800d69e:	e65a      	b.n	800d356 <_strtod_l+0x43e>
 800d6a0:	2e00      	cmp	r6, #0
 800d6a2:	dd07      	ble.n	800d6b4 <_strtod_l+0x79c>
 800d6a4:	4649      	mov	r1, r9
 800d6a6:	9805      	ldr	r0, [sp, #20]
 800d6a8:	4632      	mov	r2, r6
 800d6aa:	f7ff f9bd 	bl	800ca28 <__lshift>
 800d6ae:	4681      	mov	r9, r0
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d0d8      	beq.n	800d666 <_strtod_l+0x74e>
 800d6b4:	2f00      	cmp	r7, #0
 800d6b6:	dd08      	ble.n	800d6ca <_strtod_l+0x7b2>
 800d6b8:	4641      	mov	r1, r8
 800d6ba:	9805      	ldr	r0, [sp, #20]
 800d6bc:	463a      	mov	r2, r7
 800d6be:	f7ff f9b3 	bl	800ca28 <__lshift>
 800d6c2:	4680      	mov	r8, r0
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	f43f ae46 	beq.w	800d356 <_strtod_l+0x43e>
 800d6ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6cc:	9805      	ldr	r0, [sp, #20]
 800d6ce:	464a      	mov	r2, r9
 800d6d0:	f7ff fa32 	bl	800cb38 <__mdiff>
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	f43f ae3d 	beq.w	800d356 <_strtod_l+0x43e>
 800d6dc:	68c3      	ldr	r3, [r0, #12]
 800d6de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	60c3      	str	r3, [r0, #12]
 800d6e4:	4641      	mov	r1, r8
 800d6e6:	f7ff fa0b 	bl	800cb00 <__mcmp>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	da46      	bge.n	800d77c <_strtod_l+0x864>
 800d6ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6f0:	ea53 030a 	orrs.w	r3, r3, sl
 800d6f4:	d16c      	bne.n	800d7d0 <_strtod_l+0x8b8>
 800d6f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d168      	bne.n	800d7d0 <_strtod_l+0x8b8>
 800d6fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d702:	0d1b      	lsrs	r3, r3, #20
 800d704:	051b      	lsls	r3, r3, #20
 800d706:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d70a:	d961      	bls.n	800d7d0 <_strtod_l+0x8b8>
 800d70c:	6963      	ldr	r3, [r4, #20]
 800d70e:	b913      	cbnz	r3, 800d716 <_strtod_l+0x7fe>
 800d710:	6923      	ldr	r3, [r4, #16]
 800d712:	2b01      	cmp	r3, #1
 800d714:	dd5c      	ble.n	800d7d0 <_strtod_l+0x8b8>
 800d716:	4621      	mov	r1, r4
 800d718:	2201      	movs	r2, #1
 800d71a:	9805      	ldr	r0, [sp, #20]
 800d71c:	f7ff f984 	bl	800ca28 <__lshift>
 800d720:	4641      	mov	r1, r8
 800d722:	4604      	mov	r4, r0
 800d724:	f7ff f9ec 	bl	800cb00 <__mcmp>
 800d728:	2800      	cmp	r0, #0
 800d72a:	dd51      	ble.n	800d7d0 <_strtod_l+0x8b8>
 800d72c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d730:	9a08      	ldr	r2, [sp, #32]
 800d732:	0d1b      	lsrs	r3, r3, #20
 800d734:	051b      	lsls	r3, r3, #20
 800d736:	2a00      	cmp	r2, #0
 800d738:	d06b      	beq.n	800d812 <_strtod_l+0x8fa>
 800d73a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d73e:	d868      	bhi.n	800d812 <_strtod_l+0x8fa>
 800d740:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d744:	f67f ae9d 	bls.w	800d482 <_strtod_l+0x56a>
 800d748:	4b0a      	ldr	r3, [pc, #40]	@ (800d774 <_strtod_l+0x85c>)
 800d74a:	4650      	mov	r0, sl
 800d74c:	4659      	mov	r1, fp
 800d74e:	2200      	movs	r2, #0
 800d750:	f7f2 ff62 	bl	8000618 <__aeabi_dmul>
 800d754:	4b08      	ldr	r3, [pc, #32]	@ (800d778 <_strtod_l+0x860>)
 800d756:	400b      	ands	r3, r1
 800d758:	4682      	mov	sl, r0
 800d75a:	468b      	mov	fp, r1
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f47f ae05 	bne.w	800d36c <_strtod_l+0x454>
 800d762:	9a05      	ldr	r2, [sp, #20]
 800d764:	2322      	movs	r3, #34	@ 0x22
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	e600      	b.n	800d36c <_strtod_l+0x454>
 800d76a:	bf00      	nop
 800d76c:	08012130 	.word	0x08012130
 800d770:	fffffc02 	.word	0xfffffc02
 800d774:	39500000 	.word	0x39500000
 800d778:	7ff00000 	.word	0x7ff00000
 800d77c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d780:	d165      	bne.n	800d84e <_strtod_l+0x936>
 800d782:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d788:	b35a      	cbz	r2, 800d7e2 <_strtod_l+0x8ca>
 800d78a:	4a9f      	ldr	r2, [pc, #636]	@ (800da08 <_strtod_l+0xaf0>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d12b      	bne.n	800d7e8 <_strtod_l+0x8d0>
 800d790:	9b08      	ldr	r3, [sp, #32]
 800d792:	4651      	mov	r1, sl
 800d794:	b303      	cbz	r3, 800d7d8 <_strtod_l+0x8c0>
 800d796:	4b9d      	ldr	r3, [pc, #628]	@ (800da0c <_strtod_l+0xaf4>)
 800d798:	465a      	mov	r2, fp
 800d79a:	4013      	ands	r3, r2
 800d79c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a4:	d81b      	bhi.n	800d7de <_strtod_l+0x8c6>
 800d7a6:	0d1b      	lsrs	r3, r3, #20
 800d7a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b0:	4299      	cmp	r1, r3
 800d7b2:	d119      	bne.n	800d7e8 <_strtod_l+0x8d0>
 800d7b4:	4b96      	ldr	r3, [pc, #600]	@ (800da10 <_strtod_l+0xaf8>)
 800d7b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d102      	bne.n	800d7c2 <_strtod_l+0x8aa>
 800d7bc:	3101      	adds	r1, #1
 800d7be:	f43f adca 	beq.w	800d356 <_strtod_l+0x43e>
 800d7c2:	4b92      	ldr	r3, [pc, #584]	@ (800da0c <_strtod_l+0xaf4>)
 800d7c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7c6:	401a      	ands	r2, r3
 800d7c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d7cc:	f04f 0a00 	mov.w	sl, #0
 800d7d0:	9b08      	ldr	r3, [sp, #32]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1b8      	bne.n	800d748 <_strtod_l+0x830>
 800d7d6:	e5c9      	b.n	800d36c <_strtod_l+0x454>
 800d7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7dc:	e7e8      	b.n	800d7b0 <_strtod_l+0x898>
 800d7de:	4613      	mov	r3, r2
 800d7e0:	e7e6      	b.n	800d7b0 <_strtod_l+0x898>
 800d7e2:	ea53 030a 	orrs.w	r3, r3, sl
 800d7e6:	d0a1      	beq.n	800d72c <_strtod_l+0x814>
 800d7e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d7ea:	b1db      	cbz	r3, 800d824 <_strtod_l+0x90c>
 800d7ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7ee:	4213      	tst	r3, r2
 800d7f0:	d0ee      	beq.n	800d7d0 <_strtod_l+0x8b8>
 800d7f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f4:	9a08      	ldr	r2, [sp, #32]
 800d7f6:	4650      	mov	r0, sl
 800d7f8:	4659      	mov	r1, fp
 800d7fa:	b1bb      	cbz	r3, 800d82c <_strtod_l+0x914>
 800d7fc:	f7ff fb6e 	bl	800cedc <sulp>
 800d800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d804:	ec53 2b10 	vmov	r2, r3, d0
 800d808:	f7f2 fd50 	bl	80002ac <__adddf3>
 800d80c:	4682      	mov	sl, r0
 800d80e:	468b      	mov	fp, r1
 800d810:	e7de      	b.n	800d7d0 <_strtod_l+0x8b8>
 800d812:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d816:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d81a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d81e:	f04f 3aff 	mov.w	sl, #4294967295
 800d822:	e7d5      	b.n	800d7d0 <_strtod_l+0x8b8>
 800d824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d826:	ea13 0f0a 	tst.w	r3, sl
 800d82a:	e7e1      	b.n	800d7f0 <_strtod_l+0x8d8>
 800d82c:	f7ff fb56 	bl	800cedc <sulp>
 800d830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d834:	ec53 2b10 	vmov	r2, r3, d0
 800d838:	f7f2 fd36 	bl	80002a8 <__aeabi_dsub>
 800d83c:	2200      	movs	r2, #0
 800d83e:	2300      	movs	r3, #0
 800d840:	4682      	mov	sl, r0
 800d842:	468b      	mov	fp, r1
 800d844:	f7f3 f950 	bl	8000ae8 <__aeabi_dcmpeq>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d0c1      	beq.n	800d7d0 <_strtod_l+0x8b8>
 800d84c:	e619      	b.n	800d482 <_strtod_l+0x56a>
 800d84e:	4641      	mov	r1, r8
 800d850:	4620      	mov	r0, r4
 800d852:	f7ff facd 	bl	800cdf0 <__ratio>
 800d856:	ec57 6b10 	vmov	r6, r7, d0
 800d85a:	2200      	movs	r2, #0
 800d85c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d860:	4630      	mov	r0, r6
 800d862:	4639      	mov	r1, r7
 800d864:	f7f3 f954 	bl	8000b10 <__aeabi_dcmple>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d06f      	beq.n	800d94c <_strtod_l+0xa34>
 800d86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d17a      	bne.n	800d968 <_strtod_l+0xa50>
 800d872:	f1ba 0f00 	cmp.w	sl, #0
 800d876:	d158      	bne.n	800d92a <_strtod_l+0xa12>
 800d878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d87a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d15a      	bne.n	800d938 <_strtod_l+0xa20>
 800d882:	4b64      	ldr	r3, [pc, #400]	@ (800da14 <_strtod_l+0xafc>)
 800d884:	2200      	movs	r2, #0
 800d886:	4630      	mov	r0, r6
 800d888:	4639      	mov	r1, r7
 800d88a:	f7f3 f937 	bl	8000afc <__aeabi_dcmplt>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d159      	bne.n	800d946 <_strtod_l+0xa2e>
 800d892:	4630      	mov	r0, r6
 800d894:	4639      	mov	r1, r7
 800d896:	4b60      	ldr	r3, [pc, #384]	@ (800da18 <_strtod_l+0xb00>)
 800d898:	2200      	movs	r2, #0
 800d89a:	f7f2 febd 	bl	8000618 <__aeabi_dmul>
 800d89e:	4606      	mov	r6, r0
 800d8a0:	460f      	mov	r7, r1
 800d8a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d8a6:	9606      	str	r6, [sp, #24]
 800d8a8:	9307      	str	r3, [sp, #28]
 800d8aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8ae:	4d57      	ldr	r5, [pc, #348]	@ (800da0c <_strtod_l+0xaf4>)
 800d8b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d8b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8b6:	401d      	ands	r5, r3
 800d8b8:	4b58      	ldr	r3, [pc, #352]	@ (800da1c <_strtod_l+0xb04>)
 800d8ba:	429d      	cmp	r5, r3
 800d8bc:	f040 80b2 	bne.w	800da24 <_strtod_l+0xb0c>
 800d8c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d8c6:	ec4b ab10 	vmov	d0, sl, fp
 800d8ca:	f7ff f9c9 	bl	800cc60 <__ulp>
 800d8ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8d2:	ec51 0b10 	vmov	r0, r1, d0
 800d8d6:	f7f2 fe9f 	bl	8000618 <__aeabi_dmul>
 800d8da:	4652      	mov	r2, sl
 800d8dc:	465b      	mov	r3, fp
 800d8de:	f7f2 fce5 	bl	80002ac <__adddf3>
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4949      	ldr	r1, [pc, #292]	@ (800da0c <_strtod_l+0xaf4>)
 800d8e6:	4a4e      	ldr	r2, [pc, #312]	@ (800da20 <_strtod_l+0xb08>)
 800d8e8:	4019      	ands	r1, r3
 800d8ea:	4291      	cmp	r1, r2
 800d8ec:	4682      	mov	sl, r0
 800d8ee:	d942      	bls.n	800d976 <_strtod_l+0xa5e>
 800d8f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8f2:	4b47      	ldr	r3, [pc, #284]	@ (800da10 <_strtod_l+0xaf8>)
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d103      	bne.n	800d900 <_strtod_l+0x9e8>
 800d8f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	f43f ad2b 	beq.w	800d356 <_strtod_l+0x43e>
 800d900:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800da10 <_strtod_l+0xaf8>
 800d904:	f04f 3aff 	mov.w	sl, #4294967295
 800d908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d90a:	9805      	ldr	r0, [sp, #20]
 800d90c:	f7fe fe74 	bl	800c5f8 <_Bfree>
 800d910:	9805      	ldr	r0, [sp, #20]
 800d912:	4649      	mov	r1, r9
 800d914:	f7fe fe70 	bl	800c5f8 <_Bfree>
 800d918:	9805      	ldr	r0, [sp, #20]
 800d91a:	4641      	mov	r1, r8
 800d91c:	f7fe fe6c 	bl	800c5f8 <_Bfree>
 800d920:	9805      	ldr	r0, [sp, #20]
 800d922:	4621      	mov	r1, r4
 800d924:	f7fe fe68 	bl	800c5f8 <_Bfree>
 800d928:	e618      	b.n	800d55c <_strtod_l+0x644>
 800d92a:	f1ba 0f01 	cmp.w	sl, #1
 800d92e:	d103      	bne.n	800d938 <_strtod_l+0xa20>
 800d930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d932:	2b00      	cmp	r3, #0
 800d934:	f43f ada5 	beq.w	800d482 <_strtod_l+0x56a>
 800d938:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d9e8 <_strtod_l+0xad0>
 800d93c:	4f35      	ldr	r7, [pc, #212]	@ (800da14 <_strtod_l+0xafc>)
 800d93e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d942:	2600      	movs	r6, #0
 800d944:	e7b1      	b.n	800d8aa <_strtod_l+0x992>
 800d946:	4f34      	ldr	r7, [pc, #208]	@ (800da18 <_strtod_l+0xb00>)
 800d948:	2600      	movs	r6, #0
 800d94a:	e7aa      	b.n	800d8a2 <_strtod_l+0x98a>
 800d94c:	4b32      	ldr	r3, [pc, #200]	@ (800da18 <_strtod_l+0xb00>)
 800d94e:	4630      	mov	r0, r6
 800d950:	4639      	mov	r1, r7
 800d952:	2200      	movs	r2, #0
 800d954:	f7f2 fe60 	bl	8000618 <__aeabi_dmul>
 800d958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d95a:	4606      	mov	r6, r0
 800d95c:	460f      	mov	r7, r1
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d09f      	beq.n	800d8a2 <_strtod_l+0x98a>
 800d962:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d966:	e7a0      	b.n	800d8aa <_strtod_l+0x992>
 800d968:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d9f0 <_strtod_l+0xad8>
 800d96c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d970:	ec57 6b17 	vmov	r6, r7, d7
 800d974:	e799      	b.n	800d8aa <_strtod_l+0x992>
 800d976:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d97a:	9b08      	ldr	r3, [sp, #32]
 800d97c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1c1      	bne.n	800d908 <_strtod_l+0x9f0>
 800d984:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d988:	0d1b      	lsrs	r3, r3, #20
 800d98a:	051b      	lsls	r3, r3, #20
 800d98c:	429d      	cmp	r5, r3
 800d98e:	d1bb      	bne.n	800d908 <_strtod_l+0x9f0>
 800d990:	4630      	mov	r0, r6
 800d992:	4639      	mov	r1, r7
 800d994:	f7f3 f9a0 	bl	8000cd8 <__aeabi_d2lz>
 800d998:	f7f2 fe10 	bl	80005bc <__aeabi_l2d>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	f7f2 fc80 	bl	80002a8 <__aeabi_dsub>
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d9b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9b6:	ea46 060a 	orr.w	r6, r6, sl
 800d9ba:	431e      	orrs	r6, r3
 800d9bc:	d06f      	beq.n	800da9e <_strtod_l+0xb86>
 800d9be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d9f8 <_strtod_l+0xae0>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f3 f89a 	bl	8000afc <__aeabi_dcmplt>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f47f accf 	bne.w	800d36c <_strtod_l+0x454>
 800d9ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800da00 <_strtod_l+0xae8>)
 800d9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9d8:	f7f3 f8ae 	bl	8000b38 <__aeabi_dcmpgt>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d093      	beq.n	800d908 <_strtod_l+0x9f0>
 800d9e0:	e4c4      	b.n	800d36c <_strtod_l+0x454>
 800d9e2:	bf00      	nop
 800d9e4:	f3af 8000 	nop.w
 800d9e8:	00000000 	.word	0x00000000
 800d9ec:	bff00000 	.word	0xbff00000
 800d9f0:	00000000 	.word	0x00000000
 800d9f4:	3ff00000 	.word	0x3ff00000
 800d9f8:	94a03595 	.word	0x94a03595
 800d9fc:	3fdfffff 	.word	0x3fdfffff
 800da00:	35afe535 	.word	0x35afe535
 800da04:	3fe00000 	.word	0x3fe00000
 800da08:	000fffff 	.word	0x000fffff
 800da0c:	7ff00000 	.word	0x7ff00000
 800da10:	7fefffff 	.word	0x7fefffff
 800da14:	3ff00000 	.word	0x3ff00000
 800da18:	3fe00000 	.word	0x3fe00000
 800da1c:	7fe00000 	.word	0x7fe00000
 800da20:	7c9fffff 	.word	0x7c9fffff
 800da24:	9b08      	ldr	r3, [sp, #32]
 800da26:	b323      	cbz	r3, 800da72 <_strtod_l+0xb5a>
 800da28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800da2c:	d821      	bhi.n	800da72 <_strtod_l+0xb5a>
 800da2e:	a328      	add	r3, pc, #160	@ (adr r3, 800dad0 <_strtod_l+0xbb8>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	4630      	mov	r0, r6
 800da36:	4639      	mov	r1, r7
 800da38:	f7f3 f86a 	bl	8000b10 <__aeabi_dcmple>
 800da3c:	b1a0      	cbz	r0, 800da68 <_strtod_l+0xb50>
 800da3e:	4639      	mov	r1, r7
 800da40:	4630      	mov	r0, r6
 800da42:	f7f3 f8c1 	bl	8000bc8 <__aeabi_d2uiz>
 800da46:	2801      	cmp	r0, #1
 800da48:	bf38      	it	cc
 800da4a:	2001      	movcc	r0, #1
 800da4c:	f7f2 fd6a 	bl	8000524 <__aeabi_ui2d>
 800da50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da52:	4606      	mov	r6, r0
 800da54:	460f      	mov	r7, r1
 800da56:	b9fb      	cbnz	r3, 800da98 <_strtod_l+0xb80>
 800da58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da5c:	9014      	str	r0, [sp, #80]	@ 0x50
 800da5e:	9315      	str	r3, [sp, #84]	@ 0x54
 800da60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800da64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800da68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800da6e:	1b5b      	subs	r3, r3, r5
 800da70:	9311      	str	r3, [sp, #68]	@ 0x44
 800da72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800da76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800da7a:	f7ff f8f1 	bl	800cc60 <__ulp>
 800da7e:	4650      	mov	r0, sl
 800da80:	ec53 2b10 	vmov	r2, r3, d0
 800da84:	4659      	mov	r1, fp
 800da86:	f7f2 fdc7 	bl	8000618 <__aeabi_dmul>
 800da8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800da8e:	f7f2 fc0d 	bl	80002ac <__adddf3>
 800da92:	4682      	mov	sl, r0
 800da94:	468b      	mov	fp, r1
 800da96:	e770      	b.n	800d97a <_strtod_l+0xa62>
 800da98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800da9c:	e7e0      	b.n	800da60 <_strtod_l+0xb48>
 800da9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dad8 <_strtod_l+0xbc0>)
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	f7f3 f82a 	bl	8000afc <__aeabi_dcmplt>
 800daa8:	e798      	b.n	800d9dc <_strtod_l+0xac4>
 800daaa:	2300      	movs	r3, #0
 800daac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800daae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	f7ff ba6d 	b.w	800cf92 <_strtod_l+0x7a>
 800dab8:	2a65      	cmp	r2, #101	@ 0x65
 800daba:	f43f ab66 	beq.w	800d18a <_strtod_l+0x272>
 800dabe:	2a45      	cmp	r2, #69	@ 0x45
 800dac0:	f43f ab63 	beq.w	800d18a <_strtod_l+0x272>
 800dac4:	2301      	movs	r3, #1
 800dac6:	f7ff bb9e 	b.w	800d206 <_strtod_l+0x2ee>
 800daca:	bf00      	nop
 800dacc:	f3af 8000 	nop.w
 800dad0:	ffc00000 	.word	0xffc00000
 800dad4:	41dfffff 	.word	0x41dfffff
 800dad8:	94a03595 	.word	0x94a03595
 800dadc:	3fcfffff 	.word	0x3fcfffff

0800dae0 <_strtod_r>:
 800dae0:	4b01      	ldr	r3, [pc, #4]	@ (800dae8 <_strtod_r+0x8>)
 800dae2:	f7ff ba19 	b.w	800cf18 <_strtod_l>
 800dae6:	bf00      	nop
 800dae8:	200000e4 	.word	0x200000e4

0800daec <_strtol_l.constprop.0>:
 800daec:	2b24      	cmp	r3, #36	@ 0x24
 800daee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf2:	4686      	mov	lr, r0
 800daf4:	4690      	mov	r8, r2
 800daf6:	d801      	bhi.n	800dafc <_strtol_l.constprop.0+0x10>
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d106      	bne.n	800db0a <_strtol_l.constprop.0+0x1e>
 800dafc:	f7fd fdba 	bl	800b674 <__errno>
 800db00:	2316      	movs	r3, #22
 800db02:	6003      	str	r3, [r0, #0]
 800db04:	2000      	movs	r0, #0
 800db06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db0a:	4834      	ldr	r0, [pc, #208]	@ (800dbdc <_strtol_l.constprop.0+0xf0>)
 800db0c:	460d      	mov	r5, r1
 800db0e:	462a      	mov	r2, r5
 800db10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db14:	5d06      	ldrb	r6, [r0, r4]
 800db16:	f016 0608 	ands.w	r6, r6, #8
 800db1a:	d1f8      	bne.n	800db0e <_strtol_l.constprop.0+0x22>
 800db1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800db1e:	d12d      	bne.n	800db7c <_strtol_l.constprop.0+0x90>
 800db20:	782c      	ldrb	r4, [r5, #0]
 800db22:	2601      	movs	r6, #1
 800db24:	1c95      	adds	r5, r2, #2
 800db26:	f033 0210 	bics.w	r2, r3, #16
 800db2a:	d109      	bne.n	800db40 <_strtol_l.constprop.0+0x54>
 800db2c:	2c30      	cmp	r4, #48	@ 0x30
 800db2e:	d12a      	bne.n	800db86 <_strtol_l.constprop.0+0x9a>
 800db30:	782a      	ldrb	r2, [r5, #0]
 800db32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db36:	2a58      	cmp	r2, #88	@ 0x58
 800db38:	d125      	bne.n	800db86 <_strtol_l.constprop.0+0x9a>
 800db3a:	786c      	ldrb	r4, [r5, #1]
 800db3c:	2310      	movs	r3, #16
 800db3e:	3502      	adds	r5, #2
 800db40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800db44:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db48:	2200      	movs	r2, #0
 800db4a:	fbbc f9f3 	udiv	r9, ip, r3
 800db4e:	4610      	mov	r0, r2
 800db50:	fb03 ca19 	mls	sl, r3, r9, ip
 800db54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800db58:	2f09      	cmp	r7, #9
 800db5a:	d81b      	bhi.n	800db94 <_strtol_l.constprop.0+0xa8>
 800db5c:	463c      	mov	r4, r7
 800db5e:	42a3      	cmp	r3, r4
 800db60:	dd27      	ble.n	800dbb2 <_strtol_l.constprop.0+0xc6>
 800db62:	1c57      	adds	r7, r2, #1
 800db64:	d007      	beq.n	800db76 <_strtol_l.constprop.0+0x8a>
 800db66:	4581      	cmp	r9, r0
 800db68:	d320      	bcc.n	800dbac <_strtol_l.constprop.0+0xc0>
 800db6a:	d101      	bne.n	800db70 <_strtol_l.constprop.0+0x84>
 800db6c:	45a2      	cmp	sl, r4
 800db6e:	db1d      	blt.n	800dbac <_strtol_l.constprop.0+0xc0>
 800db70:	fb00 4003 	mla	r0, r0, r3, r4
 800db74:	2201      	movs	r2, #1
 800db76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db7a:	e7eb      	b.n	800db54 <_strtol_l.constprop.0+0x68>
 800db7c:	2c2b      	cmp	r4, #43	@ 0x2b
 800db7e:	bf04      	itt	eq
 800db80:	782c      	ldrbeq	r4, [r5, #0]
 800db82:	1c95      	addeq	r5, r2, #2
 800db84:	e7cf      	b.n	800db26 <_strtol_l.constprop.0+0x3a>
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1da      	bne.n	800db40 <_strtol_l.constprop.0+0x54>
 800db8a:	2c30      	cmp	r4, #48	@ 0x30
 800db8c:	bf0c      	ite	eq
 800db8e:	2308      	moveq	r3, #8
 800db90:	230a      	movne	r3, #10
 800db92:	e7d5      	b.n	800db40 <_strtol_l.constprop.0+0x54>
 800db94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800db98:	2f19      	cmp	r7, #25
 800db9a:	d801      	bhi.n	800dba0 <_strtol_l.constprop.0+0xb4>
 800db9c:	3c37      	subs	r4, #55	@ 0x37
 800db9e:	e7de      	b.n	800db5e <_strtol_l.constprop.0+0x72>
 800dba0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dba4:	2f19      	cmp	r7, #25
 800dba6:	d804      	bhi.n	800dbb2 <_strtol_l.constprop.0+0xc6>
 800dba8:	3c57      	subs	r4, #87	@ 0x57
 800dbaa:	e7d8      	b.n	800db5e <_strtol_l.constprop.0+0x72>
 800dbac:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb0:	e7e1      	b.n	800db76 <_strtol_l.constprop.0+0x8a>
 800dbb2:	1c53      	adds	r3, r2, #1
 800dbb4:	d108      	bne.n	800dbc8 <_strtol_l.constprop.0+0xdc>
 800dbb6:	2322      	movs	r3, #34	@ 0x22
 800dbb8:	f8ce 3000 	str.w	r3, [lr]
 800dbbc:	4660      	mov	r0, ip
 800dbbe:	f1b8 0f00 	cmp.w	r8, #0
 800dbc2:	d0a0      	beq.n	800db06 <_strtol_l.constprop.0+0x1a>
 800dbc4:	1e69      	subs	r1, r5, #1
 800dbc6:	e006      	b.n	800dbd6 <_strtol_l.constprop.0+0xea>
 800dbc8:	b106      	cbz	r6, 800dbcc <_strtol_l.constprop.0+0xe0>
 800dbca:	4240      	negs	r0, r0
 800dbcc:	f1b8 0f00 	cmp.w	r8, #0
 800dbd0:	d099      	beq.n	800db06 <_strtol_l.constprop.0+0x1a>
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	d1f6      	bne.n	800dbc4 <_strtol_l.constprop.0+0xd8>
 800dbd6:	f8c8 1000 	str.w	r1, [r8]
 800dbda:	e794      	b.n	800db06 <_strtol_l.constprop.0+0x1a>
 800dbdc:	08012159 	.word	0x08012159

0800dbe0 <_strtol_r>:
 800dbe0:	f7ff bf84 	b.w	800daec <_strtol_l.constprop.0>

0800dbe4 <__ssputs_r>:
 800dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe8:	688e      	ldr	r6, [r1, #8]
 800dbea:	461f      	mov	r7, r3
 800dbec:	42be      	cmp	r6, r7
 800dbee:	680b      	ldr	r3, [r1, #0]
 800dbf0:	4682      	mov	sl, r0
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	4690      	mov	r8, r2
 800dbf6:	d82d      	bhi.n	800dc54 <__ssputs_r+0x70>
 800dbf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc00:	d026      	beq.n	800dc50 <__ssputs_r+0x6c>
 800dc02:	6965      	ldr	r5, [r4, #20]
 800dc04:	6909      	ldr	r1, [r1, #16]
 800dc06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc0a:	eba3 0901 	sub.w	r9, r3, r1
 800dc0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc12:	1c7b      	adds	r3, r7, #1
 800dc14:	444b      	add	r3, r9
 800dc16:	106d      	asrs	r5, r5, #1
 800dc18:	429d      	cmp	r5, r3
 800dc1a:	bf38      	it	cc
 800dc1c:	461d      	movcc	r5, r3
 800dc1e:	0553      	lsls	r3, r2, #21
 800dc20:	d527      	bpl.n	800dc72 <__ssputs_r+0x8e>
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7fe fc1c 	bl	800c460 <_malloc_r>
 800dc28:	4606      	mov	r6, r0
 800dc2a:	b360      	cbz	r0, 800dc86 <__ssputs_r+0xa2>
 800dc2c:	6921      	ldr	r1, [r4, #16]
 800dc2e:	464a      	mov	r2, r9
 800dc30:	f000 fa18 	bl	800e064 <memcpy>
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc3e:	81a3      	strh	r3, [r4, #12]
 800dc40:	6126      	str	r6, [r4, #16]
 800dc42:	6165      	str	r5, [r4, #20]
 800dc44:	444e      	add	r6, r9
 800dc46:	eba5 0509 	sub.w	r5, r5, r9
 800dc4a:	6026      	str	r6, [r4, #0]
 800dc4c:	60a5      	str	r5, [r4, #8]
 800dc4e:	463e      	mov	r6, r7
 800dc50:	42be      	cmp	r6, r7
 800dc52:	d900      	bls.n	800dc56 <__ssputs_r+0x72>
 800dc54:	463e      	mov	r6, r7
 800dc56:	6820      	ldr	r0, [r4, #0]
 800dc58:	4632      	mov	r2, r6
 800dc5a:	4641      	mov	r1, r8
 800dc5c:	f000 f9c6 	bl	800dfec <memmove>
 800dc60:	68a3      	ldr	r3, [r4, #8]
 800dc62:	1b9b      	subs	r3, r3, r6
 800dc64:	60a3      	str	r3, [r4, #8]
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	4433      	add	r3, r6
 800dc6a:	6023      	str	r3, [r4, #0]
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc72:	462a      	mov	r2, r5
 800dc74:	f000 fd89 	bl	800e78a <_realloc_r>
 800dc78:	4606      	mov	r6, r0
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d1e0      	bne.n	800dc40 <__ssputs_r+0x5c>
 800dc7e:	6921      	ldr	r1, [r4, #16]
 800dc80:	4650      	mov	r0, sl
 800dc82:	f7fe fb79 	bl	800c378 <_free_r>
 800dc86:	230c      	movs	r3, #12
 800dc88:	f8ca 3000 	str.w	r3, [sl]
 800dc8c:	89a3      	ldrh	r3, [r4, #12]
 800dc8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc92:	81a3      	strh	r3, [r4, #12]
 800dc94:	f04f 30ff 	mov.w	r0, #4294967295
 800dc98:	e7e9      	b.n	800dc6e <__ssputs_r+0x8a>
	...

0800dc9c <_svfiprintf_r>:
 800dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca0:	4698      	mov	r8, r3
 800dca2:	898b      	ldrh	r3, [r1, #12]
 800dca4:	061b      	lsls	r3, r3, #24
 800dca6:	b09d      	sub	sp, #116	@ 0x74
 800dca8:	4607      	mov	r7, r0
 800dcaa:	460d      	mov	r5, r1
 800dcac:	4614      	mov	r4, r2
 800dcae:	d510      	bpl.n	800dcd2 <_svfiprintf_r+0x36>
 800dcb0:	690b      	ldr	r3, [r1, #16]
 800dcb2:	b973      	cbnz	r3, 800dcd2 <_svfiprintf_r+0x36>
 800dcb4:	2140      	movs	r1, #64	@ 0x40
 800dcb6:	f7fe fbd3 	bl	800c460 <_malloc_r>
 800dcba:	6028      	str	r0, [r5, #0]
 800dcbc:	6128      	str	r0, [r5, #16]
 800dcbe:	b930      	cbnz	r0, 800dcce <_svfiprintf_r+0x32>
 800dcc0:	230c      	movs	r3, #12
 800dcc2:	603b      	str	r3, [r7, #0]
 800dcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc8:	b01d      	add	sp, #116	@ 0x74
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	2340      	movs	r3, #64	@ 0x40
 800dcd0:	616b      	str	r3, [r5, #20]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcd6:	2320      	movs	r3, #32
 800dcd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dce0:	2330      	movs	r3, #48	@ 0x30
 800dce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800de80 <_svfiprintf_r+0x1e4>
 800dce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcea:	f04f 0901 	mov.w	r9, #1
 800dcee:	4623      	mov	r3, r4
 800dcf0:	469a      	mov	sl, r3
 800dcf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf6:	b10a      	cbz	r2, 800dcfc <_svfiprintf_r+0x60>
 800dcf8:	2a25      	cmp	r2, #37	@ 0x25
 800dcfa:	d1f9      	bne.n	800dcf0 <_svfiprintf_r+0x54>
 800dcfc:	ebba 0b04 	subs.w	fp, sl, r4
 800dd00:	d00b      	beq.n	800dd1a <_svfiprintf_r+0x7e>
 800dd02:	465b      	mov	r3, fp
 800dd04:	4622      	mov	r2, r4
 800dd06:	4629      	mov	r1, r5
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f7ff ff6b 	bl	800dbe4 <__ssputs_r>
 800dd0e:	3001      	adds	r0, #1
 800dd10:	f000 80a7 	beq.w	800de62 <_svfiprintf_r+0x1c6>
 800dd14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd16:	445a      	add	r2, fp
 800dd18:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 809f 	beq.w	800de62 <_svfiprintf_r+0x1c6>
 800dd24:	2300      	movs	r3, #0
 800dd26:	f04f 32ff 	mov.w	r2, #4294967295
 800dd2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd2e:	f10a 0a01 	add.w	sl, sl, #1
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	9307      	str	r3, [sp, #28]
 800dd36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd3c:	4654      	mov	r4, sl
 800dd3e:	2205      	movs	r2, #5
 800dd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd44:	484e      	ldr	r0, [pc, #312]	@ (800de80 <_svfiprintf_r+0x1e4>)
 800dd46:	f7f2 fa53 	bl	80001f0 <memchr>
 800dd4a:	9a04      	ldr	r2, [sp, #16]
 800dd4c:	b9d8      	cbnz	r0, 800dd86 <_svfiprintf_r+0xea>
 800dd4e:	06d0      	lsls	r0, r2, #27
 800dd50:	bf44      	itt	mi
 800dd52:	2320      	movmi	r3, #32
 800dd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd58:	0711      	lsls	r1, r2, #28
 800dd5a:	bf44      	itt	mi
 800dd5c:	232b      	movmi	r3, #43	@ 0x2b
 800dd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd62:	f89a 3000 	ldrb.w	r3, [sl]
 800dd66:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd68:	d015      	beq.n	800dd96 <_svfiprintf_r+0xfa>
 800dd6a:	9a07      	ldr	r2, [sp, #28]
 800dd6c:	4654      	mov	r4, sl
 800dd6e:	2000      	movs	r0, #0
 800dd70:	f04f 0c0a 	mov.w	ip, #10
 800dd74:	4621      	mov	r1, r4
 800dd76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd7a:	3b30      	subs	r3, #48	@ 0x30
 800dd7c:	2b09      	cmp	r3, #9
 800dd7e:	d94b      	bls.n	800de18 <_svfiprintf_r+0x17c>
 800dd80:	b1b0      	cbz	r0, 800ddb0 <_svfiprintf_r+0x114>
 800dd82:	9207      	str	r2, [sp, #28]
 800dd84:	e014      	b.n	800ddb0 <_svfiprintf_r+0x114>
 800dd86:	eba0 0308 	sub.w	r3, r0, r8
 800dd8a:	fa09 f303 	lsl.w	r3, r9, r3
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	9304      	str	r3, [sp, #16]
 800dd92:	46a2      	mov	sl, r4
 800dd94:	e7d2      	b.n	800dd3c <_svfiprintf_r+0xa0>
 800dd96:	9b03      	ldr	r3, [sp, #12]
 800dd98:	1d19      	adds	r1, r3, #4
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	9103      	str	r1, [sp, #12]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bfbb      	ittet	lt
 800dda2:	425b      	neglt	r3, r3
 800dda4:	f042 0202 	orrlt.w	r2, r2, #2
 800dda8:	9307      	strge	r3, [sp, #28]
 800ddaa:	9307      	strlt	r3, [sp, #28]
 800ddac:	bfb8      	it	lt
 800ddae:	9204      	strlt	r2, [sp, #16]
 800ddb0:	7823      	ldrb	r3, [r4, #0]
 800ddb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddb4:	d10a      	bne.n	800ddcc <_svfiprintf_r+0x130>
 800ddb6:	7863      	ldrb	r3, [r4, #1]
 800ddb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddba:	d132      	bne.n	800de22 <_svfiprintf_r+0x186>
 800ddbc:	9b03      	ldr	r3, [sp, #12]
 800ddbe:	1d1a      	adds	r2, r3, #4
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	9203      	str	r2, [sp, #12]
 800ddc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddc8:	3402      	adds	r4, #2
 800ddca:	9305      	str	r3, [sp, #20]
 800ddcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800de90 <_svfiprintf_r+0x1f4>
 800ddd0:	7821      	ldrb	r1, [r4, #0]
 800ddd2:	2203      	movs	r2, #3
 800ddd4:	4650      	mov	r0, sl
 800ddd6:	f7f2 fa0b 	bl	80001f0 <memchr>
 800ddda:	b138      	cbz	r0, 800ddec <_svfiprintf_r+0x150>
 800dddc:	9b04      	ldr	r3, [sp, #16]
 800ddde:	eba0 000a 	sub.w	r0, r0, sl
 800dde2:	2240      	movs	r2, #64	@ 0x40
 800dde4:	4082      	lsls	r2, r0
 800dde6:	4313      	orrs	r3, r2
 800dde8:	3401      	adds	r4, #1
 800ddea:	9304      	str	r3, [sp, #16]
 800ddec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf0:	4824      	ldr	r0, [pc, #144]	@ (800de84 <_svfiprintf_r+0x1e8>)
 800ddf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ddf6:	2206      	movs	r2, #6
 800ddf8:	f7f2 f9fa 	bl	80001f0 <memchr>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	d036      	beq.n	800de6e <_svfiprintf_r+0x1d2>
 800de00:	4b21      	ldr	r3, [pc, #132]	@ (800de88 <_svfiprintf_r+0x1ec>)
 800de02:	bb1b      	cbnz	r3, 800de4c <_svfiprintf_r+0x1b0>
 800de04:	9b03      	ldr	r3, [sp, #12]
 800de06:	3307      	adds	r3, #7
 800de08:	f023 0307 	bic.w	r3, r3, #7
 800de0c:	3308      	adds	r3, #8
 800de0e:	9303      	str	r3, [sp, #12]
 800de10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de12:	4433      	add	r3, r6
 800de14:	9309      	str	r3, [sp, #36]	@ 0x24
 800de16:	e76a      	b.n	800dcee <_svfiprintf_r+0x52>
 800de18:	fb0c 3202 	mla	r2, ip, r2, r3
 800de1c:	460c      	mov	r4, r1
 800de1e:	2001      	movs	r0, #1
 800de20:	e7a8      	b.n	800dd74 <_svfiprintf_r+0xd8>
 800de22:	2300      	movs	r3, #0
 800de24:	3401      	adds	r4, #1
 800de26:	9305      	str	r3, [sp, #20]
 800de28:	4619      	mov	r1, r3
 800de2a:	f04f 0c0a 	mov.w	ip, #10
 800de2e:	4620      	mov	r0, r4
 800de30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de34:	3a30      	subs	r2, #48	@ 0x30
 800de36:	2a09      	cmp	r2, #9
 800de38:	d903      	bls.n	800de42 <_svfiprintf_r+0x1a6>
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d0c6      	beq.n	800ddcc <_svfiprintf_r+0x130>
 800de3e:	9105      	str	r1, [sp, #20]
 800de40:	e7c4      	b.n	800ddcc <_svfiprintf_r+0x130>
 800de42:	fb0c 2101 	mla	r1, ip, r1, r2
 800de46:	4604      	mov	r4, r0
 800de48:	2301      	movs	r3, #1
 800de4a:	e7f0      	b.n	800de2e <_svfiprintf_r+0x192>
 800de4c:	ab03      	add	r3, sp, #12
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	462a      	mov	r2, r5
 800de52:	4b0e      	ldr	r3, [pc, #56]	@ (800de8c <_svfiprintf_r+0x1f0>)
 800de54:	a904      	add	r1, sp, #16
 800de56:	4638      	mov	r0, r7
 800de58:	f7fc fcc8 	bl	800a7ec <_printf_float>
 800de5c:	1c42      	adds	r2, r0, #1
 800de5e:	4606      	mov	r6, r0
 800de60:	d1d6      	bne.n	800de10 <_svfiprintf_r+0x174>
 800de62:	89ab      	ldrh	r3, [r5, #12]
 800de64:	065b      	lsls	r3, r3, #25
 800de66:	f53f af2d 	bmi.w	800dcc4 <_svfiprintf_r+0x28>
 800de6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de6c:	e72c      	b.n	800dcc8 <_svfiprintf_r+0x2c>
 800de6e:	ab03      	add	r3, sp, #12
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	462a      	mov	r2, r5
 800de74:	4b05      	ldr	r3, [pc, #20]	@ (800de8c <_svfiprintf_r+0x1f0>)
 800de76:	a904      	add	r1, sp, #16
 800de78:	4638      	mov	r0, r7
 800de7a:	f7fc ff4f 	bl	800ad1c <_printf_i>
 800de7e:	e7ed      	b.n	800de5c <_svfiprintf_r+0x1c0>
 800de80:	08012259 	.word	0x08012259
 800de84:	08012263 	.word	0x08012263
 800de88:	0800a7ed 	.word	0x0800a7ed
 800de8c:	0800dbe5 	.word	0x0800dbe5
 800de90:	0801225f 	.word	0x0801225f

0800de94 <__sflush_r>:
 800de94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de9c:	0716      	lsls	r6, r2, #28
 800de9e:	4605      	mov	r5, r0
 800dea0:	460c      	mov	r4, r1
 800dea2:	d454      	bmi.n	800df4e <__sflush_r+0xba>
 800dea4:	684b      	ldr	r3, [r1, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	dc02      	bgt.n	800deb0 <__sflush_r+0x1c>
 800deaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800deac:	2b00      	cmp	r3, #0
 800deae:	dd48      	ble.n	800df42 <__sflush_r+0xae>
 800deb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800deb2:	2e00      	cmp	r6, #0
 800deb4:	d045      	beq.n	800df42 <__sflush_r+0xae>
 800deb6:	2300      	movs	r3, #0
 800deb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800debc:	682f      	ldr	r7, [r5, #0]
 800debe:	6a21      	ldr	r1, [r4, #32]
 800dec0:	602b      	str	r3, [r5, #0]
 800dec2:	d030      	beq.n	800df26 <__sflush_r+0x92>
 800dec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dec6:	89a3      	ldrh	r3, [r4, #12]
 800dec8:	0759      	lsls	r1, r3, #29
 800deca:	d505      	bpl.n	800ded8 <__sflush_r+0x44>
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ded2:	b10b      	cbz	r3, 800ded8 <__sflush_r+0x44>
 800ded4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ded6:	1ad2      	subs	r2, r2, r3
 800ded8:	2300      	movs	r3, #0
 800deda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dedc:	6a21      	ldr	r1, [r4, #32]
 800dede:	4628      	mov	r0, r5
 800dee0:	47b0      	blx	r6
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	89a3      	ldrh	r3, [r4, #12]
 800dee6:	d106      	bne.n	800def6 <__sflush_r+0x62>
 800dee8:	6829      	ldr	r1, [r5, #0]
 800deea:	291d      	cmp	r1, #29
 800deec:	d82b      	bhi.n	800df46 <__sflush_r+0xb2>
 800deee:	4a2a      	ldr	r2, [pc, #168]	@ (800df98 <__sflush_r+0x104>)
 800def0:	410a      	asrs	r2, r1
 800def2:	07d6      	lsls	r6, r2, #31
 800def4:	d427      	bmi.n	800df46 <__sflush_r+0xb2>
 800def6:	2200      	movs	r2, #0
 800def8:	6062      	str	r2, [r4, #4]
 800defa:	04d9      	lsls	r1, r3, #19
 800defc:	6922      	ldr	r2, [r4, #16]
 800defe:	6022      	str	r2, [r4, #0]
 800df00:	d504      	bpl.n	800df0c <__sflush_r+0x78>
 800df02:	1c42      	adds	r2, r0, #1
 800df04:	d101      	bne.n	800df0a <__sflush_r+0x76>
 800df06:	682b      	ldr	r3, [r5, #0]
 800df08:	b903      	cbnz	r3, 800df0c <__sflush_r+0x78>
 800df0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800df0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df0e:	602f      	str	r7, [r5, #0]
 800df10:	b1b9      	cbz	r1, 800df42 <__sflush_r+0xae>
 800df12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df16:	4299      	cmp	r1, r3
 800df18:	d002      	beq.n	800df20 <__sflush_r+0x8c>
 800df1a:	4628      	mov	r0, r5
 800df1c:	f7fe fa2c 	bl	800c378 <_free_r>
 800df20:	2300      	movs	r3, #0
 800df22:	6363      	str	r3, [r4, #52]	@ 0x34
 800df24:	e00d      	b.n	800df42 <__sflush_r+0xae>
 800df26:	2301      	movs	r3, #1
 800df28:	4628      	mov	r0, r5
 800df2a:	47b0      	blx	r6
 800df2c:	4602      	mov	r2, r0
 800df2e:	1c50      	adds	r0, r2, #1
 800df30:	d1c9      	bne.n	800dec6 <__sflush_r+0x32>
 800df32:	682b      	ldr	r3, [r5, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d0c6      	beq.n	800dec6 <__sflush_r+0x32>
 800df38:	2b1d      	cmp	r3, #29
 800df3a:	d001      	beq.n	800df40 <__sflush_r+0xac>
 800df3c:	2b16      	cmp	r3, #22
 800df3e:	d11e      	bne.n	800df7e <__sflush_r+0xea>
 800df40:	602f      	str	r7, [r5, #0]
 800df42:	2000      	movs	r0, #0
 800df44:	e022      	b.n	800df8c <__sflush_r+0xf8>
 800df46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df4a:	b21b      	sxth	r3, r3
 800df4c:	e01b      	b.n	800df86 <__sflush_r+0xf2>
 800df4e:	690f      	ldr	r7, [r1, #16]
 800df50:	2f00      	cmp	r7, #0
 800df52:	d0f6      	beq.n	800df42 <__sflush_r+0xae>
 800df54:	0793      	lsls	r3, r2, #30
 800df56:	680e      	ldr	r6, [r1, #0]
 800df58:	bf08      	it	eq
 800df5a:	694b      	ldreq	r3, [r1, #20]
 800df5c:	600f      	str	r7, [r1, #0]
 800df5e:	bf18      	it	ne
 800df60:	2300      	movne	r3, #0
 800df62:	eba6 0807 	sub.w	r8, r6, r7
 800df66:	608b      	str	r3, [r1, #8]
 800df68:	f1b8 0f00 	cmp.w	r8, #0
 800df6c:	dde9      	ble.n	800df42 <__sflush_r+0xae>
 800df6e:	6a21      	ldr	r1, [r4, #32]
 800df70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df72:	4643      	mov	r3, r8
 800df74:	463a      	mov	r2, r7
 800df76:	4628      	mov	r0, r5
 800df78:	47b0      	blx	r6
 800df7a:	2800      	cmp	r0, #0
 800df7c:	dc08      	bgt.n	800df90 <__sflush_r+0xfc>
 800df7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df86:	81a3      	strh	r3, [r4, #12]
 800df88:	f04f 30ff 	mov.w	r0, #4294967295
 800df8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df90:	4407      	add	r7, r0
 800df92:	eba8 0800 	sub.w	r8, r8, r0
 800df96:	e7e7      	b.n	800df68 <__sflush_r+0xd4>
 800df98:	dfbffffe 	.word	0xdfbffffe

0800df9c <_fflush_r>:
 800df9c:	b538      	push	{r3, r4, r5, lr}
 800df9e:	690b      	ldr	r3, [r1, #16]
 800dfa0:	4605      	mov	r5, r0
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	b913      	cbnz	r3, 800dfac <_fflush_r+0x10>
 800dfa6:	2500      	movs	r5, #0
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	b118      	cbz	r0, 800dfb6 <_fflush_r+0x1a>
 800dfae:	6a03      	ldr	r3, [r0, #32]
 800dfb0:	b90b      	cbnz	r3, 800dfb6 <_fflush_r+0x1a>
 800dfb2:	f7fd fa73 	bl	800b49c <__sinit>
 800dfb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d0f3      	beq.n	800dfa6 <_fflush_r+0xa>
 800dfbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfc0:	07d0      	lsls	r0, r2, #31
 800dfc2:	d404      	bmi.n	800dfce <_fflush_r+0x32>
 800dfc4:	0599      	lsls	r1, r3, #22
 800dfc6:	d402      	bmi.n	800dfce <_fflush_r+0x32>
 800dfc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfca:	f7fd fb7e 	bl	800b6ca <__retarget_lock_acquire_recursive>
 800dfce:	4628      	mov	r0, r5
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	f7ff ff5f 	bl	800de94 <__sflush_r>
 800dfd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfd8:	07da      	lsls	r2, r3, #31
 800dfda:	4605      	mov	r5, r0
 800dfdc:	d4e4      	bmi.n	800dfa8 <_fflush_r+0xc>
 800dfde:	89a3      	ldrh	r3, [r4, #12]
 800dfe0:	059b      	lsls	r3, r3, #22
 800dfe2:	d4e1      	bmi.n	800dfa8 <_fflush_r+0xc>
 800dfe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfe6:	f7fd fb71 	bl	800b6cc <__retarget_lock_release_recursive>
 800dfea:	e7dd      	b.n	800dfa8 <_fflush_r+0xc>

0800dfec <memmove>:
 800dfec:	4288      	cmp	r0, r1
 800dfee:	b510      	push	{r4, lr}
 800dff0:	eb01 0402 	add.w	r4, r1, r2
 800dff4:	d902      	bls.n	800dffc <memmove+0x10>
 800dff6:	4284      	cmp	r4, r0
 800dff8:	4623      	mov	r3, r4
 800dffa:	d807      	bhi.n	800e00c <memmove+0x20>
 800dffc:	1e43      	subs	r3, r0, #1
 800dffe:	42a1      	cmp	r1, r4
 800e000:	d008      	beq.n	800e014 <memmove+0x28>
 800e002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e00a:	e7f8      	b.n	800dffe <memmove+0x12>
 800e00c:	4402      	add	r2, r0
 800e00e:	4601      	mov	r1, r0
 800e010:	428a      	cmp	r2, r1
 800e012:	d100      	bne.n	800e016 <memmove+0x2a>
 800e014:	bd10      	pop	{r4, pc}
 800e016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e01e:	e7f7      	b.n	800e010 <memmove+0x24>

0800e020 <strncmp>:
 800e020:	b510      	push	{r4, lr}
 800e022:	b16a      	cbz	r2, 800e040 <strncmp+0x20>
 800e024:	3901      	subs	r1, #1
 800e026:	1884      	adds	r4, r0, r2
 800e028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e02c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e030:	429a      	cmp	r2, r3
 800e032:	d103      	bne.n	800e03c <strncmp+0x1c>
 800e034:	42a0      	cmp	r0, r4
 800e036:	d001      	beq.n	800e03c <strncmp+0x1c>
 800e038:	2a00      	cmp	r2, #0
 800e03a:	d1f5      	bne.n	800e028 <strncmp+0x8>
 800e03c:	1ad0      	subs	r0, r2, r3
 800e03e:	bd10      	pop	{r4, pc}
 800e040:	4610      	mov	r0, r2
 800e042:	e7fc      	b.n	800e03e <strncmp+0x1e>

0800e044 <_sbrk_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4d06      	ldr	r5, [pc, #24]	@ (800e060 <_sbrk_r+0x1c>)
 800e048:	2300      	movs	r3, #0
 800e04a:	4604      	mov	r4, r0
 800e04c:	4608      	mov	r0, r1
 800e04e:	602b      	str	r3, [r5, #0]
 800e050:	f7f6 f9ba 	bl	80043c8 <_sbrk>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	d102      	bne.n	800e05e <_sbrk_r+0x1a>
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	b103      	cbz	r3, 800e05e <_sbrk_r+0x1a>
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	20000d38 	.word	0x20000d38

0800e064 <memcpy>:
 800e064:	440a      	add	r2, r1
 800e066:	4291      	cmp	r1, r2
 800e068:	f100 33ff 	add.w	r3, r0, #4294967295
 800e06c:	d100      	bne.n	800e070 <memcpy+0xc>
 800e06e:	4770      	bx	lr
 800e070:	b510      	push	{r4, lr}
 800e072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e07a:	4291      	cmp	r1, r2
 800e07c:	d1f9      	bne.n	800e072 <memcpy+0xe>
 800e07e:	bd10      	pop	{r4, pc}

0800e080 <nan>:
 800e080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e088 <nan+0x8>
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	00000000 	.word	0x00000000
 800e08c:	7ff80000 	.word	0x7ff80000

0800e090 <__assert_func>:
 800e090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e092:	4614      	mov	r4, r2
 800e094:	461a      	mov	r2, r3
 800e096:	4b09      	ldr	r3, [pc, #36]	@ (800e0bc <__assert_func+0x2c>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4605      	mov	r5, r0
 800e09c:	68d8      	ldr	r0, [r3, #12]
 800e09e:	b954      	cbnz	r4, 800e0b6 <__assert_func+0x26>
 800e0a0:	4b07      	ldr	r3, [pc, #28]	@ (800e0c0 <__assert_func+0x30>)
 800e0a2:	461c      	mov	r4, r3
 800e0a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0a8:	9100      	str	r1, [sp, #0]
 800e0aa:	462b      	mov	r3, r5
 800e0ac:	4905      	ldr	r1, [pc, #20]	@ (800e0c4 <__assert_func+0x34>)
 800e0ae:	f000 fba7 	bl	800e800 <fiprintf>
 800e0b2:	f000 fbb7 	bl	800e824 <abort>
 800e0b6:	4b04      	ldr	r3, [pc, #16]	@ (800e0c8 <__assert_func+0x38>)
 800e0b8:	e7f4      	b.n	800e0a4 <__assert_func+0x14>
 800e0ba:	bf00      	nop
 800e0bc:	20000094 	.word	0x20000094
 800e0c0:	080122ad 	.word	0x080122ad
 800e0c4:	0801227f 	.word	0x0801227f
 800e0c8:	08012272 	.word	0x08012272

0800e0cc <_calloc_r>:
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	fba1 5402 	umull	r5, r4, r1, r2
 800e0d2:	b93c      	cbnz	r4, 800e0e4 <_calloc_r+0x18>
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	f7fe f9c3 	bl	800c460 <_malloc_r>
 800e0da:	4606      	mov	r6, r0
 800e0dc:	b928      	cbnz	r0, 800e0ea <_calloc_r+0x1e>
 800e0de:	2600      	movs	r6, #0
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}
 800e0e4:	220c      	movs	r2, #12
 800e0e6:	6002      	str	r2, [r0, #0]
 800e0e8:	e7f9      	b.n	800e0de <_calloc_r+0x12>
 800e0ea:	462a      	mov	r2, r5
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	f7fd fa6e 	bl	800b5ce <memset>
 800e0f2:	e7f5      	b.n	800e0e0 <_calloc_r+0x14>

0800e0f4 <rshift>:
 800e0f4:	6903      	ldr	r3, [r0, #16]
 800e0f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e0fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e102:	f100 0414 	add.w	r4, r0, #20
 800e106:	dd45      	ble.n	800e194 <rshift+0xa0>
 800e108:	f011 011f 	ands.w	r1, r1, #31
 800e10c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e110:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e114:	d10c      	bne.n	800e130 <rshift+0x3c>
 800e116:	f100 0710 	add.w	r7, r0, #16
 800e11a:	4629      	mov	r1, r5
 800e11c:	42b1      	cmp	r1, r6
 800e11e:	d334      	bcc.n	800e18a <rshift+0x96>
 800e120:	1a9b      	subs	r3, r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	1eea      	subs	r2, r5, #3
 800e126:	4296      	cmp	r6, r2
 800e128:	bf38      	it	cc
 800e12a:	2300      	movcc	r3, #0
 800e12c:	4423      	add	r3, r4
 800e12e:	e015      	b.n	800e15c <rshift+0x68>
 800e130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e134:	f1c1 0820 	rsb	r8, r1, #32
 800e138:	40cf      	lsrs	r7, r1
 800e13a:	f105 0e04 	add.w	lr, r5, #4
 800e13e:	46a1      	mov	r9, r4
 800e140:	4576      	cmp	r6, lr
 800e142:	46f4      	mov	ip, lr
 800e144:	d815      	bhi.n	800e172 <rshift+0x7e>
 800e146:	1a9a      	subs	r2, r3, r2
 800e148:	0092      	lsls	r2, r2, #2
 800e14a:	3a04      	subs	r2, #4
 800e14c:	3501      	adds	r5, #1
 800e14e:	42ae      	cmp	r6, r5
 800e150:	bf38      	it	cc
 800e152:	2200      	movcc	r2, #0
 800e154:	18a3      	adds	r3, r4, r2
 800e156:	50a7      	str	r7, [r4, r2]
 800e158:	b107      	cbz	r7, 800e15c <rshift+0x68>
 800e15a:	3304      	adds	r3, #4
 800e15c:	1b1a      	subs	r2, r3, r4
 800e15e:	42a3      	cmp	r3, r4
 800e160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e164:	bf08      	it	eq
 800e166:	2300      	moveq	r3, #0
 800e168:	6102      	str	r2, [r0, #16]
 800e16a:	bf08      	it	eq
 800e16c:	6143      	streq	r3, [r0, #20]
 800e16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e172:	f8dc c000 	ldr.w	ip, [ip]
 800e176:	fa0c fc08 	lsl.w	ip, ip, r8
 800e17a:	ea4c 0707 	orr.w	r7, ip, r7
 800e17e:	f849 7b04 	str.w	r7, [r9], #4
 800e182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e186:	40cf      	lsrs	r7, r1
 800e188:	e7da      	b.n	800e140 <rshift+0x4c>
 800e18a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e18e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e192:	e7c3      	b.n	800e11c <rshift+0x28>
 800e194:	4623      	mov	r3, r4
 800e196:	e7e1      	b.n	800e15c <rshift+0x68>

0800e198 <__hexdig_fun>:
 800e198:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e19c:	2b09      	cmp	r3, #9
 800e19e:	d802      	bhi.n	800e1a6 <__hexdig_fun+0xe>
 800e1a0:	3820      	subs	r0, #32
 800e1a2:	b2c0      	uxtb	r0, r0
 800e1a4:	4770      	bx	lr
 800e1a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e1aa:	2b05      	cmp	r3, #5
 800e1ac:	d801      	bhi.n	800e1b2 <__hexdig_fun+0x1a>
 800e1ae:	3847      	subs	r0, #71	@ 0x47
 800e1b0:	e7f7      	b.n	800e1a2 <__hexdig_fun+0xa>
 800e1b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d801      	bhi.n	800e1be <__hexdig_fun+0x26>
 800e1ba:	3827      	subs	r0, #39	@ 0x27
 800e1bc:	e7f1      	b.n	800e1a2 <__hexdig_fun+0xa>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	4770      	bx	lr
	...

0800e1c4 <__gethex>:
 800e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	b085      	sub	sp, #20
 800e1ca:	468a      	mov	sl, r1
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	680b      	ldr	r3, [r1, #0]
 800e1d0:	9001      	str	r0, [sp, #4]
 800e1d2:	4690      	mov	r8, r2
 800e1d4:	1c9c      	adds	r4, r3, #2
 800e1d6:	46a1      	mov	r9, r4
 800e1d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e1dc:	2830      	cmp	r0, #48	@ 0x30
 800e1de:	d0fa      	beq.n	800e1d6 <__gethex+0x12>
 800e1e0:	eba9 0303 	sub.w	r3, r9, r3
 800e1e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e1e8:	f7ff ffd6 	bl	800e198 <__hexdig_fun>
 800e1ec:	4605      	mov	r5, r0
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d168      	bne.n	800e2c4 <__gethex+0x100>
 800e1f2:	49a0      	ldr	r1, [pc, #640]	@ (800e474 <__gethex+0x2b0>)
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	4648      	mov	r0, r9
 800e1f8:	f7ff ff12 	bl	800e020 <strncmp>
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d167      	bne.n	800e2d2 <__gethex+0x10e>
 800e202:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e206:	4626      	mov	r6, r4
 800e208:	f7ff ffc6 	bl	800e198 <__hexdig_fun>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d062      	beq.n	800e2d6 <__gethex+0x112>
 800e210:	4623      	mov	r3, r4
 800e212:	7818      	ldrb	r0, [r3, #0]
 800e214:	2830      	cmp	r0, #48	@ 0x30
 800e216:	4699      	mov	r9, r3
 800e218:	f103 0301 	add.w	r3, r3, #1
 800e21c:	d0f9      	beq.n	800e212 <__gethex+0x4e>
 800e21e:	f7ff ffbb 	bl	800e198 <__hexdig_fun>
 800e222:	fab0 f580 	clz	r5, r0
 800e226:	096d      	lsrs	r5, r5, #5
 800e228:	f04f 0b01 	mov.w	fp, #1
 800e22c:	464a      	mov	r2, r9
 800e22e:	4616      	mov	r6, r2
 800e230:	3201      	adds	r2, #1
 800e232:	7830      	ldrb	r0, [r6, #0]
 800e234:	f7ff ffb0 	bl	800e198 <__hexdig_fun>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d1f8      	bne.n	800e22e <__gethex+0x6a>
 800e23c:	498d      	ldr	r1, [pc, #564]	@ (800e474 <__gethex+0x2b0>)
 800e23e:	2201      	movs	r2, #1
 800e240:	4630      	mov	r0, r6
 800e242:	f7ff feed 	bl	800e020 <strncmp>
 800e246:	2800      	cmp	r0, #0
 800e248:	d13f      	bne.n	800e2ca <__gethex+0x106>
 800e24a:	b944      	cbnz	r4, 800e25e <__gethex+0x9a>
 800e24c:	1c74      	adds	r4, r6, #1
 800e24e:	4622      	mov	r2, r4
 800e250:	4616      	mov	r6, r2
 800e252:	3201      	adds	r2, #1
 800e254:	7830      	ldrb	r0, [r6, #0]
 800e256:	f7ff ff9f 	bl	800e198 <__hexdig_fun>
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d1f8      	bne.n	800e250 <__gethex+0x8c>
 800e25e:	1ba4      	subs	r4, r4, r6
 800e260:	00a7      	lsls	r7, r4, #2
 800e262:	7833      	ldrb	r3, [r6, #0]
 800e264:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e268:	2b50      	cmp	r3, #80	@ 0x50
 800e26a:	d13e      	bne.n	800e2ea <__gethex+0x126>
 800e26c:	7873      	ldrb	r3, [r6, #1]
 800e26e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e270:	d033      	beq.n	800e2da <__gethex+0x116>
 800e272:	2b2d      	cmp	r3, #45	@ 0x2d
 800e274:	d034      	beq.n	800e2e0 <__gethex+0x11c>
 800e276:	1c71      	adds	r1, r6, #1
 800e278:	2400      	movs	r4, #0
 800e27a:	7808      	ldrb	r0, [r1, #0]
 800e27c:	f7ff ff8c 	bl	800e198 <__hexdig_fun>
 800e280:	1e43      	subs	r3, r0, #1
 800e282:	b2db      	uxtb	r3, r3
 800e284:	2b18      	cmp	r3, #24
 800e286:	d830      	bhi.n	800e2ea <__gethex+0x126>
 800e288:	f1a0 0210 	sub.w	r2, r0, #16
 800e28c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e290:	f7ff ff82 	bl	800e198 <__hexdig_fun>
 800e294:	f100 3cff 	add.w	ip, r0, #4294967295
 800e298:	fa5f fc8c 	uxtb.w	ip, ip
 800e29c:	f1bc 0f18 	cmp.w	ip, #24
 800e2a0:	f04f 030a 	mov.w	r3, #10
 800e2a4:	d91e      	bls.n	800e2e4 <__gethex+0x120>
 800e2a6:	b104      	cbz	r4, 800e2aa <__gethex+0xe6>
 800e2a8:	4252      	negs	r2, r2
 800e2aa:	4417      	add	r7, r2
 800e2ac:	f8ca 1000 	str.w	r1, [sl]
 800e2b0:	b1ed      	cbz	r5, 800e2ee <__gethex+0x12a>
 800e2b2:	f1bb 0f00 	cmp.w	fp, #0
 800e2b6:	bf0c      	ite	eq
 800e2b8:	2506      	moveq	r5, #6
 800e2ba:	2500      	movne	r5, #0
 800e2bc:	4628      	mov	r0, r5
 800e2be:	b005      	add	sp, #20
 800e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c4:	2500      	movs	r5, #0
 800e2c6:	462c      	mov	r4, r5
 800e2c8:	e7b0      	b.n	800e22c <__gethex+0x68>
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	d1c7      	bne.n	800e25e <__gethex+0x9a>
 800e2ce:	4627      	mov	r7, r4
 800e2d0:	e7c7      	b.n	800e262 <__gethex+0x9e>
 800e2d2:	464e      	mov	r6, r9
 800e2d4:	462f      	mov	r7, r5
 800e2d6:	2501      	movs	r5, #1
 800e2d8:	e7c3      	b.n	800e262 <__gethex+0x9e>
 800e2da:	2400      	movs	r4, #0
 800e2dc:	1cb1      	adds	r1, r6, #2
 800e2de:	e7cc      	b.n	800e27a <__gethex+0xb6>
 800e2e0:	2401      	movs	r4, #1
 800e2e2:	e7fb      	b.n	800e2dc <__gethex+0x118>
 800e2e4:	fb03 0002 	mla	r0, r3, r2, r0
 800e2e8:	e7ce      	b.n	800e288 <__gethex+0xc4>
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	e7de      	b.n	800e2ac <__gethex+0xe8>
 800e2ee:	eba6 0309 	sub.w	r3, r6, r9
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	2b07      	cmp	r3, #7
 800e2f8:	dc0a      	bgt.n	800e310 <__gethex+0x14c>
 800e2fa:	9801      	ldr	r0, [sp, #4]
 800e2fc:	f7fe f93c 	bl	800c578 <_Balloc>
 800e300:	4604      	mov	r4, r0
 800e302:	b940      	cbnz	r0, 800e316 <__gethex+0x152>
 800e304:	4b5c      	ldr	r3, [pc, #368]	@ (800e478 <__gethex+0x2b4>)
 800e306:	4602      	mov	r2, r0
 800e308:	21e4      	movs	r1, #228	@ 0xe4
 800e30a:	485c      	ldr	r0, [pc, #368]	@ (800e47c <__gethex+0x2b8>)
 800e30c:	f7ff fec0 	bl	800e090 <__assert_func>
 800e310:	3101      	adds	r1, #1
 800e312:	105b      	asrs	r3, r3, #1
 800e314:	e7ef      	b.n	800e2f6 <__gethex+0x132>
 800e316:	f100 0a14 	add.w	sl, r0, #20
 800e31a:	2300      	movs	r3, #0
 800e31c:	4655      	mov	r5, sl
 800e31e:	469b      	mov	fp, r3
 800e320:	45b1      	cmp	r9, r6
 800e322:	d337      	bcc.n	800e394 <__gethex+0x1d0>
 800e324:	f845 bb04 	str.w	fp, [r5], #4
 800e328:	eba5 050a 	sub.w	r5, r5, sl
 800e32c:	10ad      	asrs	r5, r5, #2
 800e32e:	6125      	str	r5, [r4, #16]
 800e330:	4658      	mov	r0, fp
 800e332:	f7fe fa13 	bl	800c75c <__hi0bits>
 800e336:	016d      	lsls	r5, r5, #5
 800e338:	f8d8 6000 	ldr.w	r6, [r8]
 800e33c:	1a2d      	subs	r5, r5, r0
 800e33e:	42b5      	cmp	r5, r6
 800e340:	dd54      	ble.n	800e3ec <__gethex+0x228>
 800e342:	1bad      	subs	r5, r5, r6
 800e344:	4629      	mov	r1, r5
 800e346:	4620      	mov	r0, r4
 800e348:	f7fe fda7 	bl	800ce9a <__any_on>
 800e34c:	4681      	mov	r9, r0
 800e34e:	b178      	cbz	r0, 800e370 <__gethex+0x1ac>
 800e350:	1e6b      	subs	r3, r5, #1
 800e352:	1159      	asrs	r1, r3, #5
 800e354:	f003 021f 	and.w	r2, r3, #31
 800e358:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e35c:	f04f 0901 	mov.w	r9, #1
 800e360:	fa09 f202 	lsl.w	r2, r9, r2
 800e364:	420a      	tst	r2, r1
 800e366:	d003      	beq.n	800e370 <__gethex+0x1ac>
 800e368:	454b      	cmp	r3, r9
 800e36a:	dc36      	bgt.n	800e3da <__gethex+0x216>
 800e36c:	f04f 0902 	mov.w	r9, #2
 800e370:	4629      	mov	r1, r5
 800e372:	4620      	mov	r0, r4
 800e374:	f7ff febe 	bl	800e0f4 <rshift>
 800e378:	442f      	add	r7, r5
 800e37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e37e:	42bb      	cmp	r3, r7
 800e380:	da42      	bge.n	800e408 <__gethex+0x244>
 800e382:	9801      	ldr	r0, [sp, #4]
 800e384:	4621      	mov	r1, r4
 800e386:	f7fe f937 	bl	800c5f8 <_Bfree>
 800e38a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e38c:	2300      	movs	r3, #0
 800e38e:	6013      	str	r3, [r2, #0]
 800e390:	25a3      	movs	r5, #163	@ 0xa3
 800e392:	e793      	b.n	800e2bc <__gethex+0xf8>
 800e394:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e398:	2a2e      	cmp	r2, #46	@ 0x2e
 800e39a:	d012      	beq.n	800e3c2 <__gethex+0x1fe>
 800e39c:	2b20      	cmp	r3, #32
 800e39e:	d104      	bne.n	800e3aa <__gethex+0x1e6>
 800e3a0:	f845 bb04 	str.w	fp, [r5], #4
 800e3a4:	f04f 0b00 	mov.w	fp, #0
 800e3a8:	465b      	mov	r3, fp
 800e3aa:	7830      	ldrb	r0, [r6, #0]
 800e3ac:	9303      	str	r3, [sp, #12]
 800e3ae:	f7ff fef3 	bl	800e198 <__hexdig_fun>
 800e3b2:	9b03      	ldr	r3, [sp, #12]
 800e3b4:	f000 000f 	and.w	r0, r0, #15
 800e3b8:	4098      	lsls	r0, r3
 800e3ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800e3be:	3304      	adds	r3, #4
 800e3c0:	e7ae      	b.n	800e320 <__gethex+0x15c>
 800e3c2:	45b1      	cmp	r9, r6
 800e3c4:	d8ea      	bhi.n	800e39c <__gethex+0x1d8>
 800e3c6:	492b      	ldr	r1, [pc, #172]	@ (800e474 <__gethex+0x2b0>)
 800e3c8:	9303      	str	r3, [sp, #12]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff fe27 	bl	800e020 <strncmp>
 800e3d2:	9b03      	ldr	r3, [sp, #12]
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d1e1      	bne.n	800e39c <__gethex+0x1d8>
 800e3d8:	e7a2      	b.n	800e320 <__gethex+0x15c>
 800e3da:	1ea9      	subs	r1, r5, #2
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f7fe fd5c 	bl	800ce9a <__any_on>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d0c2      	beq.n	800e36c <__gethex+0x1a8>
 800e3e6:	f04f 0903 	mov.w	r9, #3
 800e3ea:	e7c1      	b.n	800e370 <__gethex+0x1ac>
 800e3ec:	da09      	bge.n	800e402 <__gethex+0x23e>
 800e3ee:	1b75      	subs	r5, r6, r5
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	9801      	ldr	r0, [sp, #4]
 800e3f4:	462a      	mov	r2, r5
 800e3f6:	f7fe fb17 	bl	800ca28 <__lshift>
 800e3fa:	1b7f      	subs	r7, r7, r5
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	f100 0a14 	add.w	sl, r0, #20
 800e402:	f04f 0900 	mov.w	r9, #0
 800e406:	e7b8      	b.n	800e37a <__gethex+0x1b6>
 800e408:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e40c:	42bd      	cmp	r5, r7
 800e40e:	dd6f      	ble.n	800e4f0 <__gethex+0x32c>
 800e410:	1bed      	subs	r5, r5, r7
 800e412:	42ae      	cmp	r6, r5
 800e414:	dc34      	bgt.n	800e480 <__gethex+0x2bc>
 800e416:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d022      	beq.n	800e464 <__gethex+0x2a0>
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d024      	beq.n	800e46c <__gethex+0x2a8>
 800e422:	2b01      	cmp	r3, #1
 800e424:	d115      	bne.n	800e452 <__gethex+0x28e>
 800e426:	42ae      	cmp	r6, r5
 800e428:	d113      	bne.n	800e452 <__gethex+0x28e>
 800e42a:	2e01      	cmp	r6, #1
 800e42c:	d10b      	bne.n	800e446 <__gethex+0x282>
 800e42e:	9a02      	ldr	r2, [sp, #8]
 800e430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e434:	6013      	str	r3, [r2, #0]
 800e436:	2301      	movs	r3, #1
 800e438:	6123      	str	r3, [r4, #16]
 800e43a:	f8ca 3000 	str.w	r3, [sl]
 800e43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e440:	2562      	movs	r5, #98	@ 0x62
 800e442:	601c      	str	r4, [r3, #0]
 800e444:	e73a      	b.n	800e2bc <__gethex+0xf8>
 800e446:	1e71      	subs	r1, r6, #1
 800e448:	4620      	mov	r0, r4
 800e44a:	f7fe fd26 	bl	800ce9a <__any_on>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d1ed      	bne.n	800e42e <__gethex+0x26a>
 800e452:	9801      	ldr	r0, [sp, #4]
 800e454:	4621      	mov	r1, r4
 800e456:	f7fe f8cf 	bl	800c5f8 <_Bfree>
 800e45a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e45c:	2300      	movs	r3, #0
 800e45e:	6013      	str	r3, [r2, #0]
 800e460:	2550      	movs	r5, #80	@ 0x50
 800e462:	e72b      	b.n	800e2bc <__gethex+0xf8>
 800e464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1f3      	bne.n	800e452 <__gethex+0x28e>
 800e46a:	e7e0      	b.n	800e42e <__gethex+0x26a>
 800e46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1dd      	bne.n	800e42e <__gethex+0x26a>
 800e472:	e7ee      	b.n	800e452 <__gethex+0x28e>
 800e474:	08012100 	.word	0x08012100
 800e478:	08011f95 	.word	0x08011f95
 800e47c:	080122ae 	.word	0x080122ae
 800e480:	1e6f      	subs	r7, r5, #1
 800e482:	f1b9 0f00 	cmp.w	r9, #0
 800e486:	d130      	bne.n	800e4ea <__gethex+0x326>
 800e488:	b127      	cbz	r7, 800e494 <__gethex+0x2d0>
 800e48a:	4639      	mov	r1, r7
 800e48c:	4620      	mov	r0, r4
 800e48e:	f7fe fd04 	bl	800ce9a <__any_on>
 800e492:	4681      	mov	r9, r0
 800e494:	117a      	asrs	r2, r7, #5
 800e496:	2301      	movs	r3, #1
 800e498:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e49c:	f007 071f 	and.w	r7, r7, #31
 800e4a0:	40bb      	lsls	r3, r7
 800e4a2:	4213      	tst	r3, r2
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	bf18      	it	ne
 800e4aa:	f049 0902 	orrne.w	r9, r9, #2
 800e4ae:	f7ff fe21 	bl	800e0f4 <rshift>
 800e4b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e4b6:	1b76      	subs	r6, r6, r5
 800e4b8:	2502      	movs	r5, #2
 800e4ba:	f1b9 0f00 	cmp.w	r9, #0
 800e4be:	d047      	beq.n	800e550 <__gethex+0x38c>
 800e4c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d015      	beq.n	800e4f4 <__gethex+0x330>
 800e4c8:	2b03      	cmp	r3, #3
 800e4ca:	d017      	beq.n	800e4fc <__gethex+0x338>
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d109      	bne.n	800e4e4 <__gethex+0x320>
 800e4d0:	f019 0f02 	tst.w	r9, #2
 800e4d4:	d006      	beq.n	800e4e4 <__gethex+0x320>
 800e4d6:	f8da 3000 	ldr.w	r3, [sl]
 800e4da:	ea49 0903 	orr.w	r9, r9, r3
 800e4de:	f019 0f01 	tst.w	r9, #1
 800e4e2:	d10e      	bne.n	800e502 <__gethex+0x33e>
 800e4e4:	f045 0510 	orr.w	r5, r5, #16
 800e4e8:	e032      	b.n	800e550 <__gethex+0x38c>
 800e4ea:	f04f 0901 	mov.w	r9, #1
 800e4ee:	e7d1      	b.n	800e494 <__gethex+0x2d0>
 800e4f0:	2501      	movs	r5, #1
 800e4f2:	e7e2      	b.n	800e4ba <__gethex+0x2f6>
 800e4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f6:	f1c3 0301 	rsb	r3, r3, #1
 800e4fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d0f0      	beq.n	800e4e4 <__gethex+0x320>
 800e502:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e506:	f104 0314 	add.w	r3, r4, #20
 800e50a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e50e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e512:	f04f 0c00 	mov.w	ip, #0
 800e516:	4618      	mov	r0, r3
 800e518:	f853 2b04 	ldr.w	r2, [r3], #4
 800e51c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e520:	d01b      	beq.n	800e55a <__gethex+0x396>
 800e522:	3201      	adds	r2, #1
 800e524:	6002      	str	r2, [r0, #0]
 800e526:	2d02      	cmp	r5, #2
 800e528:	f104 0314 	add.w	r3, r4, #20
 800e52c:	d13c      	bne.n	800e5a8 <__gethex+0x3e4>
 800e52e:	f8d8 2000 	ldr.w	r2, [r8]
 800e532:	3a01      	subs	r2, #1
 800e534:	42b2      	cmp	r2, r6
 800e536:	d109      	bne.n	800e54c <__gethex+0x388>
 800e538:	1171      	asrs	r1, r6, #5
 800e53a:	2201      	movs	r2, #1
 800e53c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e540:	f006 061f 	and.w	r6, r6, #31
 800e544:	fa02 f606 	lsl.w	r6, r2, r6
 800e548:	421e      	tst	r6, r3
 800e54a:	d13a      	bne.n	800e5c2 <__gethex+0x3fe>
 800e54c:	f045 0520 	orr.w	r5, r5, #32
 800e550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e552:	601c      	str	r4, [r3, #0]
 800e554:	9b02      	ldr	r3, [sp, #8]
 800e556:	601f      	str	r7, [r3, #0]
 800e558:	e6b0      	b.n	800e2bc <__gethex+0xf8>
 800e55a:	4299      	cmp	r1, r3
 800e55c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e560:	d8d9      	bhi.n	800e516 <__gethex+0x352>
 800e562:	68a3      	ldr	r3, [r4, #8]
 800e564:	459b      	cmp	fp, r3
 800e566:	db17      	blt.n	800e598 <__gethex+0x3d4>
 800e568:	6861      	ldr	r1, [r4, #4]
 800e56a:	9801      	ldr	r0, [sp, #4]
 800e56c:	3101      	adds	r1, #1
 800e56e:	f7fe f803 	bl	800c578 <_Balloc>
 800e572:	4681      	mov	r9, r0
 800e574:	b918      	cbnz	r0, 800e57e <__gethex+0x3ba>
 800e576:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e0 <__gethex+0x41c>)
 800e578:	4602      	mov	r2, r0
 800e57a:	2184      	movs	r1, #132	@ 0x84
 800e57c:	e6c5      	b.n	800e30a <__gethex+0x146>
 800e57e:	6922      	ldr	r2, [r4, #16]
 800e580:	3202      	adds	r2, #2
 800e582:	f104 010c 	add.w	r1, r4, #12
 800e586:	0092      	lsls	r2, r2, #2
 800e588:	300c      	adds	r0, #12
 800e58a:	f7ff fd6b 	bl	800e064 <memcpy>
 800e58e:	4621      	mov	r1, r4
 800e590:	9801      	ldr	r0, [sp, #4]
 800e592:	f7fe f831 	bl	800c5f8 <_Bfree>
 800e596:	464c      	mov	r4, r9
 800e598:	6923      	ldr	r3, [r4, #16]
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e5a0:	6122      	str	r2, [r4, #16]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	615a      	str	r2, [r3, #20]
 800e5a6:	e7be      	b.n	800e526 <__gethex+0x362>
 800e5a8:	6922      	ldr	r2, [r4, #16]
 800e5aa:	455a      	cmp	r2, fp
 800e5ac:	dd0b      	ble.n	800e5c6 <__gethex+0x402>
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7ff fd9f 	bl	800e0f4 <rshift>
 800e5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5ba:	3701      	adds	r7, #1
 800e5bc:	42bb      	cmp	r3, r7
 800e5be:	f6ff aee0 	blt.w	800e382 <__gethex+0x1be>
 800e5c2:	2501      	movs	r5, #1
 800e5c4:	e7c2      	b.n	800e54c <__gethex+0x388>
 800e5c6:	f016 061f 	ands.w	r6, r6, #31
 800e5ca:	d0fa      	beq.n	800e5c2 <__gethex+0x3fe>
 800e5cc:	4453      	add	r3, sl
 800e5ce:	f1c6 0620 	rsb	r6, r6, #32
 800e5d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e5d6:	f7fe f8c1 	bl	800c75c <__hi0bits>
 800e5da:	42b0      	cmp	r0, r6
 800e5dc:	dbe7      	blt.n	800e5ae <__gethex+0x3ea>
 800e5de:	e7f0      	b.n	800e5c2 <__gethex+0x3fe>
 800e5e0:	08011f95 	.word	0x08011f95

0800e5e4 <L_shift>:
 800e5e4:	f1c2 0208 	rsb	r2, r2, #8
 800e5e8:	0092      	lsls	r2, r2, #2
 800e5ea:	b570      	push	{r4, r5, r6, lr}
 800e5ec:	f1c2 0620 	rsb	r6, r2, #32
 800e5f0:	6843      	ldr	r3, [r0, #4]
 800e5f2:	6804      	ldr	r4, [r0, #0]
 800e5f4:	fa03 f506 	lsl.w	r5, r3, r6
 800e5f8:	432c      	orrs	r4, r5
 800e5fa:	40d3      	lsrs	r3, r2
 800e5fc:	6004      	str	r4, [r0, #0]
 800e5fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800e602:	4288      	cmp	r0, r1
 800e604:	d3f4      	bcc.n	800e5f0 <L_shift+0xc>
 800e606:	bd70      	pop	{r4, r5, r6, pc}

0800e608 <__match>:
 800e608:	b530      	push	{r4, r5, lr}
 800e60a:	6803      	ldr	r3, [r0, #0]
 800e60c:	3301      	adds	r3, #1
 800e60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e612:	b914      	cbnz	r4, 800e61a <__match+0x12>
 800e614:	6003      	str	r3, [r0, #0]
 800e616:	2001      	movs	r0, #1
 800e618:	bd30      	pop	{r4, r5, pc}
 800e61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e61e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e622:	2d19      	cmp	r5, #25
 800e624:	bf98      	it	ls
 800e626:	3220      	addls	r2, #32
 800e628:	42a2      	cmp	r2, r4
 800e62a:	d0f0      	beq.n	800e60e <__match+0x6>
 800e62c:	2000      	movs	r0, #0
 800e62e:	e7f3      	b.n	800e618 <__match+0x10>

0800e630 <__hexnan>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	680b      	ldr	r3, [r1, #0]
 800e636:	6801      	ldr	r1, [r0, #0]
 800e638:	115e      	asrs	r6, r3, #5
 800e63a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e63e:	f013 031f 	ands.w	r3, r3, #31
 800e642:	b087      	sub	sp, #28
 800e644:	bf18      	it	ne
 800e646:	3604      	addne	r6, #4
 800e648:	2500      	movs	r5, #0
 800e64a:	1f37      	subs	r7, r6, #4
 800e64c:	4682      	mov	sl, r0
 800e64e:	4690      	mov	r8, r2
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	f846 5c04 	str.w	r5, [r6, #-4]
 800e656:	46b9      	mov	r9, r7
 800e658:	463c      	mov	r4, r7
 800e65a:	9502      	str	r5, [sp, #8]
 800e65c:	46ab      	mov	fp, r5
 800e65e:	784a      	ldrb	r2, [r1, #1]
 800e660:	1c4b      	adds	r3, r1, #1
 800e662:	9303      	str	r3, [sp, #12]
 800e664:	b342      	cbz	r2, 800e6b8 <__hexnan+0x88>
 800e666:	4610      	mov	r0, r2
 800e668:	9105      	str	r1, [sp, #20]
 800e66a:	9204      	str	r2, [sp, #16]
 800e66c:	f7ff fd94 	bl	800e198 <__hexdig_fun>
 800e670:	2800      	cmp	r0, #0
 800e672:	d151      	bne.n	800e718 <__hexnan+0xe8>
 800e674:	9a04      	ldr	r2, [sp, #16]
 800e676:	9905      	ldr	r1, [sp, #20]
 800e678:	2a20      	cmp	r2, #32
 800e67a:	d818      	bhi.n	800e6ae <__hexnan+0x7e>
 800e67c:	9b02      	ldr	r3, [sp, #8]
 800e67e:	459b      	cmp	fp, r3
 800e680:	dd13      	ble.n	800e6aa <__hexnan+0x7a>
 800e682:	454c      	cmp	r4, r9
 800e684:	d206      	bcs.n	800e694 <__hexnan+0x64>
 800e686:	2d07      	cmp	r5, #7
 800e688:	dc04      	bgt.n	800e694 <__hexnan+0x64>
 800e68a:	462a      	mov	r2, r5
 800e68c:	4649      	mov	r1, r9
 800e68e:	4620      	mov	r0, r4
 800e690:	f7ff ffa8 	bl	800e5e4 <L_shift>
 800e694:	4544      	cmp	r4, r8
 800e696:	d952      	bls.n	800e73e <__hexnan+0x10e>
 800e698:	2300      	movs	r3, #0
 800e69a:	f1a4 0904 	sub.w	r9, r4, #4
 800e69e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6a2:	f8cd b008 	str.w	fp, [sp, #8]
 800e6a6:	464c      	mov	r4, r9
 800e6a8:	461d      	mov	r5, r3
 800e6aa:	9903      	ldr	r1, [sp, #12]
 800e6ac:	e7d7      	b.n	800e65e <__hexnan+0x2e>
 800e6ae:	2a29      	cmp	r2, #41	@ 0x29
 800e6b0:	d157      	bne.n	800e762 <__hexnan+0x132>
 800e6b2:	3102      	adds	r1, #2
 800e6b4:	f8ca 1000 	str.w	r1, [sl]
 800e6b8:	f1bb 0f00 	cmp.w	fp, #0
 800e6bc:	d051      	beq.n	800e762 <__hexnan+0x132>
 800e6be:	454c      	cmp	r4, r9
 800e6c0:	d206      	bcs.n	800e6d0 <__hexnan+0xa0>
 800e6c2:	2d07      	cmp	r5, #7
 800e6c4:	dc04      	bgt.n	800e6d0 <__hexnan+0xa0>
 800e6c6:	462a      	mov	r2, r5
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7ff ff8a 	bl	800e5e4 <L_shift>
 800e6d0:	4544      	cmp	r4, r8
 800e6d2:	d936      	bls.n	800e742 <__hexnan+0x112>
 800e6d4:	f1a8 0204 	sub.w	r2, r8, #4
 800e6d8:	4623      	mov	r3, r4
 800e6da:	f853 1b04 	ldr.w	r1, [r3], #4
 800e6de:	f842 1f04 	str.w	r1, [r2, #4]!
 800e6e2:	429f      	cmp	r7, r3
 800e6e4:	d2f9      	bcs.n	800e6da <__hexnan+0xaa>
 800e6e6:	1b3b      	subs	r3, r7, r4
 800e6e8:	f023 0303 	bic.w	r3, r3, #3
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	3401      	adds	r4, #1
 800e6f0:	3e03      	subs	r6, #3
 800e6f2:	42b4      	cmp	r4, r6
 800e6f4:	bf88      	it	hi
 800e6f6:	2304      	movhi	r3, #4
 800e6f8:	4443      	add	r3, r8
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f843 2b04 	str.w	r2, [r3], #4
 800e700:	429f      	cmp	r7, r3
 800e702:	d2fb      	bcs.n	800e6fc <__hexnan+0xcc>
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	b91b      	cbnz	r3, 800e710 <__hexnan+0xe0>
 800e708:	4547      	cmp	r7, r8
 800e70a:	d128      	bne.n	800e75e <__hexnan+0x12e>
 800e70c:	2301      	movs	r3, #1
 800e70e:	603b      	str	r3, [r7, #0]
 800e710:	2005      	movs	r0, #5
 800e712:	b007      	add	sp, #28
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	3501      	adds	r5, #1
 800e71a:	2d08      	cmp	r5, #8
 800e71c:	f10b 0b01 	add.w	fp, fp, #1
 800e720:	dd06      	ble.n	800e730 <__hexnan+0x100>
 800e722:	4544      	cmp	r4, r8
 800e724:	d9c1      	bls.n	800e6aa <__hexnan+0x7a>
 800e726:	2300      	movs	r3, #0
 800e728:	f844 3c04 	str.w	r3, [r4, #-4]
 800e72c:	2501      	movs	r5, #1
 800e72e:	3c04      	subs	r4, #4
 800e730:	6822      	ldr	r2, [r4, #0]
 800e732:	f000 000f 	and.w	r0, r0, #15
 800e736:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e73a:	6020      	str	r0, [r4, #0]
 800e73c:	e7b5      	b.n	800e6aa <__hexnan+0x7a>
 800e73e:	2508      	movs	r5, #8
 800e740:	e7b3      	b.n	800e6aa <__hexnan+0x7a>
 800e742:	9b01      	ldr	r3, [sp, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d0dd      	beq.n	800e704 <__hexnan+0xd4>
 800e748:	f1c3 0320 	rsb	r3, r3, #32
 800e74c:	f04f 32ff 	mov.w	r2, #4294967295
 800e750:	40da      	lsrs	r2, r3
 800e752:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e756:	4013      	ands	r3, r2
 800e758:	f846 3c04 	str.w	r3, [r6, #-4]
 800e75c:	e7d2      	b.n	800e704 <__hexnan+0xd4>
 800e75e:	3f04      	subs	r7, #4
 800e760:	e7d0      	b.n	800e704 <__hexnan+0xd4>
 800e762:	2004      	movs	r0, #4
 800e764:	e7d5      	b.n	800e712 <__hexnan+0xe2>

0800e766 <__ascii_mbtowc>:
 800e766:	b082      	sub	sp, #8
 800e768:	b901      	cbnz	r1, 800e76c <__ascii_mbtowc+0x6>
 800e76a:	a901      	add	r1, sp, #4
 800e76c:	b142      	cbz	r2, 800e780 <__ascii_mbtowc+0x1a>
 800e76e:	b14b      	cbz	r3, 800e784 <__ascii_mbtowc+0x1e>
 800e770:	7813      	ldrb	r3, [r2, #0]
 800e772:	600b      	str	r3, [r1, #0]
 800e774:	7812      	ldrb	r2, [r2, #0]
 800e776:	1e10      	subs	r0, r2, #0
 800e778:	bf18      	it	ne
 800e77a:	2001      	movne	r0, #1
 800e77c:	b002      	add	sp, #8
 800e77e:	4770      	bx	lr
 800e780:	4610      	mov	r0, r2
 800e782:	e7fb      	b.n	800e77c <__ascii_mbtowc+0x16>
 800e784:	f06f 0001 	mvn.w	r0, #1
 800e788:	e7f8      	b.n	800e77c <__ascii_mbtowc+0x16>

0800e78a <_realloc_r>:
 800e78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78e:	4680      	mov	r8, r0
 800e790:	4615      	mov	r5, r2
 800e792:	460c      	mov	r4, r1
 800e794:	b921      	cbnz	r1, 800e7a0 <_realloc_r+0x16>
 800e796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e79a:	4611      	mov	r1, r2
 800e79c:	f7fd be60 	b.w	800c460 <_malloc_r>
 800e7a0:	b92a      	cbnz	r2, 800e7ae <_realloc_r+0x24>
 800e7a2:	f7fd fde9 	bl	800c378 <_free_r>
 800e7a6:	2400      	movs	r4, #0
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ae:	f000 f840 	bl	800e832 <_malloc_usable_size_r>
 800e7b2:	4285      	cmp	r5, r0
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	d802      	bhi.n	800e7be <_realloc_r+0x34>
 800e7b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7bc:	d8f4      	bhi.n	800e7a8 <_realloc_r+0x1e>
 800e7be:	4629      	mov	r1, r5
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	f7fd fe4d 	bl	800c460 <_malloc_r>
 800e7c6:	4607      	mov	r7, r0
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d0ec      	beq.n	800e7a6 <_realloc_r+0x1c>
 800e7cc:	42b5      	cmp	r5, r6
 800e7ce:	462a      	mov	r2, r5
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	bf28      	it	cs
 800e7d4:	4632      	movcs	r2, r6
 800e7d6:	f7ff fc45 	bl	800e064 <memcpy>
 800e7da:	4621      	mov	r1, r4
 800e7dc:	4640      	mov	r0, r8
 800e7de:	f7fd fdcb 	bl	800c378 <_free_r>
 800e7e2:	463c      	mov	r4, r7
 800e7e4:	e7e0      	b.n	800e7a8 <_realloc_r+0x1e>

0800e7e6 <__ascii_wctomb>:
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4608      	mov	r0, r1
 800e7ea:	b141      	cbz	r1, 800e7fe <__ascii_wctomb+0x18>
 800e7ec:	2aff      	cmp	r2, #255	@ 0xff
 800e7ee:	d904      	bls.n	800e7fa <__ascii_wctomb+0x14>
 800e7f0:	228a      	movs	r2, #138	@ 0x8a
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f8:	4770      	bx	lr
 800e7fa:	700a      	strb	r2, [r1, #0]
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	4770      	bx	lr

0800e800 <fiprintf>:
 800e800:	b40e      	push	{r1, r2, r3}
 800e802:	b503      	push	{r0, r1, lr}
 800e804:	4601      	mov	r1, r0
 800e806:	ab03      	add	r3, sp, #12
 800e808:	4805      	ldr	r0, [pc, #20]	@ (800e820 <fiprintf+0x20>)
 800e80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e80e:	6800      	ldr	r0, [r0, #0]
 800e810:	9301      	str	r3, [sp, #4]
 800e812:	f000 f83f 	bl	800e894 <_vfiprintf_r>
 800e816:	b002      	add	sp, #8
 800e818:	f85d eb04 	ldr.w	lr, [sp], #4
 800e81c:	b003      	add	sp, #12
 800e81e:	4770      	bx	lr
 800e820:	20000094 	.word	0x20000094

0800e824 <abort>:
 800e824:	b508      	push	{r3, lr}
 800e826:	2006      	movs	r0, #6
 800e828:	f000 fa08 	bl	800ec3c <raise>
 800e82c:	2001      	movs	r0, #1
 800e82e:	f7f5 fd53 	bl	80042d8 <_exit>

0800e832 <_malloc_usable_size_r>:
 800e832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e836:	1f18      	subs	r0, r3, #4
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bfbc      	itt	lt
 800e83c:	580b      	ldrlt	r3, [r1, r0]
 800e83e:	18c0      	addlt	r0, r0, r3
 800e840:	4770      	bx	lr

0800e842 <__sfputc_r>:
 800e842:	6893      	ldr	r3, [r2, #8]
 800e844:	3b01      	subs	r3, #1
 800e846:	2b00      	cmp	r3, #0
 800e848:	b410      	push	{r4}
 800e84a:	6093      	str	r3, [r2, #8]
 800e84c:	da08      	bge.n	800e860 <__sfputc_r+0x1e>
 800e84e:	6994      	ldr	r4, [r2, #24]
 800e850:	42a3      	cmp	r3, r4
 800e852:	db01      	blt.n	800e858 <__sfputc_r+0x16>
 800e854:	290a      	cmp	r1, #10
 800e856:	d103      	bne.n	800e860 <__sfputc_r+0x1e>
 800e858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e85c:	f000 b932 	b.w	800eac4 <__swbuf_r>
 800e860:	6813      	ldr	r3, [r2, #0]
 800e862:	1c58      	adds	r0, r3, #1
 800e864:	6010      	str	r0, [r2, #0]
 800e866:	7019      	strb	r1, [r3, #0]
 800e868:	4608      	mov	r0, r1
 800e86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <__sfputs_r>:
 800e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e872:	4606      	mov	r6, r0
 800e874:	460f      	mov	r7, r1
 800e876:	4614      	mov	r4, r2
 800e878:	18d5      	adds	r5, r2, r3
 800e87a:	42ac      	cmp	r4, r5
 800e87c:	d101      	bne.n	800e882 <__sfputs_r+0x12>
 800e87e:	2000      	movs	r0, #0
 800e880:	e007      	b.n	800e892 <__sfputs_r+0x22>
 800e882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e886:	463a      	mov	r2, r7
 800e888:	4630      	mov	r0, r6
 800e88a:	f7ff ffda 	bl	800e842 <__sfputc_r>
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	d1f3      	bne.n	800e87a <__sfputs_r+0xa>
 800e892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e894 <_vfiprintf_r>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	460d      	mov	r5, r1
 800e89a:	b09d      	sub	sp, #116	@ 0x74
 800e89c:	4614      	mov	r4, r2
 800e89e:	4698      	mov	r8, r3
 800e8a0:	4606      	mov	r6, r0
 800e8a2:	b118      	cbz	r0, 800e8ac <_vfiprintf_r+0x18>
 800e8a4:	6a03      	ldr	r3, [r0, #32]
 800e8a6:	b90b      	cbnz	r3, 800e8ac <_vfiprintf_r+0x18>
 800e8a8:	f7fc fdf8 	bl	800b49c <__sinit>
 800e8ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8ae:	07d9      	lsls	r1, r3, #31
 800e8b0:	d405      	bmi.n	800e8be <_vfiprintf_r+0x2a>
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	059a      	lsls	r2, r3, #22
 800e8b6:	d402      	bmi.n	800e8be <_vfiprintf_r+0x2a>
 800e8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ba:	f7fc ff06 	bl	800b6ca <__retarget_lock_acquire_recursive>
 800e8be:	89ab      	ldrh	r3, [r5, #12]
 800e8c0:	071b      	lsls	r3, r3, #28
 800e8c2:	d501      	bpl.n	800e8c8 <_vfiprintf_r+0x34>
 800e8c4:	692b      	ldr	r3, [r5, #16]
 800e8c6:	b99b      	cbnz	r3, 800e8f0 <_vfiprintf_r+0x5c>
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f000 f938 	bl	800eb40 <__swsetup_r>
 800e8d0:	b170      	cbz	r0, 800e8f0 <_vfiprintf_r+0x5c>
 800e8d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8d4:	07dc      	lsls	r4, r3, #31
 800e8d6:	d504      	bpl.n	800e8e2 <_vfiprintf_r+0x4e>
 800e8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8dc:	b01d      	add	sp, #116	@ 0x74
 800e8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e2:	89ab      	ldrh	r3, [r5, #12]
 800e8e4:	0598      	lsls	r0, r3, #22
 800e8e6:	d4f7      	bmi.n	800e8d8 <_vfiprintf_r+0x44>
 800e8e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ea:	f7fc feef 	bl	800b6cc <__retarget_lock_release_recursive>
 800e8ee:	e7f3      	b.n	800e8d8 <_vfiprintf_r+0x44>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8f4:	2320      	movs	r3, #32
 800e8f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8fe:	2330      	movs	r3, #48	@ 0x30
 800e900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eab0 <_vfiprintf_r+0x21c>
 800e904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e908:	f04f 0901 	mov.w	r9, #1
 800e90c:	4623      	mov	r3, r4
 800e90e:	469a      	mov	sl, r3
 800e910:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e914:	b10a      	cbz	r2, 800e91a <_vfiprintf_r+0x86>
 800e916:	2a25      	cmp	r2, #37	@ 0x25
 800e918:	d1f9      	bne.n	800e90e <_vfiprintf_r+0x7a>
 800e91a:	ebba 0b04 	subs.w	fp, sl, r4
 800e91e:	d00b      	beq.n	800e938 <_vfiprintf_r+0xa4>
 800e920:	465b      	mov	r3, fp
 800e922:	4622      	mov	r2, r4
 800e924:	4629      	mov	r1, r5
 800e926:	4630      	mov	r0, r6
 800e928:	f7ff ffa2 	bl	800e870 <__sfputs_r>
 800e92c:	3001      	adds	r0, #1
 800e92e:	f000 80a7 	beq.w	800ea80 <_vfiprintf_r+0x1ec>
 800e932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e934:	445a      	add	r2, fp
 800e936:	9209      	str	r2, [sp, #36]	@ 0x24
 800e938:	f89a 3000 	ldrb.w	r3, [sl]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 809f 	beq.w	800ea80 <_vfiprintf_r+0x1ec>
 800e942:	2300      	movs	r3, #0
 800e944:	f04f 32ff 	mov.w	r2, #4294967295
 800e948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e94c:	f10a 0a01 	add.w	sl, sl, #1
 800e950:	9304      	str	r3, [sp, #16]
 800e952:	9307      	str	r3, [sp, #28]
 800e954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e958:	931a      	str	r3, [sp, #104]	@ 0x68
 800e95a:	4654      	mov	r4, sl
 800e95c:	2205      	movs	r2, #5
 800e95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e962:	4853      	ldr	r0, [pc, #332]	@ (800eab0 <_vfiprintf_r+0x21c>)
 800e964:	f7f1 fc44 	bl	80001f0 <memchr>
 800e968:	9a04      	ldr	r2, [sp, #16]
 800e96a:	b9d8      	cbnz	r0, 800e9a4 <_vfiprintf_r+0x110>
 800e96c:	06d1      	lsls	r1, r2, #27
 800e96e:	bf44      	itt	mi
 800e970:	2320      	movmi	r3, #32
 800e972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e976:	0713      	lsls	r3, r2, #28
 800e978:	bf44      	itt	mi
 800e97a:	232b      	movmi	r3, #43	@ 0x2b
 800e97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e980:	f89a 3000 	ldrb.w	r3, [sl]
 800e984:	2b2a      	cmp	r3, #42	@ 0x2a
 800e986:	d015      	beq.n	800e9b4 <_vfiprintf_r+0x120>
 800e988:	9a07      	ldr	r2, [sp, #28]
 800e98a:	4654      	mov	r4, sl
 800e98c:	2000      	movs	r0, #0
 800e98e:	f04f 0c0a 	mov.w	ip, #10
 800e992:	4621      	mov	r1, r4
 800e994:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e998:	3b30      	subs	r3, #48	@ 0x30
 800e99a:	2b09      	cmp	r3, #9
 800e99c:	d94b      	bls.n	800ea36 <_vfiprintf_r+0x1a2>
 800e99e:	b1b0      	cbz	r0, 800e9ce <_vfiprintf_r+0x13a>
 800e9a0:	9207      	str	r2, [sp, #28]
 800e9a2:	e014      	b.n	800e9ce <_vfiprintf_r+0x13a>
 800e9a4:	eba0 0308 	sub.w	r3, r0, r8
 800e9a8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	9304      	str	r3, [sp, #16]
 800e9b0:	46a2      	mov	sl, r4
 800e9b2:	e7d2      	b.n	800e95a <_vfiprintf_r+0xc6>
 800e9b4:	9b03      	ldr	r3, [sp, #12]
 800e9b6:	1d19      	adds	r1, r3, #4
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	9103      	str	r1, [sp, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	bfbb      	ittet	lt
 800e9c0:	425b      	neglt	r3, r3
 800e9c2:	f042 0202 	orrlt.w	r2, r2, #2
 800e9c6:	9307      	strge	r3, [sp, #28]
 800e9c8:	9307      	strlt	r3, [sp, #28]
 800e9ca:	bfb8      	it	lt
 800e9cc:	9204      	strlt	r2, [sp, #16]
 800e9ce:	7823      	ldrb	r3, [r4, #0]
 800e9d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9d2:	d10a      	bne.n	800e9ea <_vfiprintf_r+0x156>
 800e9d4:	7863      	ldrb	r3, [r4, #1]
 800e9d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9d8:	d132      	bne.n	800ea40 <_vfiprintf_r+0x1ac>
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	1d1a      	adds	r2, r3, #4
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	9203      	str	r2, [sp, #12]
 800e9e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9e6:	3402      	adds	r4, #2
 800e9e8:	9305      	str	r3, [sp, #20]
 800e9ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eac0 <_vfiprintf_r+0x22c>
 800e9ee:	7821      	ldrb	r1, [r4, #0]
 800e9f0:	2203      	movs	r2, #3
 800e9f2:	4650      	mov	r0, sl
 800e9f4:	f7f1 fbfc 	bl	80001f0 <memchr>
 800e9f8:	b138      	cbz	r0, 800ea0a <_vfiprintf_r+0x176>
 800e9fa:	9b04      	ldr	r3, [sp, #16]
 800e9fc:	eba0 000a 	sub.w	r0, r0, sl
 800ea00:	2240      	movs	r2, #64	@ 0x40
 800ea02:	4082      	lsls	r2, r0
 800ea04:	4313      	orrs	r3, r2
 800ea06:	3401      	adds	r4, #1
 800ea08:	9304      	str	r3, [sp, #16]
 800ea0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea0e:	4829      	ldr	r0, [pc, #164]	@ (800eab4 <_vfiprintf_r+0x220>)
 800ea10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea14:	2206      	movs	r2, #6
 800ea16:	f7f1 fbeb 	bl	80001f0 <memchr>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d03f      	beq.n	800ea9e <_vfiprintf_r+0x20a>
 800ea1e:	4b26      	ldr	r3, [pc, #152]	@ (800eab8 <_vfiprintf_r+0x224>)
 800ea20:	bb1b      	cbnz	r3, 800ea6a <_vfiprintf_r+0x1d6>
 800ea22:	9b03      	ldr	r3, [sp, #12]
 800ea24:	3307      	adds	r3, #7
 800ea26:	f023 0307 	bic.w	r3, r3, #7
 800ea2a:	3308      	adds	r3, #8
 800ea2c:	9303      	str	r3, [sp, #12]
 800ea2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea30:	443b      	add	r3, r7
 800ea32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea34:	e76a      	b.n	800e90c <_vfiprintf_r+0x78>
 800ea36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	e7a8      	b.n	800e992 <_vfiprintf_r+0xfe>
 800ea40:	2300      	movs	r3, #0
 800ea42:	3401      	adds	r4, #1
 800ea44:	9305      	str	r3, [sp, #20]
 800ea46:	4619      	mov	r1, r3
 800ea48:	f04f 0c0a 	mov.w	ip, #10
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea52:	3a30      	subs	r2, #48	@ 0x30
 800ea54:	2a09      	cmp	r2, #9
 800ea56:	d903      	bls.n	800ea60 <_vfiprintf_r+0x1cc>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d0c6      	beq.n	800e9ea <_vfiprintf_r+0x156>
 800ea5c:	9105      	str	r1, [sp, #20]
 800ea5e:	e7c4      	b.n	800e9ea <_vfiprintf_r+0x156>
 800ea60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea64:	4604      	mov	r4, r0
 800ea66:	2301      	movs	r3, #1
 800ea68:	e7f0      	b.n	800ea4c <_vfiprintf_r+0x1b8>
 800ea6a:	ab03      	add	r3, sp, #12
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	462a      	mov	r2, r5
 800ea70:	4b12      	ldr	r3, [pc, #72]	@ (800eabc <_vfiprintf_r+0x228>)
 800ea72:	a904      	add	r1, sp, #16
 800ea74:	4630      	mov	r0, r6
 800ea76:	f7fb feb9 	bl	800a7ec <_printf_float>
 800ea7a:	4607      	mov	r7, r0
 800ea7c:	1c78      	adds	r0, r7, #1
 800ea7e:	d1d6      	bne.n	800ea2e <_vfiprintf_r+0x19a>
 800ea80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea82:	07d9      	lsls	r1, r3, #31
 800ea84:	d405      	bmi.n	800ea92 <_vfiprintf_r+0x1fe>
 800ea86:	89ab      	ldrh	r3, [r5, #12]
 800ea88:	059a      	lsls	r2, r3, #22
 800ea8a:	d402      	bmi.n	800ea92 <_vfiprintf_r+0x1fe>
 800ea8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea8e:	f7fc fe1d 	bl	800b6cc <__retarget_lock_release_recursive>
 800ea92:	89ab      	ldrh	r3, [r5, #12]
 800ea94:	065b      	lsls	r3, r3, #25
 800ea96:	f53f af1f 	bmi.w	800e8d8 <_vfiprintf_r+0x44>
 800ea9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea9c:	e71e      	b.n	800e8dc <_vfiprintf_r+0x48>
 800ea9e:	ab03      	add	r3, sp, #12
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	462a      	mov	r2, r5
 800eaa4:	4b05      	ldr	r3, [pc, #20]	@ (800eabc <_vfiprintf_r+0x228>)
 800eaa6:	a904      	add	r1, sp, #16
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7fc f937 	bl	800ad1c <_printf_i>
 800eaae:	e7e4      	b.n	800ea7a <_vfiprintf_r+0x1e6>
 800eab0:	08012259 	.word	0x08012259
 800eab4:	08012263 	.word	0x08012263
 800eab8:	0800a7ed 	.word	0x0800a7ed
 800eabc:	0800e871 	.word	0x0800e871
 800eac0:	0801225f 	.word	0x0801225f

0800eac4 <__swbuf_r>:
 800eac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac6:	460e      	mov	r6, r1
 800eac8:	4614      	mov	r4, r2
 800eaca:	4605      	mov	r5, r0
 800eacc:	b118      	cbz	r0, 800ead6 <__swbuf_r+0x12>
 800eace:	6a03      	ldr	r3, [r0, #32]
 800ead0:	b90b      	cbnz	r3, 800ead6 <__swbuf_r+0x12>
 800ead2:	f7fc fce3 	bl	800b49c <__sinit>
 800ead6:	69a3      	ldr	r3, [r4, #24]
 800ead8:	60a3      	str	r3, [r4, #8]
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	071a      	lsls	r2, r3, #28
 800eade:	d501      	bpl.n	800eae4 <__swbuf_r+0x20>
 800eae0:	6923      	ldr	r3, [r4, #16]
 800eae2:	b943      	cbnz	r3, 800eaf6 <__swbuf_r+0x32>
 800eae4:	4621      	mov	r1, r4
 800eae6:	4628      	mov	r0, r5
 800eae8:	f000 f82a 	bl	800eb40 <__swsetup_r>
 800eaec:	b118      	cbz	r0, 800eaf6 <__swbuf_r+0x32>
 800eaee:	f04f 37ff 	mov.w	r7, #4294967295
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	6922      	ldr	r2, [r4, #16]
 800eafa:	1a98      	subs	r0, r3, r2
 800eafc:	6963      	ldr	r3, [r4, #20]
 800eafe:	b2f6      	uxtb	r6, r6
 800eb00:	4283      	cmp	r3, r0
 800eb02:	4637      	mov	r7, r6
 800eb04:	dc05      	bgt.n	800eb12 <__swbuf_r+0x4e>
 800eb06:	4621      	mov	r1, r4
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f7ff fa47 	bl	800df9c <_fflush_r>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d1ed      	bne.n	800eaee <__swbuf_r+0x2a>
 800eb12:	68a3      	ldr	r3, [r4, #8]
 800eb14:	3b01      	subs	r3, #1
 800eb16:	60a3      	str	r3, [r4, #8]
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	1c5a      	adds	r2, r3, #1
 800eb1c:	6022      	str	r2, [r4, #0]
 800eb1e:	701e      	strb	r6, [r3, #0]
 800eb20:	6962      	ldr	r2, [r4, #20]
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d004      	beq.n	800eb32 <__swbuf_r+0x6e>
 800eb28:	89a3      	ldrh	r3, [r4, #12]
 800eb2a:	07db      	lsls	r3, r3, #31
 800eb2c:	d5e1      	bpl.n	800eaf2 <__swbuf_r+0x2e>
 800eb2e:	2e0a      	cmp	r6, #10
 800eb30:	d1df      	bne.n	800eaf2 <__swbuf_r+0x2e>
 800eb32:	4621      	mov	r1, r4
 800eb34:	4628      	mov	r0, r5
 800eb36:	f7ff fa31 	bl	800df9c <_fflush_r>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d0d9      	beq.n	800eaf2 <__swbuf_r+0x2e>
 800eb3e:	e7d6      	b.n	800eaee <__swbuf_r+0x2a>

0800eb40 <__swsetup_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	4b29      	ldr	r3, [pc, #164]	@ (800ebe8 <__swsetup_r+0xa8>)
 800eb44:	4605      	mov	r5, r0
 800eb46:	6818      	ldr	r0, [r3, #0]
 800eb48:	460c      	mov	r4, r1
 800eb4a:	b118      	cbz	r0, 800eb54 <__swsetup_r+0x14>
 800eb4c:	6a03      	ldr	r3, [r0, #32]
 800eb4e:	b90b      	cbnz	r3, 800eb54 <__swsetup_r+0x14>
 800eb50:	f7fc fca4 	bl	800b49c <__sinit>
 800eb54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb58:	0719      	lsls	r1, r3, #28
 800eb5a:	d422      	bmi.n	800eba2 <__swsetup_r+0x62>
 800eb5c:	06da      	lsls	r2, r3, #27
 800eb5e:	d407      	bmi.n	800eb70 <__swsetup_r+0x30>
 800eb60:	2209      	movs	r2, #9
 800eb62:	602a      	str	r2, [r5, #0]
 800eb64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb68:	81a3      	strh	r3, [r4, #12]
 800eb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb6e:	e033      	b.n	800ebd8 <__swsetup_r+0x98>
 800eb70:	0758      	lsls	r0, r3, #29
 800eb72:	d512      	bpl.n	800eb9a <__swsetup_r+0x5a>
 800eb74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb76:	b141      	cbz	r1, 800eb8a <__swsetup_r+0x4a>
 800eb78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb7c:	4299      	cmp	r1, r3
 800eb7e:	d002      	beq.n	800eb86 <__swsetup_r+0x46>
 800eb80:	4628      	mov	r0, r5
 800eb82:	f7fd fbf9 	bl	800c378 <_free_r>
 800eb86:	2300      	movs	r3, #0
 800eb88:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb8a:	89a3      	ldrh	r3, [r4, #12]
 800eb8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb90:	81a3      	strh	r3, [r4, #12]
 800eb92:	2300      	movs	r3, #0
 800eb94:	6063      	str	r3, [r4, #4]
 800eb96:	6923      	ldr	r3, [r4, #16]
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	f043 0308 	orr.w	r3, r3, #8
 800eba0:	81a3      	strh	r3, [r4, #12]
 800eba2:	6923      	ldr	r3, [r4, #16]
 800eba4:	b94b      	cbnz	r3, 800ebba <__swsetup_r+0x7a>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ebac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebb0:	d003      	beq.n	800ebba <__swsetup_r+0x7a>
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f000 f883 	bl	800ecc0 <__smakebuf_r>
 800ebba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebbe:	f013 0201 	ands.w	r2, r3, #1
 800ebc2:	d00a      	beq.n	800ebda <__swsetup_r+0x9a>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	60a2      	str	r2, [r4, #8]
 800ebc8:	6962      	ldr	r2, [r4, #20]
 800ebca:	4252      	negs	r2, r2
 800ebcc:	61a2      	str	r2, [r4, #24]
 800ebce:	6922      	ldr	r2, [r4, #16]
 800ebd0:	b942      	cbnz	r2, 800ebe4 <__swsetup_r+0xa4>
 800ebd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ebd6:	d1c5      	bne.n	800eb64 <__swsetup_r+0x24>
 800ebd8:	bd38      	pop	{r3, r4, r5, pc}
 800ebda:	0799      	lsls	r1, r3, #30
 800ebdc:	bf58      	it	pl
 800ebde:	6962      	ldrpl	r2, [r4, #20]
 800ebe0:	60a2      	str	r2, [r4, #8]
 800ebe2:	e7f4      	b.n	800ebce <__swsetup_r+0x8e>
 800ebe4:	2000      	movs	r0, #0
 800ebe6:	e7f7      	b.n	800ebd8 <__swsetup_r+0x98>
 800ebe8:	20000094 	.word	0x20000094

0800ebec <_raise_r>:
 800ebec:	291f      	cmp	r1, #31
 800ebee:	b538      	push	{r3, r4, r5, lr}
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	d904      	bls.n	800ec00 <_raise_r+0x14>
 800ebf6:	2316      	movs	r3, #22
 800ebf8:	6003      	str	r3, [r0, #0]
 800ebfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ebfe:	bd38      	pop	{r3, r4, r5, pc}
 800ec00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ec02:	b112      	cbz	r2, 800ec0a <_raise_r+0x1e>
 800ec04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec08:	b94b      	cbnz	r3, 800ec1e <_raise_r+0x32>
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f000 f830 	bl	800ec70 <_getpid_r>
 800ec10:	4622      	mov	r2, r4
 800ec12:	4601      	mov	r1, r0
 800ec14:	4628      	mov	r0, r5
 800ec16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec1a:	f000 b817 	b.w	800ec4c <_kill_r>
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d00a      	beq.n	800ec38 <_raise_r+0x4c>
 800ec22:	1c59      	adds	r1, r3, #1
 800ec24:	d103      	bne.n	800ec2e <_raise_r+0x42>
 800ec26:	2316      	movs	r3, #22
 800ec28:	6003      	str	r3, [r0, #0]
 800ec2a:	2001      	movs	r0, #1
 800ec2c:	e7e7      	b.n	800ebfe <_raise_r+0x12>
 800ec2e:	2100      	movs	r1, #0
 800ec30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec34:	4620      	mov	r0, r4
 800ec36:	4798      	blx	r3
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e7e0      	b.n	800ebfe <_raise_r+0x12>

0800ec3c <raise>:
 800ec3c:	4b02      	ldr	r3, [pc, #8]	@ (800ec48 <raise+0xc>)
 800ec3e:	4601      	mov	r1, r0
 800ec40:	6818      	ldr	r0, [r3, #0]
 800ec42:	f7ff bfd3 	b.w	800ebec <_raise_r>
 800ec46:	bf00      	nop
 800ec48:	20000094 	.word	0x20000094

0800ec4c <_kill_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	4d07      	ldr	r5, [pc, #28]	@ (800ec6c <_kill_r+0x20>)
 800ec50:	2300      	movs	r3, #0
 800ec52:	4604      	mov	r4, r0
 800ec54:	4608      	mov	r0, r1
 800ec56:	4611      	mov	r1, r2
 800ec58:	602b      	str	r3, [r5, #0]
 800ec5a:	f7f5 fb2d 	bl	80042b8 <_kill>
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	d102      	bne.n	800ec68 <_kill_r+0x1c>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b103      	cbz	r3, 800ec68 <_kill_r+0x1c>
 800ec66:	6023      	str	r3, [r4, #0]
 800ec68:	bd38      	pop	{r3, r4, r5, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20000d38 	.word	0x20000d38

0800ec70 <_getpid_r>:
 800ec70:	f7f5 bb1a 	b.w	80042a8 <_getpid>

0800ec74 <__swhatbuf_r>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	460c      	mov	r4, r1
 800ec78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec7c:	2900      	cmp	r1, #0
 800ec7e:	b096      	sub	sp, #88	@ 0x58
 800ec80:	4615      	mov	r5, r2
 800ec82:	461e      	mov	r6, r3
 800ec84:	da0d      	bge.n	800eca2 <__swhatbuf_r+0x2e>
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec8c:	f04f 0100 	mov.w	r1, #0
 800ec90:	bf14      	ite	ne
 800ec92:	2340      	movne	r3, #64	@ 0x40
 800ec94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec98:	2000      	movs	r0, #0
 800ec9a:	6031      	str	r1, [r6, #0]
 800ec9c:	602b      	str	r3, [r5, #0]
 800ec9e:	b016      	add	sp, #88	@ 0x58
 800eca0:	bd70      	pop	{r4, r5, r6, pc}
 800eca2:	466a      	mov	r2, sp
 800eca4:	f000 f848 	bl	800ed38 <_fstat_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	dbec      	blt.n	800ec86 <__swhatbuf_r+0x12>
 800ecac:	9901      	ldr	r1, [sp, #4]
 800ecae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ecb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ecb6:	4259      	negs	r1, r3
 800ecb8:	4159      	adcs	r1, r3
 800ecba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecbe:	e7eb      	b.n	800ec98 <__swhatbuf_r+0x24>

0800ecc0 <__smakebuf_r>:
 800ecc0:	898b      	ldrh	r3, [r1, #12]
 800ecc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecc4:	079d      	lsls	r5, r3, #30
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	d507      	bpl.n	800ecdc <__smakebuf_r+0x1c>
 800eccc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	6123      	str	r3, [r4, #16]
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	6163      	str	r3, [r4, #20]
 800ecd8:	b003      	add	sp, #12
 800ecda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecdc:	ab01      	add	r3, sp, #4
 800ecde:	466a      	mov	r2, sp
 800ece0:	f7ff ffc8 	bl	800ec74 <__swhatbuf_r>
 800ece4:	9f00      	ldr	r7, [sp, #0]
 800ece6:	4605      	mov	r5, r0
 800ece8:	4639      	mov	r1, r7
 800ecea:	4630      	mov	r0, r6
 800ecec:	f7fd fbb8 	bl	800c460 <_malloc_r>
 800ecf0:	b948      	cbnz	r0, 800ed06 <__smakebuf_r+0x46>
 800ecf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf6:	059a      	lsls	r2, r3, #22
 800ecf8:	d4ee      	bmi.n	800ecd8 <__smakebuf_r+0x18>
 800ecfa:	f023 0303 	bic.w	r3, r3, #3
 800ecfe:	f043 0302 	orr.w	r3, r3, #2
 800ed02:	81a3      	strh	r3, [r4, #12]
 800ed04:	e7e2      	b.n	800eccc <__smakebuf_r+0xc>
 800ed06:	89a3      	ldrh	r3, [r4, #12]
 800ed08:	6020      	str	r0, [r4, #0]
 800ed0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	9b01      	ldr	r3, [sp, #4]
 800ed12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ed16:	b15b      	cbz	r3, 800ed30 <__smakebuf_r+0x70>
 800ed18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f000 f81d 	bl	800ed5c <_isatty_r>
 800ed22:	b128      	cbz	r0, 800ed30 <__smakebuf_r+0x70>
 800ed24:	89a3      	ldrh	r3, [r4, #12]
 800ed26:	f023 0303 	bic.w	r3, r3, #3
 800ed2a:	f043 0301 	orr.w	r3, r3, #1
 800ed2e:	81a3      	strh	r3, [r4, #12]
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	431d      	orrs	r5, r3
 800ed34:	81a5      	strh	r5, [r4, #12]
 800ed36:	e7cf      	b.n	800ecd8 <__smakebuf_r+0x18>

0800ed38 <_fstat_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4d07      	ldr	r5, [pc, #28]	@ (800ed58 <_fstat_r+0x20>)
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	4604      	mov	r4, r0
 800ed40:	4608      	mov	r0, r1
 800ed42:	4611      	mov	r1, r2
 800ed44:	602b      	str	r3, [r5, #0]
 800ed46:	f7f5 fb17 	bl	8004378 <_fstat>
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	d102      	bne.n	800ed54 <_fstat_r+0x1c>
 800ed4e:	682b      	ldr	r3, [r5, #0]
 800ed50:	b103      	cbz	r3, 800ed54 <_fstat_r+0x1c>
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	bd38      	pop	{r3, r4, r5, pc}
 800ed56:	bf00      	nop
 800ed58:	20000d38 	.word	0x20000d38

0800ed5c <_isatty_r>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	4d06      	ldr	r5, [pc, #24]	@ (800ed78 <_isatty_r+0x1c>)
 800ed60:	2300      	movs	r3, #0
 800ed62:	4604      	mov	r4, r0
 800ed64:	4608      	mov	r0, r1
 800ed66:	602b      	str	r3, [r5, #0]
 800ed68:	f7f5 fb16 	bl	8004398 <_isatty>
 800ed6c:	1c43      	adds	r3, r0, #1
 800ed6e:	d102      	bne.n	800ed76 <_isatty_r+0x1a>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	b103      	cbz	r3, 800ed76 <_isatty_r+0x1a>
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	bd38      	pop	{r3, r4, r5, pc}
 800ed78:	20000d38 	.word	0x20000d38

0800ed7c <sinf>:
 800ed7c:	ee10 3a10 	vmov	r3, s0
 800ed80:	b507      	push	{r0, r1, r2, lr}
 800ed82:	4a1f      	ldr	r2, [pc, #124]	@ (800ee00 <sinf+0x84>)
 800ed84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d807      	bhi.n	800ed9c <sinf+0x20>
 800ed8c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800ee04 <sinf+0x88>
 800ed90:	2000      	movs	r0, #0
 800ed92:	b003      	add	sp, #12
 800ed94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed98:	f000 b88e 	b.w	800eeb8 <__kernel_sinf>
 800ed9c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eda0:	d304      	bcc.n	800edac <sinf+0x30>
 800eda2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800eda6:	b003      	add	sp, #12
 800eda8:	f85d fb04 	ldr.w	pc, [sp], #4
 800edac:	4668      	mov	r0, sp
 800edae:	f000 f8cb 	bl	800ef48 <__ieee754_rem_pio2f>
 800edb2:	f000 0003 	and.w	r0, r0, #3
 800edb6:	2801      	cmp	r0, #1
 800edb8:	d00a      	beq.n	800edd0 <sinf+0x54>
 800edba:	2802      	cmp	r0, #2
 800edbc:	d00f      	beq.n	800edde <sinf+0x62>
 800edbe:	b9c0      	cbnz	r0, 800edf2 <sinf+0x76>
 800edc0:	eddd 0a01 	vldr	s1, [sp, #4]
 800edc4:	ed9d 0a00 	vldr	s0, [sp]
 800edc8:	2001      	movs	r0, #1
 800edca:	f000 f875 	bl	800eeb8 <__kernel_sinf>
 800edce:	e7ea      	b.n	800eda6 <sinf+0x2a>
 800edd0:	eddd 0a01 	vldr	s1, [sp, #4]
 800edd4:	ed9d 0a00 	vldr	s0, [sp]
 800edd8:	f000 f816 	bl	800ee08 <__kernel_cosf>
 800eddc:	e7e3      	b.n	800eda6 <sinf+0x2a>
 800edde:	eddd 0a01 	vldr	s1, [sp, #4]
 800ede2:	ed9d 0a00 	vldr	s0, [sp]
 800ede6:	2001      	movs	r0, #1
 800ede8:	f000 f866 	bl	800eeb8 <__kernel_sinf>
 800edec:	eeb1 0a40 	vneg.f32	s0, s0
 800edf0:	e7d9      	b.n	800eda6 <sinf+0x2a>
 800edf2:	eddd 0a01 	vldr	s1, [sp, #4]
 800edf6:	ed9d 0a00 	vldr	s0, [sp]
 800edfa:	f000 f805 	bl	800ee08 <__kernel_cosf>
 800edfe:	e7f5      	b.n	800edec <sinf+0x70>
 800ee00:	3f490fd8 	.word	0x3f490fd8
 800ee04:	00000000 	.word	0x00000000

0800ee08 <__kernel_cosf>:
 800ee08:	ee10 3a10 	vmov	r3, s0
 800ee0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee10:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ee14:	eef0 6a40 	vmov.f32	s13, s0
 800ee18:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ee1c:	d204      	bcs.n	800ee28 <__kernel_cosf+0x20>
 800ee1e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ee22:	ee17 2a90 	vmov	r2, s15
 800ee26:	b342      	cbz	r2, 800ee7a <__kernel_cosf+0x72>
 800ee28:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ee2c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ee98 <__kernel_cosf+0x90>
 800ee30:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ee9c <__kernel_cosf+0x94>
 800ee34:	4a1a      	ldr	r2, [pc, #104]	@ (800eea0 <__kernel_cosf+0x98>)
 800ee36:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800eea4 <__kernel_cosf+0x9c>
 800ee40:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ee44:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800eea8 <__kernel_cosf+0xa0>
 800ee48:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ee4c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800eeac <__kernel_cosf+0xa4>
 800ee50:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ee54:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800eeb0 <__kernel_cosf+0xa8>
 800ee58:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ee5c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ee60:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ee64:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ee68:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ee6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee70:	d804      	bhi.n	800ee7c <__kernel_cosf+0x74>
 800ee72:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ee76:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee7a:	4770      	bx	lr
 800ee7c:	4a0d      	ldr	r2, [pc, #52]	@ (800eeb4 <__kernel_cosf+0xac>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	bf9a      	itte	ls
 800ee82:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ee86:	ee07 3a10 	vmovls	s14, r3
 800ee8a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ee8e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ee92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee96:	e7ec      	b.n	800ee72 <__kernel_cosf+0x6a>
 800ee98:	ad47d74e 	.word	0xad47d74e
 800ee9c:	310f74f6 	.word	0x310f74f6
 800eea0:	3e999999 	.word	0x3e999999
 800eea4:	b493f27c 	.word	0xb493f27c
 800eea8:	37d00d01 	.word	0x37d00d01
 800eeac:	bab60b61 	.word	0xbab60b61
 800eeb0:	3d2aaaab 	.word	0x3d2aaaab
 800eeb4:	3f480000 	.word	0x3f480000

0800eeb8 <__kernel_sinf>:
 800eeb8:	ee10 3a10 	vmov	r3, s0
 800eebc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eec0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800eec4:	d204      	bcs.n	800eed0 <__kernel_sinf+0x18>
 800eec6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eeca:	ee17 3a90 	vmov	r3, s15
 800eece:	b35b      	cbz	r3, 800ef28 <__kernel_sinf+0x70>
 800eed0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800eed4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ef2c <__kernel_sinf+0x74>
 800eed8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ef30 <__kernel_sinf+0x78>
 800eedc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eee0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ef34 <__kernel_sinf+0x7c>
 800eee4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eee8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ef38 <__kernel_sinf+0x80>
 800eeec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800eef0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ef3c <__kernel_sinf+0x84>
 800eef4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800eef8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eefc:	b930      	cbnz	r0, 800ef0c <__kernel_sinf+0x54>
 800eefe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ef40 <__kernel_sinf+0x88>
 800ef02:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ef06:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ef0a:	4770      	bx	lr
 800ef0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ef10:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ef14:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ef18:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ef1c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ef44 <__kernel_sinf+0x8c>
 800ef20:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ef24:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	2f2ec9d3 	.word	0x2f2ec9d3
 800ef30:	b2d72f34 	.word	0xb2d72f34
 800ef34:	3638ef1b 	.word	0x3638ef1b
 800ef38:	b9500d01 	.word	0xb9500d01
 800ef3c:	3c088889 	.word	0x3c088889
 800ef40:	be2aaaab 	.word	0xbe2aaaab
 800ef44:	3e2aaaab 	.word	0x3e2aaaab

0800ef48 <__ieee754_rem_pio2f>:
 800ef48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef4a:	ee10 6a10 	vmov	r6, s0
 800ef4e:	4b88      	ldr	r3, [pc, #544]	@ (800f170 <__ieee754_rem_pio2f+0x228>)
 800ef50:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ef54:	429d      	cmp	r5, r3
 800ef56:	b087      	sub	sp, #28
 800ef58:	4604      	mov	r4, r0
 800ef5a:	d805      	bhi.n	800ef68 <__ieee754_rem_pio2f+0x20>
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	ed80 0a00 	vstr	s0, [r0]
 800ef62:	6043      	str	r3, [r0, #4]
 800ef64:	2000      	movs	r0, #0
 800ef66:	e022      	b.n	800efae <__ieee754_rem_pio2f+0x66>
 800ef68:	4b82      	ldr	r3, [pc, #520]	@ (800f174 <__ieee754_rem_pio2f+0x22c>)
 800ef6a:	429d      	cmp	r5, r3
 800ef6c:	d83a      	bhi.n	800efe4 <__ieee754_rem_pio2f+0x9c>
 800ef6e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ef72:	2e00      	cmp	r6, #0
 800ef74:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f178 <__ieee754_rem_pio2f+0x230>
 800ef78:	4a80      	ldr	r2, [pc, #512]	@ (800f17c <__ieee754_rem_pio2f+0x234>)
 800ef7a:	f023 030f 	bic.w	r3, r3, #15
 800ef7e:	dd18      	ble.n	800efb2 <__ieee754_rem_pio2f+0x6a>
 800ef80:	4293      	cmp	r3, r2
 800ef82:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ef86:	bf09      	itett	eq
 800ef88:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f180 <__ieee754_rem_pio2f+0x238>
 800ef8c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f184 <__ieee754_rem_pio2f+0x23c>
 800ef90:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f188 <__ieee754_rem_pio2f+0x240>
 800ef94:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ef98:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ef9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800efa0:	ed80 7a00 	vstr	s14, [r0]
 800efa4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800efa8:	edc0 7a01 	vstr	s15, [r0, #4]
 800efac:	2001      	movs	r0, #1
 800efae:	b007      	add	sp, #28
 800efb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb2:	4293      	cmp	r3, r2
 800efb4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800efb8:	bf09      	itett	eq
 800efba:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f180 <__ieee754_rem_pio2f+0x238>
 800efbe:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f184 <__ieee754_rem_pio2f+0x23c>
 800efc2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f188 <__ieee754_rem_pio2f+0x240>
 800efc6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800efca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800efce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800efd2:	ed80 7a00 	vstr	s14, [r0]
 800efd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efda:	edc0 7a01 	vstr	s15, [r0, #4]
 800efde:	f04f 30ff 	mov.w	r0, #4294967295
 800efe2:	e7e4      	b.n	800efae <__ieee754_rem_pio2f+0x66>
 800efe4:	4b69      	ldr	r3, [pc, #420]	@ (800f18c <__ieee754_rem_pio2f+0x244>)
 800efe6:	429d      	cmp	r5, r3
 800efe8:	d873      	bhi.n	800f0d2 <__ieee754_rem_pio2f+0x18a>
 800efea:	f000 f8dd 	bl	800f1a8 <fabsf>
 800efee:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f190 <__ieee754_rem_pio2f+0x248>
 800eff2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800eff6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800effa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800effe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f002:	ee17 0a90 	vmov	r0, s15
 800f006:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f178 <__ieee754_rem_pio2f+0x230>
 800f00a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f00e:	281f      	cmp	r0, #31
 800f010:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f184 <__ieee754_rem_pio2f+0x23c>
 800f014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f018:	eeb1 6a47 	vneg.f32	s12, s14
 800f01c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f020:	ee16 1a90 	vmov	r1, s13
 800f024:	dc09      	bgt.n	800f03a <__ieee754_rem_pio2f+0xf2>
 800f026:	4a5b      	ldr	r2, [pc, #364]	@ (800f194 <__ieee754_rem_pio2f+0x24c>)
 800f028:	1e47      	subs	r7, r0, #1
 800f02a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f02e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f032:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f036:	4293      	cmp	r3, r2
 800f038:	d107      	bne.n	800f04a <__ieee754_rem_pio2f+0x102>
 800f03a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f03e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f042:	2a08      	cmp	r2, #8
 800f044:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f048:	dc14      	bgt.n	800f074 <__ieee754_rem_pio2f+0x12c>
 800f04a:	6021      	str	r1, [r4, #0]
 800f04c:	ed94 7a00 	vldr	s14, [r4]
 800f050:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f054:	2e00      	cmp	r6, #0
 800f056:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f05a:	ed84 0a01 	vstr	s0, [r4, #4]
 800f05e:	daa6      	bge.n	800efae <__ieee754_rem_pio2f+0x66>
 800f060:	eeb1 7a47 	vneg.f32	s14, s14
 800f064:	eeb1 0a40 	vneg.f32	s0, s0
 800f068:	ed84 7a00 	vstr	s14, [r4]
 800f06c:	ed84 0a01 	vstr	s0, [r4, #4]
 800f070:	4240      	negs	r0, r0
 800f072:	e79c      	b.n	800efae <__ieee754_rem_pio2f+0x66>
 800f074:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f180 <__ieee754_rem_pio2f+0x238>
 800f078:	eef0 6a40 	vmov.f32	s13, s0
 800f07c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f080:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f084:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f088:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f188 <__ieee754_rem_pio2f+0x240>
 800f08c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f090:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f094:	ee15 2a90 	vmov	r2, s11
 800f098:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f09c:	1a5b      	subs	r3, r3, r1
 800f09e:	2b19      	cmp	r3, #25
 800f0a0:	dc04      	bgt.n	800f0ac <__ieee754_rem_pio2f+0x164>
 800f0a2:	edc4 5a00 	vstr	s11, [r4]
 800f0a6:	eeb0 0a66 	vmov.f32	s0, s13
 800f0aa:	e7cf      	b.n	800f04c <__ieee754_rem_pio2f+0x104>
 800f0ac:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f198 <__ieee754_rem_pio2f+0x250>
 800f0b0:	eeb0 0a66 	vmov.f32	s0, s13
 800f0b4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f0b8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f0bc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f19c <__ieee754_rem_pio2f+0x254>
 800f0c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f0c4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f0c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f0cc:	ed84 7a00 	vstr	s14, [r4]
 800f0d0:	e7bc      	b.n	800f04c <__ieee754_rem_pio2f+0x104>
 800f0d2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f0d6:	d306      	bcc.n	800f0e6 <__ieee754_rem_pio2f+0x19e>
 800f0d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f0dc:	edc0 7a01 	vstr	s15, [r0, #4]
 800f0e0:	edc0 7a00 	vstr	s15, [r0]
 800f0e4:	e73e      	b.n	800ef64 <__ieee754_rem_pio2f+0x1c>
 800f0e6:	15ea      	asrs	r2, r5, #23
 800f0e8:	3a86      	subs	r2, #134	@ 0x86
 800f0ea:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f0ee:	ee07 3a90 	vmov	s15, r3
 800f0f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f0f6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f1a0 <__ieee754_rem_pio2f+0x258>
 800f0fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f102:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f106:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f10a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f10e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f116:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f11a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f11e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f126:	edcd 7a05 	vstr	s15, [sp, #20]
 800f12a:	d11e      	bne.n	800f16a <__ieee754_rem_pio2f+0x222>
 800f12c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f134:	bf0c      	ite	eq
 800f136:	2301      	moveq	r3, #1
 800f138:	2302      	movne	r3, #2
 800f13a:	491a      	ldr	r1, [pc, #104]	@ (800f1a4 <__ieee754_rem_pio2f+0x25c>)
 800f13c:	9101      	str	r1, [sp, #4]
 800f13e:	2102      	movs	r1, #2
 800f140:	9100      	str	r1, [sp, #0]
 800f142:	a803      	add	r0, sp, #12
 800f144:	4621      	mov	r1, r4
 800f146:	f000 f837 	bl	800f1b8 <__kernel_rem_pio2f>
 800f14a:	2e00      	cmp	r6, #0
 800f14c:	f6bf af2f 	bge.w	800efae <__ieee754_rem_pio2f+0x66>
 800f150:	edd4 7a00 	vldr	s15, [r4]
 800f154:	eef1 7a67 	vneg.f32	s15, s15
 800f158:	edc4 7a00 	vstr	s15, [r4]
 800f15c:	edd4 7a01 	vldr	s15, [r4, #4]
 800f160:	eef1 7a67 	vneg.f32	s15, s15
 800f164:	edc4 7a01 	vstr	s15, [r4, #4]
 800f168:	e782      	b.n	800f070 <__ieee754_rem_pio2f+0x128>
 800f16a:	2303      	movs	r3, #3
 800f16c:	e7e5      	b.n	800f13a <__ieee754_rem_pio2f+0x1f2>
 800f16e:	bf00      	nop
 800f170:	3f490fd8 	.word	0x3f490fd8
 800f174:	4016cbe3 	.word	0x4016cbe3
 800f178:	3fc90f80 	.word	0x3fc90f80
 800f17c:	3fc90fd0 	.word	0x3fc90fd0
 800f180:	37354400 	.word	0x37354400
 800f184:	37354443 	.word	0x37354443
 800f188:	2e85a308 	.word	0x2e85a308
 800f18c:	43490f80 	.word	0x43490f80
 800f190:	3f22f984 	.word	0x3f22f984
 800f194:	08012310 	.word	0x08012310
 800f198:	2e85a300 	.word	0x2e85a300
 800f19c:	248d3132 	.word	0x248d3132
 800f1a0:	43800000 	.word	0x43800000
 800f1a4:	08012390 	.word	0x08012390

0800f1a8 <fabsf>:
 800f1a8:	ee10 3a10 	vmov	r3, s0
 800f1ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1b0:	ee00 3a10 	vmov	s0, r3
 800f1b4:	4770      	bx	lr
	...

0800f1b8 <__kernel_rem_pio2f>:
 800f1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1bc:	ed2d 8b04 	vpush	{d8-d9}
 800f1c0:	b0d9      	sub	sp, #356	@ 0x164
 800f1c2:	4690      	mov	r8, r2
 800f1c4:	9001      	str	r0, [sp, #4]
 800f1c6:	4ab9      	ldr	r2, [pc, #740]	@ (800f4ac <__kernel_rem_pio2f+0x2f4>)
 800f1c8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f1ca:	f118 0f04 	cmn.w	r8, #4
 800f1ce:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f1d2:	460f      	mov	r7, r1
 800f1d4:	f103 3bff 	add.w	fp, r3, #4294967295
 800f1d8:	db27      	blt.n	800f22a <__kernel_rem_pio2f+0x72>
 800f1da:	f1b8 0203 	subs.w	r2, r8, #3
 800f1de:	bf48      	it	mi
 800f1e0:	f108 0204 	addmi.w	r2, r8, #4
 800f1e4:	10d2      	asrs	r2, r2, #3
 800f1e6:	1c55      	adds	r5, r2, #1
 800f1e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f1ea:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800f4bc <__kernel_rem_pio2f+0x304>
 800f1ee:	00e8      	lsls	r0, r5, #3
 800f1f0:	eba2 060b 	sub.w	r6, r2, fp
 800f1f4:	9002      	str	r0, [sp, #8]
 800f1f6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f1fa:	eb0a 0c0b 	add.w	ip, sl, fp
 800f1fe:	ac1c      	add	r4, sp, #112	@ 0x70
 800f200:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f204:	2000      	movs	r0, #0
 800f206:	4560      	cmp	r0, ip
 800f208:	dd11      	ble.n	800f22e <__kernel_rem_pio2f+0x76>
 800f20a:	a91c      	add	r1, sp, #112	@ 0x70
 800f20c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f210:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f214:	f04f 0c00 	mov.w	ip, #0
 800f218:	45d4      	cmp	ip, sl
 800f21a:	dc27      	bgt.n	800f26c <__kernel_rem_pio2f+0xb4>
 800f21c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f220:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800f4bc <__kernel_rem_pio2f+0x304>
 800f224:	4606      	mov	r6, r0
 800f226:	2400      	movs	r4, #0
 800f228:	e016      	b.n	800f258 <__kernel_rem_pio2f+0xa0>
 800f22a:	2200      	movs	r2, #0
 800f22c:	e7db      	b.n	800f1e6 <__kernel_rem_pio2f+0x2e>
 800f22e:	42c6      	cmn	r6, r0
 800f230:	bf5d      	ittte	pl
 800f232:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f236:	ee07 1a90 	vmovpl	s15, r1
 800f23a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f23e:	eef0 7a47 	vmovmi.f32	s15, s14
 800f242:	ece4 7a01 	vstmia	r4!, {s15}
 800f246:	3001      	adds	r0, #1
 800f248:	e7dd      	b.n	800f206 <__kernel_rem_pio2f+0x4e>
 800f24a:	ecfe 6a01 	vldmia	lr!, {s13}
 800f24e:	ed96 7a00 	vldr	s14, [r6]
 800f252:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f256:	3401      	adds	r4, #1
 800f258:	455c      	cmp	r4, fp
 800f25a:	f1a6 0604 	sub.w	r6, r6, #4
 800f25e:	ddf4      	ble.n	800f24a <__kernel_rem_pio2f+0x92>
 800f260:	ece9 7a01 	vstmia	r9!, {s15}
 800f264:	f10c 0c01 	add.w	ip, ip, #1
 800f268:	3004      	adds	r0, #4
 800f26a:	e7d5      	b.n	800f218 <__kernel_rem_pio2f+0x60>
 800f26c:	a908      	add	r1, sp, #32
 800f26e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f272:	9104      	str	r1, [sp, #16]
 800f274:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f276:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800f4b8 <__kernel_rem_pio2f+0x300>
 800f27a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800f4b4 <__kernel_rem_pio2f+0x2fc>
 800f27e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f282:	9203      	str	r2, [sp, #12]
 800f284:	4654      	mov	r4, sl
 800f286:	00a2      	lsls	r2, r4, #2
 800f288:	9205      	str	r2, [sp, #20]
 800f28a:	aa58      	add	r2, sp, #352	@ 0x160
 800f28c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f290:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f294:	a944      	add	r1, sp, #272	@ 0x110
 800f296:	aa08      	add	r2, sp, #32
 800f298:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f29c:	4694      	mov	ip, r2
 800f29e:	4626      	mov	r6, r4
 800f2a0:	2e00      	cmp	r6, #0
 800f2a2:	f1a0 0004 	sub.w	r0, r0, #4
 800f2a6:	dc4c      	bgt.n	800f342 <__kernel_rem_pio2f+0x18a>
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f2ae:	f000 f9f5 	bl	800f69c <scalbnf>
 800f2b2:	eeb0 8a40 	vmov.f32	s16, s0
 800f2b6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f2ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f2be:	f000 fa53 	bl	800f768 <floorf>
 800f2c2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f2c6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f2ca:	2d00      	cmp	r5, #0
 800f2cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f2d4:	ee17 9a90 	vmov	r9, s15
 800f2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2dc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f2e0:	dd41      	ble.n	800f366 <__kernel_rem_pio2f+0x1ae>
 800f2e2:	f104 3cff 	add.w	ip, r4, #4294967295
 800f2e6:	a908      	add	r1, sp, #32
 800f2e8:	f1c5 0e08 	rsb	lr, r5, #8
 800f2ec:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800f2f0:	fa46 f00e 	asr.w	r0, r6, lr
 800f2f4:	4481      	add	r9, r0
 800f2f6:	fa00 f00e 	lsl.w	r0, r0, lr
 800f2fa:	1a36      	subs	r6, r6, r0
 800f2fc:	f1c5 0007 	rsb	r0, r5, #7
 800f300:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800f304:	4106      	asrs	r6, r0
 800f306:	2e00      	cmp	r6, #0
 800f308:	dd3c      	ble.n	800f384 <__kernel_rem_pio2f+0x1cc>
 800f30a:	f04f 0e00 	mov.w	lr, #0
 800f30e:	f109 0901 	add.w	r9, r9, #1
 800f312:	4670      	mov	r0, lr
 800f314:	4574      	cmp	r4, lr
 800f316:	dc68      	bgt.n	800f3ea <__kernel_rem_pio2f+0x232>
 800f318:	2d00      	cmp	r5, #0
 800f31a:	dd03      	ble.n	800f324 <__kernel_rem_pio2f+0x16c>
 800f31c:	2d01      	cmp	r5, #1
 800f31e:	d074      	beq.n	800f40a <__kernel_rem_pio2f+0x252>
 800f320:	2d02      	cmp	r5, #2
 800f322:	d07d      	beq.n	800f420 <__kernel_rem_pio2f+0x268>
 800f324:	2e02      	cmp	r6, #2
 800f326:	d12d      	bne.n	800f384 <__kernel_rem_pio2f+0x1cc>
 800f328:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f32c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f330:	b340      	cbz	r0, 800f384 <__kernel_rem_pio2f+0x1cc>
 800f332:	4628      	mov	r0, r5
 800f334:	9306      	str	r3, [sp, #24]
 800f336:	f000 f9b1 	bl	800f69c <scalbnf>
 800f33a:	9b06      	ldr	r3, [sp, #24]
 800f33c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f340:	e020      	b.n	800f384 <__kernel_rem_pio2f+0x1cc>
 800f342:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f346:	3e01      	subs	r6, #1
 800f348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f34c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f350:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f354:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f358:	ecac 0a01 	vstmia	ip!, {s0}
 800f35c:	ed90 0a00 	vldr	s0, [r0]
 800f360:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f364:	e79c      	b.n	800f2a0 <__kernel_rem_pio2f+0xe8>
 800f366:	d105      	bne.n	800f374 <__kernel_rem_pio2f+0x1bc>
 800f368:	1e60      	subs	r0, r4, #1
 800f36a:	a908      	add	r1, sp, #32
 800f36c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800f370:	11f6      	asrs	r6, r6, #7
 800f372:	e7c8      	b.n	800f306 <__kernel_rem_pio2f+0x14e>
 800f374:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f378:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f380:	da31      	bge.n	800f3e6 <__kernel_rem_pio2f+0x22e>
 800f382:	2600      	movs	r6, #0
 800f384:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38c:	f040 8098 	bne.w	800f4c0 <__kernel_rem_pio2f+0x308>
 800f390:	1e60      	subs	r0, r4, #1
 800f392:	2200      	movs	r2, #0
 800f394:	4550      	cmp	r0, sl
 800f396:	da4b      	bge.n	800f430 <__kernel_rem_pio2f+0x278>
 800f398:	2a00      	cmp	r2, #0
 800f39a:	d065      	beq.n	800f468 <__kernel_rem_pio2f+0x2b0>
 800f39c:	3c01      	subs	r4, #1
 800f39e:	ab08      	add	r3, sp, #32
 800f3a0:	3d08      	subs	r5, #8
 800f3a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0f8      	beq.n	800f39c <__kernel_rem_pio2f+0x1e4>
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f3b0:	f000 f974 	bl	800f69c <scalbnf>
 800f3b4:	1c63      	adds	r3, r4, #1
 800f3b6:	aa44      	add	r2, sp, #272	@ 0x110
 800f3b8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800f4b8 <__kernel_rem_pio2f+0x300>
 800f3bc:	0099      	lsls	r1, r3, #2
 800f3be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f3c2:	4623      	mov	r3, r4
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f280 80a9 	bge.w	800f51c <__kernel_rem_pio2f+0x364>
 800f3ca:	4623      	mov	r3, r4
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f2c0 80c7 	blt.w	800f560 <__kernel_rem_pio2f+0x3a8>
 800f3d2:	aa44      	add	r2, sp, #272	@ 0x110
 800f3d4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f3d8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800f4b0 <__kernel_rem_pio2f+0x2f8>
 800f3dc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800f4bc <__kernel_rem_pio2f+0x304>
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	1ae2      	subs	r2, r4, r3
 800f3e4:	e0b1      	b.n	800f54a <__kernel_rem_pio2f+0x392>
 800f3e6:	2602      	movs	r6, #2
 800f3e8:	e78f      	b.n	800f30a <__kernel_rem_pio2f+0x152>
 800f3ea:	f852 1b04 	ldr.w	r1, [r2], #4
 800f3ee:	b948      	cbnz	r0, 800f404 <__kernel_rem_pio2f+0x24c>
 800f3f0:	b121      	cbz	r1, 800f3fc <__kernel_rem_pio2f+0x244>
 800f3f2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800f3f6:	f842 1c04 	str.w	r1, [r2, #-4]
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	f10e 0e01 	add.w	lr, lr, #1
 800f400:	4608      	mov	r0, r1
 800f402:	e787      	b.n	800f314 <__kernel_rem_pio2f+0x15c>
 800f404:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800f408:	e7f5      	b.n	800f3f6 <__kernel_rem_pio2f+0x23e>
 800f40a:	f104 3cff 	add.w	ip, r4, #4294967295
 800f40e:	aa08      	add	r2, sp, #32
 800f410:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f414:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f418:	a908      	add	r1, sp, #32
 800f41a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800f41e:	e781      	b.n	800f324 <__kernel_rem_pio2f+0x16c>
 800f420:	f104 3cff 	add.w	ip, r4, #4294967295
 800f424:	aa08      	add	r2, sp, #32
 800f426:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f42a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f42e:	e7f3      	b.n	800f418 <__kernel_rem_pio2f+0x260>
 800f430:	a908      	add	r1, sp, #32
 800f432:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f436:	3801      	subs	r0, #1
 800f438:	430a      	orrs	r2, r1
 800f43a:	e7ab      	b.n	800f394 <__kernel_rem_pio2f+0x1dc>
 800f43c:	3201      	adds	r2, #1
 800f43e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800f442:	2e00      	cmp	r6, #0
 800f444:	d0fa      	beq.n	800f43c <__kernel_rem_pio2f+0x284>
 800f446:	9905      	ldr	r1, [sp, #20]
 800f448:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800f44c:	eb0d 0001 	add.w	r0, sp, r1
 800f450:	18e6      	adds	r6, r4, r3
 800f452:	a91c      	add	r1, sp, #112	@ 0x70
 800f454:	f104 0c01 	add.w	ip, r4, #1
 800f458:	384c      	subs	r0, #76	@ 0x4c
 800f45a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800f45e:	4422      	add	r2, r4
 800f460:	4562      	cmp	r2, ip
 800f462:	da04      	bge.n	800f46e <__kernel_rem_pio2f+0x2b6>
 800f464:	4614      	mov	r4, r2
 800f466:	e70e      	b.n	800f286 <__kernel_rem_pio2f+0xce>
 800f468:	9804      	ldr	r0, [sp, #16]
 800f46a:	2201      	movs	r2, #1
 800f46c:	e7e7      	b.n	800f43e <__kernel_rem_pio2f+0x286>
 800f46e:	9903      	ldr	r1, [sp, #12]
 800f470:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f474:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800f478:	9105      	str	r1, [sp, #20]
 800f47a:	ee07 1a90 	vmov	s15, r1
 800f47e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f482:	2400      	movs	r4, #0
 800f484:	ece6 7a01 	vstmia	r6!, {s15}
 800f488:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800f4bc <__kernel_rem_pio2f+0x304>
 800f48c:	46b1      	mov	r9, r6
 800f48e:	455c      	cmp	r4, fp
 800f490:	dd04      	ble.n	800f49c <__kernel_rem_pio2f+0x2e4>
 800f492:	ece0 7a01 	vstmia	r0!, {s15}
 800f496:	f10c 0c01 	add.w	ip, ip, #1
 800f49a:	e7e1      	b.n	800f460 <__kernel_rem_pio2f+0x2a8>
 800f49c:	ecfe 6a01 	vldmia	lr!, {s13}
 800f4a0:	ed39 7a01 	vldmdb	r9!, {s14}
 800f4a4:	3401      	adds	r4, #1
 800f4a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f4aa:	e7f0      	b.n	800f48e <__kernel_rem_pio2f+0x2d6>
 800f4ac:	080126d4 	.word	0x080126d4
 800f4b0:	080126a8 	.word	0x080126a8
 800f4b4:	43800000 	.word	0x43800000
 800f4b8:	3b800000 	.word	0x3b800000
 800f4bc:	00000000 	.word	0x00000000
 800f4c0:	9b02      	ldr	r3, [sp, #8]
 800f4c2:	eeb0 0a48 	vmov.f32	s0, s16
 800f4c6:	eba3 0008 	sub.w	r0, r3, r8
 800f4ca:	f000 f8e7 	bl	800f69c <scalbnf>
 800f4ce:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800f4b4 <__kernel_rem_pio2f+0x2fc>
 800f4d2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4da:	db19      	blt.n	800f510 <__kernel_rem_pio2f+0x358>
 800f4dc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800f4b8 <__kernel_rem_pio2f+0x300>
 800f4e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f4e4:	aa08      	add	r2, sp, #32
 800f4e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4ea:	3508      	adds	r5, #8
 800f4ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4f0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f4f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f4fc:	ee10 3a10 	vmov	r3, s0
 800f500:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f504:	ee17 3a90 	vmov	r3, s15
 800f508:	3401      	adds	r4, #1
 800f50a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f50e:	e74c      	b.n	800f3aa <__kernel_rem_pio2f+0x1f2>
 800f510:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f514:	aa08      	add	r2, sp, #32
 800f516:	ee10 3a10 	vmov	r3, s0
 800f51a:	e7f6      	b.n	800f50a <__kernel_rem_pio2f+0x352>
 800f51c:	a808      	add	r0, sp, #32
 800f51e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f522:	9001      	str	r0, [sp, #4]
 800f524:	ee07 0a90 	vmov	s15, r0
 800f528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f52c:	3b01      	subs	r3, #1
 800f52e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f532:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f536:	ed62 7a01 	vstmdb	r2!, {s15}
 800f53a:	e743      	b.n	800f3c4 <__kernel_rem_pio2f+0x20c>
 800f53c:	ecfc 6a01 	vldmia	ip!, {s13}
 800f540:	ecb5 7a01 	vldmia	r5!, {s14}
 800f544:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f548:	3001      	adds	r0, #1
 800f54a:	4550      	cmp	r0, sl
 800f54c:	dc01      	bgt.n	800f552 <__kernel_rem_pio2f+0x39a>
 800f54e:	4282      	cmp	r2, r0
 800f550:	daf4      	bge.n	800f53c <__kernel_rem_pio2f+0x384>
 800f552:	a858      	add	r0, sp, #352	@ 0x160
 800f554:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f558:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800f55c:	3b01      	subs	r3, #1
 800f55e:	e735      	b.n	800f3cc <__kernel_rem_pio2f+0x214>
 800f560:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f562:	2b02      	cmp	r3, #2
 800f564:	dc09      	bgt.n	800f57a <__kernel_rem_pio2f+0x3c2>
 800f566:	2b00      	cmp	r3, #0
 800f568:	dc2b      	bgt.n	800f5c2 <__kernel_rem_pio2f+0x40a>
 800f56a:	d044      	beq.n	800f5f6 <__kernel_rem_pio2f+0x43e>
 800f56c:	f009 0007 	and.w	r0, r9, #7
 800f570:	b059      	add	sp, #356	@ 0x164
 800f572:	ecbd 8b04 	vpop	{d8-d9}
 800f576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f57a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f57c:	2b03      	cmp	r3, #3
 800f57e:	d1f5      	bne.n	800f56c <__kernel_rem_pio2f+0x3b4>
 800f580:	aa30      	add	r2, sp, #192	@ 0xc0
 800f582:	1f0b      	subs	r3, r1, #4
 800f584:	4413      	add	r3, r2
 800f586:	461a      	mov	r2, r3
 800f588:	4620      	mov	r0, r4
 800f58a:	2800      	cmp	r0, #0
 800f58c:	f1a2 0204 	sub.w	r2, r2, #4
 800f590:	dc52      	bgt.n	800f638 <__kernel_rem_pio2f+0x480>
 800f592:	4622      	mov	r2, r4
 800f594:	2a01      	cmp	r2, #1
 800f596:	f1a3 0304 	sub.w	r3, r3, #4
 800f59a:	dc5d      	bgt.n	800f658 <__kernel_rem_pio2f+0x4a0>
 800f59c:	ab30      	add	r3, sp, #192	@ 0xc0
 800f59e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800f4bc <__kernel_rem_pio2f+0x304>
 800f5a2:	440b      	add	r3, r1
 800f5a4:	2c01      	cmp	r4, #1
 800f5a6:	dc67      	bgt.n	800f678 <__kernel_rem_pio2f+0x4c0>
 800f5a8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800f5ac:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800f5b0:	2e00      	cmp	r6, #0
 800f5b2:	d167      	bne.n	800f684 <__kernel_rem_pio2f+0x4cc>
 800f5b4:	edc7 6a00 	vstr	s13, [r7]
 800f5b8:	ed87 7a01 	vstr	s14, [r7, #4]
 800f5bc:	edc7 7a02 	vstr	s15, [r7, #8]
 800f5c0:	e7d4      	b.n	800f56c <__kernel_rem_pio2f+0x3b4>
 800f5c2:	ab30      	add	r3, sp, #192	@ 0xc0
 800f5c4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800f4bc <__kernel_rem_pio2f+0x304>
 800f5c8:	440b      	add	r3, r1
 800f5ca:	4622      	mov	r2, r4
 800f5cc:	2a00      	cmp	r2, #0
 800f5ce:	da24      	bge.n	800f61a <__kernel_rem_pio2f+0x462>
 800f5d0:	b34e      	cbz	r6, 800f626 <__kernel_rem_pio2f+0x46e>
 800f5d2:	eef1 7a47 	vneg.f32	s15, s14
 800f5d6:	edc7 7a00 	vstr	s15, [r7]
 800f5da:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800f5de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5e2:	aa31      	add	r2, sp, #196	@ 0xc4
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	429c      	cmp	r4, r3
 800f5e8:	da20      	bge.n	800f62c <__kernel_rem_pio2f+0x474>
 800f5ea:	b10e      	cbz	r6, 800f5f0 <__kernel_rem_pio2f+0x438>
 800f5ec:	eef1 7a67 	vneg.f32	s15, s15
 800f5f0:	edc7 7a01 	vstr	s15, [r7, #4]
 800f5f4:	e7ba      	b.n	800f56c <__kernel_rem_pio2f+0x3b4>
 800f5f6:	ab30      	add	r3, sp, #192	@ 0xc0
 800f5f8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800f4bc <__kernel_rem_pio2f+0x304>
 800f5fc:	440b      	add	r3, r1
 800f5fe:	2c00      	cmp	r4, #0
 800f600:	da05      	bge.n	800f60e <__kernel_rem_pio2f+0x456>
 800f602:	b10e      	cbz	r6, 800f608 <__kernel_rem_pio2f+0x450>
 800f604:	eef1 7a67 	vneg.f32	s15, s15
 800f608:	edc7 7a00 	vstr	s15, [r7]
 800f60c:	e7ae      	b.n	800f56c <__kernel_rem_pio2f+0x3b4>
 800f60e:	ed33 7a01 	vldmdb	r3!, {s14}
 800f612:	3c01      	subs	r4, #1
 800f614:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f618:	e7f1      	b.n	800f5fe <__kernel_rem_pio2f+0x446>
 800f61a:	ed73 7a01 	vldmdb	r3!, {s15}
 800f61e:	3a01      	subs	r2, #1
 800f620:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f624:	e7d2      	b.n	800f5cc <__kernel_rem_pio2f+0x414>
 800f626:	eef0 7a47 	vmov.f32	s15, s14
 800f62a:	e7d4      	b.n	800f5d6 <__kernel_rem_pio2f+0x41e>
 800f62c:	ecb2 7a01 	vldmia	r2!, {s14}
 800f630:	3301      	adds	r3, #1
 800f632:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f636:	e7d6      	b.n	800f5e6 <__kernel_rem_pio2f+0x42e>
 800f638:	edd2 7a00 	vldr	s15, [r2]
 800f63c:	edd2 6a01 	vldr	s13, [r2, #4]
 800f640:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f644:	3801      	subs	r0, #1
 800f646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f64a:	ed82 7a00 	vstr	s14, [r2]
 800f64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f652:	edc2 7a01 	vstr	s15, [r2, #4]
 800f656:	e798      	b.n	800f58a <__kernel_rem_pio2f+0x3d2>
 800f658:	edd3 7a00 	vldr	s15, [r3]
 800f65c:	edd3 6a01 	vldr	s13, [r3, #4]
 800f660:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f664:	3a01      	subs	r2, #1
 800f666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f66a:	ed83 7a00 	vstr	s14, [r3]
 800f66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f672:	edc3 7a01 	vstr	s15, [r3, #4]
 800f676:	e78d      	b.n	800f594 <__kernel_rem_pio2f+0x3dc>
 800f678:	ed33 7a01 	vldmdb	r3!, {s14}
 800f67c:	3c01      	subs	r4, #1
 800f67e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f682:	e78f      	b.n	800f5a4 <__kernel_rem_pio2f+0x3ec>
 800f684:	eef1 6a66 	vneg.f32	s13, s13
 800f688:	eeb1 7a47 	vneg.f32	s14, s14
 800f68c:	edc7 6a00 	vstr	s13, [r7]
 800f690:	ed87 7a01 	vstr	s14, [r7, #4]
 800f694:	eef1 7a67 	vneg.f32	s15, s15
 800f698:	e790      	b.n	800f5bc <__kernel_rem_pio2f+0x404>
 800f69a:	bf00      	nop

0800f69c <scalbnf>:
 800f69c:	ee10 3a10 	vmov	r3, s0
 800f6a0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f6a4:	d02b      	beq.n	800f6fe <scalbnf+0x62>
 800f6a6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f6aa:	d302      	bcc.n	800f6b2 <scalbnf+0x16>
 800f6ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f6b0:	4770      	bx	lr
 800f6b2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f6b6:	d123      	bne.n	800f700 <scalbnf+0x64>
 800f6b8:	4b24      	ldr	r3, [pc, #144]	@ (800f74c <scalbnf+0xb0>)
 800f6ba:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f750 <scalbnf+0xb4>
 800f6be:	4298      	cmp	r0, r3
 800f6c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f6c4:	db17      	blt.n	800f6f6 <scalbnf+0x5a>
 800f6c6:	ee10 3a10 	vmov	r3, s0
 800f6ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f6ce:	3a19      	subs	r2, #25
 800f6d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f6d4:	4288      	cmp	r0, r1
 800f6d6:	dd15      	ble.n	800f704 <scalbnf+0x68>
 800f6d8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f754 <scalbnf+0xb8>
 800f6dc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f758 <scalbnf+0xbc>
 800f6e0:	ee10 3a10 	vmov	r3, s0
 800f6e4:	eeb0 7a67 	vmov.f32	s14, s15
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	bfb8      	it	lt
 800f6ec:	eef0 7a66 	vmovlt.f32	s15, s13
 800f6f0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f6f4:	4770      	bx	lr
 800f6f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f75c <scalbnf+0xc0>
 800f6fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f6fe:	4770      	bx	lr
 800f700:	0dd2      	lsrs	r2, r2, #23
 800f702:	e7e5      	b.n	800f6d0 <scalbnf+0x34>
 800f704:	4410      	add	r0, r2
 800f706:	28fe      	cmp	r0, #254	@ 0xfe
 800f708:	dce6      	bgt.n	800f6d8 <scalbnf+0x3c>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	dd06      	ble.n	800f71c <scalbnf+0x80>
 800f70e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f712:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f716:	ee00 3a10 	vmov	s0, r3
 800f71a:	4770      	bx	lr
 800f71c:	f110 0f16 	cmn.w	r0, #22
 800f720:	da09      	bge.n	800f736 <scalbnf+0x9a>
 800f722:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f75c <scalbnf+0xc0>
 800f726:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f760 <scalbnf+0xc4>
 800f72a:	ee10 3a10 	vmov	r3, s0
 800f72e:	eeb0 7a67 	vmov.f32	s14, s15
 800f732:	2b00      	cmp	r3, #0
 800f734:	e7d9      	b.n	800f6ea <scalbnf+0x4e>
 800f736:	3019      	adds	r0, #25
 800f738:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f73c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f740:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f764 <scalbnf+0xc8>
 800f744:	ee07 3a90 	vmov	s15, r3
 800f748:	e7d7      	b.n	800f6fa <scalbnf+0x5e>
 800f74a:	bf00      	nop
 800f74c:	ffff3cb0 	.word	0xffff3cb0
 800f750:	4c000000 	.word	0x4c000000
 800f754:	7149f2ca 	.word	0x7149f2ca
 800f758:	f149f2ca 	.word	0xf149f2ca
 800f75c:	0da24260 	.word	0x0da24260
 800f760:	8da24260 	.word	0x8da24260
 800f764:	33000000 	.word	0x33000000

0800f768 <floorf>:
 800f768:	ee10 3a10 	vmov	r3, s0
 800f76c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f770:	3a7f      	subs	r2, #127	@ 0x7f
 800f772:	2a16      	cmp	r2, #22
 800f774:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f778:	dc2b      	bgt.n	800f7d2 <floorf+0x6a>
 800f77a:	2a00      	cmp	r2, #0
 800f77c:	da12      	bge.n	800f7a4 <floorf+0x3c>
 800f77e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f7e4 <floorf+0x7c>
 800f782:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f786:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78e:	dd06      	ble.n	800f79e <floorf+0x36>
 800f790:	2b00      	cmp	r3, #0
 800f792:	da24      	bge.n	800f7de <floorf+0x76>
 800f794:	2900      	cmp	r1, #0
 800f796:	4b14      	ldr	r3, [pc, #80]	@ (800f7e8 <floorf+0x80>)
 800f798:	bf08      	it	eq
 800f79a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f79e:	ee00 3a10 	vmov	s0, r3
 800f7a2:	4770      	bx	lr
 800f7a4:	4911      	ldr	r1, [pc, #68]	@ (800f7ec <floorf+0x84>)
 800f7a6:	4111      	asrs	r1, r2
 800f7a8:	420b      	tst	r3, r1
 800f7aa:	d0fa      	beq.n	800f7a2 <floorf+0x3a>
 800f7ac:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800f7e4 <floorf+0x7c>
 800f7b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f7b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7bc:	ddef      	ble.n	800f79e <floorf+0x36>
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	bfbe      	ittt	lt
 800f7c2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800f7c6:	fa40 f202 	asrlt.w	r2, r0, r2
 800f7ca:	189b      	addlt	r3, r3, r2
 800f7cc:	ea23 0301 	bic.w	r3, r3, r1
 800f7d0:	e7e5      	b.n	800f79e <floorf+0x36>
 800f7d2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f7d6:	d3e4      	bcc.n	800f7a2 <floorf+0x3a>
 800f7d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f7dc:	4770      	bx	lr
 800f7de:	2300      	movs	r3, #0
 800f7e0:	e7dd      	b.n	800f79e <floorf+0x36>
 800f7e2:	bf00      	nop
 800f7e4:	7149f2ca 	.word	0x7149f2ca
 800f7e8:	bf800000 	.word	0xbf800000
 800f7ec:	007fffff 	.word	0x007fffff

0800f7f0 <_init>:
 800f7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f2:	bf00      	nop
 800f7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7f6:	bc08      	pop	{r3}
 800f7f8:	469e      	mov	lr, r3
 800f7fa:	4770      	bx	lr

0800f7fc <_fini>:
 800f7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fe:	bf00      	nop
 800f800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f802:	bc08      	pop	{r3}
 800f804:	469e      	mov	lr, r3
 800f806:	4770      	bx	lr
