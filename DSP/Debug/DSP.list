
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b11c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002718  0800b2cc  0800b2cc  0000c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9e4  0800d9e4  0000f0e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9e4  0800d9e4  0000e9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9ec  0800d9ec  0000f0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9ec  0800d9ec  0000e9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9f0  0800d9f0  0000e9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800d9f4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0e0  2**0
                  CONTENTS
 10 .bss          00001c14  200000e0  200000e0  0000f0e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cf4  20001cf4  0000f0e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000218e4  00000000  00000000  0000f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005772  00000000  00000000  000309f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db0  00000000  00000000  00036168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016af  00000000  00000000  00037f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9a7  00000000  00000000  000395c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028419  00000000  00000000  00064f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7e57  00000000  00000000  0008d387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001851de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008014  00000000  00000000  00185224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0018d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b2b4 	.word	0x0800b2b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	0800b2b4 	.word	0x0800b2b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d60:	f000 fe62 	bl	8001a28 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000d64:	20ca      	movs	r0, #202	@ 0xca
 8000d66:	f000 f95d 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000d6a:	20c3      	movs	r0, #195	@ 0xc3
 8000d6c:	f000 f967 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f000 f964 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000d76:	2050      	movs	r0, #80	@ 0x50
 8000d78:	f000 f961 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000d7c:	20cf      	movs	r0, #207	@ 0xcf
 8000d7e:	f000 f951 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f95b 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000d88:	20c1      	movs	r0, #193	@ 0xc1
 8000d8a:	f000 f958 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000d8e:	2030      	movs	r0, #48	@ 0x30
 8000d90:	f000 f955 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000d94:	20ed      	movs	r0, #237	@ 0xed
 8000d96:	f000 f945 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000d9a:	2064      	movs	r0, #100	@ 0x64
 8000d9c:	f000 f94f 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f94c 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000da6:	2012      	movs	r0, #18
 8000da8:	f000 f949 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000dac:	2081      	movs	r0, #129	@ 0x81
 8000dae:	f000 f946 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000db2:	20e8      	movs	r0, #232	@ 0xe8
 8000db4:	f000 f936 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000db8:	2085      	movs	r0, #133	@ 0x85
 8000dba:	f000 f940 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f93d 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000dc4:	2078      	movs	r0, #120	@ 0x78
 8000dc6:	f000 f93a 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000dca:	20cb      	movs	r0, #203	@ 0xcb
 8000dcc:	f000 f92a 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000dd0:	2039      	movs	r0, #57	@ 0x39
 8000dd2:	f000 f934 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000dd6:	202c      	movs	r0, #44	@ 0x2c
 8000dd8:	f000 f931 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f92e 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000de2:	2034      	movs	r0, #52	@ 0x34
 8000de4:	f000 f92b 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000de8:	2002      	movs	r0, #2
 8000dea:	f000 f928 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000dee:	20f7      	movs	r0, #247	@ 0xf7
 8000df0:	f000 f918 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000df4:	2020      	movs	r0, #32
 8000df6:	f000 f922 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000dfa:	20ea      	movs	r0, #234	@ 0xea
 8000dfc:	f000 f912 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 f91c 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f919 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000e0c:	20b1      	movs	r0, #177	@ 0xb1
 8000e0e:	f000 f909 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f913 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000e18:	201b      	movs	r0, #27
 8000e1a:	f000 f910 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e1e:	20b6      	movs	r0, #182	@ 0xb6
 8000e20:	f000 f900 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f000 f90a 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000e2a:	20a2      	movs	r0, #162	@ 0xa2
 8000e2c:	f000 f907 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000e30:	20c0      	movs	r0, #192	@ 0xc0
 8000e32:	f000 f8f7 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e36:	2010      	movs	r0, #16
 8000e38:	f000 f901 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000e3c:	20c1      	movs	r0, #193	@ 0xc1
 8000e3e:	f000 f8f1 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e42:	2010      	movs	r0, #16
 8000e44:	f000 f8fb 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000e48:	20c5      	movs	r0, #197	@ 0xc5
 8000e4a:	f000 f8eb 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000e4e:	2045      	movs	r0, #69	@ 0x45
 8000e50:	f000 f8f5 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000e54:	2015      	movs	r0, #21
 8000e56:	f000 f8f2 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000e5a:	20c7      	movs	r0, #199	@ 0xc7
 8000e5c:	f000 f8e2 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000e60:	2090      	movs	r0, #144	@ 0x90
 8000e62:	f000 f8ec 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000e66:	2036      	movs	r0, #54	@ 0x36
 8000e68:	f000 f8dc 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000e6c:	20c8      	movs	r0, #200	@ 0xc8
 8000e6e:	f000 f8e6 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000e72:	20f2      	movs	r0, #242	@ 0xf2
 8000e74:	f000 f8d6 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 f8e0 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000e7e:	20b0      	movs	r0, #176	@ 0xb0
 8000e80:	f000 f8d0 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000e84:	20c2      	movs	r0, #194	@ 0xc2
 8000e86:	f000 f8da 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e8a:	20b6      	movs	r0, #182	@ 0xb6
 8000e8c:	f000 f8ca 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f000 f8d4 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000e96:	20a7      	movs	r0, #167	@ 0xa7
 8000e98:	f000 f8d1 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000e9c:	2027      	movs	r0, #39	@ 0x27
 8000e9e:	f000 f8ce 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f000 f8cb 	bl	800103e <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000ea8:	202a      	movs	r0, #42	@ 0x2a
 8000eaa:	f000 f8bb 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f8c5 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f8c2 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f8bf 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000ec0:	20ef      	movs	r0, #239	@ 0xef
 8000ec2:	f000 f8bc 	bl	800103e <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000ec6:	202b      	movs	r0, #43	@ 0x2b
 8000ec8:	f000 f8ac 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f8b6 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f8b3 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 f8b0 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000ede:	203f      	movs	r0, #63	@ 0x3f
 8000ee0:	f000 f8ad 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000ee4:	20f6      	movs	r0, #246	@ 0xf6
 8000ee6:	f000 f89d 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f000 f8a7 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f8a4 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000ef6:	2006      	movs	r0, #6
 8000ef8:	f000 f8a1 	bl	800103e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000efc:	202c      	movs	r0, #44	@ 0x2c
 8000efe:	f000 f891 	bl	8001024 <ili9341_WriteReg>
  LCD_Delay(200);
 8000f02:	20c8      	movs	r0, #200	@ 0xc8
 8000f04:	f000 fe7e 	bl	8001c04 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000f08:	2026      	movs	r0, #38	@ 0x26
 8000f0a:	f000 f88b 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 f895 	bl	800103e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000f14:	20e0      	movs	r0, #224	@ 0xe0
 8000f16:	f000 f885 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f88f 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000f20:	2029      	movs	r0, #41	@ 0x29
 8000f22:	f000 f88c 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000f26:	2024      	movs	r0, #36	@ 0x24
 8000f28:	f000 f889 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000f2c:	200c      	movs	r0, #12
 8000f2e:	f000 f886 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000f32:	200e      	movs	r0, #14
 8000f34:	f000 f883 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f38:	2009      	movs	r0, #9
 8000f3a:	f000 f880 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000f3e:	204e      	movs	r0, #78	@ 0x4e
 8000f40:	f000 f87d 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f44:	2078      	movs	r0, #120	@ 0x78
 8000f46:	f000 f87a 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000f4a:	203c      	movs	r0, #60	@ 0x3c
 8000f4c:	f000 f877 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f50:	2009      	movs	r0, #9
 8000f52:	f000 f874 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000f56:	2013      	movs	r0, #19
 8000f58:	f000 f871 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000f5c:	2005      	movs	r0, #5
 8000f5e:	f000 f86e 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000f62:	2017      	movs	r0, #23
 8000f64:	f000 f86b 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000f68:	2011      	movs	r0, #17
 8000f6a:	f000 f868 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f865 	bl	800103e <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000f74:	20e1      	movs	r0, #225	@ 0xe1
 8000f76:	f000 f855 	bl	8001024 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f85f 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000f80:	2016      	movs	r0, #22
 8000f82:	f000 f85c 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000f86:	201b      	movs	r0, #27
 8000f88:	f000 f859 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000f8c:	2004      	movs	r0, #4
 8000f8e:	f000 f856 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000f92:	2011      	movs	r0, #17
 8000f94:	f000 f853 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000f98:	2007      	movs	r0, #7
 8000f9a:	f000 f850 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000f9e:	2031      	movs	r0, #49	@ 0x31
 8000fa0:	f000 f84d 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000fa4:	2033      	movs	r0, #51	@ 0x33
 8000fa6:	f000 f84a 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000faa:	2042      	movs	r0, #66	@ 0x42
 8000fac:	f000 f847 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f000 f844 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000fb6:	200c      	movs	r0, #12
 8000fb8:	f000 f841 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f000 f83e 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000fc2:	2028      	movs	r0, #40	@ 0x28
 8000fc4:	f000 f83b 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000fc8:	202f      	movs	r0, #47	@ 0x2f
 8000fca:	f000 f838 	bl	800103e <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f835 	bl	800103e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000fd4:	2011      	movs	r0, #17
 8000fd6:	f000 f825 	bl	8001024 <ili9341_WriteReg>
  LCD_Delay(200);
 8000fda:	20c8      	movs	r0, #200	@ 0xc8
 8000fdc:	f000 fe12 	bl	8001c04 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000fe0:	2029      	movs	r0, #41	@ 0x29
 8000fe2:	f000 f81f 	bl	8001024 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000fe6:	202c      	movs	r0, #44	@ 0x2c
 8000fe8:	f000 f81c 	bl	8001024 <ili9341_WriteReg>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000ff4:	f000 fd18 	bl	8001a28 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	20d3      	movs	r0, #211	@ 0xd3
 8000ffc:	f000 f82c 	bl	8001058 <ili9341_ReadData>
 8001000:	4603      	mov	r3, r0
 8001002:	b29b      	uxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}

08001008 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800100c:	2029      	movs	r0, #41	@ 0x29
 800100e:	f000 f809 	bl	8001024 <ili9341_WriteReg>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800101a:	2028      	movs	r0, #40	@ 0x28
 800101c:	f000 f802 	bl	8001024 <ili9341_WriteReg>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fd93 	bl	8001b5c <LCD_IO_WriteReg>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fd64 	bl	8001b18 <LCD_IO_WriteData>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	80fb      	strh	r3, [r7, #6]
 8001064:	4613      	mov	r3, r2
 8001066:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001068:	797a      	ldrb	r2, [r7, #5]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fd96 	bl	8001ba0 <LCD_IO_ReadData>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001082:	23f0      	movs	r3, #240	@ 0xf0
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001092:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fa59 	bl	8001564 <stmpe811_GetInstance>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2bff      	cmp	r3, #255	@ 0xff
 80010ba:	d112      	bne.n	80010e2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 fa51 	bl	8001564 <stmpe811_GetInstance>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d80a      	bhi.n	80010e2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	b2d1      	uxtb	r1, r2
 80010d2:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <stmpe811_Init+0x4c>)
 80010d4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80010d6:	f000 fda0 	bl	8001c1a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f807 	bl	80010f0 <stmpe811_Reset>
    }
  }
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000fc 	.word	0x200000fc

080010f0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2202      	movs	r2, #2
 8001100:	2103      	movs	r1, #3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fd95 	bl	8001c32 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001108:	200a      	movs	r0, #10
 800110a:	f000 fdce 	bl	8001caa <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2200      	movs	r2, #0
 8001114:	2103      	movs	r1, #3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fd8b 	bl	8001c32 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800111c:	2002      	movs	r0, #2
 800111e:	f000 fdc4 	bl	8001caa <IOE_Delay>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800112a:	b590      	push	{r4, r7, lr}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001134:	f000 fd71 	bl	8001c1a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fd8a 	bl	8001c58 <IOE_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fd81 	bl	8001c58 <IOE_Read>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800115a:	4323      	orrs	r3, r4
 800115c:	b21b      	sxth	r3, r3
 800115e:	b29b      	uxth	r3, r3
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2109      	movs	r1, #9
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fd6b 	bl	8001c58 <IOE_Read>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	2109      	movs	r1, #9
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fd4b 	bl	8001c32 <IOE_Write>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2109      	movs	r1, #9
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fd4d 	bl	8001c58 <IOE_Read>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	2109      	movs	r1, #9
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fd2d 	bl	8001c32 <IOE_Write>
    
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	460a      	mov	r2, r1
 80011ea:	80fb      	strh	r3, [r7, #6]
 80011ec:	4613      	mov	r3, r2
 80011ee:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	210a      	movs	r1, #10
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fd2c 	bl	8001c58 <IOE_Read>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	797b      	ldrb	r3, [r7, #5]
 8001208:	4313      	orrs	r3, r2
 800120a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	210a      	movs	r1, #10
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fd0c 	bl	8001c32 <IOE_Write>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	460a      	mov	r2, r1
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	4613      	mov	r3, r2
 8001230:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	210a      	movs	r1, #10
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fd0b 	bl	8001c58 <IOE_Read>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001246:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800124a:	43db      	mvns	r3, r3
 800124c:	b25a      	sxtb	r2, r3
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4013      	ands	r3, r2
 8001254:	b25b      	sxtb	r3, r3
 8001256:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	210a      	movs	r1, #10
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fce6 	bl	8001c32 <IOE_Write>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	460a      	mov	r2, r1
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	210b      	movs	r1, #11
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fce7 	bl	8001c58 <IOE_Read>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	4013      	ands	r3, r2
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	80fb      	strh	r3, [r7, #6]
 80012a8:	4613      	mov	r3, r2
 80012aa:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	797a      	ldrb	r2, [r7, #5]
 80012b2:	210b      	movs	r1, #11
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fcbc 	bl	8001c32 <IOE_Write>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	6039      	str	r1, [r7, #0]
 80012cc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2117      	movs	r1, #23
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fcbd 	bl	8001c58 <IOE_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4013      	ands	r3, r2
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	2117      	movs	r1, #23
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fc98 	bl	8001c32 <IOE_Write>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2104      	movs	r1, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fc9c 	bl	8001c58 <IOE_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	2104      	movs	r1, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fc7c 	bl	8001c32 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	21f0      	movs	r1, #240	@ 0xf0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ffbf 	bl	80012c2 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	f023 0303 	bic.w	r3, r3, #3
 800134a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	2104      	movs	r1, #4
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fc6c 	bl	8001c32 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2249      	movs	r2, #73	@ 0x49
 8001360:	2120      	movs	r1, #32
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fc65 	bl	8001c32 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001368:	2002      	movs	r0, #2
 800136a:	f000 fc9e 	bl	8001caa <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2201      	movs	r2, #1
 8001374:	2121      	movs	r1, #33	@ 0x21
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fc5b 	bl	8001c32 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	229a      	movs	r2, #154	@ 0x9a
 8001382:	2141      	movs	r1, #65	@ 0x41
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fc54 	bl	8001c32 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2201      	movs	r2, #1
 8001390:	214a      	movs	r1, #74	@ 0x4a
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fc4d 	bl	8001c32 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2201      	movs	r2, #1
 800139e:	214b      	movs	r1, #75	@ 0x4b
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fc46 	bl	8001c32 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2200      	movs	r2, #0
 80013ac:	214b      	movs	r1, #75	@ 0x4b
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fc3f 	bl	8001c32 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2201      	movs	r2, #1
 80013ba:	2156      	movs	r1, #86	@ 0x56
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fc38 	bl	8001c32 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2201      	movs	r2, #1
 80013c8:	2158      	movs	r1, #88	@ 0x58
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fc31 	bl	8001c32 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2201      	movs	r2, #1
 80013d6:	2140      	movs	r1, #64	@ 0x40
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fc2a 	bl	8001c32 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	22ff      	movs	r2, #255	@ 0xff
 80013e4:	210b      	movs	r1, #11
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fc23 	bl	8001c32 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80013ec:	2002      	movs	r0, #2
 80013ee:	f000 fc5c 	bl	8001caa <IOE_Delay>
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2140      	movs	r1, #64	@ 0x40
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fc22 	bl	8001c58 <IOE_Read>
 8001414:	4603      	mov	r3, r0
 8001416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141a:	2b80      	cmp	r3, #128	@ 0x80
 800141c:	bf0c      	ite	eq
 800141e:	2301      	moveq	r3, #1
 8001420:	2300      	movne	r3, #0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	214c      	movs	r1, #76	@ 0x4c
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fc10 	bl	8001c58 <IOE_Read>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d010      	beq.n	8001460 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e00d      	b.n	8001460 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2201      	movs	r2, #1
 800144a:	214b      	movs	r1, #75	@ 0x4b
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fbf0 	bl	8001c32 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2200      	movs	r2, #0
 8001458:	214b      	movs	r1, #75	@ 0x4b
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fbe9 	bl	8001c32 <IOE_Write>
  }
  
  return ret;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	b2d8      	uxtb	r0, r3
 800147c:	f107 0210 	add.w	r2, r7, #16
 8001480:	2304      	movs	r3, #4
 8001482:	21d7      	movs	r1, #215	@ 0xd7
 8001484:	f000 fbfb 	bl	8001c7e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001488:	7c3b      	ldrb	r3, [r7, #16]
 800148a:	061a      	lsls	r2, r3, #24
 800148c:	7c7b      	ldrb	r3, [r7, #17]
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	431a      	orrs	r2, r3
 8001492:	7cbb      	ldrb	r3, [r7, #18]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	4313      	orrs	r3, r2
 8001498:	7cfa      	ldrb	r2, [r7, #19]
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	0d1b      	lsrs	r3, r3, #20
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2201      	movs	r2, #1
 80014be:	214b      	movs	r1, #75	@ 0x4b
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fbb6 	bl	8001c32 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2200      	movs	r2, #0
 80014cc:	214b      	movs	r1, #75	@ 0x4b
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fbaf 	bl	8001c32 <IOE_Write>
}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80014e6:	f000 fb9e 	bl	8001c26 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	211f      	movs	r1, #31
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe76 	bl	80011e0 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe36 	bl	8001168 <stmpe811_EnableGlobalIT>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe47 	bl	80011a4 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	211f      	movs	r1, #31
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fe81 	bl	8001222 <stmpe811_DisableITSource>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	211f      	movs	r1, #31
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe99 	bl	800126e <stmpe811_ReadGITStatus>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	211f      	movs	r1, #31
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fea1 	bl	800129c <stmpe811_ClearGlobalIT>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e00b      	b.n	8001590 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <stmpe811_GetInstance+0x40>)
 800157c:	5cd3      	ldrb	r3, [r2, r3]
 800157e:	461a      	mov	r2, r3
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	e006      	b.n	8001598 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	3301      	adds	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d9f0      	bls.n	8001578 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001596:	23ff      	movs	r3, #255	@ 0xff
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	200000fc 	.word	0x200000fc

080015a8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <BSP_LED_On+0x2c>)
 80015b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <BSP_LED_On+0x30>)
 80015be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4619      	mov	r1, r3
 80015c6:	f005 f9db 	bl	8006980 <HAL_GPIO_WritePin>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000060 	.word	0x20000060
 80015d8:	0800b2f4 	.word	0x0800b2f4

080015dc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a33      	ldr	r2, [pc, #204]	@ (80016b8 <I2Cx_MspInit+0xdc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d15f      	bne.n	80016ae <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b32      	ldr	r3, [pc, #200]	@ (80016bc <I2Cx_MspInit+0xe0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a31      	ldr	r2, [pc, #196]	@ (80016bc <I2Cx_MspInit+0xe0>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b2f      	ldr	r3, [pc, #188]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a2a      	ldr	r2, [pc, #168]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <I2Cx_MspInit+0xe0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8001626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	481f      	ldr	r0, [pc, #124]	@ (80016c0 <I2Cx_MspInit+0xe4>)
 8001644:	f004 fee4 	bl	8006410 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800164c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <I2Cx_MspInit+0xe8>)
 8001656:	f004 fedb 	bl	8006410 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a16      	ldr	r2, [pc, #88]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001664:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <I2Cx_MspInit+0xe0>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <I2Cx_MspInit+0xe0>)
 800167c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001680:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <I2Cx_MspInit+0xe0>)
 8001688:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800168c:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	210f      	movs	r1, #15
 8001692:	2048      	movs	r0, #72	@ 0x48
 8001694:	f003 fcbc 	bl	8005010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001698:	2048      	movs	r0, #72	@ 0x48
 800169a:	f003 fcd5 	bl	8005048 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	210f      	movs	r1, #15
 80016a2:	2049      	movs	r0, #73	@ 0x49
 80016a4:	f003 fcb4 	bl	8005010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80016a8:	2049      	movs	r0, #73	@ 0x49
 80016aa:	f003 fccd 	bl	8005048 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40005c00 	.word	0x40005c00
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020800 	.word	0x40020800

080016c8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80016cc:	4814      	ldr	r0, [pc, #80]	@ (8001720 <I2Cx_Init+0x58>)
 80016ce:	f005 fe2b 	bl	8007328 <HAL_I2C_GetState>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d121      	bne.n	800171c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <I2Cx_Init+0x58>)
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <I2Cx_Init+0x5c>)
 80016dc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <I2Cx_Init+0x58>)
 80016e0:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <I2Cx_Init+0x60>)
 80016e2:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <I2Cx_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <I2Cx_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <I2Cx_Init+0x58>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <I2Cx_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <I2Cx_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <I2Cx_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <I2Cx_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001710:	4803      	ldr	r0, [pc, #12]	@ (8001720 <I2Cx_Init+0x58>)
 8001712:	f7ff ff63 	bl	80015dc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001716:	4802      	ldr	r0, [pc, #8]	@ (8001720 <I2Cx_Init+0x58>)
 8001718:	f005 f966 	bl	80069e8 <HAL_I2C_Init>
  }
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000100 	.word	0x20000100
 8001724:	40005c00 	.word	0x40005c00
 8001728:	000186a0 	.word	0x000186a0

0800172c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <I2Cx_ITConfig+0x58>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <I2Cx_ITConfig+0x58>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <I2Cx_ITConfig+0x58>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800174e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001752:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001754:	2301      	movs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800175c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001760:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4808      	ldr	r0, [pc, #32]	@ (8001788 <I2Cx_ITConfig+0x5c>)
 8001768:	f004 fe52 	bl	8006410 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800176c:	2200      	movs	r2, #0
 800176e:	210f      	movs	r1, #15
 8001770:	2028      	movs	r0, #40	@ 0x28
 8001772:	f003 fc4d 	bl	8005010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001776:	2028      	movs	r0, #40	@ 0x28
 8001778:	f003 fc66 	bl	8005048 <HAL_NVIC_EnableIRQ>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000

0800178c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af04      	add	r7, sp, #16
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	460b      	mov	r3, r1
 8001798:	71bb      	strb	r3, [r7, #6]
 800179a:	4613      	mov	r3, r2
 800179c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	b299      	uxth	r1, r3
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <I2Cx_WriteData+0x4c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	2301      	movs	r3, #1
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	1d7b      	adds	r3, r7, #5
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2301      	movs	r3, #1
 80017ba:	4808      	ldr	r0, [pc, #32]	@ (80017dc <I2Cx_WriteData+0x50>)
 80017bc:	f005 fa88 	bl	8006cd0 <HAL_I2C_Mem_Write>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80017ca:	f000 f863 	bl	8001894 <I2Cx_Error>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000068 	.word	0x20000068
 80017dc:	20000100 	.word	0x20000100

080017e0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	4603      	mov	r3, r0
 80017e8:	460a      	mov	r2, r1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	b299      	uxth	r1, r3
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <I2Cx_ReadData+0x50>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2301      	movs	r3, #1
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f107 030e 	add.w	r3, r7, #14
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	4808      	ldr	r0, [pc, #32]	@ (8001834 <I2Cx_ReadData+0x54>)
 8001814:	f005 fb56 	bl	8006ec4 <HAL_I2C_Mem_Read>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001822:	f000 f837 	bl	8001894 <I2Cx_Error>

  }
  return value;
 8001826:	7bbb      	ldrb	r3, [r7, #14]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000068 	.word	0x20000068
 8001834:	20000100 	.word	0x20000100

08001838 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af04      	add	r7, sp, #16
 800183e:	603a      	str	r2, [r7, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	b299      	uxth	r1, r3
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <I2Cx_ReadBuffer+0x54>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	4809      	ldr	r0, [pc, #36]	@ (8001890 <I2Cx_ReadBuffer+0x58>)
 800186c:	f005 fb2a 	bl	8006ec4 <HAL_I2C_Mem_Read>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	e002      	b.n	8001884 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800187e:	f000 f809 	bl	8001894 <I2Cx_Error>

    return 1;
 8001882:	2301      	movs	r3, #1
  }
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000068 	.word	0x20000068
 8001890:	20000100 	.word	0x20000100

08001894 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001898:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <I2Cx_Error+0x14>)
 800189a:	f005 f9e9 	bl	8006c70 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800189e:	f7ff ff13 	bl	80016c8 <I2Cx_Init>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000100 	.word	0x20000100

080018ac <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80018b0:	4819      	ldr	r0, [pc, #100]	@ (8001918 <SPIx_Init+0x6c>)
 80018b2:	f008 f917 	bl	8009ae4 <HAL_SPI_GetState>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12b      	bne.n	8001914 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80018bc:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <SPIx_Init+0x6c>)
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <SPIx_Init+0x70>)
 80018c0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <SPIx_Init+0x6c>)
 80018c4:	2218      	movs	r2, #24
 80018c6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <SPIx_Init+0x6c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <SPIx_Init+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80018d4:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <SPIx_Init+0x6c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <SPIx_Init+0x6c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <SPIx_Init+0x6c>)
 80018e2:	2207      	movs	r2, #7
 80018e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <SPIx_Init+0x6c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <SPIx_Init+0x6c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <SPIx_Init+0x6c>)
 80018f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <SPIx_Init+0x6c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <SPIx_Init+0x6c>)
 8001902:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001906:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001908:	4803      	ldr	r0, [pc, #12]	@ (8001918 <SPIx_Init+0x6c>)
 800190a:	f000 f853 	bl	80019b4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800190e:	4802      	ldr	r0, [pc, #8]	@ (8001918 <SPIx_Init+0x6c>)
 8001910:	f007 fc31 	bl	8009176 <HAL_SPI_Init>
  }
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000154 	.word	0x20000154
 800191c:	40015000 	.word	0x40015000

08001920 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <SPIx_Read+0x38>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f107 0108 	add.w	r1, r7, #8
 800193a:	4808      	ldr	r0, [pc, #32]	@ (800195c <SPIx_Read+0x3c>)
 800193c:	f007 fe10 	bl	8009560 <HAL_SPI_Receive>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800194a:	f000 f827 	bl	800199c <SPIx_Error>
  }

  return readvalue;
 800194e:	68bb      	ldr	r3, [r7, #8]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000006c 	.word	0x2000006c
 800195c:	20000154 	.word	0x20000154

08001960 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <SPIx_Write+0x34>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1db9      	adds	r1, r7, #6
 8001974:	2201      	movs	r2, #1
 8001976:	4808      	ldr	r0, [pc, #32]	@ (8001998 <SPIx_Write+0x38>)
 8001978:	f007 fcae 	bl	80092d8 <HAL_SPI_Transmit>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001986:	f000 f809 	bl	800199c <SPIx_Error>
  }
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000006c 	.word	0x2000006c
 8001998:	20000154 	.word	0x20000154

0800199c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <SPIx_Error+0x14>)
 80019a2:	f007 fc71 	bl	8009288 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80019a6:	f7ff ff81 	bl	80018ac <SPIx_Init>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000154 	.word	0x20000154

080019b4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <SPIx_MspInit+0x6c>)
 80019c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c4:	4a16      	ldr	r2, [pc, #88]	@ (8001a20 <SPIx_MspInit+0x6c>)
 80019c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <SPIx_MspInit+0x6c>)
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <SPIx_MspInit+0x6c>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a20 <SPIx_MspInit+0x6c>)
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <SPIx_MspInit+0x6c>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80019f4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a02:	2301      	movs	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001a06:	2305      	movs	r3, #5
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <SPIx_MspInit+0x70>)
 8001a12:	f004 fcfd 	bl	8006410 <HAL_GPIO_Init>
}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	@ 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40021400 	.word	0x40021400

08001a28 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001a2e:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <LCD_IO_Init+0xe0>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d164      	bne.n	8001b00 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001a36:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <LCD_IO_Init+0xe0>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4827      	ldr	r0, [pc, #156]	@ (8001b10 <LCD_IO_Init+0xe8>)
 8001a72:	f004 fccd 	bl	8006410 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001a92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4819      	ldr	r0, [pc, #100]	@ (8001b10 <LCD_IO_Init+0xe8>)
 8001aac:	f004 fcb0 	bl	8006410 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <LCD_IO_Init+0xe4>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001acc:	2304      	movs	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <LCD_IO_Init+0xec>)
 8001ae4:	f004 fc94 	bl	8006410 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2104      	movs	r1, #4
 8001aec:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <LCD_IO_Init+0xec>)
 8001aee:	f004 ff47 	bl	8006980 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001af2:	2201      	movs	r2, #1
 8001af4:	2104      	movs	r1, #4
 8001af6:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <LCD_IO_Init+0xec>)
 8001af8:	f004 ff42 	bl	8006980 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001afc:	f7ff fed6 	bl	80018ac <SPIx_Init>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200001ac 	.word	0x200001ac
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40020800 	.word	0x40020800

08001b18 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b28:	480a      	ldr	r0, [pc, #40]	@ (8001b54 <LCD_IO_WriteData+0x3c>)
 8001b2a:	f004 ff29 	bl	8006980 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2104      	movs	r1, #4
 8001b32:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <LCD_IO_WriteData+0x40>)
 8001b34:	f004 ff24 	bl	8006980 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff10 	bl	8001960 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b40:	2201      	movs	r2, #1
 8001b42:	2104      	movs	r1, #4
 8001b44:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <LCD_IO_WriteData+0x40>)
 8001b46:	f004 ff1b 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40020800 	.word	0x40020800

08001b5c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b6c:	480a      	ldr	r0, [pc, #40]	@ (8001b98 <LCD_IO_WriteReg+0x3c>)
 8001b6e:	f004 ff07 	bl	8006980 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001b72:	2200      	movs	r2, #0
 8001b74:	2104      	movs	r1, #4
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <LCD_IO_WriteReg+0x40>)
 8001b78:	f004 ff02 	bl	8006980 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff feed 	bl	8001960 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b86:	2201      	movs	r2, #1
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4804      	ldr	r0, [pc, #16]	@ (8001b9c <LCD_IO_WriteReg+0x40>)
 8001b8c:	f004 fef8 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40020800 	.word	0x40020800

08001ba0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	80fb      	strh	r3, [r7, #6]
 8001bac:	4613      	mov	r3, r2
 8001bae:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <LCD_IO_ReadData+0x5c>)
 8001bba:	f004 fee1 	bl	8006980 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc4:	480e      	ldr	r0, [pc, #56]	@ (8001c00 <LCD_IO_ReadData+0x60>)
 8001bc6:	f004 fedb 	bl	8006980 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fec7 	bl	8001960 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001bd2:	797b      	ldrb	r3, [r7, #5]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fea3 	bl	8001920 <SPIx_Read>
 8001bda:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001be2:	4807      	ldr	r0, [pc, #28]	@ (8001c00 <LCD_IO_ReadData+0x60>)
 8001be4:	f004 fecc 	bl	8006980 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001be8:	2201      	movs	r2, #1
 8001bea:	2104      	movs	r1, #4
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <LCD_IO_ReadData+0x5c>)
 8001bee:	f004 fec7 	bl	8006980 <HAL_GPIO_WritePin>

  return readvalue;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00

08001c04 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f002 fd0b 	bl	8004628 <HAL_Delay>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8001c1e:	f7ff fd53 	bl	80016c8 <I2Cx_Init>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8001c2a:	f7ff fd7f 	bl	800172c <I2Cx_ITConfig>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	71bb      	strb	r3, [r7, #6]
 8001c40:	4613      	mov	r3, r2
 8001c42:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001c44:	797a      	ldrb	r2, [r7, #5]
 8001c46:	79b9      	ldrb	r1, [r7, #6]
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fd9e 	bl	800178c <I2Cx_WriteData>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001c68:	79ba      	ldrb	r2, [r7, #6]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fdb6 	bl	80017e0 <I2Cx_ReadData>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	603a      	str	r2, [r7, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	71bb      	strb	r3, [r7, #6]
 8001c90:	4613      	mov	r3, r2
 8001c92:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	79b9      	ldrb	r1, [r7, #6]
 8001c98:	79f8      	ldrb	r0, [r7, #7]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	f7ff fdcc 	bl	8001838 <I2Cx_ReadBuffer>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f002 fcb8 	bl	8004628 <HAL_Delay>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <BSP_LCD_Init+0xc0>)
 8001cc8:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001ccc:	2209      	movs	r2, #9
 8001cce:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001cd6:	4b29      	ldr	r3, [pc, #164]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001cd8:	221d      	movs	r2, #29
 8001cda:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001cdc:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001cde:	2203      	movs	r2, #3
 8001ce0:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001ce4:	f240 120d 	movw	r2, #269	@ 0x10d
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001cea:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001cec:	f240 1243 	movw	r2, #323	@ 0x143
 8001cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001cf4:	f240 1217 	movw	r2, #279	@ 0x117
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001cfc:	f240 1247 	movw	r2, #327	@ 0x147
 8001d00:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <BSP_LCD_Init+0xc4>)
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <BSP_LCD_Init+0xc4>)
 8001d22:	22c0      	movs	r2, #192	@ 0xc0
 8001d24:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <BSP_LCD_Init+0xc4>)
 8001d28:	2204      	movs	r2, #4
 8001d2a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <BSP_LCD_Init+0xc4>)
 8001d2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d32:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d34:	4813      	ldr	r0, [pc, #76]	@ (8001d84 <BSP_LCD_Init+0xc4>)
 8001d36:	f006 ffcd 	bl	8008cd4 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d46:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001d52:	f000 fb57 	bl	8002404 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001d56:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <BSP_LCD_Init+0xbc>)
 8001d58:	f005 ff24 	bl	8007ba4 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <BSP_LCD_Init+0xc8>)
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d8c <BSP_LCD_Init+0xcc>)
 8001d60:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <BSP_LCD_Init+0xc8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001d6a:	f000 fd93 	bl	8002894 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001d6e:	4808      	ldr	r0, [pc, #32]	@ (8001d90 <BSP_LCD_Init+0xd0>)
 8001d70:	f000 f8ce 	bl	8001f10 <BSP_LCD_SetFont>

  return LCD_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200001b0 	.word	0x200001b0
 8001d80:	40016800 	.word	0x40016800
 8001d84:	20000298 	.word	0x20000298
 8001d88:	200002e4 	.word	0x200002e4
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000070 	.word	0x20000070

08001d94 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <BSP_LCD_GetXSize+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9e:	4798      	blx	r3
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200002e4 	.word	0x200002e4

08001dac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <BSP_LCD_GetYSize+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	4798      	blx	r3
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200002e4 	.word	0x200002e4

08001dc4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b090      	sub	sp, #64	@ 0x40
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001dd4:	f7ff ffde 	bl	8001d94 <BSP_LCD_GetXSize>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001de0:	f7ff ffe4 	bl	8001dac <BSP_LCD_GetYSize>
 8001de4:	4603      	mov	r3, r0
 8001de6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001df0:	23ff      	movs	r3, #255	@ 0xff
 8001df2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e10:	2307      	movs	r3, #7
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001e14:	f7ff ffbe 	bl	8001d94 <BSP_LCD_GetXSize>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001e1c:	f7ff ffc6 	bl	8001dac <BSP_LCD_GetYSize>
 8001e20:	4603      	mov	r3, r0
 8001e22:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001e24:	88fa      	ldrh	r2, [r7, #6]
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4814      	ldr	r0, [pc, #80]	@ (8001e80 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001e2e:	f006 f84b 	bl	8007ec8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	4913      	ldr	r1, [pc, #76]	@ (8001e84 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3304      	adds	r3, #4
 8001e42:	f04f 32ff 	mov.w	r2, #4294967295
 8001e46:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	490e      	ldr	r1, [pc, #56]	@ (8001e84 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3308      	adds	r3, #8
 8001e58:	4a0b      	ldr	r2, [pc, #44]	@ (8001e88 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001e5a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	4909      	ldr	r1, [pc, #36]	@ (8001e84 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001e72:	f006 f867 	bl	8007f44 <HAL_LTDC_EnableDither>
}
 8001e76:	bf00      	nop
 8001e78:	3740      	adds	r7, #64	@ 0x40
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200001b0 	.word	0x200001b0
 8001e84:	200002cc 	.word	0x200002cc
 8001e88:	20000070 	.word	0x20000070

08001e8c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001e94:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <BSP_LCD_SelectLayer+0x1c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200002c8 	.word	0x200002c8

08001eac <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <BSP_LCD_SetTextColor+0x28>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4907      	ldr	r1, [pc, #28]	@ (8001ed8 <BSP_LCD_SetTextColor+0x2c>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	200002c8 	.word	0x200002c8
 8001ed8:	200002cc 	.word	0x200002cc

08001edc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <BSP_LCD_SetBackColor+0x2c>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <BSP_LCD_SetBackColor+0x30>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200002c8 	.word	0x200002c8
 8001f0c:	200002cc 	.word	0x200002cc

08001f10 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <BSP_LCD_SetFont+0x2c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4908      	ldr	r1, [pc, #32]	@ (8001f40 <BSP_LCD_SetFont+0x30>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	3308      	adds	r3, #8
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200002c8 	.word	0x200002c8
 8001f40:	200002cc 	.word	0x200002cc

08001f44 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <BSP_LCD_Clear+0x48>)
 8001f4e:	681c      	ldr	r4, [r3, #0]
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <BSP_LCD_Clear+0x48>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0e      	ldr	r2, [pc, #56]	@ (8001f90 <BSP_LCD_Clear+0x4c>)
 8001f56:	2134      	movs	r1, #52	@ 0x34
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	335c      	adds	r3, #92	@ 0x5c
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461e      	mov	r6, r3
 8001f64:	f7ff ff16 	bl	8001d94 <BSP_LCD_GetXSize>
 8001f68:	4605      	mov	r5, r0
 8001f6a:	f7ff ff1f 	bl	8001dac <BSP_LCD_GetYSize>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	462a      	mov	r2, r5
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f000 fc50 	bl	8002824 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8c:	200002c8 	.word	0x200002c8
 8001f90:	200001b0 	.word	0x200001b0

08001f94 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, uint8_t Orientation)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	80fb      	strh	r3, [r7, #6]
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80bb      	strh	r3, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	70fb      	strb	r3, [r7, #3]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	70bb      	strb	r3, [r7, #2]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <BSP_LCD_DisplayChar+0x8c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	491b      	ldr	r1, [pc, #108]	@ (8002024 <BSP_LCD_DisplayChar+0x90>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 8001fce:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <BSP_LCD_DisplayChar+0x8c>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4c14      	ldr	r4, [pc, #80]	@ (8002024 <BSP_LCD_DisplayChar+0x90>)
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4423      	add	r3, r4
 8001fde:	3308      	adds	r3, #8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001fe4:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <BSP_LCD_DisplayChar+0x8c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4c0d      	ldr	r4, [pc, #52]	@ (8002024 <BSP_LCD_DisplayChar+0x90>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4423      	add	r3, r4
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	889b      	ldrh	r3, [r3, #4]
 8001ffe:	3307      	adds	r3, #7
 8002000:	2b00      	cmp	r3, #0
 8002002:	da00      	bge.n	8002006 <BSP_LCD_DisplayChar+0x72>
 8002004:	3307      	adds	r3, #7
 8002006:	10db      	asrs	r3, r3, #3
 8002008:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800200c:	18ca      	adds	r2, r1, r3
 800200e:	78bb      	ldrb	r3, [r7, #2]
 8002010:	88b9      	ldrh	r1, [r7, #4]
 8002012:	88f8      	ldrh	r0, [r7, #6]
 8002014:	f000 faf2 	bl	80025fc <DrawChar>
														   Orientation);
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}
 8002020:	200002c8 	.word	0x200002c8
 8002024:	200002cc 	.word	0x200002cc

08002028 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode, uint8_t Orientation)
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60ba      	str	r2, [r7, #8]
 8002030:	461a      	mov	r2, r3
 8002032:	4603      	mov	r3, r0
 8002034:	81fb      	strh	r3, [r7, #14]
 8002036:	460b      	mov	r3, r1
 8002038:	81bb      	strh	r3, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800203e:	2301      	movs	r3, #1
 8002040:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002042:	2300      	movs	r3, #0
 8002044:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint32_t size = 0, xsize = 0, ysize = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = pText;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	61fb      	str	r3, [r7, #28]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8002056:	e002      	b.n	800205e <BSP_LCD_DisplayStringAt+0x36>
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	3301      	adds	r3, #1
 800205c:	623b      	str	r3, [r7, #32]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	61fa      	str	r2, [r7, #28]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f6      	bne.n	8002058 <BSP_LCD_DisplayStringAt+0x30>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 800206a:	f7ff fe93 	bl	8001d94 <BSP_LCD_GetXSize>
 800206e:	4601      	mov	r1, r0
 8002070:	4b9a      	ldr	r3, [pc, #616]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	489a      	ldr	r0, [pc, #616]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4403      	add	r3, r0
 8002080:	3308      	adds	r3, #8
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	889b      	ldrh	r3, [r3, #4]
 8002086:	fbb1 f3f3 	udiv	r3, r1, r3
 800208a:	61bb      	str	r3, [r7, #24]
  ysize = (BSP_LCD_GetYSize() / DrawProp[ActiveLayer].pFont->Width);
 800208c:	f7ff fe8e 	bl	8001dac <BSP_LCD_GetYSize>
 8002090:	4601      	mov	r1, r0
 8002092:	4b92      	ldr	r3, [pc, #584]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4892      	ldr	r0, [pc, #584]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4403      	add	r3, r0
 80020a2:	3308      	adds	r3, #8
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	889b      	ldrh	r3, [r3, #4]
 80020a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ac:	617b      	str	r3, [r7, #20]



  if(Orientation){
 80020ae:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8087 	beq.w	80021c6 <BSP_LCD_DisplayStringAt+0x19e>
	  switch (mode)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d01c      	beq.n	80020f8 <BSP_LCD_DisplayStringAt+0xd0>
 80020be:	2b03      	cmp	r3, #3
 80020c0:	dc33      	bgt.n	800212a <BSP_LCD_DisplayStringAt+0x102>
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d002      	beq.n	80020cc <BSP_LCD_DisplayStringAt+0xa4>
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d019      	beq.n	80020fe <BSP_LCD_DisplayStringAt+0xd6>
 80020ca:	e02e      	b.n	800212a <BSP_LCD_DisplayStringAt+0x102>
	    {
	      case CENTER_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	1ad1      	subs	r1, r2, r3
 80020d2:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4882      	ldr	r0, [pc, #520]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4403      	add	r3, r0
 80020e2:	3308      	adds	r3, #8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	889b      	ldrh	r3, [r3, #4]
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	4413      	add	r3, r2
 80020f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 80020f6:	e01b      	b.n	8002130 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case LEFT_MODE:
	      {
	        refcolumn = X;
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 80020fc:	e018      	b.n	8002130 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case RIGHT_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b299      	uxth	r1, r3
 8002106:	4b75      	ldr	r3, [pc, #468]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4875      	ldr	r0, [pc, #468]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4403      	add	r3, r0
 8002116:	3308      	adds	r3, #8
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	fb11 f303 	smulbb	r3, r1, r3
 8002120:	b29a      	uxth	r2, r3
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	4413      	add	r3, r2
 8002126:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002128:	e002      	b.n	8002130 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      default:
	      {
	        refcolumn = X;
 800212a:	89fb      	ldrh	r3, [r7, #14]
 800212c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800212e:	bf00      	nop
	    }
	  /*
	  ///* Send the string character by character on LCD

	  */
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002130:	e01b      	b.n	800216a <BSP_LCD_DisplayStringAt+0x142>
	                          DrawProp[ActiveLayer].pFont->Width))
	  {
	    ///* Display one character on LCD
	    BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800213a:	89b9      	ldrh	r1, [r7, #12]
 800213c:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800213e:	f7ff ff29 	bl	8001f94 <BSP_LCD_DisplayChar>
	    ///* Decrement the column position by 16
	    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002142:	4b66      	ldr	r3, [pc, #408]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4966      	ldr	r1, [pc, #408]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3308      	adds	r3, #8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	889a      	ldrh	r2, [r3, #4]
 8002158:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800215a:	4413      	add	r3, r2
 800215c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    ///* Point on the next character
	    pText++;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3301      	adds	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
	    i++;
 8002164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2dc      	uxtb	r4, r3
 8002178:	f7ff fe0c 	bl	8001d94 <BSP_LCD_GetXSize>
 800217c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800217e:	4b57      	ldr	r3, [pc, #348]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4d57      	ldr	r5, [pc, #348]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	442b      	add	r3, r5
 800218e:	3308      	adds	r3, #8
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	1ac3      	subs	r3, r0, r3
 800219a:	b299      	uxth	r1, r3
	                          DrawProp[ActiveLayer].pFont->Width))
 800219c:	4b4f      	ldr	r3, [pc, #316]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	484f      	ldr	r0, [pc, #316]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4403      	add	r3, r0
 80021ac:	3308      	adds	r3, #8
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80021b2:	4299      	cmp	r1, r3
 80021b4:	bf2c      	ite	cs
 80021b6:	2301      	movcs	r3, #1
 80021b8:	2300      	movcc	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4023      	ands	r3, r4
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1b6      	bne.n	8002132 <BSP_LCD_DisplayStringAt+0x10a>
  }




}
 80021c4:	e085      	b.n	80022d2 <BSP_LCD_DisplayStringAt+0x2aa>
	  switch (mode)
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d01c      	beq.n	8002206 <BSP_LCD_DisplayStringAt+0x1de>
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	dc33      	bgt.n	8002238 <BSP_LCD_DisplayStringAt+0x210>
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d002      	beq.n	80021da <BSP_LCD_DisplayStringAt+0x1b2>
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d019      	beq.n	800220c <BSP_LCD_DisplayStringAt+0x1e4>
 80021d8:	e02e      	b.n	8002238 <BSP_LCD_DisplayStringAt+0x210>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	1ad1      	subs	r1, r2, r3
 80021e0:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	483e      	ldr	r0, [pc, #248]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4403      	add	r3, r0
 80021f0:	3308      	adds	r3, #8
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	4413      	add	r3, r2
 8002202:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002204:	e01b      	b.n	800223e <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800220a:	e018      	b.n	800223e <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width);
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	b299      	uxth	r1, r3
 8002214:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4831      	ldr	r0, [pc, #196]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4403      	add	r3, r0
 8002224:	3308      	adds	r3, #8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	889b      	ldrh	r3, [r3, #4]
 800222a:	fb11 f303 	smulbb	r3, r1, r3
 800222e:	b29a      	uxth	r2, r3
 8002230:	89fb      	ldrh	r3, [r7, #14]
 8002232:	4413      	add	r3, r2
 8002234:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002236:	e002      	b.n	800223e <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 8002238:	89fb      	ldrh	r3, [r7, #14]
 800223a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800223c:	bf00      	nop
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800223e:	e01b      	b.n	8002278 <BSP_LCD_DisplayStringAt+0x250>
	      BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002248:	89b9      	ldrh	r1, [r7, #12]
 800224a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800224c:	f7ff fea2 	bl	8001f94 <BSP_LCD_DisplayChar>
	      refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4922      	ldr	r1, [pc, #136]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3308      	adds	r3, #8
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	889a      	ldrh	r2, [r3, #4]
 8002266:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002268:	4413      	add	r3, r2
 800226a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	      pText++;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3301      	adds	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
	      i++;
 8002272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002274:	3301      	adds	r3, #1
 8002276:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2dc      	uxtb	r4, r3
 8002286:	f7ff fd91 	bl	8001dac <BSP_LCD_GetYSize>
 800228a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800228c:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4d13      	ldr	r5, [pc, #76]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	442b      	add	r3, r5
 800229c:	3308      	adds	r3, #8
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	889b      	ldrh	r3, [r3, #4]
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	1ac3      	subs	r3, r0, r3
 80022a8:	b299      	uxth	r1, r3
	                            DrawProp[ActiveLayer].pFont->Width))
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <BSP_LCD_DisplayStringAt+0x2b4>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <BSP_LCD_DisplayStringAt+0x2b8>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4403      	add	r3, r0
 80022ba:	3308      	adds	r3, #8
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80022c0:	4299      	cmp	r1, r3
 80022c2:	bf2c      	ite	cs
 80022c4:	2301      	movcs	r3, #1
 80022c6:	2300      	movcc	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4023      	ands	r3, r4
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1b6      	bne.n	8002240 <BSP_LCD_DisplayStringAt+0x218>
}
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	@ 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bdb0      	pop	{r4, r5, r7, pc}
 80022da:	bf00      	nop
 80022dc:	200002c8 	.word	0x200002c8
 80022e0:	200002cc 	.word	0x200002cc

080022e4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
 80022ee:	460b      	mov	r3, r1
 80022f0:	80bb      	strh	r3, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <BSP_LCD_DrawHLine+0x70>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a16      	ldr	r2, [pc, #88]	@ (8002358 <BSP_LCD_DrawHLine+0x74>)
 8002300:	2134      	movs	r1, #52	@ 0x34
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	335c      	adds	r3, #92	@ 0x5c
 800230a:	681c      	ldr	r4, [r3, #0]
 800230c:	f7ff fd42 	bl	8001d94 <BSP_LCD_GetXSize>
 8002310:	4602      	mov	r2, r0
 8002312:	88bb      	ldrh	r3, [r7, #4]
 8002314:	fb03 f202 	mul.w	r2, r3, r2
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4423      	add	r3, r4
 8002320:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <BSP_LCD_DrawHLine+0x70>)
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	887c      	ldrh	r4, [r7, #2]
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <BSP_LCD_DrawHLine+0x70>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4d0b      	ldr	r5, [pc, #44]	@ (800235c <BSP_LCD_DrawHLine+0x78>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	442b      	add	r3, r5
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	2300      	movs	r3, #0
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2301      	movs	r3, #1
 8002344:	4622      	mov	r2, r4
 8002346:	f000 fa6d 	bl	8002824 <FillBuffer>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	200002c8 	.word	0x200002c8
 8002358:	200001b0 	.word	0x200001b0
 800235c:	200002cc 	.word	0x200002cc

08002360 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	b087      	sub	sp, #28
 8002364:	af02      	add	r7, sp, #8
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
 800236a:	460b      	mov	r3, r1
 800236c:	80bb      	strh	r3, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <BSP_LCD_DrawVLine+0x78>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a18      	ldr	r2, [pc, #96]	@ (80023dc <BSP_LCD_DrawVLine+0x7c>)
 800237c:	2134      	movs	r1, #52	@ 0x34
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	335c      	adds	r3, #92	@ 0x5c
 8002386:	681c      	ldr	r4, [r3, #0]
 8002388:	f7ff fd04 	bl	8001d94 <BSP_LCD_GetXSize>
 800238c:	4602      	mov	r2, r0
 800238e:	88bb      	ldrh	r3, [r7, #4]
 8002390:	fb03 f202 	mul.w	r2, r3, r2
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4423      	add	r3, r4
 800239c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <BSP_LCD_DrawVLine+0x78>)
 80023a0:	681c      	ldr	r4, [r3, #0]
 80023a2:	68fd      	ldr	r5, [r7, #12]
 80023a4:	887e      	ldrh	r6, [r7, #2]
 80023a6:	f7ff fcf5 	bl	8001d94 <BSP_LCD_GetXSize>
 80023aa:	4603      	mov	r3, r0
 80023ac:	1e59      	subs	r1, r3, #1
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <BSP_LCD_DrawVLine+0x78>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <BSP_LCD_DrawVLine+0x80>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4403      	add	r3, r0
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	9100      	str	r1, [sp, #0]
 80023c4:	4633      	mov	r3, r6
 80023c6:	2201      	movs	r2, #1
 80023c8:	4629      	mov	r1, r5
 80023ca:	4620      	mov	r0, r4
 80023cc:	f000 fa2a 	bl	8002824 <FillBuffer>
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d8:	200002c8 	.word	0x200002c8
 80023dc:	200001b0 	.word	0x200001b0
 80023e0:	200002cc 	.word	0x200002cc

080023e4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <BSP_LCD_DisplayOn+0x1c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80023f2:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <BSP_LCD_DisplayOn+0x1c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4798      	blx	r3
  }
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200002e4 	.word	0x200002e4

08002404 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	@ 0x38
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	4a60      	ldr	r2, [pc, #384]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002414:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002418:	6453      	str	r3, [r2, #68]	@ 0x44
 800241a:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	4b5a      	ldr	r3, [pc, #360]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a59      	ldr	r2, [pc, #356]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002430:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b57      	ldr	r3, [pc, #348]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4b53      	ldr	r3, [pc, #332]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a52      	ldr	r2, [pc, #328]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a4b      	ldr	r2, [pc, #300]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	4a44      	ldr	r2, [pc, #272]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6313      	str	r3, [r2, #48]	@ 0x30
 800248a:	4b42      	ldr	r3, [pc, #264]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	4a3d      	ldr	r2, [pc, #244]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	4a36      	ldr	r2, [pc, #216]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024bc:	f043 0320 	orr.w	r3, r3, #32
 80024c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c2:	4b34      	ldr	r3, [pc, #208]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b30      	ldr	r3, [pc, #192]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b2d      	ldr	r3, [pc, #180]	@ (8002594 <BSP_LCD_MspInit+0x190>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80024ea:	f641 0358 	movw	r3, #6232	@ 0x1858
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80024f8:	2302      	movs	r3, #2
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 80024fc:	230e      	movs	r3, #14
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002504:	4619      	mov	r1, r3
 8002506:	4824      	ldr	r0, [pc, #144]	@ (8002598 <BSP_LCD_MspInit+0x194>)
 8002508:	f003 ff82 	bl	8006410 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800250c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002516:	4619      	mov	r1, r3
 8002518:	4820      	ldr	r0, [pc, #128]	@ (800259c <BSP_LCD_MspInit+0x198>)
 800251a:	f003 ff79 	bl	8006410 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800251e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	481d      	ldr	r0, [pc, #116]	@ (80025a0 <BSP_LCD_MspInit+0x19c>)
 800252c:	f003 ff70 	bl	8006410 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002530:	2348      	movs	r3, #72	@ 0x48
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	481a      	ldr	r0, [pc, #104]	@ (80025a4 <BSP_LCD_MspInit+0x1a0>)
 800253c:	f003 ff68 	bl	8006410 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002540:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	4816      	ldr	r0, [pc, #88]	@ (80025a8 <BSP_LCD_MspInit+0x1a4>)
 800254e:	f003 ff5f 	bl	8006410 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002552:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	4813      	ldr	r0, [pc, #76]	@ (80025ac <BSP_LCD_MspInit+0x1a8>)
 8002560:	f003 ff56 	bl	8006410 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002564:	2303      	movs	r3, #3
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8002568:	2309      	movs	r3, #9
 800256a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800256c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002570:	4619      	mov	r1, r3
 8002572:	480a      	ldr	r0, [pc, #40]	@ (800259c <BSP_LCD_MspInit+0x198>)
 8002574:	f003 ff4c 	bl	8006410 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002578:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800257e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002582:	4619      	mov	r1, r3
 8002584:	4809      	ldr	r0, [pc, #36]	@ (80025ac <BSP_LCD_MspInit+0x1a8>)
 8002586:	f003 ff43 	bl	8006410 <HAL_GPIO_Init>
}
 800258a:	bf00      	nop
 800258c:	3738      	adds	r7, #56	@ 0x38
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	40020400 	.word	0x40020400
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800

080025b0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	603a      	str	r2, [r7, #0]
 80025ba:	80fb      	strh	r3, [r7, #6]
 80025bc:	460b      	mov	r3, r1
 80025be:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <BSP_LCD_DrawPixel+0x44>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0c      	ldr	r2, [pc, #48]	@ (80025f8 <BSP_LCD_DrawPixel+0x48>)
 80025c6:	2134      	movs	r1, #52	@ 0x34
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	335c      	adds	r3, #92	@ 0x5c
 80025d0:	681c      	ldr	r4, [r3, #0]
 80025d2:	88bd      	ldrh	r5, [r7, #4]
 80025d4:	f7ff fbde 	bl	8001d94 <BSP_LCD_GetXSize>
 80025d8:	4603      	mov	r3, r0
 80025da:	fb03 f205 	mul.w	r2, r3, r5
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4423      	add	r3, r4
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bdb0      	pop	{r4, r5, r7, pc}
 80025f4:	200002c8 	.word	0x200002c8
 80025f8:	200001b0 	.word	0x200001b0

080025fc <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, uint8_t Orientation)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08b      	sub	sp, #44	@ 0x2c
 8002600:	af00      	add	r7, sp, #0
 8002602:	60ba      	str	r2, [r7, #8]
 8002604:	461a      	mov	r2, r3
 8002606:	4603      	mov	r3, r0
 8002608:	81fb      	strh	r3, [r7, #14]
 800260a:	460b      	mov	r3, r1
 800260c:	81bb      	strh	r3, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	71fb      	strb	r3, [r7, #7]
  uint32_t i = 0, j = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset, offsetheight;
  uint8_t *pchar;
  uint32_t line = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]

  height = DrawProp[ActiveLayer].pFont->Height;
 800261e:	4b7f      	ldr	r3, [pc, #508]	@ (800281c <DrawChar+0x220>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	497f      	ldr	r1, [pc, #508]	@ (8002820 <DrawChar+0x224>)
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3308      	adds	r3, #8
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	88db      	ldrh	r3, [r3, #6]
 8002634:	837b      	strh	r3, [r7, #26]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002636:	4b79      	ldr	r3, [pc, #484]	@ (800281c <DrawChar+0x220>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4979      	ldr	r1, [pc, #484]	@ (8002820 <DrawChar+0x224>)
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3308      	adds	r3, #8
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	889b      	ldrh	r3, [r3, #4]
 800264c:	833b      	strh	r3, [r7, #24]

  offset = 8 * ((width + 7) / 8) -  width ;
 800264e:	8b3b      	ldrh	r3, [r7, #24]
 8002650:	3307      	adds	r3, #7
 8002652:	2b00      	cmp	r3, #0
 8002654:	da00      	bge.n	8002658 <DrawChar+0x5c>
 8002656:	3307      	adds	r3, #7
 8002658:	10db      	asrs	r3, r3, #3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	b2da      	uxtb	r2, r3
 8002660:	8b3b      	ldrh	r3, [r7, #24]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	75fb      	strb	r3, [r7, #23]
  offsetheight = 8 * ((height + 7) / 8) -  height;
 8002668:	8b7b      	ldrh	r3, [r7, #26]
 800266a:	3307      	adds	r3, #7
 800266c:	2b00      	cmp	r3, #0
 800266e:	da00      	bge.n	8002672 <DrawChar+0x76>
 8002670:	3307      	adds	r3, #7
 8002672:	10db      	asrs	r3, r3, #3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	b2da      	uxtb	r2, r3
 800267a:	8b7b      	ldrh	r3, [r7, #26]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	75bb      	strb	r3, [r7, #22]
  for (i = 0; i < height; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
 8002686:	e0be      	b.n	8002806 <DrawChar+0x20a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8002688:	8b3b      	ldrh	r3, [r7, #24]
 800268a:	3307      	adds	r3, #7
 800268c:	2b00      	cmp	r3, #0
 800268e:	da00      	bge.n	8002692 <DrawChar+0x96>
 8002690:	3307      	adds	r3, #7
 8002692:	10db      	asrs	r3, r3, #3
 8002694:	461a      	mov	r2, r3
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	4413      	add	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

    switch (((width + 7) / 8))
 80026a2:	8b3b      	ldrh	r3, [r7, #24]
 80026a4:	3307      	adds	r3, #7
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da00      	bge.n	80026ac <DrawChar+0xb0>
 80026aa:	3307      	adds	r3, #7
 80026ac:	10db      	asrs	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d002      	beq.n	80026b8 <DrawChar+0xbc>
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d004      	beq.n	80026c0 <DrawChar+0xc4>
 80026b6:	e00c      	b.n	80026d2 <DrawChar+0xd6>
    {
      case 1:
        line =  pchar[0];
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	61fb      	str	r3, [r7, #28]
        break;
 80026be:	e016      	b.n	80026ee <DrawChar+0xf2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	3201      	adds	r2, #1
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61fb      	str	r3, [r7, #28]
        break;
 80026d0:	e00d      	b.n	80026ee <DrawChar+0xf2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	041a      	lsls	r2, r3, #16
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	3301      	adds	r3, #1
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	4313      	orrs	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	3202      	adds	r2, #2
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61fb      	str	r3, [r7, #28]
        break;
 80026ec:	bf00      	nop
    }
    if(Orientation){
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03e      	beq.n	8002772 <DrawChar+0x176>
        for (j = 0; j < width; j++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	e036      	b.n	8002768 <DrawChar+0x16c>
        {
          if (line & (1 << (width - j + offset - 1)))
 80026fa:	8b3a      	ldrh	r2, [r7, #24]
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	1ad2      	subs	r2, r2, r3
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	4413      	add	r3, r2
 8002704:	3b01      	subs	r3, #1
 8002706:	2201      	movs	r2, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	461a      	mov	r2, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d012      	beq.n	800273c <DrawChar+0x140>
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	b29a      	uxth	r2, r3
 800271a:	89fb      	ldrh	r3, [r7, #14]
 800271c:	4413      	add	r3, r2
 800271e:	b298      	uxth	r0, r3
 8002720:	4b3e      	ldr	r3, [pc, #248]	@ (800281c <DrawChar+0x220>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	493e      	ldr	r1, [pc, #248]	@ (8002820 <DrawChar+0x224>)
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	89bb      	ldrh	r3, [r7, #12]
 8002734:	4619      	mov	r1, r3
 8002736:	f7ff ff3b 	bl	80025b0 <BSP_LCD_DrawPixel>
 800273a:	e012      	b.n	8002762 <DrawChar+0x166>
          }
          else
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	b29a      	uxth	r2, r3
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	4413      	add	r3, r2
 8002744:	b298      	uxth	r0, r3
 8002746:	4b35      	ldr	r3, [pc, #212]	@ (800281c <DrawChar+0x220>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4935      	ldr	r1, [pc, #212]	@ (8002820 <DrawChar+0x224>)
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3304      	adds	r3, #4
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	89bb      	ldrh	r3, [r7, #12]
 800275c:	4619      	mov	r1, r3
 800275e:	f7ff ff27 	bl	80025b0 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	3301      	adds	r3, #1
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	8b3b      	ldrh	r3, [r7, #24]
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3c4      	bcc.n	80026fa <DrawChar+0xfe>
 8002770:	e043      	b.n	80027fa <DrawChar+0x1fe>
          }
        }
    }

    else {
        for (j = 0; j < width; j++)
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
 8002776:	e03c      	b.n	80027f2 <DrawChar+0x1f6>
            {
              if (line & (1 << (width - j + offset - 1)))
 8002778:	8b3a      	ldrh	r2, [r7, #24]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	1ad2      	subs	r2, r2, r3
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	4413      	add	r3, r2
 8002782:	3b01      	subs	r3, #1
 8002784:	2201      	movs	r2, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	461a      	mov	r2, r3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <DrawChar+0x1c4>
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].TextColor);
 8002794:	89bb      	ldrh	r3, [r7, #12]
 8002796:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 800279a:	b298      	uxth	r0, r3
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	4413      	add	r3, r2
 80027a4:	b299      	uxth	r1, r3
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <DrawChar+0x220>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4c1d      	ldr	r4, [pc, #116]	@ (8002820 <DrawChar+0x224>)
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4423      	add	r3, r4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7ff fef9 	bl	80025b0 <BSP_LCD_DrawPixel>
 80027be:	e015      	b.n	80027ec <DrawChar+0x1f0>
              }
              else
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].BackColor);
 80027c0:	89bb      	ldrh	r3, [r7, #12]
 80027c2:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 80027c6:	b298      	uxth	r0, r3
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	4413      	add	r3, r2
 80027d0:	b299      	uxth	r1, r3
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <DrawChar+0x220>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4c12      	ldr	r4, [pc, #72]	@ (8002820 <DrawChar+0x224>)
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4423      	add	r3, r4
 80027e2:	3304      	adds	r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7ff fee2 	bl	80025b0 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	3301      	adds	r3, #1
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	8b3b      	ldrh	r3, [r7, #24]
 80027f4:	6a3a      	ldr	r2, [r7, #32]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3be      	bcc.n	8002778 <DrawChar+0x17c>
              }
            }
    }

    Ypos++;
 80027fa:	89bb      	ldrh	r3, [r7, #12]
 80027fc:	3301      	adds	r3, #1
 80027fe:	81bb      	strh	r3, [r7, #12]
  for (i = 0; i < height; i++)
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	3301      	adds	r3, #1
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
 8002806:	8b7b      	ldrh	r3, [r7, #26]
 8002808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280a:	429a      	cmp	r2, r3
 800280c:	f4ff af3c 	bcc.w	8002688 <DrawChar+0x8c>
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	372c      	adds	r7, #44	@ 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}
 800281a:	bf00      	nop
 800281c:	200002c8 	.word	0x200002c8
 8002820:	200002cc 	.word	0x200002cc

08002824 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002832:	4b16      	ldr	r3, [pc, #88]	@ (800288c <FillBuffer+0x68>)
 8002834:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002838:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800283a:	4b14      	ldr	r3, [pc, #80]	@ (800288c <FillBuffer+0x68>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002840:	4a12      	ldr	r2, [pc, #72]	@ (800288c <FillBuffer+0x68>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <FillBuffer+0x68>)
 8002848:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <FillBuffer+0x6c>)
 800284a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 800284c:	480f      	ldr	r0, [pc, #60]	@ (800288c <FillBuffer+0x68>)
 800284e:	f003 fa43 	bl	8005cd8 <HAL_DMA2D_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d115      	bne.n	8002884 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	480c      	ldr	r0, [pc, #48]	@ (800288c <FillBuffer+0x68>)
 800285c:	f003 fcaa 	bl	80061b4 <HAL_DMA2D_ConfigLayer>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10e      	bne.n	8002884 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69f9      	ldr	r1, [r7, #28]
 8002870:	4806      	ldr	r0, [pc, #24]	@ (800288c <FillBuffer+0x68>)
 8002872:	f003 fa7a 	bl	8005d6a <HAL_DMA2D_Start>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800287c:	210a      	movs	r1, #10
 800287e:	4803      	ldr	r0, [pc, #12]	@ (800288c <FillBuffer+0x68>)
 8002880:	f003 fa9e 	bl	8005dc0 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000258 	.word	0x20000258
 8002890:	4002b000 	.word	0x4002b000

08002894 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002898:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 800289a:	4a2a      	ldr	r2, [pc, #168]	@ (8002944 <BSP_SDRAM_Init+0xb0>)
 800289c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 80028a0:	2202      	movs	r2, #2
 80028a2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80028a4:	4b28      	ldr	r3, [pc, #160]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 80028a6:	2207      	movs	r2, #7
 80028a8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80028aa:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 80028ac:	2204      	movs	r2, #4
 80028ae:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80028b0:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 80028b2:	2207      	movs	r2, #7
 80028b4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 80028b8:	2202      	movs	r2, #2
 80028ba:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 80028be:	2202      	movs	r2, #2
 80028c0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80028c2:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028d6:	2204      	movs	r2, #4
 80028d8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028dc:	2210      	movs	r2, #16
 80028de:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028e2:	2240      	movs	r2, #64	@ 0x40
 80028e4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028e8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028ec:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028fa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80028fc:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002902:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 8002904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002908:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800290a:	2100      	movs	r1, #0
 800290c:	480c      	ldr	r0, [pc, #48]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 800290e:	f000 f87f 	bl	8002a10 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002912:	490d      	ldr	r1, [pc, #52]	@ (8002948 <BSP_SDRAM_Init+0xb4>)
 8002914:	480a      	ldr	r0, [pc, #40]	@ (8002940 <BSP_SDRAM_Init+0xac>)
 8002916:	f006 fb9d 	bl	8009054 <HAL_SDRAM_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002920:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <BSP_SDRAM_Init+0xb8>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e002      	b.n	800292e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002928:	4b08      	ldr	r3, [pc, #32]	@ (800294c <BSP_SDRAM_Init+0xb8>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800292e:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002932:	f000 f80d 	bl	8002950 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002936:	4b05      	ldr	r3, [pc, #20]	@ (800294c <BSP_SDRAM_Init+0xb8>)
 8002938:	781b      	ldrb	r3, [r3, #0]
}
 800293a:	4618      	mov	r0, r3
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200002e8 	.word	0x200002e8
 8002944:	a0000140 	.word	0xa0000140
 8002948:	2000031c 	.word	0x2000031c
 800294c:	20000080 	.word	0x20000080

08002950 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800295c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002962:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002964:	2208      	movs	r2, #8
 8002966:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002968:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800296a:	2201      	movs	r2, #1
 800296c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800296e:	4b26      	ldr	r3, [pc, #152]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002978:	4923      	ldr	r1, [pc, #140]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800297a:	4824      	ldr	r0, [pc, #144]	@ (8002a0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800297c:	f006 fb9e 	bl	80090bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f001 fe51 	bl	8004628 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002988:	2202      	movs	r2, #2
 800298a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800298e:	2208      	movs	r2, #8
 8002990:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002992:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002994:	2201      	movs	r2, #1
 8002996:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800299e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029a2:	4919      	ldr	r1, [pc, #100]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029a4:	4819      	ldr	r0, [pc, #100]	@ (8002a0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029a6:	f006 fb89 	bl	80090bc <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80029aa:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ac:	2203      	movs	r2, #3
 80029ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029b0:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029b2:	2208      	movs	r2, #8
 80029b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80029b6:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029b8:	2204      	movs	r2, #4
 80029ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80029c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029c6:	4910      	ldr	r1, [pc, #64]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029c8:	4810      	ldr	r0, [pc, #64]	@ (8002a0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029ca:	f006 fb77 	bl	80090bc <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80029ce:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80029d2:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029d6:	2204      	movs	r2, #4
 80029d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029da:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029dc:	2208      	movs	r2, #8
 80029de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80029ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029f0:	4905      	ldr	r1, [pc, #20]	@ (8002a08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f2:	4806      	ldr	r0, [pc, #24]	@ (8002a0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029f4:	f006 fb62 	bl	80090bc <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4804      	ldr	r0, [pc, #16]	@ (8002a0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029fc:	f006 fb93 	bl	8009126 <HAL_SDRAM_ProgramRefreshRate>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000338 	.word	0x20000338
 8002a0c:	200002e8 	.word	0x200002e8

08002a10 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b090      	sub	sp, #64	@ 0x40
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80ec 	beq.w	8002bfa <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a26:	4b77      	ldr	r3, [pc, #476]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2a:	4a76      	ldr	r2, [pc, #472]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a32:	4b74      	ldr	r3, [pc, #464]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a42:	4b70      	ldr	r3, [pc, #448]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	4a6f      	ldr	r2, [pc, #444]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	4b69      	ldr	r3, [pc, #420]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	4a68      	ldr	r2, [pc, #416]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6a:	4b66      	ldr	r3, [pc, #408]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	4b62      	ldr	r3, [pc, #392]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a61      	ldr	r2, [pc, #388]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b5f      	ldr	r3, [pc, #380]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b58      	ldr	r3, [pc, #352]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	4b54      	ldr	r3, [pc, #336]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a53      	ldr	r2, [pc, #332]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b51      	ldr	r3, [pc, #324]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b4d      	ldr	r3, [pc, #308]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b4a      	ldr	r3, [pc, #296]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b46      	ldr	r3, [pc, #280]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4a45      	ldr	r2, [pc, #276]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <BSP_SDRAM_MspInit+0x1f4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b06:	2302      	movs	r3, #2
 8002b08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002b0e:	230c      	movs	r3, #12
 8002b10:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002b12:	2360      	movs	r3, #96	@ 0x60
 8002b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	483a      	ldr	r0, [pc, #232]	@ (8002c08 <BSP_SDRAM_MspInit+0x1f8>)
 8002b1e:	f003 fc77 	bl	8006410 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002b22:	2301      	movs	r3, #1
 8002b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4837      	ldr	r0, [pc, #220]	@ (8002c0c <BSP_SDRAM_MspInit+0x1fc>)
 8002b2e:	f003 fc6f 	bl	8006410 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002b32:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4834      	ldr	r0, [pc, #208]	@ (8002c10 <BSP_SDRAM_MspInit+0x200>)
 8002b40:	f003 fc66 	bl	8006410 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002b44:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002b4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4830      	ldr	r0, [pc, #192]	@ (8002c14 <BSP_SDRAM_MspInit+0x204>)
 8002b52:	f003 fc5d 	bl	8006410 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002b56:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002b5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b60:	4619      	mov	r1, r3
 8002b62:	482d      	ldr	r0, [pc, #180]	@ (8002c18 <BSP_SDRAM_MspInit+0x208>)
 8002b64:	f003 fc54 	bl	8006410 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002b68:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b72:	4619      	mov	r1, r3
 8002b74:	4829      	ldr	r0, [pc, #164]	@ (8002c1c <BSP_SDRAM_MspInit+0x20c>)
 8002b76:	f003 fc4b 	bl	8006410 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002b80:	4b27      	ldr	r3, [pc, #156]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002b82:	2280      	movs	r2, #128	@ 0x80
 8002b84:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b8c:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002b8e:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002b90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b94:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002b98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b9c:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b9e:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002ba0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ba4:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002bac:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bb2:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002bba:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002bc6:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bce:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <BSP_SDRAM_MspInit+0x214>)
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd8:	4a11      	ldr	r2, [pc, #68]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002bde:	4810      	ldr	r0, [pc, #64]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002be0:	f002 fd5a 	bl	8005698 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002be4:	480e      	ldr	r0, [pc, #56]	@ (8002c20 <BSP_SDRAM_MspInit+0x210>)
 8002be6:	f002 fca9 	bl	800553c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	210f      	movs	r1, #15
 8002bee:	2038      	movs	r0, #56	@ 0x38
 8002bf0:	f002 fa0e 	bl	8005010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002bf4:	2038      	movs	r0, #56	@ 0x38
 8002bf6:	f002 fa27 	bl	8005048 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002bfa:	bf00      	nop
 8002bfc:	3740      	adds	r7, #64	@ 0x40
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40021400 	.word	0x40021400
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	20000348 	.word	0x20000348
 8002c24:	40026410 	.word	0x40026410

08002c28 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460a      	mov	r2, r1
 8002c32:	80fb      	strh	r3, [r7, #6]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002c3c:	4a13      	ldr	r2, [pc, #76]	@ (8002c8c <BSP_TS_Init+0x64>)
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002c42:	4a13      	ldr	r2, [pc, #76]	@ (8002c90 <BSP_TS_Init+0x68>)
 8002c44:	88bb      	ldrh	r3, [r7, #4]
 8002c46:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <BSP_TS_Init+0x6c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2082      	movs	r0, #130	@ 0x82
 8002c4e:	4798      	blx	r3
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	f640 0311 	movw	r3, #2065	@ 0x811
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d104      	bne.n	8002c66 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <BSP_TS_Init+0x70>)
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <BSP_TS_Init+0x6c>)
 8002c60:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <BSP_TS_Init+0x70>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2082      	movs	r0, #130	@ 0x82
 8002c74:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <BSP_TS_Init+0x70>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2082      	movs	r0, #130	@ 0x82
 8002c7e:	4798      	blx	r3
  }

  return ret;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200003ac 	.word	0x200003ac
 8002c90:	200003ae 	.word	0x200003ae
 8002c94:	20000038 	.word	0x20000038
 8002c98:	200003a8 	.word	0x200003a8

08002c9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  sConfig.Offset = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cb4:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <MX_ADC1_Init+0xa0>)
 8002cb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cd2:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cda:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ce0:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002ce2:	4a17      	ldr	r2, [pc, #92]	@ (8002d40 <MX_ADC1_Init+0xa4>)
 8002ce4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d00:	480d      	ldr	r0, [pc, #52]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002d02:	f001 fcb5 	bl	8004670 <HAL_ADC_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002d0c:	f001 f940 	bl	8003f90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002d10:	230d      	movs	r3, #13
 8002d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002d18:	2306      	movs	r3, #6
 8002d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002d22:	f001 fe0d 	bl	8004940 <HAL_ADC_ConfigChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002d2c:	f001 f930 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200003b0 	.word	0x200003b0
 8002d3c:	40012000 	.word	0x40012000
 8002d40:	0f000001 	.word	0x0f000001

08002d44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	@ 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3a      	ldr	r2, [pc, #232]	@ (8002e4c <HAL_ADC_MspInit+0x108>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d16e      	bne.n	8002e44 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
	  /* Enable DMA2 clock */
		DMAx_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b39      	ldr	r3, [pc, #228]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a38      	ldr	r2, [pc, #224]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002d70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	4a31      	ldr	r2, [pc, #196]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d92:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_ADC_MspInit+0x10c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dba:	2308      	movs	r3, #8
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4821      	ldr	r0, [pc, #132]	@ (8002e54 <HAL_ADC_MspInit+0x110>)
 8002dce:	f003 fb1f 	bl	8006410 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002dd2:	4b21      	ldr	r3, [pc, #132]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002dd4:	4a21      	ldr	r2, [pc, #132]	@ (8002e5c <HAL_ADC_MspInit+0x118>)
 8002dd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dea:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002df0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002df4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002df8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dfa:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002dfc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002e0c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002e10:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e12:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e18:	480f      	ldr	r0, [pc, #60]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002e1a:	f002 fb8f 	bl	800553c <HAL_DMA_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002e24:	f001 f8b4 	bl	8003f90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002e2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <HAL_ADC_MspInit+0x114>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2038      	movs	r0, #56	@ 0x38
 8002e3a:	f002 f8e9 	bl	8005010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 8002e3e:	2038      	movs	r0, #56	@ 0x38
 8002e40:	f002 f902 	bl	8005048 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	@ 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40012000 	.word	0x40012000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020800 	.word	0x40020800
 8002e58:	200003f8 	.word	0x200003f8
 8002e5c:	40026470 	.word	0x40026470

08002e60 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_CRC_Init+0x20>)
 8002e66:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <MX_CRC_Init+0x24>)
 8002e68:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_CRC_Init+0x20>)
 8002e6c:	f002 f8fa 	bl	8005064 <HAL_CRC_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002e76:	f001 f88b 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000458 	.word	0x20000458
 8002e84:	40023000 	.word	0x40023000

08002e88 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec4 <HAL_CRC_MspInit+0x3c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10d      	bne.n	8002eb6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_CRC_MspInit+0x40>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <HAL_CRC_MspInit+0x40>)
 8002ea4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <HAL_CRC_MspInit+0x40>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023000 	.word	0x40023000
 8002ec8:	40023800 	.word	0x40023800

08002ecc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002eda:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <MX_DAC_Init+0x4c>)
 8002edc:	4a0f      	ldr	r2, [pc, #60]	@ (8002f1c <MX_DAC_Init+0x50>)
 8002ede:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002ee0:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <MX_DAC_Init+0x4c>)
 8002ee2:	f002 f8db 	bl	800509c <HAL_DAC_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002eec:	f001 f850 	bl	8003f90 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002ef0:	2324      	movs	r3, #36	@ 0x24
 8002ef2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002ef8:	463b      	mov	r3, r7
 8002efa:	2210      	movs	r2, #16
 8002efc:	4619      	mov	r1, r3
 8002efe:	4806      	ldr	r0, [pc, #24]	@ (8002f18 <MX_DAC_Init+0x4c>)
 8002f00:	f002 fa2e 	bl	8005360 <HAL_DAC_ConfigChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002f0a:	f001 f841 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000460 	.word	0x20000460
 8002f1c:	40007400 	.word	0x40007400

08002f20 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a34      	ldr	r2, [pc, #208]	@ (8003010 <HAL_DAC_MspInit+0xf0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d161      	bne.n	8003006 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b33      	ldr	r3, [pc, #204]	@ (8003014 <HAL_DAC_MspInit+0xf4>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a32      	ldr	r2, [pc, #200]	@ (8003014 <HAL_DAC_MspInit+0xf4>)
 8002f4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b30      	ldr	r3, [pc, #192]	@ (8003014 <HAL_DAC_MspInit+0xf4>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b2c      	ldr	r3, [pc, #176]	@ (8003014 <HAL_DAC_MspInit+0xf4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	4a2b      	ldr	r2, [pc, #172]	@ (8003014 <HAL_DAC_MspInit+0xf4>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6e:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <HAL_DAC_MspInit+0xf4>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4822      	ldr	r0, [pc, #136]	@ (8003018 <HAL_DAC_MspInit+0xf8>)
 8002f8e:	f003 fa3f 	bl	8006410 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002f92:	4b22      	ldr	r3, [pc, #136]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002f94:	4a22      	ldr	r2, [pc, #136]	@ (8003020 <HAL_DAC_MspInit+0x100>)
 8002f96:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002f98:	4b20      	ldr	r3, [pc, #128]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002f9a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002f9e:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fb2:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fb4:	4b19      	ldr	r3, [pc, #100]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fba:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fbc:	4b17      	ldr	r3, [pc, #92]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fc2:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8002fc4:	4b15      	ldr	r3, [pc, #84]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fca:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002fd2:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8002fda:	4810      	ldr	r0, [pc, #64]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fdc:	f002 faae 	bl	800553c <HAL_DMA_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002fe6:	f000 ffd3 	bl	8003f90 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002fee:	60da      	str	r2, [r3, #12]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_DAC_MspInit+0xfc>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	210f      	movs	r1, #15
 8002ffa:	2036      	movs	r0, #54	@ 0x36
 8002ffc:	f002 f808 	bl	8005010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003000:	2036      	movs	r0, #54	@ 0x36
 8003002:	f002 f821 	bl	8005048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8003006:	bf00      	nop
 8003008:	3728      	adds	r7, #40	@ 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40007400 	.word	0x40007400
 8003014:	40023800 	.word	0x40023800
 8003018:	40020000 	.word	0x40020000
 800301c:	20000474 	.word	0x20000474
 8003020:	400260a0 	.word	0x400260a0

08003024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b17      	ldr	r3, [pc, #92]	@ (800308c <MX_DMA_Init+0x68>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	4a16      	ldr	r2, [pc, #88]	@ (800308c <MX_DMA_Init+0x68>)
 8003034:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003038:	6313      	str	r3, [r2, #48]	@ 0x30
 800303a:	4b14      	ldr	r3, [pc, #80]	@ (800308c <MX_DMA_Init+0x68>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <MX_DMA_Init+0x68>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	4a0f      	ldr	r2, [pc, #60]	@ (800308c <MX_DMA_Init+0x68>)
 8003050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003054:	6313      	str	r3, [r2, #48]	@ 0x30
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <MX_DMA_Init+0x68>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2011      	movs	r0, #17
 8003068:	f001 ffd2 	bl	8005010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800306c:	2011      	movs	r0, #17
 800306e:	f001 ffeb 	bl	8005048 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	203c      	movs	r0, #60	@ 0x3c
 8003078:	f001 ffca 	bl	8005010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800307c:	203c      	movs	r0, #60	@ 0x3c
 800307e:	f001 ffe3 	bl	8005048 <HAL_NVIC_EnableIRQ>

}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003094:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 8003096:	4a16      	ldr	r2, [pc, #88]	@ (80030f0 <MX_DMA2D_Init+0x60>)
 8003098:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800309a:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80030be:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80030c4:	4809      	ldr	r0, [pc, #36]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030c6:	f002 fe07 	bl	8005cd8 <HAL_DMA2D_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80030d0:	f000 ff5e 	bl	8003f90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80030d4:	2101      	movs	r1, #1
 80030d6:	4805      	ldr	r0, [pc, #20]	@ (80030ec <MX_DMA2D_Init+0x5c>)
 80030d8:	f003 f86c 	bl	80061b4 <HAL_DMA2D_ConfigLayer>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80030e2:	f000 ff55 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200004d4 	.word	0x200004d4
 80030f0:	4002b000 	.word	0x4002b000

080030f4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0e      	ldr	r2, [pc, #56]	@ (800313c <HAL_DMA2D_MspInit+0x48>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d115      	bne.n	8003132 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <HAL_DMA2D_MspInit+0x4c>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a0c      	ldr	r2, [pc, #48]	@ (8003140 <HAL_DMA2D_MspInit+0x4c>)
 8003110:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <HAL_DMA2D_MspInit+0x4c>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2105      	movs	r1, #5
 8003126:	205a      	movs	r0, #90	@ 0x5a
 8003128:	f001 ff72 	bl	8005010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800312c:	205a      	movs	r0, #90	@ 0x5a
 800312e:	f001 ff8b 	bl	8005048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	4002b000 	.word	0x4002b000
 8003140:	40023800 	.word	0x40023800

08003144 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
 8003158:	615a      	str	r2, [r3, #20]
 800315a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800315c:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <MX_FMC_Init+0x98>)
 800315e:	4a20      	ldr	r2, [pc, #128]	@ (80031e0 <MX_FMC_Init+0x9c>)
 8003160:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <MX_FMC_Init+0x98>)
 8003164:	2201      	movs	r2, #1
 8003166:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003168:	4b1c      	ldr	r3, [pc, #112]	@ (80031dc <MX_FMC_Init+0x98>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800316e:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <MX_FMC_Init+0x98>)
 8003170:	2204      	movs	r2, #4
 8003172:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <MX_FMC_Init+0x98>)
 8003176:	2210      	movs	r2, #16
 8003178:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800317a:	4b18      	ldr	r3, [pc, #96]	@ (80031dc <MX_FMC_Init+0x98>)
 800317c:	2240      	movs	r2, #64	@ 0x40
 800317e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003180:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <MX_FMC_Init+0x98>)
 8003182:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003186:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003188:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <MX_FMC_Init+0x98>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800318e:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <MX_FMC_Init+0x98>)
 8003190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003194:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003196:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <MX_FMC_Init+0x98>)
 8003198:	2200      	movs	r2, #0
 800319a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800319c:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <MX_FMC_Init+0x98>)
 800319e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80031a4:	2302      	movs	r3, #2
 80031a6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80031a8:	2307      	movs	r3, #7
 80031aa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80031ac:	2304      	movs	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80031b0:	2307      	movs	r3, #7
 80031b2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80031b4:	2303      	movs	r3, #3
 80031b6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80031b8:	2302      	movs	r3, #2
 80031ba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80031bc:	2302      	movs	r3, #2
 80031be:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4805      	ldr	r0, [pc, #20]	@ (80031dc <MX_FMC_Init+0x98>)
 80031c6:	f005 ff45 	bl	8009054 <HAL_SDRAM_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80031d0:	f000 fede 	bl	8003f90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80031d4:	bf00      	nop
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000514 	.word	0x20000514
 80031e0:	a0000140 	.word	0xa0000140

080031e4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80031f8:	4b3b      	ldr	r3, [pc, #236]	@ (80032e8 <HAL_FMC_MspInit+0x104>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d16f      	bne.n	80032e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003200:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_FMC_MspInit+0x104>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b38      	ldr	r3, [pc, #224]	@ (80032ec <HAL_FMC_MspInit+0x108>)
 800320c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320e:	4a37      	ldr	r2, [pc, #220]	@ (80032ec <HAL_FMC_MspInit+0x108>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6393      	str	r3, [r2, #56]	@ 0x38
 8003216:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_FMC_MspInit+0x108>)
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003222:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003226:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003234:	230c      	movs	r3, #12
 8003236:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	482c      	ldr	r0, [pc, #176]	@ (80032f0 <HAL_FMC_MspInit+0x10c>)
 800323e:	f003 f8e7 	bl	8006410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003242:	2301      	movs	r3, #1
 8003244:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003252:	230c      	movs	r3, #12
 8003254:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003256:	1d3b      	adds	r3, r7, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4826      	ldr	r0, [pc, #152]	@ (80032f4 <HAL_FMC_MspInit+0x110>)
 800325c:	f003 f8d8 	bl	8006410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003260:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003264:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003272:	230c      	movs	r3, #12
 8003274:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	4619      	mov	r1, r3
 800327a:	481f      	ldr	r0, [pc, #124]	@ (80032f8 <HAL_FMC_MspInit+0x114>)
 800327c:	f003 f8c8 	bl	8006410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003280:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003284:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328e:	2303      	movs	r3, #3
 8003290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003292:	230c      	movs	r3, #12
 8003294:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4818      	ldr	r0, [pc, #96]	@ (80032fc <HAL_FMC_MspInit+0x118>)
 800329c:	f003 f8b8 	bl	8006410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80032a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80032a4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032b2:	230c      	movs	r3, #12
 80032b4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4811      	ldr	r0, [pc, #68]	@ (8003300 <HAL_FMC_MspInit+0x11c>)
 80032bc:	f003 f8a8 	bl	8006410 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80032c0:	2360      	movs	r3, #96	@ 0x60
 80032c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032cc:	2303      	movs	r3, #3
 80032ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032d0:	230c      	movs	r3, #12
 80032d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	4619      	mov	r1, r3
 80032d8:	480a      	ldr	r0, [pc, #40]	@ (8003304 <HAL_FMC_MspInit+0x120>)
 80032da:	f003 f899 	bl	8006410 <HAL_GPIO_Init>
 80032de:	e000      	b.n	80032e2 <HAL_FMC_MspInit+0xfe>
    return;
 80032e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000548 	.word	0x20000548
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40021400 	.word	0x40021400
 80032f4:	40020800 	.word	0x40020800
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40021000 	.word	0x40021000
 8003300:	40020c00 	.word	0x40020c00
 8003304:	40020400 	.word	0x40020400

08003308 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003310:	f7ff ff68 	bl	80031e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <MX_GPIO_Init>:
     PB15   ------> USB_OTG_HS_DP
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	@ 0x38
 8003320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	609a      	str	r2, [r3, #8]
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
 8003336:	4b99      	ldr	r3, [pc, #612]	@ (800359c <MX_GPIO_Init+0x280>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	4a98      	ldr	r2, [pc, #608]	@ (800359c <MX_GPIO_Init+0x280>)
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	6313      	str	r3, [r2, #48]	@ 0x30
 8003342:	4b96      	ldr	r3, [pc, #600]	@ (800359c <MX_GPIO_Init+0x280>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	4b92      	ldr	r3, [pc, #584]	@ (800359c <MX_GPIO_Init+0x280>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	4a91      	ldr	r2, [pc, #580]	@ (800359c <MX_GPIO_Init+0x280>)
 8003358:	f043 0320 	orr.w	r3, r3, #32
 800335c:	6313      	str	r3, [r2, #48]	@ 0x30
 800335e:	4b8f      	ldr	r3, [pc, #572]	@ (800359c <MX_GPIO_Init+0x280>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	4b8b      	ldr	r3, [pc, #556]	@ (800359c <MX_GPIO_Init+0x280>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	4a8a      	ldr	r2, [pc, #552]	@ (800359c <MX_GPIO_Init+0x280>)
 8003374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003378:	6313      	str	r3, [r2, #48]	@ 0x30
 800337a:	4b88      	ldr	r3, [pc, #544]	@ (800359c <MX_GPIO_Init+0x280>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	4b84      	ldr	r3, [pc, #528]	@ (800359c <MX_GPIO_Init+0x280>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a83      	ldr	r2, [pc, #524]	@ (800359c <MX_GPIO_Init+0x280>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b81      	ldr	r3, [pc, #516]	@ (800359c <MX_GPIO_Init+0x280>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	4b7d      	ldr	r3, [pc, #500]	@ (800359c <MX_GPIO_Init+0x280>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	4a7c      	ldr	r2, [pc, #496]	@ (800359c <MX_GPIO_Init+0x280>)
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b2:	4b7a      	ldr	r3, [pc, #488]	@ (800359c <MX_GPIO_Init+0x280>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b76      	ldr	r3, [pc, #472]	@ (800359c <MX_GPIO_Init+0x280>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	4a75      	ldr	r2, [pc, #468]	@ (800359c <MX_GPIO_Init+0x280>)
 80033c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ce:	4b73      	ldr	r3, [pc, #460]	@ (800359c <MX_GPIO_Init+0x280>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	4b6f      	ldr	r3, [pc, #444]	@ (800359c <MX_GPIO_Init+0x280>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a6e      	ldr	r2, [pc, #440]	@ (800359c <MX_GPIO_Init+0x280>)
 80033e4:	f043 0310 	orr.w	r3, r3, #16
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b6c      	ldr	r3, [pc, #432]	@ (800359c <MX_GPIO_Init+0x280>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	4b68      	ldr	r3, [pc, #416]	@ (800359c <MX_GPIO_Init+0x280>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	4a67      	ldr	r2, [pc, #412]	@ (800359c <MX_GPIO_Init+0x280>)
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	6313      	str	r3, [r2, #48]	@ 0x30
 8003406:	4b65      	ldr	r3, [pc, #404]	@ (800359c <MX_GPIO_Init+0x280>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003412:	2200      	movs	r2, #0
 8003414:	2116      	movs	r1, #22
 8003416:	4862      	ldr	r0, [pc, #392]	@ (80035a0 <MX_GPIO_Init+0x284>)
 8003418:	f003 fab2 	bl	8006980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	4860      	ldr	r0, [pc, #384]	@ (80035a4 <MX_GPIO_Init+0x288>)
 8003422:	f003 faad 	bl	8006980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003426:	2200      	movs	r2, #0
 8003428:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800342c:	485e      	ldr	r0, [pc, #376]	@ (80035a8 <MX_GPIO_Init+0x28c>)
 800342e:	f003 faa7 	bl	8006980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003432:	2200      	movs	r2, #0
 8003434:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003438:	485c      	ldr	r0, [pc, #368]	@ (80035ac <MX_GPIO_Init+0x290>)
 800343a:	f003 faa1 	bl	8006980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800343e:	2316      	movs	r3, #22
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003442:	2301      	movs	r3, #1
 8003444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800344e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003452:	4619      	mov	r1, r3
 8003454:	4852      	ldr	r0, [pc, #328]	@ (80035a0 <MX_GPIO_Init+0x284>)
 8003456:	f002 ffdb 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 800345a:	2307      	movs	r3, #7
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800345e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800346c:	4619      	mov	r1, r3
 800346e:	484d      	ldr	r0, [pc, #308]	@ (80035a4 <MX_GPIO_Init+0x288>)
 8003470:	f002 ffce 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003474:	2380      	movs	r3, #128	@ 0x80
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003478:	2301      	movs	r3, #1
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003488:	4619      	mov	r1, r3
 800348a:	4846      	ldr	r0, [pc, #280]	@ (80035a4 <MX_GPIO_Init+0x288>)
 800348c:	f002 ffc0 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003490:	2320      	movs	r3, #32
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003494:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800349e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a2:	4619      	mov	r1, r3
 80034a4:	483e      	ldr	r0, [pc, #248]	@ (80035a0 <MX_GPIO_Init+0x284>)
 80034a6:	f002 ffb3 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80034aa:	2304      	movs	r3, #4
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ba:	4619      	mov	r1, r3
 80034bc:	483c      	ldr	r0, [pc, #240]	@ (80035b0 <MX_GPIO_Init+0x294>)
 80034be:	f002 ffa7 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80034c2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80034d4:	230c      	movs	r3, #12
 80034d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034dc:	4619      	mov	r1, r3
 80034de:	4834      	ldr	r0, [pc, #208]	@ (80035b0 <MX_GPIO_Init+0x294>)
 80034e0:	f002 ff96 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80034e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ea:	2300      	movs	r3, #0
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034f6:	4619      	mov	r1, r3
 80034f8:	482d      	ldr	r0, [pc, #180]	@ (80035b0 <MX_GPIO_Init+0x294>)
 80034fa:	f002 ff89 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80034fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003504:	2300      	movs	r3, #0
 8003506:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800350c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003510:	4619      	mov	r1, r3
 8003512:	4825      	ldr	r0, [pc, #148]	@ (80035a8 <MX_GPIO_Init+0x28c>)
 8003514:	f002 ff7c 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003518:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351e:	2301      	movs	r3, #1
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2300      	movs	r3, #0
 8003528:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800352a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352e:	4619      	mov	r1, r3
 8003530:	481d      	ldr	r0, [pc, #116]	@ (80035a8 <MX_GPIO_Init+0x28c>)
 8003532:	f002 ff6d 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003536:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2302      	movs	r3, #2
 800353e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003544:	2303      	movs	r3, #3
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003548:	2307      	movs	r3, #7
 800354a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003550:	4619      	mov	r1, r3
 8003552:	4814      	ldr	r0, [pc, #80]	@ (80035a4 <MX_GPIO_Init+0x288>)
 8003554:	f002 ff5c 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800355e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800356c:	4619      	mov	r1, r3
 800356e:	480d      	ldr	r0, [pc, #52]	@ (80035a4 <MX_GPIO_Init+0x288>)
 8003570:	f002 ff4e 	bl	8006410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003574:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357a:	2301      	movs	r3, #1
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	2300      	movs	r3, #0
 8003584:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800358a:	4619      	mov	r1, r3
 800358c:	4807      	ldr	r0, [pc, #28]	@ (80035ac <MX_GPIO_Init+0x290>)
 800358e:	f002 ff3f 	bl	8006410 <HAL_GPIO_Init>

}
 8003592:	bf00      	nop
 8003594:	3738      	adds	r7, #56	@ 0x38
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40020800 	.word	0x40020800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40021800 	.word	0x40021800
 80035b0:	40020400 	.word	0x40020400

080035b4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035ba:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <MX_I2C3_Init+0x78>)
 80035bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <MX_I2C3_Init+0x7c>)
 80035c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035c4:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035d0:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035da:	2200      	movs	r2, #0
 80035dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80035f0:	480d      	ldr	r0, [pc, #52]	@ (8003628 <MX_I2C3_Init+0x74>)
 80035f2:	f003 f9f9 	bl	80069e8 <HAL_I2C_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80035fc:	f000 fcc8 	bl	8003f90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003600:	2100      	movs	r1, #0
 8003602:	4809      	ldr	r0, [pc, #36]	@ (8003628 <MX_I2C3_Init+0x74>)
 8003604:	f004 fa52 	bl	8007aac <HAL_I2CEx_ConfigAnalogFilter>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800360e:	f000 fcbf 	bl	8003f90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003612:	2100      	movs	r1, #0
 8003614:	4804      	ldr	r0, [pc, #16]	@ (8003628 <MX_I2C3_Init+0x74>)
 8003616:	f004 fa85 	bl	8007b24 <HAL_I2CEx_ConfigDigitalFilter>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003620:	f000 fcb6 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2000054c 	.word	0x2000054c
 800362c:	40005c00 	.word	0x40005c00
 8003630:	000186a0 	.word	0x000186a0

08003634 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	@ 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a29      	ldr	r2, [pc, #164]	@ (80036f8 <HAL_I2C_MspInit+0xc4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d14b      	bne.n	80036ee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	4b28      	ldr	r3, [pc, #160]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	4a27      	ldr	r2, [pc, #156]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6313      	str	r3, [r2, #48]	@ 0x30
 8003666:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6313      	str	r3, [r2, #48]	@ 0x30
 8003682:	4b1e      	ldr	r3, [pc, #120]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800368e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003694:	2312      	movs	r3, #18
 8003696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036a0:	2304      	movs	r3, #4
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4619      	mov	r1, r3
 80036aa:	4815      	ldr	r0, [pc, #84]	@ (8003700 <HAL_I2C_MspInit+0xcc>)
 80036ac:	f002 feb0 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80036b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036b6:	2312      	movs	r3, #18
 80036b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036c2:	2304      	movs	r3, #4
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4619      	mov	r1, r3
 80036cc:	480d      	ldr	r0, [pc, #52]	@ (8003704 <HAL_I2C_MspInit+0xd0>)
 80036ce:	f002 fe9f 	bl	8006410 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	4a08      	ldr	r2, [pc, #32]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 80036dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_I2C_MspInit+0xc8>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80036ee:	bf00      	nop
 80036f0:	3728      	adds	r7, #40	@ 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40005c00 	.word	0x40005c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020800 	.word	0x40020800
 8003704:	40020000 	.word	0x40020000

08003708 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0b      	ldr	r2, [pc, #44]	@ (8003744 <HAL_I2C_MspDeInit+0x3c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10f      	bne.n	800373a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800371a:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <HAL_I2C_MspDeInit+0x40>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <HAL_I2C_MspDeInit+0x40>)
 8003720:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003724:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8003726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800372a:	4808      	ldr	r0, [pc, #32]	@ (800374c <HAL_I2C_MspDeInit+0x44>)
 800372c:	f003 f81c 	bl	8006768 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003730:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003734:	4806      	ldr	r0, [pc, #24]	@ (8003750 <HAL_I2C_MspDeInit+0x48>)
 8003736:	f003 f817 	bl	8006768 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40005c00 	.word	0x40005c00
 8003748:	40023800 	.word	0x40023800
 800374c:	40020800 	.word	0x40020800
 8003750:	40020000 	.word	0x40020000

08003754 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	@ 0x38
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2234      	movs	r2, #52	@ 0x34
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f007 f927 	bl	800a9b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003766:	4b39      	ldr	r3, [pc, #228]	@ (800384c <MX_LTDC_Init+0xf8>)
 8003768:	4a39      	ldr	r2, [pc, #228]	@ (8003850 <MX_LTDC_Init+0xfc>)
 800376a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800376c:	4b37      	ldr	r3, [pc, #220]	@ (800384c <MX_LTDC_Init+0xf8>)
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003772:	4b36      	ldr	r3, [pc, #216]	@ (800384c <MX_LTDC_Init+0xf8>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003778:	4b34      	ldr	r3, [pc, #208]	@ (800384c <MX_LTDC_Init+0xf8>)
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800377e:	4b33      	ldr	r3, [pc, #204]	@ (800384c <MX_LTDC_Init+0xf8>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <MX_LTDC_Init+0xf8>)
 8003786:	2209      	movs	r2, #9
 8003788:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800378a:	4b30      	ldr	r3, [pc, #192]	@ (800384c <MX_LTDC_Init+0xf8>)
 800378c:	2201      	movs	r2, #1
 800378e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8003790:	4b2e      	ldr	r3, [pc, #184]	@ (800384c <MX_LTDC_Init+0xf8>)
 8003792:	221d      	movs	r2, #29
 8003794:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8003796:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <MX_LTDC_Init+0xf8>)
 8003798:	2203      	movs	r2, #3
 800379a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800379c:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <MX_LTDC_Init+0xf8>)
 800379e:	f240 120d 	movw	r2, #269	@ 0x10d
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80037a4:	4b29      	ldr	r3, [pc, #164]	@ (800384c <MX_LTDC_Init+0xf8>)
 80037a6:	f240 1243 	movw	r2, #323	@ 0x143
 80037aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80037ac:	4b27      	ldr	r3, [pc, #156]	@ (800384c <MX_LTDC_Init+0xf8>)
 80037ae:	f240 1217 	movw	r2, #279	@ 0x117
 80037b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <MX_LTDC_Init+0xf8>)
 80037b6:	f240 1247 	movw	r2, #327	@ 0x147
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80037bc:	4b23      	ldr	r3, [pc, #140]	@ (800384c <MX_LTDC_Init+0xf8>)
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <MX_LTDC_Init+0xf8>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80037cc:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <MX_LTDC_Init+0xf8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80037d4:	481d      	ldr	r0, [pc, #116]	@ (800384c <MX_LTDC_Init+0xf8>)
 80037d6:	f004 f9e5 	bl	8007ba4 <HAL_LTDC_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80037e0:	f000 fbd6 	bl	8003f90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80037e8:	23f0      	movs	r3, #240	@ 0xf0
 80037ea:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80037f0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80037f4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80037f6:	2302      	movs	r3, #2
 80037f8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80037fa:	23ff      	movs	r3, #255	@ 0xff
 80037fc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003802:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003806:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003808:	2307      	movs	r3, #7
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800380c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8003812:	23f0      	movs	r3, #240	@ 0xf0
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8003816:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800381a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	2200      	movs	r2, #0
 8003832:	4619      	mov	r1, r3
 8003834:	4805      	ldr	r0, [pc, #20]	@ (800384c <MX_LTDC_Init+0xf8>)
 8003836:	f004 fb47 	bl	8007ec8 <HAL_LTDC_ConfigLayer>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8003840:	f000 fba6 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003844:	bf00      	nop
 8003846:	3738      	adds	r7, #56	@ 0x38
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200005a0 	.word	0x200005a0
 8003850:	40016800 	.word	0x40016800

08003854 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b09a      	sub	sp, #104	@ 0x68
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800386c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003870:	2230      	movs	r2, #48	@ 0x30
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f007 f89d 	bl	800a9b4 <memset>
  if(ltdcHandle->Instance==LTDC)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a85      	ldr	r2, [pc, #532]	@ (8003a94 <HAL_LTDC_MspInit+0x240>)
 8003880:	4293      	cmp	r3, r2
 8003882:	f040 8103 	bne.w	8003a8c <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003886:	2308      	movs	r3, #8
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800388a:	233c      	movs	r3, #60	@ 0x3c
 800388c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800388e:	2305      	movs	r3, #5
 8003890:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003892:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800389c:	4618      	mov	r0, r3
 800389e:	f005 fa19 	bl	8008cd4 <HAL_RCCEx_PeriphCLKConfig>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80038a8:	f000 fb72 	bl	8003f90 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80038ac:	2300      	movs	r3, #0
 80038ae:	623b      	str	r3, [r7, #32]
 80038b0:	4b79      	ldr	r3, [pc, #484]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b4:	4a78      	ldr	r2, [pc, #480]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80038bc:	4b76      	ldr	r3, [pc, #472]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	4b72      	ldr	r3, [pc, #456]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	4a71      	ldr	r2, [pc, #452]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038d2:	f043 0320 	orr.w	r3, r3, #32
 80038d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f4:	4b68      	ldr	r3, [pc, #416]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	4b64      	ldr	r3, [pc, #400]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	4a63      	ldr	r2, [pc, #396]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	4b5d      	ldr	r3, [pc, #372]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	4a5c      	ldr	r2, [pc, #368]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 8003926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800392a:	6313      	str	r3, [r2, #48]	@ 0x30
 800392c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	4b56      	ldr	r3, [pc, #344]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	4a55      	ldr	r2, [pc, #340]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6313      	str	r3, [r2, #48]	@ 0x30
 8003948:	4b53      	ldr	r3, [pc, #332]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	4b4f      	ldr	r3, [pc, #316]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 800395e:	f043 0308 	orr.w	r3, r3, #8
 8003962:	6313      	str	r3, [r2, #48]	@ 0x30
 8003964:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <HAL_LTDC_MspInit+0x244>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003974:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	2300      	movs	r3, #0
 800397c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397e:	2300      	movs	r3, #0
 8003980:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003982:	230e      	movs	r3, #14
 8003984:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003986:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800398a:	4619      	mov	r1, r3
 800398c:	4843      	ldr	r0, [pc, #268]	@ (8003a9c <HAL_LTDC_MspInit+0x248>)
 800398e:	f002 fd3f 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003992:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003996:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a0:	2300      	movs	r3, #0
 80039a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039a4:	230e      	movs	r3, #14
 80039a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039ac:	4619      	mov	r1, r3
 80039ae:	483c      	ldr	r0, [pc, #240]	@ (8003aa0 <HAL_LTDC_MspInit+0x24c>)
 80039b0:	f002 fd2e 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80039b4:	2303      	movs	r3, #3
 80039b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80039c4:	2309      	movs	r3, #9
 80039c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039cc:	4619      	mov	r1, r3
 80039ce:	4835      	ldr	r0, [pc, #212]	@ (8003aa4 <HAL_LTDC_MspInit+0x250>)
 80039d0:	f002 fd1e 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80039d4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80039d8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039e6:	230e      	movs	r3, #14
 80039e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039ee:	4619      	mov	r1, r3
 80039f0:	482c      	ldr	r0, [pc, #176]	@ (8003aa4 <HAL_LTDC_MspInit+0x250>)
 80039f2:	f002 fd0d 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80039f6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80039fa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a08:	230e      	movs	r3, #14
 8003a0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a10:	4619      	mov	r1, r3
 8003a12:	4825      	ldr	r0, [pc, #148]	@ (8003aa8 <HAL_LTDC_MspInit+0x254>)
 8003a14:	f002 fcfc 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003a18:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003a1c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a2a:	230e      	movs	r3, #14
 8003a2c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a32:	4619      	mov	r1, r3
 8003a34:	481d      	ldr	r0, [pc, #116]	@ (8003aac <HAL_LTDC_MspInit+0x258>)
 8003a36:	f002 fceb 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003a3a:	2348      	movs	r3, #72	@ 0x48
 8003a3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	2300      	movs	r3, #0
 8003a48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a4a:	230e      	movs	r3, #14
 8003a4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a52:	4619      	mov	r1, r3
 8003a54:	4816      	ldr	r0, [pc, #88]	@ (8003ab0 <HAL_LTDC_MspInit+0x25c>)
 8003a56:	f002 fcdb 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003a5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a5e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a6c:	2309      	movs	r3, #9
 8003a6e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a74:	4619      	mov	r1, r3
 8003a76:	480c      	ldr	r0, [pc, #48]	@ (8003aa8 <HAL_LTDC_MspInit+0x254>)
 8003a78:	f002 fcca 	bl	8006410 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2105      	movs	r1, #5
 8003a80:	2058      	movs	r0, #88	@ 0x58
 8003a82:	f001 fac5 	bl	8005010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a86:	2058      	movs	r0, #88	@ 0x58
 8003a88:	f001 fade 	bl	8005048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3768      	adds	r7, #104	@ 0x68
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40016800 	.word	0x40016800
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40021400 	.word	0x40021400
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	40020400 	.word	0x40020400
 8003aa8:	40021800 	.word	0x40021800
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00

08003ab4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Callback que se llama al completarse la conversión del ADC */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, &adc_data, BUFFER_SIZE, DAC_ALIGN_12B_R);
    if (hadc->Instance == ADC1) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a06      	ldr	r2, [pc, #24]	@ (8003adc <HAL_ADC_ConvCpltCallback+0x28>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d106      	bne.n	8003ad4 <HAL_ADC_ConvCpltCallback+0x20>
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003aca:	4805      	ldr	r0, [pc, #20]	@ (8003ae0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8003acc:	f002 ff71 	bl	80069b2 <HAL_GPIO_TogglePin>
        //Procesa los datos del buffer
	    //Graficar los datos del ADC en la pantalla LCD
    	Low_Pass_Filter();
 8003ad0:	f000 f80a 	bl	8003ae8 <Low_Pass_Filter>
    	//print_Sine_Wave();
    }
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40012000 	.word	0x40012000
 8003ae0:	40021800 	.word	0x40021800
 8003ae4:	00000000 	.word	0x00000000

08003ae8 <Low_Pass_Filter>:

void Low_Pass_Filter(void){
 8003ae8:	b5b0      	push	{r4, r5, r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
	for (int n = 0; n < BUFFER_SIZE; n++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	e10a      	b.n	8003d0a <Low_Pass_Filter+0x222>
		else{
			dac_data[n] = (adc_data[n]+adc_data[n-1]+yn_1*dac_data[n-1])*G_i ;
		}
	    */
		/*ORDEN 2*/
		if(n==0){
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d14c      	bne.n	8003b94 <Low_Pass_Filter+0xac>
			dac_data[n] = (xn_0*adc_data[n]+xn_1*prev_adc_data[BUFFER_SIZE-1]+xn_2*prev_adc_data[BUFFER_SIZE-2]+yn_1*prev_dac_data[BUFFER_SIZE-1]+yn_2*prev_dac_data[BUFFER_SIZE-2])*G_i ;
 8003afa:	4a8f      	ldr	r2, [pc, #572]	@ (8003d38 <Low_Pass_Filter+0x250>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b02:	4b8e      	ldr	r3, [pc, #568]	@ (8003d3c <Low_Pass_Filter+0x254>)
 8003b04:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	441a      	add	r2, r3
 8003b0c:	4b8b      	ldr	r3, [pc, #556]	@ (8003d3c <Low_Pass_Filter+0x254>)
 8003b0e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8003b12:	4413      	add	r3, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fc fcfd 	bl	8000514 <__aeabi_ui2d>
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	4b88      	ldr	r3, [pc, #544]	@ (8003d40 <Low_Pass_Filter+0x258>)
 8003b20:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fcf5 	bl	8000514 <__aeabi_ui2d>
 8003b2a:	a37d      	add	r3, pc, #500	@ (adr r3, 8003d20 <Low_Pass_Filter+0x238>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f7fc fd6a 	bl	8000608 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4620      	mov	r0, r4
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	f7fc fbae 	bl	800029c <__adddf3>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	461d      	mov	r5, r3
 8003b48:	4b7d      	ldr	r3, [pc, #500]	@ (8003d40 <Low_Pass_Filter+0x258>)
 8003b4a:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fce0 	bl	8000514 <__aeabi_ui2d>
 8003b54:	a374      	add	r3, pc, #464	@ (adr r3, 8003d28 <Low_Pass_Filter+0x240>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fd55 	bl	8000608 <__aeabi_dmul>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4620      	mov	r0, r4
 8003b64:	4629      	mov	r1, r5
 8003b66:	f7fc fb99 	bl	800029c <__adddf3>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	a36f      	add	r3, pc, #444	@ (adr r3, 8003d30 <Low_Pass_Filter+0x248>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fd46 	bl	8000608 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	f7fc ff52 	bl	8000a2c <__aeabi_d2uiz>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	496e      	ldr	r1, [pc, #440]	@ (8003d44 <Low_Pass_Filter+0x25c>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b92:	e0a7      	b.n	8003ce4 <Low_Pass_Filter+0x1fc>
		}

		else if(n==1){
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d150      	bne.n	8003c3c <Low_Pass_Filter+0x154>
			dac_data[n] = (xn_0*adc_data[n]+xn_1*adc_data[n-1]+xn_2*prev_adc_data[BUFFER_SIZE-2]+yn_1*dac_data[n-1]+yn_2*prev_dac_data[BUFFER_SIZE-2])*G_i ;
 8003b9a:	4a67      	ldr	r2, [pc, #412]	@ (8003d38 <Low_Pass_Filter+0x250>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	4964      	ldr	r1, [pc, #400]	@ (8003d38 <Low_Pass_Filter+0x250>)
 8003ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	441a      	add	r2, r3
 8003bb0:	4b62      	ldr	r3, [pc, #392]	@ (8003d3c <Low_Pass_Filter+0x254>)
 8003bb2:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8003bb6:	4413      	add	r3, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fcab 	bl	8000514 <__aeabi_ui2d>
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	460d      	mov	r5, r1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003d44 <Low_Pass_Filter+0x25c>)
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc fca1 	bl	8000514 <__aeabi_ui2d>
 8003bd2:	a353      	add	r3, pc, #332	@ (adr r3, 8003d20 <Low_Pass_Filter+0x238>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fd16 	bl	8000608 <__aeabi_dmul>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4620      	mov	r0, r4
 8003be2:	4629      	mov	r1, r5
 8003be4:	f7fc fb5a 	bl	800029c <__adddf3>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	4b53      	ldr	r3, [pc, #332]	@ (8003d40 <Low_Pass_Filter+0x258>)
 8003bf2:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fc8c 	bl	8000514 <__aeabi_ui2d>
 8003bfc:	a34a      	add	r3, pc, #296	@ (adr r3, 8003d28 <Low_Pass_Filter+0x240>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fd01 	bl	8000608 <__aeabi_dmul>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f7fc fb45 	bl	800029c <__adddf3>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	a345      	add	r3, pc, #276	@ (adr r3, 8003d30 <Low_Pass_Filter+0x248>)
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f7fc fcf2 	bl	8000608 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7fc fefe 	bl	8000a2c <__aeabi_d2uiz>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4944      	ldr	r1, [pc, #272]	@ (8003d44 <Low_Pass_Filter+0x25c>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003c3a:	e053      	b.n	8003ce4 <Low_Pass_Filter+0x1fc>
		}
		else{
			dac_data[n] = (xn_0*adc_data[n]+xn_1*adc_data[n-1]+xn_2*adc_data[n-2]+yn_1*dac_data[n-1]+yn_2*dac_data[n-2])*G_i ;
 8003c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d38 <Low_Pass_Filter+0x250>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	493b      	ldr	r1, [pc, #236]	@ (8003d38 <Low_Pass_Filter+0x250>)
 8003c4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3b02      	subs	r3, #2
 8003c56:	4938      	ldr	r1, [pc, #224]	@ (8003d38 <Low_Pass_Filter+0x250>)
 8003c58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fc58 	bl	8000514 <__aeabi_ui2d>
 8003c64:	4604      	mov	r4, r0
 8003c66:	460d      	mov	r5, r1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	4a35      	ldr	r2, [pc, #212]	@ (8003d44 <Low_Pass_Filter+0x25c>)
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fc4e 	bl	8000514 <__aeabi_ui2d>
 8003c78:	a329      	add	r3, pc, #164	@ (adr r3, 8003d20 <Low_Pass_Filter+0x238>)
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f7fc fcc3 	bl	8000608 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc fb07 	bl	800029c <__adddf3>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4614      	mov	r4, r2
 8003c94:	461d      	mov	r5, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3b02      	subs	r3, #2
 8003c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d44 <Low_Pass_Filter+0x25c>)
 8003c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fc37 	bl	8000514 <__aeabi_ui2d>
 8003ca6:	a320      	add	r3, pc, #128	@ (adr r3, 8003d28 <Low_Pass_Filter+0x240>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fcac 	bl	8000608 <__aeabi_dmul>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	f7fc faf0 	bl	800029c <__adddf3>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	a31a      	add	r3, pc, #104	@ (adr r3, 8003d30 <Low_Pass_Filter+0x248>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f7fc fc9d 	bl	8000608 <__aeabi_dmul>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7fc fea9 	bl	8000a2c <__aeabi_d2uiz>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4919      	ldr	r1, [pc, #100]	@ (8003d44 <Low_Pass_Filter+0x25c>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		prev_adc_data[n] = adc_data[n];
 8003ce4:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <Low_Pass_Filter+0x250>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cec:	4913      	ldr	r1, [pc, #76]	@ (8003d3c <Low_Pass_Filter+0x254>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    prev_dac_data[n] = dac_data[n];
 8003cf4:	4a13      	ldr	r2, [pc, #76]	@ (8003d44 <Low_Pass_Filter+0x25c>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cfc:	4910      	ldr	r1, [pc, #64]	@ (8003d40 <Low_Pass_Filter+0x258>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int n = 0; n < BUFFER_SIZE; n++)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3301      	adds	r3, #1
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d10:	f6ff aef0 	blt.w	8003af4 <Low_Pass_Filter+0xc>
	}
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	b0f27bb3 	.word	0xb0f27bb3
 8003d24:	3fff6b50 	.word	0x3fff6b50
 8003d28:	63886595 	.word	0x63886595
 8003d2c:	bfeedc5d 	.word	0xbfeedc5d
 8003d30:	9999999a 	.word	0x9999999a
 8003d34:	3fc99999 	.word	0x3fc99999
 8003d38:	20000b74 	.word	0x20000b74
 8003d3c:	20001574 	.word	0x20001574
 8003d40:	20001074 	.word	0x20001074
 8003d44:	20000674 	.word	0x20000674

08003d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d4e:	f000 fc29 	bl	80045a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d52:	f000 f89b 	bl	8003e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d56:	f7ff fae1 	bl	800331c <MX_GPIO_Init>
  MX_DMA_Init();
 8003d5a:	f7ff f963 	bl	8003024 <MX_DMA_Init>
  MX_CRC_Init();
 8003d5e:	f7ff f87f 	bl	8002e60 <MX_CRC_Init>
  MX_DMA2D_Init();
 8003d62:	f7ff f995 	bl	8003090 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003d66:	f7ff f9ed 	bl	8003144 <MX_FMC_Init>
  MX_I2C3_Init();
 8003d6a:	f7ff fc23 	bl	80035b4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003d6e:	f7ff fcf1 	bl	8003754 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003d72:	f000 f917 	bl	8003fa4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003d76:	f000 fb13 	bl	80043a0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003d7a:	f7fe ff8f 	bl	8002c9c <MX_ADC1_Init>
  MX_TIM2_Init();
 8003d7e:	f000 fb5f 	bl	8004440 <MX_TIM2_Init>
  MX_DAC_Init();
 8003d82:	f7ff f8a3 	bl	8002ecc <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	BSP_SDRAM_Init();
 8003d86:	f7fe fd85 	bl	8002894 <BSP_SDRAM_Init>
	BSP_LCD_Init();
 8003d8a:	f7fd ff99 	bl	8001cc0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8003d8e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003d92:	2000      	movs	r0, #0
 8003d94:	f7fe f816 	bl	8001dc4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8003d98:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7fe f811 	bl	8001dc4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8003da2:	2001      	movs	r0, #1
 8003da4:	f7fe f872 	bl	8001e8c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8003da8:	f7fe fb1c 	bl	80023e4 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8003dac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003db0:	f7fe f8c8 	bl	8001f44 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003db4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003db8:	f7fe f890 	bl	8001edc <BSP_LCD_SetBackColor>
	BSP_TS_Init(240,320);
 8003dbc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003dc0:	20f0      	movs	r0, #240	@ 0xf0
 8003dc2:	f7fe ff31 	bl	8002c28 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	BSP_LCD_SetFont(&Font16);
 8003dc6:	4826      	ldr	r0, [pc, #152]	@ (8003e60 <main+0x118>)
 8003dc8:	f7fe f8a2 	bl	8001f10 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f7fe f86c 	bl	8001eac <BSP_LCD_SetTextColor>
	sprintf(texto,"%d KHz",FRECUENCIA);
 8003dd4:	2218      	movs	r2, #24
 8003dd6:	4923      	ldr	r1, [pc, #140]	@ (8003e64 <main+0x11c>)
 8003dd8:	4823      	ldr	r0, [pc, #140]	@ (8003e68 <main+0x120>)
 8003dda:	f006 fdcb 	bl	800a974 <siprintf>
	BSP_LCD_DisplayStringAt(0, 224, texto, CENTER_MODE, 0);
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2301      	movs	r3, #1
 8003de4:	4a20      	ldr	r2, [pc, #128]	@ (8003e68 <main+0x120>)
 8003de6:	21e0      	movs	r1, #224	@ 0xe0
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fe f91d 	bl	8002028 <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(14,(uint8_t*)"24KHz", 0);
	BSP_LCD_DisplayStringAt(0, 0, "Input Signal", CENTER_MODE, 0);
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2301      	movs	r3, #1
 8003df4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e6c <main+0x124>)
 8003df6:	2100      	movs	r1, #0
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f7fe f915 	bl	8002028 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 0, "Voltage", CENTER_MODE, 1);
 8003dfe:	2301      	movs	r3, #1
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2301      	movs	r3, #1
 8003e04:	4a1a      	ldr	r2, [pc, #104]	@ (8003e70 <main+0x128>)
 8003e06:	2100      	movs	r1, #0
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7fe f90d 	bl	8002028 <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(9,(uint8_t*)" 0123456789");
	BSP_LCD_DrawHLine(0, 11, 240);
 8003e0e:	22f0      	movs	r2, #240	@ 0xf0
 8003e10:	210b      	movs	r1, #11
 8003e12:	2000      	movs	r0, #0
 8003e14:	f7fe fa66 	bl	80022e4 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(11, 0, 320);
 8003e18:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	200b      	movs	r0, #11
 8003e20:	f7fe fa9e 	bl	8002360 <BSP_LCD_DrawVLine>
	contador=0;
 8003e24:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <main+0x12c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	801a      	strh	r2, [r3, #0]
	//Generate_Sine_Wave(dac_data, BUFFER_SIZE, ADC_RES/2); // 2048 para señal de 12 bits (amplitud)
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, &dac_data, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003e32:	4a11      	ldr	r2, [pc, #68]	@ (8003e78 <main+0x130>)
 8003e34:	2110      	movs	r1, #16
 8003e36:	4811      	ldr	r0, [pc, #68]	@ (8003e7c <main+0x134>)
 8003e38:	f001 f952 	bl	80050e0 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8003e3c:	4810      	ldr	r0, [pc, #64]	@ (8003e80 <main+0x138>)
 8003e3e:	f005 fff1 	bl	8009e24 <HAL_TIM_Base_Start>

	  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, BUFFER_SIZE) != HAL_OK)
 8003e42:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e46:	490f      	ldr	r1, [pc, #60]	@ (8003e84 <main+0x13c>)
 8003e48:	480f      	ldr	r0, [pc, #60]	@ (8003e88 <main+0x140>)
 8003e4a:	f000 fc55 	bl	80046f8 <HAL_ADC_Start_DMA>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <main+0x112>
	  {
	    /* Start Conversation Error */
	    Error_Handler();
 8003e54:	f000 f89c 	bl	8003f90 <Error_Handler>
	  }


  while (1)
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	e7fd      	b.n	8003e5a <main+0x112>
 8003e5e:	bf00      	nop
 8003e60:	20000078 	.word	0x20000078
 8003e64:	0800b2cc 	.word	0x0800b2cc
 8003e68:	2000064c 	.word	0x2000064c
 8003e6c:	0800b2d4 	.word	0x0800b2d4
 8003e70:	0800b2e4 	.word	0x0800b2e4
 8003e74:	20000648 	.word	0x20000648
 8003e78:	20000674 	.word	0x20000674
 8003e7c:	20000460 	.word	0x20000460
 8003e80:	20001b60 	.word	0x20001b60
 8003e84:	20000b74 	.word	0x20000b74
 8003e88:	200003b0 	.word	0x200003b0

08003e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b094      	sub	sp, #80	@ 0x50
 8003e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e92:	f107 0320 	add.w	r3, r7, #32
 8003e96:	2230      	movs	r2, #48	@ 0x30
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f006 fd8a 	bl	800a9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <SystemClock_Config+0xd8>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f64 <SystemClock_Config+0xd8>)
 8003eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec0:	4b28      	ldr	r3, [pc, #160]	@ (8003f64 <SystemClock_Config+0xd8>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <SystemClock_Config+0xdc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a24      	ldr	r2, [pc, #144]	@ (8003f68 <SystemClock_Config+0xdc>)
 8003ed6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b22      	ldr	r3, [pc, #136]	@ (8003f68 <SystemClock_Config+0xdc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003eec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ef6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003efc:	2304      	movs	r3, #4
 8003efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003f00:	23b4      	movs	r3, #180	@ 0xb4
 8003f02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f04:	2302      	movs	r3, #2
 8003f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f0c:	f107 0320 	add.w	r3, r7, #32
 8003f10:	4618      	mov	r0, r3
 8003f12:	f004 fa29 	bl	8008368 <HAL_RCC_OscConfig>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003f1c:	f000 f838 	bl	8003f90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003f20:	f004 f9d2 	bl	80082c8 <HAL_PWREx_EnableOverDrive>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003f2a:	f000 f831 	bl	8003f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f2e:	230f      	movs	r3, #15
 8003f30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f32:	2302      	movs	r3, #2
 8003f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f3a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003f3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f46:	f107 030c 	add.w	r3, r7, #12
 8003f4a:	2105      	movs	r1, #5
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 fc83 	bl	8008858 <HAL_RCC_ClockConfig>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003f58:	f000 f81a 	bl	8003f90 <Error_Handler>
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	3750      	adds	r7, #80	@ 0x50
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40007000 	.word	0x40007000

08003f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a04      	ldr	r2, [pc, #16]	@ (8003f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f7e:	f000 fb33 	bl	80045e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40001000 	.word	0x40001000

08003f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f94:	b672      	cpsid	i
}
 8003f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f7fd fb05 	bl	80015a8 <BSP_LED_On>
  while (1)
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <Error_Handler+0xe>
	...

08003fa4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003fa8:	4b17      	ldr	r3, [pc, #92]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003faa:	4a18      	ldr	r2, [pc, #96]	@ (800400c <MX_SPI5_Init+0x68>)
 8003fac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003fae:	4b16      	ldr	r3, [pc, #88]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003fb4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003fb6:	4b14      	ldr	r3, [pc, #80]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fbc:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fc2:	4b11      	ldr	r3, [pc, #68]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003fce:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fd8:	2218      	movs	r2, #24
 8003fda:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fe2:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe8:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003fee:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003ff0:	220a      	movs	r2, #10
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003ff4:	4804      	ldr	r0, [pc, #16]	@ (8004008 <MX_SPI5_Init+0x64>)
 8003ff6:	f005 f8be 	bl	8009176 <HAL_SPI_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004000:	f7ff ffc6 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20001a74 	.word	0x20001a74
 800400c:	40015000 	.word	0x40015000

08004010 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004018:	f107 0314 	add.w	r3, r7, #20
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <HAL_SPI_MspInit+0x84>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d12c      	bne.n	800408c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <HAL_SPI_MspInit+0x88>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	4a17      	ldr	r2, [pc, #92]	@ (8004098 <HAL_SPI_MspInit+0x88>)
 800403c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004040:	6453      	str	r3, [r2, #68]	@ 0x44
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_SPI_MspInit+0x88>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_SPI_MspInit+0x88>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_SPI_MspInit+0x88>)
 8004058:	f043 0320 	orr.w	r3, r3, #32
 800405c:	6313      	str	r3, [r2, #48]	@ 0x30
 800405e:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <HAL_SPI_MspInit+0x88>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800406a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800406e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004078:	2300      	movs	r3, #0
 800407a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800407c:	2305      	movs	r3, #5
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4619      	mov	r1, r3
 8004086:	4805      	ldr	r0, [pc, #20]	@ (800409c <HAL_SPI_MspInit+0x8c>)
 8004088:	f002 f9c2 	bl	8006410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800408c:	bf00      	nop
 800408e:	3728      	adds	r7, #40	@ 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40015000 	.word	0x40015000
 8004098:	40023800 	.word	0x40023800
 800409c:	40021400 	.word	0x40021400

080040a0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a08      	ldr	r2, [pc, #32]	@ (80040d0 <HAL_SPI_MspDeInit+0x30>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10a      	bne.n	80040c8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <HAL_SPI_MspDeInit+0x34>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	4a07      	ldr	r2, [pc, #28]	@ (80040d4 <HAL_SPI_MspDeInit+0x34>)
 80040b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80040bc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80040be:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80040c2:	4805      	ldr	r0, [pc, #20]	@ (80040d8 <HAL_SPI_MspDeInit+0x38>)
 80040c4:	f002 fb50 	bl	8006768 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40015000 	.word	0x40015000
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40021400 	.word	0x40021400

080040dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <HAL_MspInit+0x4c>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004128 <HAL_MspInit+0x4c>)
 80040ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <HAL_MspInit+0x4c>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_MspInit+0x4c>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <HAL_MspInit+0x4c>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	@ 0x40
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_MspInit+0x4c>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800

0800412c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	@ 0x38
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	4b33      	ldr	r3, [pc, #204]	@ (8004210 <HAL_InitTick+0xe4>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	4a32      	ldr	r2, [pc, #200]	@ (8004210 <HAL_InitTick+0xe4>)
 8004146:	f043 0310 	orr.w	r3, r3, #16
 800414a:	6413      	str	r3, [r2, #64]	@ 0x40
 800414c:	4b30      	ldr	r3, [pc, #192]	@ (8004210 <HAL_InitTick+0xe4>)
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004158:	f107 0210 	add.w	r2, r7, #16
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f004 fd84 	bl	8008c70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004172:	f004 fd69 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 8004176:	6378      	str	r0, [r7, #52]	@ 0x34
 8004178:	e004      	b.n	8004184 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800417a:	f004 fd65 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 800417e:	4603      	mov	r3, r0
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	4a23      	ldr	r2, [pc, #140]	@ (8004214 <HAL_InitTick+0xe8>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	0c9b      	lsrs	r3, r3, #18
 800418e:	3b01      	subs	r3, #1
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004192:	4b21      	ldr	r3, [pc, #132]	@ (8004218 <HAL_InitTick+0xec>)
 8004194:	4a21      	ldr	r2, [pc, #132]	@ (800421c <HAL_InitTick+0xf0>)
 8004196:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004198:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <HAL_InitTick+0xec>)
 800419a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800419e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80041a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004218 <HAL_InitTick+0xec>)
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80041a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004218 <HAL_InitTick+0xec>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <HAL_InitTick+0xec>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041b2:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <HAL_InitTick+0xec>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80041b8:	4817      	ldr	r0, [pc, #92]	@ (8004218 <HAL_InitTick+0xec>)
 80041ba:	f005 fde3 	bl	8009d84 <HAL_TIM_Base_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80041c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11b      	bne.n	8004204 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80041cc:	4812      	ldr	r0, [pc, #72]	@ (8004218 <HAL_InitTick+0xec>)
 80041ce:	f005 fe91 	bl	8009ef4 <HAL_TIM_Base_Start_IT>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80041d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d111      	bne.n	8004204 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041e0:	2036      	movs	r0, #54	@ 0x36
 80041e2:	f000 ff31 	bl	8005048 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d808      	bhi.n	80041fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80041ec:	2200      	movs	r2, #0
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	2036      	movs	r0, #54	@ 0x36
 80041f2:	f000 ff0d 	bl	8005010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004220 <HAL_InitTick+0xf4>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e002      	b.n	8004204 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004204:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004208:	4618      	mov	r0, r3
 800420a:	3738      	adds	r7, #56	@ 0x38
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	431bde83 	.word	0x431bde83
 8004218:	20001acc 	.word	0x20001acc
 800421c:	40001000 	.word	0x40001000
 8004220:	20000088 	.word	0x20000088

08004224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004228:	bf00      	nop
 800422a:	e7fd      	b.n	8004228 <NMI_Handler+0x4>

0800422c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <HardFault_Handler+0x4>

08004234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <MemManage_Handler+0x4>

0800423c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <BusFault_Handler+0x4>

08004244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <UsageFault_Handler+0x4>

0800424c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8004288:	4802      	ldr	r0, [pc, #8]	@ (8004294 <DMA1_Stream6_IRQHandler+0x10>)
 800428a:	f001 fabb 	bl	8005804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000474 	.word	0x20000474

08004298 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800429c:	4802      	ldr	r0, [pc, #8]	@ (80042a8 <TIM2_IRQHandler+0x10>)
 800429e:	f005 fe99 	bl	8009fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20001b60 	.word	0x20001b60

080042ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <TIM6_DAC_IRQHandler+0x20>)
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80042ba:	4804      	ldr	r0, [pc, #16]	@ (80042cc <TIM6_DAC_IRQHandler+0x20>)
 80042bc:	f000 ffd2 	bl	8005264 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80042c0:	4803      	ldr	r0, [pc, #12]	@ (80042d0 <TIM6_DAC_IRQHandler+0x24>)
 80042c2:	f005 fe87 	bl	8009fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000460 	.word	0x20000460
 80042d0:	20001acc 	.word	0x20001acc

080042d4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042d8:	4802      	ldr	r0, [pc, #8]	@ (80042e4 <DMA2_Stream4_IRQHandler+0x10>)
 80042da:	f001 fa93 	bl	8005804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200003f8 	.word	0x200003f8

080042e8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80042ec:	4802      	ldr	r0, [pc, #8]	@ (80042f8 <LTDC_IRQHandler+0x10>)
 80042ee:	f003 fd29 	bl	8007d44 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	200005a0 	.word	0x200005a0

080042fc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004300:	4802      	ldr	r0, [pc, #8]	@ (800430c <DMA2D_IRQHandler+0x10>)
 8004302:	f001 fe46 	bl	8005f92 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200004d4 	.word	0x200004d4

08004310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004318:	4a14      	ldr	r2, [pc, #80]	@ (800436c <_sbrk+0x5c>)
 800431a:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <_sbrk+0x60>)
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004324:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <_sbrk+0x64>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800432c:	4b11      	ldr	r3, [pc, #68]	@ (8004374 <_sbrk+0x64>)
 800432e:	4a12      	ldr	r2, [pc, #72]	@ (8004378 <_sbrk+0x68>)
 8004330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <_sbrk+0x64>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d207      	bcs.n	8004350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004340:	f006 fb40 	bl	800a9c4 <__errno>
 8004344:	4603      	mov	r3, r0
 8004346:	220c      	movs	r2, #12
 8004348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295
 800434e:	e009      	b.n	8004364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004350:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <_sbrk+0x64>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <_sbrk+0x64>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	4a05      	ldr	r2, [pc, #20]	@ (8004374 <_sbrk+0x64>)
 8004360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20030000 	.word	0x20030000
 8004370:	00000400 	.word	0x00000400
 8004374:	20001b14 	.word	0x20001b14
 8004378:	20001cf8 	.word	0x20001cf8

0800437c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <SystemInit+0x20>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004386:	4a05      	ldr	r2, [pc, #20]	@ (800439c <SystemInit+0x20>)
 8004388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800438c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	609a      	str	r2, [r3, #8]
 80043b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b4:	463b      	mov	r3, r7
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043be:	4a1f      	ldr	r2, [pc, #124]	@ (800443c <MX_TIM1_Init+0x9c>)
 80043c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d6:	4b18      	ldr	r3, [pc, #96]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043d8:	2200      	movs	r2, #0
 80043da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043dc:	4b16      	ldr	r3, [pc, #88]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043de:	2200      	movs	r2, #0
 80043e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e2:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043e8:	4813      	ldr	r0, [pc, #76]	@ (8004438 <MX_TIM1_Init+0x98>)
 80043ea:	f005 fccb 	bl	8009d84 <HAL_TIM_Base_Init>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80043f4:	f7ff fdcc 	bl	8003f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	4619      	mov	r1, r3
 8004404:	480c      	ldr	r0, [pc, #48]	@ (8004438 <MX_TIM1_Init+0x98>)
 8004406:	f005 fed5 	bl	800a1b4 <HAL_TIM_ConfigClockSource>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004410:	f7ff fdbe 	bl	8003f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004414:	2300      	movs	r3, #0
 8004416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004418:	2300      	movs	r3, #0
 800441a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800441c:	463b      	mov	r3, r7
 800441e:	4619      	mov	r1, r3
 8004420:	4805      	ldr	r0, [pc, #20]	@ (8004438 <MX_TIM1_Init+0x98>)
 8004422:	f006 f8fd 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800442c:	f7ff fdb0 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004430:	bf00      	nop
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20001b18 	.word	0x20001b18
 800443c:	40010000 	.word	0x40010000

08004440 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	609a      	str	r2, [r3, #8]
 8004452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004454:	463b      	mov	r3, r7
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800445c:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <MX_TIM2_Init+0x94>)
 800445e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004462:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 620;
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <MX_TIM2_Init+0x94>)
 8004466:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 800446a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446c:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <MX_TIM2_Init+0x94>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8004472:	4b18      	ldr	r3, [pc, #96]	@ (80044d4 <MX_TIM2_Init+0x94>)
 8004474:	2201      	movs	r2, #1
 8004476:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004478:	4b16      	ldr	r3, [pc, #88]	@ (80044d4 <MX_TIM2_Init+0x94>)
 800447a:	2200      	movs	r2, #0
 800447c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800447e:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <MX_TIM2_Init+0x94>)
 8004480:	2280      	movs	r2, #128	@ 0x80
 8004482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004484:	4813      	ldr	r0, [pc, #76]	@ (80044d4 <MX_TIM2_Init+0x94>)
 8004486:	f005 fc7d 	bl	8009d84 <HAL_TIM_Base_Init>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004490:	f7ff fd7e 	bl	8003f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	4619      	mov	r1, r3
 80044a0:	480c      	ldr	r0, [pc, #48]	@ (80044d4 <MX_TIM2_Init+0x94>)
 80044a2:	f005 fe87 	bl	800a1b4 <HAL_TIM_ConfigClockSource>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80044ac:	f7ff fd70 	bl	8003f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044b0:	2320      	movs	r3, #32
 80044b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044b8:	463b      	mov	r3, r7
 80044ba:	4619      	mov	r1, r3
 80044bc:	4805      	ldr	r0, [pc, #20]	@ (80044d4 <MX_TIM2_Init+0x94>)
 80044be:	f006 f8af 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80044c8:	f7ff fd62 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044cc:	bf00      	nop
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20001b60 	.word	0x20001b60

080044d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a18      	ldr	r2, [pc, #96]	@ (8004548 <HAL_TIM_Base_MspInit+0x70>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10e      	bne.n	8004508 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b17      	ldr	r3, [pc, #92]	@ (800454c <HAL_TIM_Base_MspInit+0x74>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	4a16      	ldr	r2, [pc, #88]	@ (800454c <HAL_TIM_Base_MspInit+0x74>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044fa:	4b14      	ldr	r3, [pc, #80]	@ (800454c <HAL_TIM_Base_MspInit+0x74>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004506:	e01a      	b.n	800453e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004510:	d115      	bne.n	800453e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <HAL_TIM_Base_MspInit+0x74>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	4a0c      	ldr	r2, [pc, #48]	@ (800454c <HAL_TIM_Base_MspInit+0x74>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6413      	str	r3, [r2, #64]	@ 0x40
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_TIM_Base_MspInit+0x74>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	2100      	movs	r1, #0
 8004532:	201c      	movs	r0, #28
 8004534:	f000 fd6c 	bl	8005010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004538:	201c      	movs	r0, #28
 800453a:	f000 fd85 	bl	8005048 <HAL_NVIC_EnableIRQ>
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40023800 	.word	0x40023800

08004550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004554:	f7ff ff12 	bl	800437c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004558:	480c      	ldr	r0, [pc, #48]	@ (800458c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800455a:	490d      	ldr	r1, [pc, #52]	@ (8004590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800455c:	4a0d      	ldr	r2, [pc, #52]	@ (8004594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004560:	e002      	b.n	8004568 <LoopCopyDataInit>

08004562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004566:	3304      	adds	r3, #4

08004568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800456c:	d3f9      	bcc.n	8004562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004570:	4c0a      	ldr	r4, [pc, #40]	@ (800459c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004574:	e001      	b.n	800457a <LoopFillZerobss>

08004576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004578:	3204      	adds	r2, #4

0800457a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800457c:	d3fb      	bcc.n	8004576 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800457e:	f006 fa27 	bl	800a9d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004582:	f7ff fbe1 	bl	8003d48 <main>
  bx  lr    
 8004586:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004588:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800458c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004590:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8004594:	0800d9f4 	.word	0x0800d9f4
  ldr r2, =_sbss
 8004598:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800459c:	20001cf4 	.word	0x20001cf4

080045a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a0:	e7fe      	b.n	80045a0 <ADC_IRQHandler>
	...

080045a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045a8:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <HAL_Init+0x40>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0d      	ldr	r2, [pc, #52]	@ (80045e4 <HAL_Init+0x40>)
 80045ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <HAL_Init+0x40>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0a      	ldr	r2, [pc, #40]	@ (80045e4 <HAL_Init+0x40>)
 80045ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045c0:	4b08      	ldr	r3, [pc, #32]	@ (80045e4 <HAL_Init+0x40>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a07      	ldr	r2, [pc, #28]	@ (80045e4 <HAL_Init+0x40>)
 80045c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045cc:	2003      	movs	r0, #3
 80045ce:	f000 fd14 	bl	8004ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045d2:	200f      	movs	r0, #15
 80045d4:	f7ff fdaa 	bl	800412c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045d8:	f7ff fd80 	bl	80040dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023c00 	.word	0x40023c00

080045e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_IncTick+0x20>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_IncTick+0x24>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	4a04      	ldr	r2, [pc, #16]	@ (800460c <HAL_IncTick+0x24>)
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	2000008c 	.word	0x2000008c
 800460c:	20001ba8 	.word	0x20001ba8

08004610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return uwTick;
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_GetTick+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20001ba8 	.word	0x20001ba8

08004628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004630:	f7ff ffee 	bl	8004610 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d005      	beq.n	800464e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004642:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <HAL_Delay+0x44>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800464e:	bf00      	nop
 8004650:	f7ff ffde 	bl	8004610 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	429a      	cmp	r2, r3
 800465e:	d8f7      	bhi.n	8004650 <HAL_Delay+0x28>
  {
  }
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	2000008c 	.word	0x2000008c

08004670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e033      	b.n	80046ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe fb58 	bl	8002d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80046b6:	f023 0302 	bic.w	r3, r3, #2
 80046ba:	f043 0202 	orr.w	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa6e 	bl	8004ba4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80046de:	e001      	b.n	80046e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_ADC_Start_DMA+0x1e>
 8004712:	2302      	movs	r3, #2
 8004714:	e0e9      	b.n	80048ea <HAL_ADC_Start_DMA+0x1f2>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d018      	beq.n	800475e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800473c:	4b6d      	ldr	r3, [pc, #436]	@ (80048f4 <HAL_ADC_Start_DMA+0x1fc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a6d      	ldr	r2, [pc, #436]	@ (80048f8 <HAL_ADC_Start_DMA+0x200>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0c9a      	lsrs	r2, r3, #18
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004750:	e002      	b.n	8004758 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3b01      	subs	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f9      	bne.n	8004752 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800476c:	d107      	bne.n	800477e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800477c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	f040 80a1 	bne.w	80048d0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047cc:	d106      	bne.n	80047dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f023 0206 	bic.w	r2, r3, #6
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80047da:	e002      	b.n	80047e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047ea:	4b44      	ldr	r3, [pc, #272]	@ (80048fc <HAL_ADC_Start_DMA+0x204>)
 80047ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f2:	4a43      	ldr	r2, [pc, #268]	@ (8004900 <HAL_ADC_Start_DMA+0x208>)
 80047f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fa:	4a42      	ldr	r2, [pc, #264]	@ (8004904 <HAL_ADC_Start_DMA+0x20c>)
 80047fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	4a41      	ldr	r2, [pc, #260]	@ (8004908 <HAL_ADC_Start_DMA+0x210>)
 8004804:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800480e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800481e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800482e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	334c      	adds	r3, #76	@ 0x4c
 800483a:	4619      	mov	r1, r3
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f000 ff88 	bl	8005754 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2b00      	cmp	r3, #0
 800484e:	d12a      	bne.n	80048a6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2d      	ldr	r2, [pc, #180]	@ (800490c <HAL_ADC_Start_DMA+0x214>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d015      	beq.n	8004886 <HAL_ADC_Start_DMA+0x18e>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2c      	ldr	r2, [pc, #176]	@ (8004910 <HAL_ADC_Start_DMA+0x218>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d105      	bne.n	8004870 <HAL_ADC_Start_DMA+0x178>
 8004864:	4b25      	ldr	r3, [pc, #148]	@ (80048fc <HAL_ADC_Start_DMA+0x204>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a27      	ldr	r2, [pc, #156]	@ (8004914 <HAL_ADC_Start_DMA+0x21c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d136      	bne.n	80048e8 <HAL_ADC_Start_DMA+0x1f0>
 800487a:	4b20      	ldr	r3, [pc, #128]	@ (80048fc <HAL_ADC_Start_DMA+0x204>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	d130      	bne.n	80048e8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d129      	bne.n	80048e8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	e020      	b.n	80048e8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a18      	ldr	r2, [pc, #96]	@ (800490c <HAL_ADC_Start_DMA+0x214>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d11b      	bne.n	80048e8 <HAL_ADC_Start_DMA+0x1f0>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d114      	bne.n	80048e8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048cc:	609a      	str	r2, [r3, #8]
 80048ce:	e00b      	b.n	80048e8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	f043 0210 	orr.w	r2, r3, #16
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e0:	f043 0201 	orr.w	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000084 	.word	0x20000084
 80048f8:	431bde83 	.word	0x431bde83
 80048fc:	40012300 	.word	0x40012300
 8004900:	08004d9d 	.word	0x08004d9d
 8004904:	08004e57 	.word	0x08004e57
 8004908:	08004e73 	.word	0x08004e73
 800490c:	40012000 	.word	0x40012000
 8004910:	40012100 	.word	0x40012100
 8004914:	40012200 	.word	0x40012200

08004918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_ADC_ConfigChannel+0x1c>
 8004958:	2302      	movs	r3, #2
 800495a:	e113      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x244>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b09      	cmp	r3, #9
 800496a:	d925      	bls.n	80049b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68d9      	ldr	r1, [r3, #12]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	3b1e      	subs	r3, #30
 8004982:	2207      	movs	r2, #7
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43da      	mvns	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	400a      	ands	r2, r1
 8004990:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68d9      	ldr	r1, [r3, #12]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	4603      	mov	r3, r0
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	4403      	add	r3, r0
 80049aa:	3b1e      	subs	r3, #30
 80049ac:	409a      	lsls	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	e022      	b.n	80049fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6919      	ldr	r1, [r3, #16]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	2207      	movs	r2, #7
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43da      	mvns	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	400a      	ands	r2, r1
 80049da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6919      	ldr	r1, [r3, #16]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4618      	mov	r0, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4403      	add	r3, r0
 80049f4:	409a      	lsls	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	d824      	bhi.n	8004a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	3b05      	subs	r3, #5
 8004a18:	221f      	movs	r2, #31
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	400a      	ands	r2, r1
 8004a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4618      	mov	r0, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	3b05      	subs	r3, #5
 8004a42:	fa00 f203 	lsl.w	r2, r0, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a4e:	e04c      	b.n	8004aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	d824      	bhi.n	8004aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	3b23      	subs	r3, #35	@ 0x23
 8004a6a:	221f      	movs	r2, #31
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43da      	mvns	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	400a      	ands	r2, r1
 8004a78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4618      	mov	r0, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	3b23      	subs	r3, #35	@ 0x23
 8004a94:	fa00 f203 	lsl.w	r2, r0, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004aa0:	e023      	b.n	8004aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3b41      	subs	r3, #65	@ 0x41
 8004ab4:	221f      	movs	r2, #31
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43da      	mvns	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	3b41      	subs	r3, #65	@ 0x41
 8004ade:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004aea:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <HAL_ADC_ConfigChannel+0x250>)
 8004aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a28      	ldr	r2, [pc, #160]	@ (8004b94 <HAL_ADC_ConfigChannel+0x254>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10f      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x1d8>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b12      	cmp	r3, #18
 8004afe:	d10b      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b94 <HAL_ADC_ConfigChannel+0x254>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d12b      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x23a>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <HAL_ADC_ConfigChannel+0x258>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <HAL_ADC_ConfigChannel+0x1f4>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b11      	cmp	r3, #17
 8004b32:	d122      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a11      	ldr	r2, [pc, #68]	@ (8004b98 <HAL_ADC_ConfigChannel+0x258>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b56:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <HAL_ADC_ConfigChannel+0x25c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x260>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	0c9a      	lsrs	r2, r3, #18
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004b6c:	e002      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f9      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40012300 	.word	0x40012300
 8004b94:	40012000 	.word	0x40012000
 8004b98:	10000012 	.word	0x10000012
 8004b9c:	20000084 	.word	0x20000084
 8004ba0:	431bde83 	.word	0x431bde83

08004ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bac:	4b79      	ldr	r3, [pc, #484]	@ (8004d94 <ADC_Init+0x1f0>)
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	021a      	lsls	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c36:	4a58      	ldr	r2, [pc, #352]	@ (8004d98 <ADC_Init+0x1f4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6899      	ldr	r1, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	e00f      	b.n	8004ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0202 	bic.w	r2, r2, #2
 8004cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7e1b      	ldrb	r3, [r3, #24]
 8004cbc:	005a      	lsls	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cde:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004cee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	035a      	lsls	r2, r3, #13
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e007      	b.n	8004d18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	051a      	lsls	r2, r3, #20
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d5a:	025a      	lsls	r2, r3, #9
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6899      	ldr	r1, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	029a      	lsls	r2, r3, #10
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	40012300 	.word	0x40012300
 8004d98:	0f000001 	.word	0x0f000001

08004d9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d13c      	bne.n	8004e30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d12b      	bne.n	8004e28 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d127      	bne.n	8004e28 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d006      	beq.n	8004df4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d119      	bne.n	8004e28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0220 	bic.w	r2, r2, #32
 8004e02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	f043 0201 	orr.w	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7fe fe43 	bl	8003ab4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e2e:	e00e      	b.n	8004e4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff fd75 	bl	800492c <HAL_ADC_ErrorCallback>
}
 8004e42:	e004      	b.n	8004e4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff fd57 	bl	8004918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2240      	movs	r2, #64	@ 0x40
 8004e84:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	f043 0204 	orr.w	r2, r3, #4
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fd4a 	bl	800492c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ed2:	4a04      	ldr	r2, [pc, #16]	@ (8004ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	60d3      	str	r3, [r2, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	e000ed00 	.word	0xe000ed00

08004ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eec:	4b04      	ldr	r3, [pc, #16]	@ (8004f00 <__NVIC_GetPriorityGrouping+0x18>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	0a1b      	lsrs	r3, r3, #8
 8004ef2:	f003 0307 	and.w	r3, r3, #7
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	e000ed00 	.word	0xe000ed00

08004f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	db0b      	blt.n	8004f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	f003 021f 	and.w	r2, r3, #31
 8004f1c:	4907      	ldr	r1, [pc, #28]	@ (8004f3c <__NVIC_EnableIRQ+0x38>)
 8004f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2001      	movs	r0, #1
 8004f26:	fa00 f202 	lsl.w	r2, r0, r2
 8004f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	e000e100 	.word	0xe000e100

08004f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	6039      	str	r1, [r7, #0]
 8004f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	db0a      	blt.n	8004f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	490c      	ldr	r1, [pc, #48]	@ (8004f8c <__NVIC_SetPriority+0x4c>)
 8004f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5e:	0112      	lsls	r2, r2, #4
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	440b      	add	r3, r1
 8004f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f68:	e00a      	b.n	8004f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	4908      	ldr	r1, [pc, #32]	@ (8004f90 <__NVIC_SetPriority+0x50>)
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	3b04      	subs	r3, #4
 8004f78:	0112      	lsls	r2, r2, #4
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	761a      	strb	r2, [r3, #24]
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000e100 	.word	0xe000e100
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	@ 0x24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f1c3 0307 	rsb	r3, r3, #7
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	bf28      	it	cs
 8004fb2:	2304      	movcs	r3, #4
 8004fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	2b06      	cmp	r3, #6
 8004fbc:	d902      	bls.n	8004fc4 <NVIC_EncodePriority+0x30>
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3b03      	subs	r3, #3
 8004fc2:	e000      	b.n	8004fc6 <NVIC_EncodePriority+0x32>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43da      	mvns	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	43d9      	mvns	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	4313      	orrs	r3, r2
         );
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3724      	adds	r7, #36	@ 0x24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff ff4c 	bl	8004ea0 <__NVIC_SetPriorityGrouping>
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005022:	f7ff ff61 	bl	8004ee8 <__NVIC_GetPriorityGrouping>
 8005026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	6978      	ldr	r0, [r7, #20]
 800502e:	f7ff ffb1 	bl	8004f94 <NVIC_EncodePriority>
 8005032:	4602      	mov	r2, r0
 8005034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ff80 	bl	8004f40 <__NVIC_SetPriority>
}
 8005040:	bf00      	nop
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff ff54 	bl	8004f04 <__NVIC_EnableIRQ>
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e00e      	b.n	8005094 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	795b      	ldrb	r3, [r3, #5]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fd fefe 	bl	8002e88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e014      	b.n	80050d8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	791b      	ldrb	r3, [r3, #4]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd ff2e 	bl	8002f20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0a2      	b.n	8005242 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	795b      	ldrb	r3, [r3, #5]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_DAC_Start_DMA+0x28>
 8005104:	2302      	movs	r3, #2
 8005106:	e09c      	b.n	8005242 <HAL_DAC_Start_DMA+0x162>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2202      	movs	r2, #2
 8005112:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d129      	bne.n	800516e <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4a4b      	ldr	r2, [pc, #300]	@ (800524c <HAL_DAC_Start_DMA+0x16c>)
 8005120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4a4a      	ldr	r2, [pc, #296]	@ (8005250 <HAL_DAC_Start_DMA+0x170>)
 8005128:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	4a49      	ldr	r2, [pc, #292]	@ (8005254 <HAL_DAC_Start_DMA+0x174>)
 8005130:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005140:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_DAC_Start_DMA+0x70>
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d005      	beq.n	800515a <HAL_DAC_Start_DMA+0x7a>
 800514e:	e009      	b.n	8005164 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	613b      	str	r3, [r7, #16]
        break;
 8005158:	e033      	b.n	80051c2 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	613b      	str	r3, [r7, #16]
        break;
 8005162:	e02e      	b.n	80051c2 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3310      	adds	r3, #16
 800516a:	613b      	str	r3, [r7, #16]
        break;
 800516c:	e029      	b.n	80051c2 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	4a39      	ldr	r2, [pc, #228]	@ (8005258 <HAL_DAC_Start_DMA+0x178>)
 8005174:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4a38      	ldr	r2, [pc, #224]	@ (800525c <HAL_DAC_Start_DMA+0x17c>)
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	4a37      	ldr	r2, [pc, #220]	@ (8005260 <HAL_DAC_Start_DMA+0x180>)
 8005184:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005194:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_DAC_Start_DMA+0xc4>
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d005      	beq.n	80051ae <HAL_DAC_Start_DMA+0xce>
 80051a2:	e009      	b.n	80051b8 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	613b      	str	r3, [r7, #16]
        break;
 80051ac:	e009      	b.n	80051c2 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3318      	adds	r3, #24
 80051b4:	613b      	str	r3, [r7, #16]
        break;
 80051b6:	e004      	b.n	80051c2 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	331c      	adds	r3, #28
 80051be:	613b      	str	r3, [r7, #16]
        break;
 80051c0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d111      	bne.n	80051ec <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6898      	ldr	r0, [r3, #8]
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	f000 fab7 	bl	8005754 <HAL_DMA_Start_IT>
 80051e6:	4603      	mov	r3, r0
 80051e8:	75fb      	strb	r3, [r7, #23]
 80051ea:	e010      	b.n	800520e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80051fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68d8      	ldr	r0, [r3, #12]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	f000 faa5 	bl	8005754 <HAL_DMA_Start_IT>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2201      	movs	r2, #1
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e005      	b.n	8005240 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f043 0204 	orr.w	r2, r3, #4
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	08005413 	.word	0x08005413
 8005250:	08005435 	.word	0x08005435
 8005254:	08005451 	.word	0x08005451
 8005258:	080054cf 	.word	0x080054cf
 800525c:	080054f1 	.word	0x080054f1
 8005260:	0800550d 	.word	0x0800550d

08005264 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01d      	beq.n	80052c2 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f043 0201 	orr.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80052aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052ba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f845 	bl	800534c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01d      	beq.n	8005308 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d018      	beq.n	8005308 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f043 0202 	orr.w	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80052f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005300:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8d9 	bl	80054ba <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	@ 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_DAC_ConfigChannel+0x1c>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e042      	b.n	8005406 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	795b      	ldrb	r3, [r3, #5]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_DAC_ConfigChannel+0x2c>
 8005388:	2302      	movs	r3, #2
 800538a:	e03c      	b.n	8005406 <HAL_DAC_ConfigChannel+0xa6>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2202      	movs	r2, #2
 8005396:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80053ae:	43db      	mvns	r3, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	22c0      	movs	r2, #192	@ 0xc0
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	400a      	ands	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005404:	7ffb      	ldrb	r3, [r7, #31]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	@ 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff ff75 	bl	8005310 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	711a      	strb	r2, [r3, #4]
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff6e 	bl	8005324 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff ff64 	bl	8005338 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	711a      	strb	r2, [r3, #4]
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054da:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff ffce 	bl	800547e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	711a      	strb	r2, [r3, #4]
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff ffc7 	bl	8005492 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f043 0204 	orr.w	r2, r3, #4
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ffbd 	bl	80054a6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	711a      	strb	r2, [r3, #4]
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005548:	f7ff f862 	bl	8004610 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e099      	b.n	800568c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0201 	bic.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005578:	e00f      	b.n	800559a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800557a:	f7ff f849 	bl	8004610 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b05      	cmp	r3, #5
 8005586:	d908      	bls.n	800559a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2203      	movs	r2, #3
 8005592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e078      	b.n	800568c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e8      	bne.n	800557a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4b38      	ldr	r3, [pc, #224]	@ (8005694 <HAL_DMA_Init+0x158>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d107      	bne.n	8005604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	4313      	orrs	r3, r2
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0307 	bic.w	r3, r3, #7
 800561a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	2b04      	cmp	r3, #4
 800562c:	d117      	bne.n	800565e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00e      	beq.n	800565e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 facd 	bl	8005be0 <DMA_CheckFifoParam>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2240      	movs	r2, #64	@ 0x40
 8005650:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800565a:	2301      	movs	r3, #1
 800565c:	e016      	b.n	800568c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa84 	bl	8005b74 <DMA_CalcBaseAndBitshift>
 800566c:	4603      	mov	r3, r0
 800566e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005674:	223f      	movs	r2, #63	@ 0x3f
 8005676:	409a      	lsls	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	f010803f 	.word	0xf010803f

08005698 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e050      	b.n	800574c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d101      	bne.n	80056ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	e048      	b.n	800574c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2221      	movs	r2, #33	@ 0x21
 80056f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa3a 	bl	8005b74 <DMA_CalcBaseAndBitshift>
 8005700:	4603      	mov	r3, r0
 8005702:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572c:	223f      	movs	r2, #63	@ 0x3f
 800572e:	409a      	lsls	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_DMA_Start_IT+0x26>
 8005776:	2302      	movs	r3, #2
 8005778:	e040      	b.n	80057fc <HAL_DMA_Start_IT+0xa8>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d12f      	bne.n	80057ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f9b8 	bl	8005b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ac:	223f      	movs	r2, #63	@ 0x3f
 80057ae:	409a      	lsls	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0216 	orr.w	r2, r2, #22
 80057c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e005      	b.n	80057fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
 80057f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005810:	4b8e      	ldr	r3, [pc, #568]	@ (8005a4c <HAL_DMA_IRQHandler+0x248>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a8e      	ldr	r2, [pc, #568]	@ (8005a50 <HAL_DMA_IRQHandler+0x24c>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	0a9b      	lsrs	r3, r3, #10
 800581c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582e:	2208      	movs	r2, #8
 8005830:	409a      	lsls	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4013      	ands	r3, r2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01a      	beq.n	8005870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0204 	bic.w	r2, r2, #4
 8005856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585c:	2208      	movs	r2, #8
 800585e:	409a      	lsls	r2, r3
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005868:	f043 0201 	orr.w	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005874:	2201      	movs	r2, #1
 8005876:	409a      	lsls	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d012      	beq.n	80058a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005892:	2201      	movs	r2, #1
 8005894:	409a      	lsls	r2, r3
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	f043 0202 	orr.w	r2, r3, #2
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058aa:	2204      	movs	r2, #4
 80058ac:	409a      	lsls	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d012      	beq.n	80058dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c8:	2204      	movs	r2, #4
 80058ca:	409a      	lsls	r2, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d4:	f043 0204 	orr.w	r2, r3, #4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e0:	2210      	movs	r2, #16
 80058e2:	409a      	lsls	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d043      	beq.n	8005974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d03c      	beq.n	8005974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fe:	2210      	movs	r2, #16
 8005900:	409a      	lsls	r2, r3
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d018      	beq.n	8005946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d024      	beq.n	8005974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	4798      	blx	r3
 8005932:	e01f      	b.n	8005974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01b      	beq.n	8005974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3
 8005944:	e016      	b.n	8005974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0208 	bic.w	r2, r2, #8
 8005962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005978:	2220      	movs	r2, #32
 800597a:	409a      	lsls	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 808f 	beq.w	8005aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8087 	beq.w	8005aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599a:	2220      	movs	r2, #32
 800599c:	409a      	lsls	r2, r3
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d136      	bne.n	8005a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0216 	bic.w	r2, r2, #22
 80059bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <HAL_DMA_IRQHandler+0x1da>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0208 	bic.w	r2, r2, #8
 80059ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f2:	223f      	movs	r2, #63	@ 0x3f
 80059f4:	409a      	lsls	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d07e      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
        }
        return;
 8005a1a:	e079      	b.n	8005b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01d      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10d      	bne.n	8005a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d031      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
 8005a48:	e02c      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x2a0>
 8005a4a:	bf00      	nop
 8005a4c:	20000084 	.word	0x20000084
 8005a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d023      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
 8005a64:	e01e      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10f      	bne.n	8005a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0210 	bic.w	r2, r2, #16
 8005a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d032      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d022      	beq.n	8005afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2205      	movs	r2, #5
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d307      	bcc.n	8005aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f2      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x2cc>
 8005aea:	e000      	b.n	8005aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	4798      	blx	r3
 8005b0e:	e000      	b.n	8005b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b10:	bf00      	nop
    }
  }
}
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b40      	cmp	r3, #64	@ 0x40
 8005b44:	d108      	bne.n	8005b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b56:	e007      	b.n	8005b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	3b10      	subs	r3, #16
 8005b84:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b8e:	4a13      	ldr	r2, [pc, #76]	@ (8005bdc <DMA_CalcBaseAndBitshift+0x68>)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d909      	bls.n	8005bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bb4:	e007      	b.n	8005bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005bbe:	f023 0303 	bic.w	r3, r3, #3
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	aaaaaaab 	.word	0xaaaaaaab
 8005bdc:	0800d9a8 	.word	0x0800d9a8

08005be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d11f      	bne.n	8005c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d856      	bhi.n	8005cae <DMA_CheckFifoParam+0xce>
 8005c00:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <DMA_CheckFifoParam+0x28>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c2b 	.word	0x08005c2b
 8005c10:	08005c19 	.word	0x08005c19
 8005c14:	08005caf 	.word	0x08005caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d046      	beq.n	8005cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c28:	e043      	b.n	8005cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c32:	d140      	bne.n	8005cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c38:	e03d      	b.n	8005cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c42:	d121      	bne.n	8005c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d837      	bhi.n	8005cba <DMA_CheckFifoParam+0xda>
 8005c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c50 <DMA_CheckFifoParam+0x70>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c67 	.word	0x08005c67
 8005c58:	08005c61 	.word	0x08005c61
 8005c5c:	08005c79 	.word	0x08005c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
      break;
 8005c64:	e030      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d025      	beq.n	8005cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c76:	e022      	b.n	8005cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c80:	d11f      	bne.n	8005cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c86:	e01c      	b.n	8005cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d903      	bls.n	8005c96 <DMA_CheckFifoParam+0xb6>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d003      	beq.n	8005c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c94:	e018      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9a:	e015      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00e      	beq.n	8005cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e00b      	b.n	8005cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e00a      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e008      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e006      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e004      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop

08005cd8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e03b      	b.n	8005d62 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fd f9f8 	bl	80030f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d28:	f023 0107 	bic.w	r1, r3, #7
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68d1      	ldr	r1, [r2, #12]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af02      	add	r7, sp, #8
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_DMA2D_Start+0x1c>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e018      	b.n	8005db8 <HAL_DMA2D_Start+0x4e>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fa99 	bl	80062d8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d056      	beq.n	8005e8a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ddc:	f7fe fc18 	bl	8004610 <HAL_GetTick>
 8005de0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005de2:	e04b      	b.n	8005e7c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d023      	beq.n	8005e3e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	f043 0202 	orr.w	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1a:	f043 0201 	orr.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2221      	movs	r2, #33	@ 0x21
 8005e28:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e0a5      	b.n	8005f8a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d01a      	beq.n	8005e7c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fe fbe3 	bl	8004610 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <HAL_DMA2D_PollForTransfer+0x9c>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10f      	bne.n	8005e7c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e086      	b.n	8005f8a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ac      	beq.n	8005de4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d061      	beq.n	8005f70 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eac:	f7fe fbb0 	bl	8004610 <HAL_GetTick>
 8005eb0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005eb2:	e056      	b.n	8005f62 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d02e      	beq.n	8005f24 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	f043 0204 	orr.w	r2, r3, #4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	f043 0202 	orr.w	r2, r3, #2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	f043 0201 	orr.w	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2229      	movs	r2, #41	@ 0x29
 8005f0e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2204      	movs	r2, #4
 8005f14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e032      	b.n	8005f8a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d01a      	beq.n	8005f62 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f2c:	f7fe fb70 	bl	8004610 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d302      	bcc.n	8005f42 <HAL_DMA2D_PollForTransfer+0x182>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10f      	bne.n	8005f62 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f46:	f043 0220 	orr.w	r2, r3, #32
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2203      	movs	r2, #3
 8005f52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e013      	b.n	8005f8a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0a1      	beq.n	8005eb4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2212      	movs	r2, #18
 8005f76:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d026      	beq.n	8006002 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d021      	beq.n	8006002 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fcc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd2:	f043 0201 	orr.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d026      	beq.n	800605a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d021      	beq.n	800605a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006024:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2220      	movs	r2, #32
 800602c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006032:	f043 0202 	orr.w	r2, r3, #2
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d026      	beq.n	80060b2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800606a:	2b00      	cmp	r3, #0
 800606c:	d021      	beq.n	80060b2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800607c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2208      	movs	r2, #8
 8006084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608a:	f043 0204 	orr.w	r2, r3, #4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2204      	movs	r2, #4
 8006096:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00e      	beq.n	80060e4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060d4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2204      	movs	r2, #4
 80060dc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f853 	bl	800618a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d024      	beq.n	8006138 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01f      	beq.n	8006138 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006106:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2202      	movs	r2, #2
 800610e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01f      	beq.n	8006182 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01a      	beq.n	8006182 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800615a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2210      	movs	r2, #16
 8006162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f80e 	bl	800619e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_DMA2D_ConfigLayer+0x20>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e079      	b.n	80062c8 <HAL_DMA2D_ConfigLayer+0x114>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	3318      	adds	r3, #24
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	4413      	add	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80061fe:	4b35      	ldr	r3, [pc, #212]	@ (80062d4 <HAL_DMA2D_ConfigLayer+0x120>)
 8006200:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b0a      	cmp	r3, #10
 8006208:	d003      	beq.n	8006212 <HAL_DMA2D_ConfigLayer+0x5e>
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b09      	cmp	r3, #9
 8006210:	d107      	bne.n	8006222 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e005      	b.n	800622e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	061b      	lsls	r3, r3, #24
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d120      	bne.n	8006276 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	43db      	mvns	r3, r3
 800623e:	ea02 0103 	and.w	r1, r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	430a      	orrs	r2, r1
 800624a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b0a      	cmp	r3, #10
 800625c:	d003      	beq.n	8006266 <HAL_DMA2D_ConfigLayer+0xb2>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b09      	cmp	r3, #9
 8006264:	d127      	bne.n	80062b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006272:	629a      	str	r2, [r3, #40]	@ 0x28
 8006274:	e01f      	b.n	80062b6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	43db      	mvns	r3, r3
 8006280:	ea02 0103 	and.w	r1, r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	430a      	orrs	r2, r1
 800628c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b0a      	cmp	r3, #10
 800629e:	d003      	beq.n	80062a8 <HAL_DMA2D_ConfigLayer+0xf4>
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	d106      	bne.n	80062b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062b4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	ff03000f 	.word	0xff03000f

080062d8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80062d8:	b480      	push	{r7}
 80062da:	b08b      	sub	sp, #44	@ 0x2c
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ec:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	041a      	lsls	r2, r3, #16
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	431a      	orrs	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006310:	d174      	bne.n	80063fc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006318:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006320:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006328:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d108      	bne.n	800634a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	431a      	orrs	r2, r3
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	4313      	orrs	r3, r2
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
 8006348:	e053      	b.n	80063f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d106      	bne.n	8006360 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4313      	orrs	r3, r2
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
 800635e:	e048      	b.n	80063f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d111      	bne.n	800638c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	0cdb      	lsrs	r3, r3, #19
 800636c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	0a9b      	lsrs	r3, r3, #10
 8006372:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	02db      	lsls	r3, r3, #11
 8006382:	4313      	orrs	r3, r2
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
 800638a:	e032      	b.n	80063f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d117      	bne.n	80063c4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	0fdb      	lsrs	r3, r3, #31
 8006398:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	0cdb      	lsrs	r3, r3, #19
 800639e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	0adb      	lsrs	r3, r3, #11
 80063a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	08db      	lsrs	r3, r3, #3
 80063aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	029b      	lsls	r3, r3, #10
 80063b4:	431a      	orrs	r2, r3
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	03db      	lsls	r3, r3, #15
 80063ba:	4313      	orrs	r3, r2
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c2:	e016      	b.n	80063f2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	0f1b      	lsrs	r3, r3, #28
 80063c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	0d1b      	lsrs	r3, r3, #20
 80063ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	0b1b      	lsrs	r3, r3, #12
 80063d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	011a      	lsls	r2, r3, #4
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	431a      	orrs	r2, r3
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	031b      	lsls	r3, r3, #12
 80063ea:	4313      	orrs	r3, r2
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80063fa:	e003      	b.n	8006404 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	60da      	str	r2, [r3, #12]
}
 8006404:	bf00      	nop
 8006406:	372c      	adds	r7, #44	@ 0x2c
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006410:	b480      	push	{r7}
 8006412:	b089      	sub	sp, #36	@ 0x24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800641e:	2300      	movs	r3, #0
 8006420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006426:	2300      	movs	r3, #0
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e177      	b.n	800671c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800642c:	2201      	movs	r2, #1
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4013      	ands	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	429a      	cmp	r2, r3
 8006446:	f040 8166 	bne.w	8006716 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d005      	beq.n	8006462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800645e:	2b02      	cmp	r3, #2
 8006460:	d130      	bne.n	80064c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	2203      	movs	r2, #3
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43db      	mvns	r3, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	4013      	ands	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	4313      	orrs	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006498:	2201      	movs	r2, #1
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	43db      	mvns	r3, r3
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4013      	ands	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	091b      	lsrs	r3, r3, #4
 80064ae:	f003 0201 	and.w	r2, r3, #1
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d017      	beq.n	8006500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	2203      	movs	r2, #3
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	4013      	ands	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d123      	bne.n	8006554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	08da      	lsrs	r2, r3, #3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3208      	adds	r2, #8
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	220f      	movs	r2, #15
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	4013      	ands	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4313      	orrs	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	08da      	lsrs	r2, r3, #3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3208      	adds	r2, #8
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	2203      	movs	r2, #3
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	43db      	mvns	r3, r3
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	4013      	ands	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 0203 	and.w	r2, r3, #3
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	4313      	orrs	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80c0 	beq.w	8006716 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	4b66      	ldr	r3, [pc, #408]	@ (8006734 <HAL_GPIO_Init+0x324>)
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	4a65      	ldr	r2, [pc, #404]	@ (8006734 <HAL_GPIO_Init+0x324>)
 80065a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80065a6:	4b63      	ldr	r3, [pc, #396]	@ (8006734 <HAL_GPIO_Init+0x324>)
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065b2:	4a61      	ldr	r2, [pc, #388]	@ (8006738 <HAL_GPIO_Init+0x328>)
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	089b      	lsrs	r3, r3, #2
 80065b8:	3302      	adds	r3, #2
 80065ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	220f      	movs	r2, #15
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4013      	ands	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a58      	ldr	r2, [pc, #352]	@ (800673c <HAL_GPIO_Init+0x32c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d037      	beq.n	800664e <HAL_GPIO_Init+0x23e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a57      	ldr	r2, [pc, #348]	@ (8006740 <HAL_GPIO_Init+0x330>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d031      	beq.n	800664a <HAL_GPIO_Init+0x23a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a56      	ldr	r2, [pc, #344]	@ (8006744 <HAL_GPIO_Init+0x334>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d02b      	beq.n	8006646 <HAL_GPIO_Init+0x236>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a55      	ldr	r2, [pc, #340]	@ (8006748 <HAL_GPIO_Init+0x338>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d025      	beq.n	8006642 <HAL_GPIO_Init+0x232>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a54      	ldr	r2, [pc, #336]	@ (800674c <HAL_GPIO_Init+0x33c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01f      	beq.n	800663e <HAL_GPIO_Init+0x22e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a53      	ldr	r2, [pc, #332]	@ (8006750 <HAL_GPIO_Init+0x340>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d019      	beq.n	800663a <HAL_GPIO_Init+0x22a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a52      	ldr	r2, [pc, #328]	@ (8006754 <HAL_GPIO_Init+0x344>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_GPIO_Init+0x226>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a51      	ldr	r2, [pc, #324]	@ (8006758 <HAL_GPIO_Init+0x348>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00d      	beq.n	8006632 <HAL_GPIO_Init+0x222>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a50      	ldr	r2, [pc, #320]	@ (800675c <HAL_GPIO_Init+0x34c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <HAL_GPIO_Init+0x21e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a4f      	ldr	r2, [pc, #316]	@ (8006760 <HAL_GPIO_Init+0x350>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d101      	bne.n	800662a <HAL_GPIO_Init+0x21a>
 8006626:	2309      	movs	r3, #9
 8006628:	e012      	b.n	8006650 <HAL_GPIO_Init+0x240>
 800662a:	230a      	movs	r3, #10
 800662c:	e010      	b.n	8006650 <HAL_GPIO_Init+0x240>
 800662e:	2308      	movs	r3, #8
 8006630:	e00e      	b.n	8006650 <HAL_GPIO_Init+0x240>
 8006632:	2307      	movs	r3, #7
 8006634:	e00c      	b.n	8006650 <HAL_GPIO_Init+0x240>
 8006636:	2306      	movs	r3, #6
 8006638:	e00a      	b.n	8006650 <HAL_GPIO_Init+0x240>
 800663a:	2305      	movs	r3, #5
 800663c:	e008      	b.n	8006650 <HAL_GPIO_Init+0x240>
 800663e:	2304      	movs	r3, #4
 8006640:	e006      	b.n	8006650 <HAL_GPIO_Init+0x240>
 8006642:	2303      	movs	r3, #3
 8006644:	e004      	b.n	8006650 <HAL_GPIO_Init+0x240>
 8006646:	2302      	movs	r3, #2
 8006648:	e002      	b.n	8006650 <HAL_GPIO_Init+0x240>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <HAL_GPIO_Init+0x240>
 800664e:	2300      	movs	r3, #0
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	f002 0203 	and.w	r2, r2, #3
 8006656:	0092      	lsls	r2, r2, #2
 8006658:	4093      	lsls	r3, r2
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4313      	orrs	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006660:	4935      	ldr	r1, [pc, #212]	@ (8006738 <HAL_GPIO_Init+0x328>)
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	089b      	lsrs	r3, r3, #2
 8006666:	3302      	adds	r3, #2
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800666e:	4b3d      	ldr	r3, [pc, #244]	@ (8006764 <HAL_GPIO_Init+0x354>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	43db      	mvns	r3, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	4013      	ands	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006692:	4a34      	ldr	r2, [pc, #208]	@ (8006764 <HAL_GPIO_Init+0x354>)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006698:	4b32      	ldr	r3, [pc, #200]	@ (8006764 <HAL_GPIO_Init+0x354>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4013      	ands	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066bc:	4a29      	ldr	r2, [pc, #164]	@ (8006764 <HAL_GPIO_Init+0x354>)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066c2:	4b28      	ldr	r3, [pc, #160]	@ (8006764 <HAL_GPIO_Init+0x354>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	43db      	mvns	r3, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4013      	ands	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006764 <HAL_GPIO_Init+0x354>)
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006764 <HAL_GPIO_Init+0x354>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	43db      	mvns	r3, r3
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	4013      	ands	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006710:	4a14      	ldr	r2, [pc, #80]	@ (8006764 <HAL_GPIO_Init+0x354>)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3301      	adds	r3, #1
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2b0f      	cmp	r3, #15
 8006720:	f67f ae84 	bls.w	800642c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	3724      	adds	r7, #36	@ 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40023800 	.word	0x40023800
 8006738:	40013800 	.word	0x40013800
 800673c:	40020000 	.word	0x40020000
 8006740:	40020400 	.word	0x40020400
 8006744:	40020800 	.word	0x40020800
 8006748:	40020c00 	.word	0x40020c00
 800674c:	40021000 	.word	0x40021000
 8006750:	40021400 	.word	0x40021400
 8006754:	40021800 	.word	0x40021800
 8006758:	40021c00 	.word	0x40021c00
 800675c:	40022000 	.word	0x40022000
 8006760:	40022400 	.word	0x40022400
 8006764:	40013c00 	.word	0x40013c00

08006768 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	e0d9      	b.n	8006938 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006784:	2201      	movs	r2, #1
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4013      	ands	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	429a      	cmp	r2, r3
 800679c:	f040 80c9 	bne.w	8006932 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80067a0:	4a6b      	ldr	r2, [pc, #428]	@ (8006950 <HAL_GPIO_DeInit+0x1e8>)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	089b      	lsrs	r3, r3, #2
 80067a6:	3302      	adds	r3, #2
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	220f      	movs	r2, #15
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	4013      	ands	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a63      	ldr	r2, [pc, #396]	@ (8006954 <HAL_GPIO_DeInit+0x1ec>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d037      	beq.n	800683a <HAL_GPIO_DeInit+0xd2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a62      	ldr	r2, [pc, #392]	@ (8006958 <HAL_GPIO_DeInit+0x1f0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d031      	beq.n	8006836 <HAL_GPIO_DeInit+0xce>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a61      	ldr	r2, [pc, #388]	@ (800695c <HAL_GPIO_DeInit+0x1f4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02b      	beq.n	8006832 <HAL_GPIO_DeInit+0xca>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a60      	ldr	r2, [pc, #384]	@ (8006960 <HAL_GPIO_DeInit+0x1f8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d025      	beq.n	800682e <HAL_GPIO_DeInit+0xc6>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006964 <HAL_GPIO_DeInit+0x1fc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01f      	beq.n	800682a <HAL_GPIO_DeInit+0xc2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006968 <HAL_GPIO_DeInit+0x200>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d019      	beq.n	8006826 <HAL_GPIO_DeInit+0xbe>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a5d      	ldr	r2, [pc, #372]	@ (800696c <HAL_GPIO_DeInit+0x204>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <HAL_GPIO_DeInit+0xba>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a5c      	ldr	r2, [pc, #368]	@ (8006970 <HAL_GPIO_DeInit+0x208>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00d      	beq.n	800681e <HAL_GPIO_DeInit+0xb6>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a5b      	ldr	r2, [pc, #364]	@ (8006974 <HAL_GPIO_DeInit+0x20c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d007      	beq.n	800681a <HAL_GPIO_DeInit+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a5a      	ldr	r2, [pc, #360]	@ (8006978 <HAL_GPIO_DeInit+0x210>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <HAL_GPIO_DeInit+0xae>
 8006812:	2309      	movs	r3, #9
 8006814:	e012      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 8006816:	230a      	movs	r3, #10
 8006818:	e010      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 800681a:	2308      	movs	r3, #8
 800681c:	e00e      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 800681e:	2307      	movs	r3, #7
 8006820:	e00c      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 8006822:	2306      	movs	r3, #6
 8006824:	e00a      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 8006826:	2305      	movs	r3, #5
 8006828:	e008      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 800682a:	2304      	movs	r3, #4
 800682c:	e006      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 800682e:	2303      	movs	r3, #3
 8006830:	e004      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 8006832:	2302      	movs	r3, #2
 8006834:	e002      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <HAL_GPIO_DeInit+0xd4>
 800683a:	2300      	movs	r3, #0
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	f002 0203 	and.w	r2, r2, #3
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	4093      	lsls	r3, r2
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	d132      	bne.n	80068b2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800684c:	4b4b      	ldr	r3, [pc, #300]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	43db      	mvns	r3, r3
 8006854:	4949      	ldr	r1, [pc, #292]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 8006856:	4013      	ands	r3, r2
 8006858:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800685a:	4b48      	ldr	r3, [pc, #288]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	43db      	mvns	r3, r3
 8006862:	4946      	ldr	r1, [pc, #280]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 8006864:	4013      	ands	r3, r2
 8006866:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006868:	4b44      	ldr	r3, [pc, #272]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	43db      	mvns	r3, r3
 8006870:	4942      	ldr	r1, [pc, #264]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 8006872:	4013      	ands	r3, r2
 8006874:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006876:	4b41      	ldr	r3, [pc, #260]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	43db      	mvns	r3, r3
 800687e:	493f      	ldr	r1, [pc, #252]	@ (800697c <HAL_GPIO_DeInit+0x214>)
 8006880:	4013      	ands	r3, r2
 8006882:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	220f      	movs	r2, #15
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006894:	4a2e      	ldr	r2, [pc, #184]	@ (8006950 <HAL_GPIO_DeInit+0x1e8>)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	089b      	lsrs	r3, r3, #2
 800689a:	3302      	adds	r3, #2
 800689c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	43da      	mvns	r2, r3
 80068a4:	482a      	ldr	r0, [pc, #168]	@ (8006950 <HAL_GPIO_DeInit+0x1e8>)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	400a      	ands	r2, r1
 80068ac:	3302      	adds	r3, #2
 80068ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	2103      	movs	r1, #3
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	43db      	mvns	r3, r3
 80068c2:	401a      	ands	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	08da      	lsrs	r2, r3, #3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3208      	adds	r2, #8
 80068d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	220f      	movs	r2, #15
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43db      	mvns	r3, r3
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	08d2      	lsrs	r2, r2, #3
 80068e8:	4019      	ands	r1, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3208      	adds	r2, #8
 80068ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	2103      	movs	r1, #3
 80068fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	2101      	movs	r1, #1
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	fa01 f303 	lsl.w	r3, r1, r3
 8006914:	43db      	mvns	r3, r3
 8006916:	401a      	ands	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	2103      	movs	r1, #3
 8006926:	fa01 f303 	lsl.w	r3, r1, r3
 800692a:	43db      	mvns	r3, r3
 800692c:	401a      	ands	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	3301      	adds	r3, #1
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	f67f af22 	bls.w	8006784 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40013800 	.word	0x40013800
 8006954:	40020000 	.word	0x40020000
 8006958:	40020400 	.word	0x40020400
 800695c:	40020800 	.word	0x40020800
 8006960:	40020c00 	.word	0x40020c00
 8006964:	40021000 	.word	0x40021000
 8006968:	40021400 	.word	0x40021400
 800696c:	40021800 	.word	0x40021800
 8006970:	40021c00 	.word	0x40021c00
 8006974:	40022000 	.word	0x40022000
 8006978:	40022400 	.word	0x40022400
 800697c:	40013c00 	.word	0x40013c00

08006980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	807b      	strh	r3, [r7, #2]
 800698c:	4613      	mov	r3, r2
 800698e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006990:	787b      	ldrb	r3, [r7, #1]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006996:	887a      	ldrh	r2, [r7, #2]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800699c:	e003      	b.n	80069a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800699e:	887b      	ldrh	r3, [r7, #2]
 80069a0:	041a      	lsls	r2, r3, #16
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	619a      	str	r2, [r3, #24]
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069c4:	887a      	ldrh	r2, [r7, #2]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4013      	ands	r3, r2
 80069ca:	041a      	lsls	r2, r3, #16
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	43d9      	mvns	r1, r3
 80069d0:	887b      	ldrh	r3, [r7, #2]
 80069d2:	400b      	ands	r3, r1
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	619a      	str	r2, [r3, #24]
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e12b      	b.n	8006c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fc fe10 	bl	8003634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2224      	movs	r2, #36	@ 0x24
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0201 	bic.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a4c:	f002 f8fc 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 8006a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	4a81      	ldr	r2, [pc, #516]	@ (8006c5c <HAL_I2C_Init+0x274>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d807      	bhi.n	8006a6c <HAL_I2C_Init+0x84>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a80      	ldr	r2, [pc, #512]	@ (8006c60 <HAL_I2C_Init+0x278>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bf94      	ite	ls
 8006a64:	2301      	movls	r3, #1
 8006a66:	2300      	movhi	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	e006      	b.n	8006a7a <HAL_I2C_Init+0x92>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a7d      	ldr	r2, [pc, #500]	@ (8006c64 <HAL_I2C_Init+0x27c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	bf94      	ite	ls
 8006a74:	2301      	movls	r3, #1
 8006a76:	2300      	movhi	r3, #0
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e0e7      	b.n	8006c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4a78      	ldr	r2, [pc, #480]	@ (8006c68 <HAL_I2C_Init+0x280>)
 8006a86:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8a:	0c9b      	lsrs	r3, r3, #18
 8006a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8006c5c <HAL_I2C_Init+0x274>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d802      	bhi.n	8006abc <HAL_I2C_Init+0xd4>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	e009      	b.n	8006ad0 <HAL_I2C_Init+0xe8>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	4a69      	ldr	r2, [pc, #420]	@ (8006c6c <HAL_I2C_Init+0x284>)
 8006ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8006acc:	099b      	lsrs	r3, r3, #6
 8006ace:	3301      	adds	r3, #1
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006ae2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	495c      	ldr	r1, [pc, #368]	@ (8006c5c <HAL_I2C_Init+0x274>)
 8006aec:	428b      	cmp	r3, r1
 8006aee:	d819      	bhi.n	8006b24 <HAL_I2C_Init+0x13c>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	1e59      	subs	r1, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b04:	400b      	ands	r3, r1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <HAL_I2C_Init+0x138>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1e59      	subs	r1, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b18:	3301      	adds	r3, #1
 8006b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b1e:	e051      	b.n	8006bc4 <HAL_I2C_Init+0x1dc>
 8006b20:	2304      	movs	r3, #4
 8006b22:	e04f      	b.n	8006bc4 <HAL_I2C_Init+0x1dc>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d111      	bne.n	8006b50 <HAL_I2C_Init+0x168>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	1e58      	subs	r0, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6859      	ldr	r1, [r3, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	440b      	add	r3, r1
 8006b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b3e:	3301      	adds	r3, #1
 8006b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf0c      	ite	eq
 8006b48:	2301      	moveq	r3, #1
 8006b4a:	2300      	movne	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	e012      	b.n	8006b76 <HAL_I2C_Init+0x18e>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	1e58      	subs	r0, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6859      	ldr	r1, [r3, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	0099      	lsls	r1, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b66:	3301      	adds	r3, #1
 8006b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <HAL_I2C_Init+0x196>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e022      	b.n	8006bc4 <HAL_I2C_Init+0x1dc>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10e      	bne.n	8006ba4 <HAL_I2C_Init+0x1bc>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1e58      	subs	r0, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6859      	ldr	r1, [r3, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	440b      	add	r3, r1
 8006b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b98:	3301      	adds	r3, #1
 8006b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba2:	e00f      	b.n	8006bc4 <HAL_I2C_Init+0x1dc>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	1e58      	subs	r0, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6859      	ldr	r1, [r3, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	0099      	lsls	r1, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bba:	3301      	adds	r3, #1
 8006bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	6809      	ldr	r1, [r1, #0]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69da      	ldr	r2, [r3, #28]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006bf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6911      	ldr	r1, [r2, #16]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	68d2      	ldr	r2, [r2, #12]
 8006bfe:	4311      	orrs	r1, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695a      	ldr	r2, [r3, #20]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	000186a0 	.word	0x000186a0
 8006c60:	001e847f 	.word	0x001e847f
 8006c64:	003d08ff 	.word	0x003d08ff
 8006c68:	431bde83 	.word	0x431bde83
 8006c6c:	10624dd3 	.word	0x10624dd3

08006c70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e021      	b.n	8006cc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	@ 0x24
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fc fd34 	bl	8003708 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	817b      	strh	r3, [r7, #10]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	813b      	strh	r3, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cea:	f7fd fc91 	bl	8004610 <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	f040 80d9 	bne.w	8006eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	2319      	movs	r3, #25
 8006d04:	2201      	movs	r2, #1
 8006d06:	496d      	ldr	r1, [pc, #436]	@ (8006ebc <HAL_I2C_Mem_Write+0x1ec>)
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fc99 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
 8006d16:	e0cc      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_I2C_Mem_Write+0x56>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e0c5      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d007      	beq.n	8006d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2221      	movs	r2, #33	@ 0x21
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2240      	movs	r2, #64	@ 0x40
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a3a      	ldr	r2, [r7, #32]
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a4d      	ldr	r2, [pc, #308]	@ (8006ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8006d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d8e:	88f8      	ldrh	r0, [r7, #6]
 8006d90:	893a      	ldrh	r2, [r7, #8]
 8006d92:	8979      	ldrh	r1, [r7, #10]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fad0 	bl	8007344 <I2C_RequestMemoryWrite>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d052      	beq.n	8006e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e081      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fd5e 	bl	8007874 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d107      	bne.n	8006dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e06b      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d11b      	bne.n	8006e50 <HAL_I2C_Mem_Write+0x180>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d017      	beq.n	8006e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1aa      	bne.n	8006dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fd51 	bl	8007904 <I2C_WaitOnBTFFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00d      	beq.n	8006e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d107      	bne.n	8006e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e016      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	00100002 	.word	0x00100002
 8006ec0:	ffff0000 	.word	0xffff0000

08006ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08c      	sub	sp, #48	@ 0x30
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	817b      	strh	r3, [r7, #10]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	813b      	strh	r3, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ede:	f7fd fb97 	bl	8004610 <HAL_GetTick>
 8006ee2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	f040 8214 	bne.w	800731a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	2319      	movs	r3, #25
 8006ef8:	2201      	movs	r2, #1
 8006efa:	497b      	ldr	r1, [pc, #492]	@ (80070e8 <HAL_I2C_Mem_Read+0x224>)
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fb9f 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e207      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_I2C_Mem_Read+0x56>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e200      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d007      	beq.n	8006f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2222      	movs	r2, #34	@ 0x22
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2240      	movs	r2, #64	@ 0x40
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80070ec <HAL_I2C_Mem_Read+0x228>)
 8006f80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f82:	88f8      	ldrh	r0, [r7, #6]
 8006f84:	893a      	ldrh	r2, [r7, #8]
 8006f86:	8979      	ldrh	r1, [r7, #10]
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4603      	mov	r3, r0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fa6c 	bl	8007470 <I2C_RequestMemoryRead>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e1bc      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d113      	bne.n	8006fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006faa:	2300      	movs	r3, #0
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	623b      	str	r3, [r7, #32]
 8006fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e190      	b.n	80072f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d11b      	bne.n	8007012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e170      	b.n	80072f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007016:	2b02      	cmp	r3, #2
 8007018:	d11b      	bne.n	8007052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703a:	2300      	movs	r3, #0
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	e150      	b.n	80072f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007068:	e144      	b.n	80072f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800706e:	2b03      	cmp	r3, #3
 8007070:	f200 80f1 	bhi.w	8007256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007078:	2b01      	cmp	r3, #1
 800707a:	d123      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800707c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800707e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fc87 	bl	8007994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e145      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070c2:	e117      	b.n	80072f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d14e      	bne.n	800716a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	2200      	movs	r2, #0
 80070d4:	4906      	ldr	r1, [pc, #24]	@ (80070f0 <HAL_I2C_Mem_Read+0x22c>)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fab2 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e11a      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
 80070e6:	bf00      	nop
 80070e8:	00100002 	.word	0x00100002
 80070ec:	ffff0000 	.word	0xffff0000
 80070f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007168:	e0c4      	b.n	80072f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	2200      	movs	r2, #0
 8007172:	496c      	ldr	r1, [pc, #432]	@ (8007324 <HAL_I2C_Mem_Read+0x460>)
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fa63 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0cb      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	2200      	movs	r2, #0
 80071ce:	4955      	ldr	r1, [pc, #340]	@ (8007324 <HAL_I2C_Mem_Read+0x460>)
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 fa35 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e09d      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007254:	e04e      	b.n	80072f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007258:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fb9a 	bl	8007994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e058      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d124      	bne.n	80072f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d107      	bne.n	80072c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f47f aeb6 	bne.w	800706a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	e000      	b.n	800731c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800731a:	2302      	movs	r3, #2
  }
}
 800731c:	4618      	mov	r0, r3
 800731e:	3728      	adds	r7, #40	@ 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	00010004 	.word	0x00010004

08007328 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007336:	b2db      	uxtb	r3, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af02      	add	r7, sp, #8
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	461a      	mov	r2, r3
 8007352:	4603      	mov	r3, r0
 8007354:	817b      	strh	r3, [r7, #10]
 8007356:	460b      	mov	r3, r1
 8007358:	813b      	strh	r3, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800736c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	2200      	movs	r2, #0
 8007376:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f960 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007394:	d103      	bne.n	800739e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800739c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e05f      	b.n	8007462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073a2:	897b      	ldrh	r3, [r7, #10]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	6a3a      	ldr	r2, [r7, #32]
 80073b6:	492d      	ldr	r1, [pc, #180]	@ (800746c <I2C_RequestMemoryWrite+0x128>)
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f9bb 	bl	8007734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e04c      	b.n	8007462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e0:	6a39      	ldr	r1, [r7, #32]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fa46 	bl	8007874 <I2C_WaitOnTXEFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d107      	bne.n	8007406 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e02b      	b.n	8007462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d105      	bne.n	800741c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007410:	893b      	ldrh	r3, [r7, #8]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	611a      	str	r2, [r3, #16]
 800741a:	e021      	b.n	8007460 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800741c:	893b      	ldrh	r3, [r7, #8]
 800741e:	0a1b      	lsrs	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	b2da      	uxtb	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800742a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742c:	6a39      	ldr	r1, [r7, #32]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fa20 	bl	8007874 <I2C_WaitOnTXEFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00d      	beq.n	8007456 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	2b04      	cmp	r3, #4
 8007440:	d107      	bne.n	8007452 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e005      	b.n	8007462 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007456:	893b      	ldrh	r3, [r7, #8]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	00010002 	.word	0x00010002

08007470 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	4608      	mov	r0, r1
 800747a:	4611      	mov	r1, r2
 800747c:	461a      	mov	r2, r3
 800747e:	4603      	mov	r3, r0
 8007480:	817b      	strh	r3, [r7, #10]
 8007482:	460b      	mov	r3, r1
 8007484:	813b      	strh	r3, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007498:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f8c2 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00d      	beq.n	80074de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d0:	d103      	bne.n	80074da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e0aa      	b.n	8007634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074de:	897b      	ldrh	r3, [r7, #10]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80074ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	6a3a      	ldr	r2, [r7, #32]
 80074f2:	4952      	ldr	r1, [pc, #328]	@ (800763c <I2C_RequestMemoryRead+0x1cc>)
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f91d 	bl	8007734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e097      	b.n	8007634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800751a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751c:	6a39      	ldr	r1, [r7, #32]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f9a8 	bl	8007874 <I2C_WaitOnTXEFlagUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	2b04      	cmp	r3, #4
 8007530:	d107      	bne.n	8007542 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e076      	b.n	8007634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d105      	bne.n	8007558 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800754c:	893b      	ldrh	r3, [r7, #8]
 800754e:	b2da      	uxtb	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	611a      	str	r2, [r3, #16]
 8007556:	e021      	b.n	800759c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007558:	893b      	ldrh	r3, [r7, #8]
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	b29b      	uxth	r3, r3
 800755e:	b2da      	uxtb	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007568:	6a39      	ldr	r1, [r7, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f982 	bl	8007874 <I2C_WaitOnTXEFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00d      	beq.n	8007592 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	2b04      	cmp	r3, #4
 800757c:	d107      	bne.n	800758e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800758c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e050      	b.n	8007634 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007592:	893b      	ldrh	r3, [r7, #8]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800759c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759e:	6a39      	ldr	r1, [r7, #32]
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 f967 	bl	8007874 <I2C_WaitOnTXEFlagUntilTimeout>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d107      	bne.n	80075c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e035      	b.n	8007634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2200      	movs	r2, #0
 80075e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f82b 	bl	8007640 <I2C_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075fe:	d103      	bne.n	8007608 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e013      	b.n	8007634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800760c:	897b      	ldrh	r3, [r7, #10]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	b2da      	uxtb	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	6a3a      	ldr	r2, [r7, #32]
 8007620:	4906      	ldr	r1, [pc, #24]	@ (800763c <I2C_RequestMemoryRead+0x1cc>)
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f886 	bl	8007734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	00010002 	.word	0x00010002

08007640 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007650:	e048      	b.n	80076e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007658:	d044      	beq.n	80076e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765a:	f7fc ffd9 	bl	8004610 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d302      	bcc.n	8007670 <I2C_WaitOnFlagUntilTimeout+0x30>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d139      	bne.n	80076e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	d10d      	bne.n	8007696 <I2C_WaitOnFlagUntilTimeout+0x56>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	43da      	mvns	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	4013      	ands	r3, r2
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	bf0c      	ite	eq
 800768c:	2301      	moveq	r3, #1
 800768e:	2300      	movne	r3, #0
 8007690:	b2db      	uxtb	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	e00c      	b.n	80076b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	43da      	mvns	r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	4013      	ands	r3, r2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf0c      	ite	eq
 80076a8:	2301      	moveq	r3, #1
 80076aa:	2300      	movne	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d116      	bne.n	80076e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2220      	movs	r2, #32
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e023      	b.n	800772c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d10d      	bne.n	800770a <I2C_WaitOnFlagUntilTimeout+0xca>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	43da      	mvns	r2, r3
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4013      	ands	r3, r2
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bf0c      	ite	eq
 8007700:	2301      	moveq	r3, #1
 8007702:	2300      	movne	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	e00c      	b.n	8007724 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	43da      	mvns	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4013      	ands	r3, r2
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf0c      	ite	eq
 800771c:	2301      	moveq	r3, #1
 800771e:	2300      	movne	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	429a      	cmp	r2, r3
 8007728:	d093      	beq.n	8007652 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007742:	e071      	b.n	8007828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800774e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007752:	d123      	bne.n	800779c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007762:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800776c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007788:	f043 0204 	orr.w	r2, r3, #4
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e067      	b.n	800786c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a2:	d041      	beq.n	8007828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a4:	f7fc ff34 	bl	8004610 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d302      	bcc.n	80077ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d136      	bne.n	8007828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	0c1b      	lsrs	r3, r3, #16
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d10c      	bne.n	80077de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	43da      	mvns	r2, r3
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	4013      	ands	r3, r2
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bf14      	ite	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	2300      	moveq	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	e00b      	b.n	80077f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	43da      	mvns	r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	4013      	ands	r3, r2
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bf14      	ite	ne
 80077f0:	2301      	movne	r3, #1
 80077f2:	2300      	moveq	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d016      	beq.n	8007828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e021      	b.n	800786c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	0c1b      	lsrs	r3, r3, #16
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	d10c      	bne.n	800784c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	43da      	mvns	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	4013      	ands	r3, r2
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	bf14      	ite	ne
 8007844:	2301      	movne	r3, #1
 8007846:	2300      	moveq	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e00b      	b.n	8007864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	43da      	mvns	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4013      	ands	r3, r2
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	bf14      	ite	ne
 800785e:	2301      	movne	r3, #1
 8007860:	2300      	moveq	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	f47f af6d 	bne.w	8007744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007880:	e034      	b.n	80078ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f8e3 	bl	8007a4e <I2C_IsAcknowledgeFailed>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e034      	b.n	80078fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d028      	beq.n	80078ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789a:	f7fc feb9 	bl	8004610 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d11d      	bne.n	80078ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ba:	2b80      	cmp	r3, #128	@ 0x80
 80078bc:	d016      	beq.n	80078ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d8:	f043 0220 	orr.w	r2, r3, #32
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e007      	b.n	80078fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f6:	2b80      	cmp	r3, #128	@ 0x80
 80078f8:	d1c3      	bne.n	8007882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007910:	e034      	b.n	800797c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f89b 	bl	8007a4e <I2C_IsAcknowledgeFailed>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e034      	b.n	800798c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d028      	beq.n	800797c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792a:	f7fc fe71 	bl	8004610 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	429a      	cmp	r2, r3
 8007938:	d302      	bcc.n	8007940 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d11d      	bne.n	800797c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f003 0304 	and.w	r3, r3, #4
 800794a:	2b04      	cmp	r3, #4
 800794c:	d016      	beq.n	800797c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007968:	f043 0220 	orr.w	r2, r3, #32
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e007      	b.n	800798c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f003 0304 	and.w	r3, r3, #4
 8007986:	2b04      	cmp	r3, #4
 8007988:	d1c3      	bne.n	8007912 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079a0:	e049      	b.n	8007a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	d119      	bne.n	80079e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0210 	mvn.w	r2, #16
 80079b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e030      	b.n	8007a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e4:	f7fc fe14 	bl	8004610 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d302      	bcc.n	80079fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11d      	bne.n	8007a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a04:	2b40      	cmp	r3, #64	@ 0x40
 8007a06:	d016      	beq.n	8007a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a22:	f043 0220 	orr.w	r2, r3, #32
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e007      	b.n	8007a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a40:	2b40      	cmp	r3, #64	@ 0x40
 8007a42:	d1ae      	bne.n	80079a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a64:	d11b      	bne.n	8007a9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	f043 0204 	orr.w	r2, r3, #4
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	d129      	bne.n	8007b16 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2224      	movs	r2, #36	@ 0x24
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0210 	bic.w	r2, r2, #16
 8007ae8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0201 	orr.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	e000      	b.n	8007b18 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007b16:	2302      	movs	r3, #2
  }
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d12a      	bne.n	8007b94 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2224      	movs	r2, #36	@ 0x24
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0201 	bic.w	r2, r2, #1
 8007b54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007b5e:	89fb      	ldrh	r3, [r7, #14]
 8007b60:	f023 030f 	bic.w	r3, r3, #15
 8007b64:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	89fb      	ldrh	r3, [r7, #14]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	89fa      	ldrh	r2, [r7, #14]
 8007b76:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	e000      	b.n	8007b96 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007b94:	2302      	movs	r3, #2
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e0bf      	b.n	8007d36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fb fe42 	bl	8003854 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007be6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6999      	ldr	r1, [r3, #24]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bfc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6899      	ldr	r1, [r3, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4b4a      	ldr	r3, [pc, #296]	@ (8007d40 <HAL_LTDC_Init+0x19c>)
 8007c18:	400b      	ands	r3, r1
 8007c1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	041b      	lsls	r3, r3, #16
 8007c22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6899      	ldr	r1, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68d9      	ldr	r1, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	4b3e      	ldr	r3, [pc, #248]	@ (8007d40 <HAL_LTDC_Init+0x19c>)
 8007c46:	400b      	ands	r3, r1
 8007c48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68d9      	ldr	r1, [r3, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1a      	ldr	r2, [r3, #32]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6919      	ldr	r1, [r3, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b33      	ldr	r3, [pc, #204]	@ (8007d40 <HAL_LTDC_Init+0x19c>)
 8007c74:	400b      	ands	r3, r1
 8007c76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6919      	ldr	r1, [r3, #16]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6959      	ldr	r1, [r3, #20]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b27      	ldr	r3, [pc, #156]	@ (8007d40 <HAL_LTDC_Init+0x19c>)
 8007ca2:	400b      	ands	r3, r1
 8007ca4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	041b      	lsls	r3, r3, #16
 8007cac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6959      	ldr	r1, [r3, #20]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007cd4:	041b      	lsls	r3, r3, #16
 8007cd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0206 	orr.w	r2, r2, #6
 8007d12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0201 	orr.w	r2, r2, #1
 8007d22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	f000f800 	.word	0xf000f800

08007d44 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d023      	beq.n	8007dae <HAL_LTDC_IRQHandler+0x6a>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01e      	beq.n	8007dae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0204 	bic.w	r2, r2, #4
 8007d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2204      	movs	r2, #4
 8007d86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d8e:	f043 0201 	orr.w	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f86f 	bl	8007e8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d023      	beq.n	8007e00 <HAL_LTDC_IRQHandler+0xbc>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01e      	beq.n	8007e00 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0202 	bic.w	r2, r2, #2
 8007dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007de0:	f043 0202 	orr.w	r2, r3, #2
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2204      	movs	r2, #4
 8007dee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f846 	bl	8007e8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d01b      	beq.n	8007e42 <HAL_LTDC_IRQHandler+0xfe>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d016      	beq.n	8007e42 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f82f 	bl	8007ea0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01b      	beq.n	8007e84 <HAL_LTDC_IRQHandler+0x140>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d016      	beq.n	8007e84 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0208 	bic.w	r2, r2, #8
 8007e64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f818 	bl	8007eb4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007e84:	bf00      	nop
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007ec8:	b5b0      	push	{r4, r5, r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_LTDC_ConfigLayer+0x1a>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e02c      	b.n	8007f3c <HAL_LTDC_ConfigLayer+0x74>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2134      	movs	r1, #52	@ 0x34
 8007ef8:	fb01 f303 	mul.w	r3, r1, r3
 8007efc:	4413      	add	r3, r2
 8007efe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4614      	mov	r4, r2
 8007f06:	461d      	mov	r5, r3
 8007f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 f83b 	bl	8007f98 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2201      	movs	r2, #1
 8007f28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bdb0      	pop	{r4, r5, r7, pc}

08007f44 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d101      	bne.n	8007f5a <HAL_LTDC_EnableDither+0x16>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e016      	b.n	8007f88 <HAL_LTDC_EnableDither+0x44>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f94 <HAL_LTDC_EnableDither+0x50>)
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	4a09      	ldr	r2, [pc, #36]	@ (8007f94 <HAL_LTDC_EnableDither+0x50>)
 8007f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f74:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	40016800 	.word	0x40016800

08007f98 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b089      	sub	sp, #36	@ 0x24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	0c1b      	lsrs	r3, r3, #16
 8007fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fb4:	4413      	add	r3, r2
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	01db      	lsls	r3, r3, #7
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3384      	adds	r3, #132	@ 0x84
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	01d2      	lsls	r2, r2, #7
 8007fd4:	440a      	add	r2, r1
 8007fd6:	3284      	adds	r2, #132	@ 0x84
 8007fd8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007fdc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ff0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	01db      	lsls	r3, r3, #7
 8007ffc:	440b      	add	r3, r1
 8007ffe:	3384      	adds	r3, #132	@ 0x84
 8008000:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008006:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008016:	4413      	add	r3, r2
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	01db      	lsls	r3, r3, #7
 8008026:	4413      	add	r3, r2
 8008028:	3384      	adds	r3, #132	@ 0x84
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	4611      	mov	r1, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	01d2      	lsls	r2, r2, #7
 8008036:	440a      	add	r2, r1
 8008038:	3284      	adds	r2, #132	@ 0x84
 800803a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800803e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800804e:	4413      	add	r3, r2
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	01db      	lsls	r3, r3, #7
 800805c:	440b      	add	r3, r1
 800805e:	3384      	adds	r3, #132	@ 0x84
 8008060:	4619      	mov	r1, r3
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4313      	orrs	r3, r2
 8008066:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	01db      	lsls	r3, r3, #7
 8008072:	4413      	add	r3, r2
 8008074:	3384      	adds	r3, #132	@ 0x84
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	4611      	mov	r1, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	01d2      	lsls	r2, r2, #7
 8008082:	440a      	add	r2, r1
 8008084:	3284      	adds	r2, #132	@ 0x84
 8008086:	f023 0307 	bic.w	r3, r3, #7
 800808a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	01db      	lsls	r3, r3, #7
 8008096:	4413      	add	r3, r2
 8008098:	3384      	adds	r3, #132	@ 0x84
 800809a:	461a      	mov	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	061b      	lsls	r3, r3, #24
 80080bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	01db      	lsls	r3, r3, #7
 80080c8:	4413      	add	r3, r2
 80080ca:	3384      	adds	r3, #132	@ 0x84
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	01db      	lsls	r3, r3, #7
 80080d8:	4413      	add	r3, r2
 80080da:	3384      	adds	r3, #132	@ 0x84
 80080dc:	461a      	mov	r2, r3
 80080de:	2300      	movs	r3, #0
 80080e0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80080e8:	461a      	mov	r2, r3
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	431a      	orrs	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	01db      	lsls	r3, r3, #7
 80080fc:	440b      	add	r3, r1
 80080fe:	3384      	adds	r3, #132	@ 0x84
 8008100:	4619      	mov	r1, r3
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	4313      	orrs	r3, r2
 8008106:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	461a      	mov	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	01db      	lsls	r3, r3, #7
 8008112:	4413      	add	r3, r2
 8008114:	3384      	adds	r3, #132	@ 0x84
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	6812      	ldr	r2, [r2, #0]
 800811c:	4611      	mov	r1, r2
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	01d2      	lsls	r2, r2, #7
 8008122:	440a      	add	r2, r1
 8008124:	3284      	adds	r2, #132	@ 0x84
 8008126:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800812a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	01db      	lsls	r3, r3, #7
 8008136:	4413      	add	r3, r2
 8008138:	3384      	adds	r3, #132	@ 0x84
 800813a:	461a      	mov	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	01db      	lsls	r3, r3, #7
 800814c:	4413      	add	r3, r2
 800814e:	3384      	adds	r3, #132	@ 0x84
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	6812      	ldr	r2, [r2, #0]
 8008156:	4611      	mov	r1, r2
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	01d2      	lsls	r2, r2, #7
 800815c:	440a      	add	r2, r1
 800815e:	3284      	adds	r2, #132	@ 0x84
 8008160:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008164:	f023 0307 	bic.w	r3, r3, #7
 8008168:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	69da      	ldr	r2, [r3, #28]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	68f9      	ldr	r1, [r7, #12]
 8008174:	6809      	ldr	r1, [r1, #0]
 8008176:	4608      	mov	r0, r1
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	01c9      	lsls	r1, r1, #7
 800817c:	4401      	add	r1, r0
 800817e:	3184      	adds	r1, #132	@ 0x84
 8008180:	4313      	orrs	r3, r2
 8008182:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	01db      	lsls	r3, r3, #7
 800818e:	4413      	add	r3, r2
 8008190:	3384      	adds	r3, #132	@ 0x84
 8008192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	01db      	lsls	r3, r3, #7
 800819e:	4413      	add	r3, r2
 80081a0:	3384      	adds	r3, #132	@ 0x84
 80081a2:	461a      	mov	r2, r3
 80081a4:	2300      	movs	r3, #0
 80081a6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	01db      	lsls	r3, r3, #7
 80081b2:	4413      	add	r3, r2
 80081b4:	3384      	adds	r3, #132	@ 0x84
 80081b6:	461a      	mov	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081bc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80081c6:	2304      	movs	r3, #4
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	e01b      	b.n	8008204 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d102      	bne.n	80081da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80081d4:	2303      	movs	r3, #3
 80081d6:	61fb      	str	r3, [r7, #28]
 80081d8:	e014      	b.n	8008204 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d00b      	beq.n	80081fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d007      	beq.n	80081fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d003      	beq.n	80081fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081f6:	2b07      	cmp	r3, #7
 80081f8:	d102      	bne.n	8008200 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80081fa:	2302      	movs	r3, #2
 80081fc:	61fb      	str	r3, [r7, #28]
 80081fe:	e001      	b.n	8008204 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008200:	2301      	movs	r3, #1
 8008202:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	01db      	lsls	r3, r3, #7
 800820e:	4413      	add	r3, r2
 8008210:	3384      	adds	r3, #132	@ 0x84
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	4611      	mov	r1, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	01d2      	lsls	r2, r2, #7
 800821e:	440a      	add	r2, r1
 8008220:	3284      	adds	r2, #132	@ 0x84
 8008222:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008226:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	6859      	ldr	r1, [r3, #4]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	1acb      	subs	r3, r1, r3
 800823e:	69f9      	ldr	r1, [r7, #28]
 8008240:	fb01 f303 	mul.w	r3, r1, r3
 8008244:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	6809      	ldr	r1, [r1, #0]
 800824a:	4608      	mov	r0, r1
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	01c9      	lsls	r1, r1, #7
 8008250:	4401      	add	r1, r0
 8008252:	3184      	adds	r1, #132	@ 0x84
 8008254:	4313      	orrs	r3, r2
 8008256:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	01db      	lsls	r3, r3, #7
 8008262:	4413      	add	r3, r2
 8008264:	3384      	adds	r3, #132	@ 0x84
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	6812      	ldr	r2, [r2, #0]
 800826c:	4611      	mov	r1, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	01d2      	lsls	r2, r2, #7
 8008272:	440a      	add	r2, r1
 8008274:	3284      	adds	r2, #132	@ 0x84
 8008276:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	01db      	lsls	r3, r3, #7
 800828a:	4413      	add	r3, r2
 800828c:	3384      	adds	r3, #132	@ 0x84
 800828e:	461a      	mov	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008294:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	01db      	lsls	r3, r3, #7
 80082a0:	4413      	add	r3, r2
 80082a2:	3384      	adds	r3, #132	@ 0x84
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	4611      	mov	r1, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	01d2      	lsls	r2, r2, #7
 80082b0:	440a      	add	r2, r1
 80082b2:	3284      	adds	r2, #132	@ 0x84
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	6013      	str	r3, [r2, #0]
}
 80082ba:	bf00      	nop
 80082bc:	3724      	adds	r7, #36	@ 0x24
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80082d2:	2300      	movs	r3, #0
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	4b20      	ldr	r3, [pc, #128]	@ (8008358 <HAL_PWREx_EnableOverDrive+0x90>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082da:	4a1f      	ldr	r2, [pc, #124]	@ (8008358 <HAL_PWREx_EnableOverDrive+0x90>)
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80082e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008358 <HAL_PWREx_EnableOverDrive+0x90>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082ee:	4b1b      	ldr	r3, [pc, #108]	@ (800835c <HAL_PWREx_EnableOverDrive+0x94>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082f4:	f7fc f98c 	bl	8004610 <HAL_GetTick>
 80082f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082fa:	e009      	b.n	8008310 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082fc:	f7fc f988 	bl	8004610 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800830a:	d901      	bls.n	8008310 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e01f      	b.n	8008350 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008310:	4b13      	ldr	r3, [pc, #76]	@ (8008360 <HAL_PWREx_EnableOverDrive+0x98>)
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800831c:	d1ee      	bne.n	80082fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800831e:	4b11      	ldr	r3, [pc, #68]	@ (8008364 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008320:	2201      	movs	r2, #1
 8008322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008324:	f7fc f974 	bl	8004610 <HAL_GetTick>
 8008328:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800832a:	e009      	b.n	8008340 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800832c:	f7fc f970 	bl	8004610 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800833a:	d901      	bls.n	8008340 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e007      	b.n	8008350 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <HAL_PWREx_EnableOverDrive+0x98>)
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800834c:	d1ee      	bne.n	800832c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40023800 	.word	0x40023800
 800835c:	420e0040 	.word	0x420e0040
 8008360:	40007000 	.word	0x40007000
 8008364:	420e0044 	.word	0x420e0044

08008368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e267      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d075      	beq.n	8008472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008386:	4b88      	ldr	r3, [pc, #544]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 030c 	and.w	r3, r3, #12
 800838e:	2b04      	cmp	r3, #4
 8008390:	d00c      	beq.n	80083ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008392:	4b85      	ldr	r3, [pc, #532]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800839a:	2b08      	cmp	r3, #8
 800839c:	d112      	bne.n	80083c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800839e:	4b82      	ldr	r3, [pc, #520]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083aa:	d10b      	bne.n	80083c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ac:	4b7e      	ldr	r3, [pc, #504]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d05b      	beq.n	8008470 <HAL_RCC_OscConfig+0x108>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d157      	bne.n	8008470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e242      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083cc:	d106      	bne.n	80083dc <HAL_RCC_OscConfig+0x74>
 80083ce:	4b76      	ldr	r3, [pc, #472]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a75      	ldr	r2, [pc, #468]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	e01d      	b.n	8008418 <HAL_RCC_OscConfig+0xb0>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083e4:	d10c      	bne.n	8008400 <HAL_RCC_OscConfig+0x98>
 80083e6:	4b70      	ldr	r3, [pc, #448]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a6f      	ldr	r2, [pc, #444]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	4b6d      	ldr	r3, [pc, #436]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a6c      	ldr	r2, [pc, #432]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e00b      	b.n	8008418 <HAL_RCC_OscConfig+0xb0>
 8008400:	4b69      	ldr	r3, [pc, #420]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a68      	ldr	r2, [pc, #416]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	4b66      	ldr	r3, [pc, #408]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a65      	ldr	r2, [pc, #404]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d013      	beq.n	8008448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008420:	f7fc f8f6 	bl	8004610 <HAL_GetTick>
 8008424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008428:	f7fc f8f2 	bl	8004610 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b64      	cmp	r3, #100	@ 0x64
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e207      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843a:	4b5b      	ldr	r3, [pc, #364]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0xc0>
 8008446:	e014      	b.n	8008472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008448:	f7fc f8e2 	bl	8004610 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008450:	f7fc f8de 	bl	8004610 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b64      	cmp	r3, #100	@ 0x64
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e1f3      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008462:	4b51      	ldr	r3, [pc, #324]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0xe8>
 800846e:	e000      	b.n	8008472 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d063      	beq.n	8008546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800847e:	4b4a      	ldr	r3, [pc, #296]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 030c 	and.w	r3, r3, #12
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800848a:	4b47      	ldr	r3, [pc, #284]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008492:	2b08      	cmp	r3, #8
 8008494:	d11c      	bne.n	80084d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008496:	4b44      	ldr	r3, [pc, #272]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d116      	bne.n	80084d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084a2:	4b41      	ldr	r3, [pc, #260]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_RCC_OscConfig+0x152>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d001      	beq.n	80084ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e1c7      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ba:	4b3b      	ldr	r3, [pc, #236]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	4937      	ldr	r1, [pc, #220]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ce:	e03a      	b.n	8008546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d020      	beq.n	800851a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084d8:	4b34      	ldr	r3, [pc, #208]	@ (80085ac <HAL_RCC_OscConfig+0x244>)
 80084da:	2201      	movs	r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084de:	f7fc f897 	bl	8004610 <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e6:	f7fc f893 	bl	8004610 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e1a8      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f8:	4b2b      	ldr	r3, [pc, #172]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0f0      	beq.n	80084e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008504:	4b28      	ldr	r3, [pc, #160]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4925      	ldr	r1, [pc, #148]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008514:	4313      	orrs	r3, r2
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	e015      	b.n	8008546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800851a:	4b24      	ldr	r3, [pc, #144]	@ (80085ac <HAL_RCC_OscConfig+0x244>)
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fc f876 	bl	8004610 <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008528:	f7fc f872 	bl	8004610 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e187      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800853a:	4b1b      	ldr	r3, [pc, #108]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d036      	beq.n	80085c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d016      	beq.n	8008588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800855a:	4b15      	ldr	r3, [pc, #84]	@ (80085b0 <HAL_RCC_OscConfig+0x248>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008560:	f7fc f856 	bl	8004610 <HAL_GetTick>
 8008564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008568:	f7fc f852 	bl	8004610 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e167      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800857a:	4b0b      	ldr	r3, [pc, #44]	@ (80085a8 <HAL_RCC_OscConfig+0x240>)
 800857c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f0      	beq.n	8008568 <HAL_RCC_OscConfig+0x200>
 8008586:	e01b      	b.n	80085c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008588:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <HAL_RCC_OscConfig+0x248>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800858e:	f7fc f83f 	bl	8004610 <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008594:	e00e      	b.n	80085b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008596:	f7fc f83b 	bl	8004610 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d907      	bls.n	80085b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e150      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
 80085a8:	40023800 	.word	0x40023800
 80085ac:	42470000 	.word	0x42470000
 80085b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085b4:	4b88      	ldr	r3, [pc, #544]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1ea      	bne.n	8008596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8097 	beq.w	80086fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085d2:	4b81      	ldr	r3, [pc, #516]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10f      	bne.n	80085fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085de:	2300      	movs	r3, #0
 80085e0:	60bb      	str	r3, [r7, #8]
 80085e2:	4b7d      	ldr	r3, [pc, #500]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e6:	4a7c      	ldr	r2, [pc, #496]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80085ee:	4b7a      	ldr	r3, [pc, #488]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f6:	60bb      	str	r3, [r7, #8]
 80085f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085fe:	4b77      	ldr	r3, [pc, #476]	@ (80087dc <HAL_RCC_OscConfig+0x474>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d118      	bne.n	800863c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800860a:	4b74      	ldr	r3, [pc, #464]	@ (80087dc <HAL_RCC_OscConfig+0x474>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a73      	ldr	r2, [pc, #460]	@ (80087dc <HAL_RCC_OscConfig+0x474>)
 8008610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008616:	f7fb fffb 	bl	8004610 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800861e:	f7fb fff7 	bl	8004610 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e10c      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008630:	4b6a      	ldr	r3, [pc, #424]	@ (80087dc <HAL_RCC_OscConfig+0x474>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0f0      	beq.n	800861e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d106      	bne.n	8008652 <HAL_RCC_OscConfig+0x2ea>
 8008644:	4b64      	ldr	r3, [pc, #400]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008648:	4a63      	ldr	r2, [pc, #396]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 800864a:	f043 0301 	orr.w	r3, r3, #1
 800864e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008650:	e01c      	b.n	800868c <HAL_RCC_OscConfig+0x324>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b05      	cmp	r3, #5
 8008658:	d10c      	bne.n	8008674 <HAL_RCC_OscConfig+0x30c>
 800865a:	4b5f      	ldr	r3, [pc, #380]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 800865c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800865e:	4a5e      	ldr	r2, [pc, #376]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	6713      	str	r3, [r2, #112]	@ 0x70
 8008666:	4b5c      	ldr	r3, [pc, #368]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866a:	4a5b      	ldr	r2, [pc, #364]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	6713      	str	r3, [r2, #112]	@ 0x70
 8008672:	e00b      	b.n	800868c <HAL_RCC_OscConfig+0x324>
 8008674:	4b58      	ldr	r3, [pc, #352]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008678:	4a57      	ldr	r2, [pc, #348]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008680:	4b55      	ldr	r3, [pc, #340]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008684:	4a54      	ldr	r2, [pc, #336]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008686:	f023 0304 	bic.w	r3, r3, #4
 800868a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d015      	beq.n	80086c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008694:	f7fb ffbc 	bl	8004610 <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800869a:	e00a      	b.n	80086b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800869c:	f7fb ffb8 	bl	8004610 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e0cb      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086b2:	4b49      	ldr	r3, [pc, #292]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0ee      	beq.n	800869c <HAL_RCC_OscConfig+0x334>
 80086be:	e014      	b.n	80086ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086c0:	f7fb ffa6 	bl	8004610 <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086c6:	e00a      	b.n	80086de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086c8:	f7fb ffa2 	bl	8004610 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e0b5      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086de:	4b3e      	ldr	r3, [pc, #248]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1ee      	bne.n	80086c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d105      	bne.n	80086fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086f0:	4b39      	ldr	r3, [pc, #228]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f4:	4a38      	ldr	r2, [pc, #224]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80a1 	beq.w	8008848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008706:	4b34      	ldr	r3, [pc, #208]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b08      	cmp	r3, #8
 8008710:	d05c      	beq.n	80087cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d141      	bne.n	800879e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800871a:	4b31      	ldr	r3, [pc, #196]	@ (80087e0 <HAL_RCC_OscConfig+0x478>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008720:	f7fb ff76 	bl	8004610 <HAL_GetTick>
 8008724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008726:	e008      	b.n	800873a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008728:	f7fb ff72 	bl	8004610 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d901      	bls.n	800873a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e087      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800873a:	4b27      	ldr	r3, [pc, #156]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f0      	bne.n	8008728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69da      	ldr	r2, [r3, #28]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008754:	019b      	lsls	r3, r3, #6
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	3b01      	subs	r3, #1
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008768:	061b      	lsls	r3, r3, #24
 800876a:	491b      	ldr	r1, [pc, #108]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 800876c:	4313      	orrs	r3, r2
 800876e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008770:	4b1b      	ldr	r3, [pc, #108]	@ (80087e0 <HAL_RCC_OscConfig+0x478>)
 8008772:	2201      	movs	r2, #1
 8008774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008776:	f7fb ff4b 	bl	8004610 <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800877e:	f7fb ff47 	bl	8004610 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e05c      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008790:	4b11      	ldr	r3, [pc, #68]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0f0      	beq.n	800877e <HAL_RCC_OscConfig+0x416>
 800879c:	e054      	b.n	8008848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800879e:	4b10      	ldr	r3, [pc, #64]	@ (80087e0 <HAL_RCC_OscConfig+0x478>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a4:	f7fb ff34 	bl	8004610 <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ac:	f7fb ff30 	bl	8004610 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e045      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087be:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <HAL_RCC_OscConfig+0x470>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1f0      	bne.n	80087ac <HAL_RCC_OscConfig+0x444>
 80087ca:	e03d      	b.n	8008848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d107      	bne.n	80087e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e038      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
 80087d8:	40023800 	.word	0x40023800
 80087dc:	40007000 	.word	0x40007000
 80087e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008854 <HAL_RCC_OscConfig+0x4ec>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d028      	beq.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d121      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800880a:	429a      	cmp	r2, r3
 800880c:	d11a      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008814:	4013      	ands	r3, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800881a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800881c:	4293      	cmp	r3, r2
 800881e:	d111      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	3b01      	subs	r3, #1
 800882e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008830:	429a      	cmp	r2, r3
 8008832:	d107      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008840:	429a      	cmp	r2, r3
 8008842:	d001      	beq.n	8008848 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	40023800 	.word	0x40023800

08008858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0cc      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800886c:	4b68      	ldr	r3, [pc, #416]	@ (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d90c      	bls.n	8008894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887a:	4b65      	ldr	r3, [pc, #404]	@ (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008882:	4b63      	ldr	r3, [pc, #396]	@ (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d001      	beq.n	8008894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0b8      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d020      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088ac:	4b59      	ldr	r3, [pc, #356]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	4a58      	ldr	r2, [pc, #352]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80088b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088c4:	4b53      	ldr	r3, [pc, #332]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4a52      	ldr	r2, [pc, #328]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80088ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088d0:	4b50      	ldr	r3, [pc, #320]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	494d      	ldr	r1, [pc, #308]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d044      	beq.n	8008978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d107      	bne.n	8008906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f6:	4b47      	ldr	r3, [pc, #284]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d119      	bne.n	8008936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e07f      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d003      	beq.n	8008916 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008912:	2b03      	cmp	r3, #3
 8008914:	d107      	bne.n	8008926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008916:	4b3f      	ldr	r3, [pc, #252]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e06f      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008926:	4b3b      	ldr	r3, [pc, #236]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e067      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008936:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f023 0203 	bic.w	r2, r3, #3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	4934      	ldr	r1, [pc, #208]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008944:	4313      	orrs	r3, r2
 8008946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008948:	f7fb fe62 	bl	8004610 <HAL_GetTick>
 800894c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800894e:	e00a      	b.n	8008966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008950:	f7fb fe5e 	bl	8004610 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800895e:	4293      	cmp	r3, r2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e04f      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008966:	4b2b      	ldr	r3, [pc, #172]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 020c 	and.w	r2, r3, #12
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	429a      	cmp	r2, r3
 8008976:	d1eb      	bne.n	8008950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008978:	4b25      	ldr	r3, [pc, #148]	@ (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 030f 	and.w	r3, r3, #15
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d20c      	bcs.n	80089a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008986:	4b22      	ldr	r3, [pc, #136]	@ (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800898e:	4b20      	ldr	r3, [pc, #128]	@ (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d001      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e032      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089ac:	4b19      	ldr	r3, [pc, #100]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4916      	ldr	r1, [pc, #88]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d009      	beq.n	80089de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089ca:	4b12      	ldr	r3, [pc, #72]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	490e      	ldr	r1, [pc, #56]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80089de:	f000 f821 	bl	8008a24 <HAL_RCC_GetSysClockFreq>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	091b      	lsrs	r3, r3, #4
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	490a      	ldr	r1, [pc, #40]	@ (8008a18 <HAL_RCC_ClockConfig+0x1c0>)
 80089f0:	5ccb      	ldrb	r3, [r1, r3]
 80089f2:	fa22 f303 	lsr.w	r3, r2, r3
 80089f6:	4a09      	ldr	r2, [pc, #36]	@ (8008a1c <HAL_RCC_ClockConfig+0x1c4>)
 80089f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80089fa:	4b09      	ldr	r3, [pc, #36]	@ (8008a20 <HAL_RCC_ClockConfig+0x1c8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fb fb94 	bl	800412c <HAL_InitTick>

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40023c00 	.word	0x40023c00
 8008a14:	40023800 	.word	0x40023800
 8008a18:	0800d990 	.word	0x0800d990
 8008a1c:	20000084 	.word	0x20000084
 8008a20:	20000088 	.word	0x20000088

08008a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a28:	b094      	sub	sp, #80	@ 0x50
 8008a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a3c:	4b79      	ldr	r3, [pc, #484]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 030c 	and.w	r3, r3, #12
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d00d      	beq.n	8008a64 <HAL_RCC_GetSysClockFreq+0x40>
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	f200 80e1 	bhi.w	8008c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_RCC_GetSysClockFreq+0x34>
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d003      	beq.n	8008a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8008a56:	e0db      	b.n	8008c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a58:	4b73      	ldr	r3, [pc, #460]	@ (8008c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a5c:	e0db      	b.n	8008c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a5e:	4b73      	ldr	r3, [pc, #460]	@ (8008c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8008a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a62:	e0d8      	b.n	8008c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a64:	4b6f      	ldr	r3, [pc, #444]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d063      	beq.n	8008b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	099b      	lsrs	r3, r3, #6
 8008a80:	2200      	movs	r2, #0
 8008a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a8e:	2300      	movs	r3, #0
 8008a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008a96:	4622      	mov	r2, r4
 8008a98:	462b      	mov	r3, r5
 8008a9a:	f04f 0000 	mov.w	r0, #0
 8008a9e:	f04f 0100 	mov.w	r1, #0
 8008aa2:	0159      	lsls	r1, r3, #5
 8008aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008aa8:	0150      	lsls	r0, r2, #5
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4621      	mov	r1, r4
 8008ab0:	1a51      	subs	r1, r2, r1
 8008ab2:	6139      	str	r1, [r7, #16]
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ac8:	4659      	mov	r1, fp
 8008aca:	018b      	lsls	r3, r1, #6
 8008acc:	4651      	mov	r1, sl
 8008ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ad2:	4651      	mov	r1, sl
 8008ad4:	018a      	lsls	r2, r1, #6
 8008ad6:	4651      	mov	r1, sl
 8008ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8008adc:	4659      	mov	r1, fp
 8008ade:	eb63 0901 	sbc.w	r9, r3, r1
 8008ae2:	f04f 0200 	mov.w	r2, #0
 8008ae6:	f04f 0300 	mov.w	r3, #0
 8008aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008af6:	4690      	mov	r8, r2
 8008af8:	4699      	mov	r9, r3
 8008afa:	4623      	mov	r3, r4
 8008afc:	eb18 0303 	adds.w	r3, r8, r3
 8008b00:	60bb      	str	r3, [r7, #8]
 8008b02:	462b      	mov	r3, r5
 8008b04:	eb49 0303 	adc.w	r3, r9, r3
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b16:	4629      	mov	r1, r5
 8008b18:	024b      	lsls	r3, r1, #9
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b20:	4621      	mov	r1, r4
 8008b22:	024a      	lsls	r2, r1, #9
 8008b24:	4610      	mov	r0, r2
 8008b26:	4619      	mov	r1, r3
 8008b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b34:	f7f7 ff9a 	bl	8000a6c <__aeabi_uldivmod>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b40:	e058      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b42:	4b38      	ldr	r3, [pc, #224]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	099b      	lsrs	r3, r3, #6
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b52:	623b      	str	r3, [r7, #32]
 8008b54:	2300      	movs	r3, #0
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	464b      	mov	r3, r9
 8008b60:	f04f 0000 	mov.w	r0, #0
 8008b64:	f04f 0100 	mov.w	r1, #0
 8008b68:	0159      	lsls	r1, r3, #5
 8008b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b6e:	0150      	lsls	r0, r2, #5
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4641      	mov	r1, r8
 8008b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008b94:	ebb2 040a 	subs.w	r4, r2, sl
 8008b98:	eb63 050b 	sbc.w	r5, r3, fp
 8008b9c:	f04f 0200 	mov.w	r2, #0
 8008ba0:	f04f 0300 	mov.w	r3, #0
 8008ba4:	00eb      	lsls	r3, r5, #3
 8008ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008baa:	00e2      	lsls	r2, r4, #3
 8008bac:	4614      	mov	r4, r2
 8008bae:	461d      	mov	r5, r3
 8008bb0:	4643      	mov	r3, r8
 8008bb2:	18e3      	adds	r3, r4, r3
 8008bb4:	603b      	str	r3, [r7, #0]
 8008bb6:	464b      	mov	r3, r9
 8008bb8:	eb45 0303 	adc.w	r3, r5, r3
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bca:	4629      	mov	r1, r5
 8008bcc:	028b      	lsls	r3, r1, #10
 8008bce:	4621      	mov	r1, r4
 8008bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	028a      	lsls	r2, r1, #10
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bde:	2200      	movs	r2, #0
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	61fa      	str	r2, [r7, #28]
 8008be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008be8:	f7f7 ff40 	bl	8000a6c <__aeabi_uldivmod>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	0c1b      	lsrs	r3, r3, #16
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c0e:	e002      	b.n	8008c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3750      	adds	r7, #80	@ 0x50
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c22:	bf00      	nop
 8008c24:	40023800 	.word	0x40023800
 8008c28:	00f42400 	.word	0x00f42400
 8008c2c:	007a1200 	.word	0x007a1200

08008c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c34:	4b03      	ldr	r3, [pc, #12]	@ (8008c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c36:	681b      	ldr	r3, [r3, #0]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20000084 	.word	0x20000084

08008c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c4c:	f7ff fff0 	bl	8008c30 <HAL_RCC_GetHCLKFreq>
 8008c50:	4602      	mov	r2, r0
 8008c52:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	0a9b      	lsrs	r3, r3, #10
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	4903      	ldr	r1, [pc, #12]	@ (8008c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c5e:	5ccb      	ldrb	r3, [r1, r3]
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40023800 	.word	0x40023800
 8008c6c:	0800d9a0 	.word	0x0800d9a0

08008c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	220f      	movs	r2, #15
 8008c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c80:	4b12      	ldr	r3, [pc, #72]	@ (8008ccc <HAL_RCC_GetClockConfig+0x5c>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 0203 	and.w	r2, r3, #3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008ccc <HAL_RCC_GetClockConfig+0x5c>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008c98:	4b0c      	ldr	r3, [pc, #48]	@ (8008ccc <HAL_RCC_GetClockConfig+0x5c>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ca4:	4b09      	ldr	r3, [pc, #36]	@ (8008ccc <HAL_RCC_GetClockConfig+0x5c>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	08db      	lsrs	r3, r3, #3
 8008caa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008cb2:	4b07      	ldr	r3, [pc, #28]	@ (8008cd0 <HAL_RCC_GetClockConfig+0x60>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 020f 	and.w	r2, r3, #15
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	601a      	str	r2, [r3, #0]
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	40023c00 	.word	0x40023c00

08008cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10b      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d105      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d075      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008d08:	4b91      	ldr	r3, [pc, #580]	@ (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d0e:	f7fb fc7f 	bl	8004610 <HAL_GetTick>
 8008d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d14:	e008      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d16:	f7fb fc7b 	bl	8004610 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e189      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d28:	4b8a      	ldr	r3, [pc, #552]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1f0      	bne.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	019a      	lsls	r2, r3, #6
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	071b      	lsls	r3, r3, #28
 8008d4c:	4981      	ldr	r1, [pc, #516]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01f      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d60:	4b7c      	ldr	r3, [pc, #496]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d66:	0f1b      	lsrs	r3, r3, #28
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	019a      	lsls	r2, r3, #6
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	061b      	lsls	r3, r3, #24
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	071b      	lsls	r3, r3, #28
 8008d80:	4974      	ldr	r1, [pc, #464]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008d88:	4b72      	ldr	r3, [pc, #456]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d8e:	f023 021f 	bic.w	r2, r3, #31
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	496e      	ldr	r1, [pc, #440]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00d      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	019a      	lsls	r2, r3, #6
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	061b      	lsls	r3, r3, #24
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	071b      	lsls	r3, r3, #28
 8008dc0:	4964      	ldr	r1, [pc, #400]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008dc8:	4b61      	ldr	r3, [pc, #388]	@ (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dce:	f7fb fc1f 	bl	8004610 <HAL_GetTick>
 8008dd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dd4:	e008      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008dd6:	f7fb fc1b 	bl	8004610 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d901      	bls.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e129      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008de8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0f0      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d105      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d079      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008e0c:	4b52      	ldr	r3, [pc, #328]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e12:	f7fb fbfd 	bl	8004610 <HAL_GetTick>
 8008e16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e18:	e008      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e1a:	f7fb fbf9 	bl	8004610 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d901      	bls.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e107      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e2c:	4b49      	ldr	r3, [pc, #292]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e38:	d0ef      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d020      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e46:	4b43      	ldr	r3, [pc, #268]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e4c:	0f1b      	lsrs	r3, r3, #28
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	019a      	lsls	r2, r3, #6
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	061b      	lsls	r3, r3, #24
 8008e60:	431a      	orrs	r2, r3
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	071b      	lsls	r3, r3, #28
 8008e66:	493b      	ldr	r1, [pc, #236]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008e6e:	4b39      	ldr	r3, [pc, #228]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e74:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	4934      	ldr	r1, [pc, #208]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01e      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e94:	4b2f      	ldr	r3, [pc, #188]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e9a:	0e1b      	lsrs	r3, r3, #24
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	019a      	lsls	r2, r3, #6
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	061b      	lsls	r3, r3, #24
 8008eac:	431a      	orrs	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	071b      	lsls	r3, r3, #28
 8008eb4:	4927      	ldr	r1, [pc, #156]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ebc:	4b25      	ldr	r3, [pc, #148]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ec2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eca:	4922      	ldr	r1, [pc, #136]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ed2:	4b21      	ldr	r3, [pc, #132]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ed8:	f7fb fb9a 	bl	8004610 <HAL_GetTick>
 8008edc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ee0:	f7fb fb96 	bl	8004610 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e0a4      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ef2:	4b18      	ldr	r3, [pc, #96]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008efe:	d1ef      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 808b 	beq.w	8009024 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	4b10      	ldr	r3, [pc, #64]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f16:	4a0f      	ldr	r2, [pc, #60]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f36:	f7fb fb6b 	bl	8004610 <HAL_GetTick>
 8008f3a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008f3c:	e010      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3e:	f7fb fb67 	bl	8004610 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d909      	bls.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e075      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008f50:	42470068 	.word	0x42470068
 8008f54:	40023800 	.word	0x40023800
 8008f58:	42470070 	.word	0x42470070
 8008f5c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008f60:	4b38      	ldr	r3, [pc, #224]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0e8      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f6c:	4b36      	ldr	r3, [pc, #216]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f74:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d02f      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d028      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f94:	4b2d      	ldr	r3, [pc, #180]	@ (800904c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800904c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008fa0:	4a29      	ldr	r2, [pc, #164]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008fa6:	4b28      	ldr	r3, [pc, #160]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d114      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008fb2:	f7fb fb2d 	bl	8004610 <HAL_GetTick>
 8008fb6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fb8:	e00a      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fba:	f7fb fb29 	bl	8004610 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d901      	bls.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e035      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0ee      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fe4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fe8:	d10d      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008fea:	4b17      	ldr	r3, [pc, #92]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ffe:	4912      	ldr	r1, [pc, #72]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009000:	4313      	orrs	r3, r2
 8009002:	608b      	str	r3, [r1, #8]
 8009004:	e005      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009006:	4b10      	ldr	r3, [pc, #64]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	4a0f      	ldr	r2, [pc, #60]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800900c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009010:	6093      	str	r3, [r2, #8]
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009014:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800901e:	490a      	ldr	r1, [pc, #40]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009020:	4313      	orrs	r3, r2
 8009022:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8009036:	4b06      	ldr	r3, [pc, #24]	@ (8009050 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009038:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	40007000 	.word	0x40007000
 8009048:	40023800 	.word	0x40023800
 800904c:	42470e40 	.word	0x42470e40
 8009050:	424711e0 	.word	0x424711e0

08009054 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e025      	b.n	80090b4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fa f943 	bl	8003308 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2202      	movs	r2, #2
 8009086:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f001 fb53 	bl	800a740 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	461a      	mov	r2, r3
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	f001 fba8 	bl	800a7fa <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80090ce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d101      	bne.n	80090da <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80090d6:	2302      	movs	r3, #2
 80090d8:	e021      	b.n	800911e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d002      	beq.n	80090e6 <HAL_SDRAM_SendCommand+0x2a>
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d118      	bne.n	8009118 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2202      	movs	r2, #2
 80090ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 fbe8 	bl	800a8cc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d104      	bne.n	800910e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2205      	movs	r2, #5
 8009108:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800910c:	e006      	b.n	800911c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009116:	e001      	b.n	800911c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d101      	bne.n	8009140 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
 800913e:	e016      	b.n	800916e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b01      	cmp	r3, #1
 800914a:	d10f      	bne.n	800916c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2202      	movs	r2, #2
 8009150:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	4618      	mov	r0, r3
 800915c:	f001 fbf3 	bl	800a946 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e07b      	b.n	8009280 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	d108      	bne.n	80091a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009198:	d009      	beq.n	80091ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	61da      	str	r2, [r3, #28]
 80091a0:	e005      	b.n	80091ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7fa ff21 	bl	8004010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2202      	movs	r2, #2
 80091d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80091f6:	431a      	orrs	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009228:	431a      	orrs	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009232:	ea42 0103 	orr.w	r1, r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	0c1b      	lsrs	r3, r3, #16
 800924c:	f003 0104 	and.w	r1, r3, #4
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	f003 0210 	and.w	r2, r3, #16
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	69da      	ldr	r2, [r3, #28]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800926e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e01a      	b.n	80092d0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7fa fef4 	bl	80040a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	4613      	mov	r3, r2
 80092e6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092e8:	f7fb f992 	bl	8004610 <HAL_GetTick>
 80092ec:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d001      	beq.n	8009302 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80092fe:	2302      	movs	r3, #2
 8009300:	e12a      	b.n	8009558 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <HAL_SPI_Transmit+0x36>
 8009308:	88fb      	ldrh	r3, [r7, #6]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e122      	b.n	8009558 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_SPI_Transmit+0x48>
 800931c:	2302      	movs	r3, #2
 800931e:	e11b      	b.n	8009558 <HAL_SPI_Transmit+0x280>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2203      	movs	r2, #3
 800932c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	88fa      	ldrh	r2, [r7, #6]
 8009340:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	88fa      	ldrh	r2, [r7, #6]
 8009346:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800936e:	d10f      	bne.n	8009390 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800937e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800938e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939a:	2b40      	cmp	r3, #64	@ 0x40
 800939c:	d007      	beq.n	80093ae <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093b6:	d152      	bne.n	800945e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <HAL_SPI_Transmit+0xee>
 80093c0:	8b7b      	ldrh	r3, [r7, #26]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d145      	bne.n	8009452 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ca:	881a      	ldrh	r2, [r3, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d6:	1c9a      	adds	r2, r3, #2
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80093ea:	e032      	b.n	8009452 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d112      	bne.n	8009420 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fe:	881a      	ldrh	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940a:	1c9a      	adds	r2, r3, #2
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009414:	b29b      	uxth	r3, r3
 8009416:	3b01      	subs	r3, #1
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800941e:	e018      	b.n	8009452 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009420:	f7fb f8f6 	bl	8004610 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d803      	bhi.n	8009438 <HAL_SPI_Transmit+0x160>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009436:	d102      	bne.n	800943e <HAL_SPI_Transmit+0x166>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e082      	b.n	8009558 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009456:	b29b      	uxth	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1c7      	bne.n	80093ec <HAL_SPI_Transmit+0x114>
 800945c:	e053      	b.n	8009506 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <HAL_SPI_Transmit+0x194>
 8009466:	8b7b      	ldrh	r3, [r7, #26]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d147      	bne.n	80094fc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	330c      	adds	r3, #12
 8009476:	7812      	ldrb	r2, [r2, #0]
 8009478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009492:	e033      	b.n	80094fc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d113      	bne.n	80094ca <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	330c      	adds	r3, #12
 80094ac:	7812      	ldrb	r2, [r2, #0]
 80094ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80094c8:	e018      	b.n	80094fc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ca:	f7fb f8a1 	bl	8004610 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d803      	bhi.n	80094e2 <HAL_SPI_Transmit+0x20a>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d102      	bne.n	80094e8 <HAL_SPI_Transmit+0x210>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e02d      	b.n	8009558 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1c6      	bne.n	8009494 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fbe6 	bl	8009cdc <SPI_EndRxTxTransaction>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2220      	movs	r2, #32
 800951a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009524:	2300      	movs	r3, #0
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009556:	2300      	movs	r3, #0
  }
}
 8009558:	4618      	mov	r0, r3
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af02      	add	r7, sp, #8
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	4613      	mov	r3, r2
 800956e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b01      	cmp	r3, #1
 800957a:	d001      	beq.n	8009580 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800957c:	2302      	movs	r3, #2
 800957e:	e104      	b.n	800978a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009588:	d112      	bne.n	80095b0 <HAL_SPI_Receive+0x50>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10e      	bne.n	80095b0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2204      	movs	r2, #4
 8009596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800959a:	88fa      	ldrh	r2, [r7, #6]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4613      	mov	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 f8f3 	bl	8009792 <HAL_SPI_TransmitReceive>
 80095ac:	4603      	mov	r3, r0
 80095ae:	e0ec      	b.n	800978a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095b0:	f7fb f82e 	bl	8004610 <HAL_GetTick>
 80095b4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <HAL_SPI_Receive+0x62>
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e0e1      	b.n	800978a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_SPI_Receive+0x74>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e0da      	b.n	800978a <HAL_SPI_Receive+0x22a>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2204      	movs	r2, #4
 80095e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	88fa      	ldrh	r2, [r7, #6]
 80095f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	88fa      	ldrh	r2, [r7, #6]
 80095fa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009622:	d10f      	bne.n	8009644 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009632:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009642:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800964e:	2b40      	cmp	r3, #64	@ 0x40
 8009650:	d007      	beq.n	8009662 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009660:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d170      	bne.n	800974c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800966a:	e035      	b.n	80096d8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b01      	cmp	r3, #1
 8009678:	d115      	bne.n	80096a6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f103 020c 	add.w	r2, r3, #12
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009686:	7812      	ldrb	r2, [r2, #0]
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80096a4:	e018      	b.n	80096d8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096a6:	f7fa ffb3 	bl	8004610 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d803      	bhi.n	80096be <HAL_SPI_Receive+0x15e>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096bc:	d102      	bne.n	80096c4 <HAL_SPI_Receive+0x164>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e058      	b.n	800978a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1c4      	bne.n	800966c <HAL_SPI_Receive+0x10c>
 80096e2:	e038      	b.n	8009756 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d113      	bne.n	800971a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fc:	b292      	uxth	r2, r2
 80096fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009704:	1c9a      	adds	r2, r3, #2
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800970e:	b29b      	uxth	r3, r3
 8009710:	3b01      	subs	r3, #1
 8009712:	b29a      	uxth	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009718:	e018      	b.n	800974c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800971a:	f7fa ff79 	bl	8004610 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	429a      	cmp	r2, r3
 8009728:	d803      	bhi.n	8009732 <HAL_SPI_Receive+0x1d2>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009730:	d102      	bne.n	8009738 <HAL_SPI_Receive+0x1d8>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d109      	bne.n	800974c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e01e      	b.n	800978a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009750:	b29b      	uxth	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1c6      	bne.n	80096e4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fa58 	bl	8009c10 <SPI_EndRxTransaction>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2220      	movs	r2, #32
 800976a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e000      	b.n	800978a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009788:	2300      	movs	r3, #0
  }
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b08a      	sub	sp, #40	@ 0x28
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097a0:	2301      	movs	r3, #1
 80097a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097a4:	f7fa ff34 	bl	8004610 <HAL_GetTick>
 80097a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80097b8:	887b      	ldrh	r3, [r7, #2]
 80097ba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80097bc:	7ffb      	ldrb	r3, [r7, #31]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d00c      	beq.n	80097dc <HAL_SPI_TransmitReceive+0x4a>
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097c8:	d106      	bne.n	80097d8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <HAL_SPI_TransmitReceive+0x46>
 80097d2:	7ffb      	ldrb	r3, [r7, #31]
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d001      	beq.n	80097dc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80097d8:	2302      	movs	r3, #2
 80097da:	e17f      	b.n	8009adc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d005      	beq.n	80097ee <HAL_SPI_TransmitReceive+0x5c>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <HAL_SPI_TransmitReceive+0x5c>
 80097e8:	887b      	ldrh	r3, [r7, #2]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e174      	b.n	8009adc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_SPI_TransmitReceive+0x6e>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e16d      	b.n	8009adc <HAL_SPI_TransmitReceive+0x34a>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b04      	cmp	r3, #4
 8009812:	d003      	beq.n	800981c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2205      	movs	r2, #5
 8009818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	887a      	ldrh	r2, [r7, #2]
 800982c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	887a      	ldrh	r2, [r7, #2]
 8009832:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	887a      	ldrh	r2, [r7, #2]
 800983e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	887a      	ldrh	r2, [r7, #2]
 8009844:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985c:	2b40      	cmp	r3, #64	@ 0x40
 800985e:	d007      	beq.n	8009870 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800986e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009878:	d17e      	bne.n	8009978 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <HAL_SPI_TransmitReceive+0xf6>
 8009882:	8afb      	ldrh	r3, [r7, #22]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d16c      	bne.n	8009962 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009898:	1c9a      	adds	r2, r3, #2
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ac:	e059      	b.n	8009962 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d11b      	bne.n	80098f4 <HAL_SPI_TransmitReceive+0x162>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d016      	beq.n	80098f4 <HAL_SPI_TransmitReceive+0x162>
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d113      	bne.n	80098f4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098dc:	1c9a      	adds	r2, r3, #2
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d119      	bne.n	8009936 <HAL_SPI_TransmitReceive+0x1a4>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d014      	beq.n	8009936 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009916:	b292      	uxth	r2, r2
 8009918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991e:	1c9a      	adds	r2, r3, #2
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009932:	2301      	movs	r3, #1
 8009934:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009936:	f7fa fe6b 	bl	8004610 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009942:	429a      	cmp	r2, r3
 8009944:	d80d      	bhi.n	8009962 <HAL_SPI_TransmitReceive+0x1d0>
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994c:	d009      	beq.n	8009962 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e0bc      	b.n	8009adc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009966:	b29b      	uxth	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1a0      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x11c>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009970:	b29b      	uxth	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d19b      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x11c>
 8009976:	e082      	b.n	8009a7e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <HAL_SPI_TransmitReceive+0x1f4>
 8009980:	8afb      	ldrh	r3, [r7, #22]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d171      	bne.n	8009a6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	330c      	adds	r3, #12
 8009990:	7812      	ldrb	r2, [r2, #0]
 8009992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099ac:	e05d      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d11c      	bne.n	80099f6 <HAL_SPI_TransmitReceive+0x264>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d017      	beq.n	80099f6 <HAL_SPI_TransmitReceive+0x264>
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d114      	bne.n	80099f6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	330c      	adds	r3, #12
 80099d6:	7812      	ldrb	r2, [r2, #0]
 80099d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d119      	bne.n	8009a38 <HAL_SPI_TransmitReceive+0x2a6>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d014      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68da      	ldr	r2, [r3, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a34:	2301      	movs	r3, #1
 8009a36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a38:	f7fa fdea 	bl	8004610 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d803      	bhi.n	8009a50 <HAL_SPI_TransmitReceive+0x2be>
 8009a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d102      	bne.n	8009a56 <HAL_SPI_TransmitReceive+0x2c4>
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e038      	b.n	8009adc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d19c      	bne.n	80099ae <HAL_SPI_TransmitReceive+0x21c>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d197      	bne.n	80099ae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a7e:	6a3a      	ldr	r2, [r7, #32]
 8009a80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f92a 	bl	8009cdc <SPI_EndRxTxTransaction>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d008      	beq.n	8009aa0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2220      	movs	r2, #32
 8009a92:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e01d      	b.n	8009adc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	613b      	str	r3, [r7, #16]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	613b      	str	r3, [r7, #16]
 8009abc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e000      	b.n	8009adc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009ada:	2300      	movs	r3, #0
  }
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3728      	adds	r7, #40	@ 0x28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009af2:	b2db      	uxtb	r3, r3
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b10:	f7fa fd7e 	bl	8004610 <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b20:	f7fa fd76 	bl	8004610 <HAL_GetTick>
 8009b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b26:	4b39      	ldr	r3, [pc, #228]	@ (8009c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	015b      	lsls	r3, r3, #5
 8009b2c:	0d1b      	lsrs	r3, r3, #20
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b36:	e054      	b.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	d050      	beq.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b40:	f7fa fd66 	bl	8004610 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d902      	bls.n	8009b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d13d      	bne.n	8009bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b6e:	d111      	bne.n	8009b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b78:	d004      	beq.n	8009b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b82:	d107      	bne.n	8009b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b9c:	d10f      	bne.n	8009bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e017      	b.n	8009c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4013      	ands	r3, r2
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	bf0c      	ite	eq
 8009bf2:	2301      	moveq	r3, #1
 8009bf4:	2300      	movne	r3, #0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d19b      	bne.n	8009b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3720      	adds	r7, #32
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000084 	.word	0x20000084

08009c10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c24:	d111      	bne.n	8009c4a <SPI_EndRxTransaction+0x3a>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c2e:	d004      	beq.n	8009c3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c38:	d107      	bne.n	8009c4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c52:	d12a      	bne.n	8009caa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c5c:	d012      	beq.n	8009c84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2200      	movs	r2, #0
 8009c66:	2180      	movs	r1, #128	@ 0x80
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff ff49 	bl	8009b00 <SPI_WaitFlagStateUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d02d      	beq.n	8009cd0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c78:	f043 0220 	orr.w	r2, r3, #32
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e026      	b.n	8009cd2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f7ff ff36 	bl	8009b00 <SPI_WaitFlagStateUntilTimeout>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d01a      	beq.n	8009cd0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c9e:	f043 0220 	orr.w	r2, r3, #32
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e013      	b.n	8009cd2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7ff ff23 	bl	8009b00 <SPI_WaitFlagStateUntilTimeout>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc4:	f043 0220 	orr.w	r2, r3, #32
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e000      	b.n	8009cd2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	2102      	movs	r1, #2
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f7ff ff04 	bl	8009b00 <SPI_WaitFlagStateUntilTimeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d007      	beq.n	8009d0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d02:	f043 0220 	orr.w	r2, r3, #32
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e032      	b.n	8009d74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8009d7c <SPI_EndRxTxTransaction+0xa0>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a1b      	ldr	r2, [pc, #108]	@ (8009d80 <SPI_EndRxTxTransaction+0xa4>)
 8009d14:	fba2 2303 	umull	r2, r3, r2, r3
 8009d18:	0d5b      	lsrs	r3, r3, #21
 8009d1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d1e:	fb02 f303 	mul.w	r3, r2, r3
 8009d22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d2c:	d112      	bne.n	8009d54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	2180      	movs	r1, #128	@ 0x80
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff fee1 	bl	8009b00 <SPI_WaitFlagStateUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d016      	beq.n	8009d72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d48:	f043 0220 	orr.w	r2, r3, #32
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e00f      	b.n	8009d74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d6a:	2b80      	cmp	r3, #128	@ 0x80
 8009d6c:	d0f2      	beq.n	8009d54 <SPI_EndRxTxTransaction+0x78>
 8009d6e:	e000      	b.n	8009d72 <SPI_EndRxTxTransaction+0x96>
        break;
 8009d70:	bf00      	nop
  }

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000084 	.word	0x20000084
 8009d80:	165e9f81 	.word	0x165e9f81

08009d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e041      	b.n	8009e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d106      	bne.n	8009db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7fa fb94 	bl	80044d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f000 fae6 	bl	800a394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d001      	beq.n	8009e3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e046      	b.n	8009eca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a23      	ldr	r2, [pc, #140]	@ (8009ed8 <HAL_TIM_Base_Start+0xb4>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d022      	beq.n	8009e94 <HAL_TIM_Base_Start+0x70>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e56:	d01d      	beq.n	8009e94 <HAL_TIM_Base_Start+0x70>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009edc <HAL_TIM_Base_Start+0xb8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d018      	beq.n	8009e94 <HAL_TIM_Base_Start+0x70>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee0 <HAL_TIM_Base_Start+0xbc>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d013      	beq.n	8009e94 <HAL_TIM_Base_Start+0x70>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee4 <HAL_TIM_Base_Start+0xc0>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d00e      	beq.n	8009e94 <HAL_TIM_Base_Start+0x70>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ee8 <HAL_TIM_Base_Start+0xc4>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d009      	beq.n	8009e94 <HAL_TIM_Base_Start+0x70>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a19      	ldr	r2, [pc, #100]	@ (8009eec <HAL_TIM_Base_Start+0xc8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d004      	beq.n	8009e94 <HAL_TIM_Base_Start+0x70>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a18      	ldr	r2, [pc, #96]	@ (8009ef0 <HAL_TIM_Base_Start+0xcc>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d111      	bne.n	8009eb8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b06      	cmp	r3, #6
 8009ea4:	d010      	beq.n	8009ec8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 0201 	orr.w	r2, r2, #1
 8009eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb6:	e007      	b.n	8009ec8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0201 	orr.w	r2, r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	40000c00 	.word	0x40000c00
 8009ee8:	40010400 	.word	0x40010400
 8009eec:	40014000 	.word	0x40014000
 8009ef0:	40001800 	.word	0x40001800

08009ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d001      	beq.n	8009f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e04e      	b.n	8009faa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68da      	ldr	r2, [r3, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 0201 	orr.w	r2, r2, #1
 8009f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a23      	ldr	r2, [pc, #140]	@ (8009fb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d022      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x80>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f36:	d01d      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x80>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8009fbc <HAL_TIM_Base_Start_IT+0xc8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d018      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x80>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a1e      	ldr	r2, [pc, #120]	@ (8009fc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d013      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x80>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a1c      	ldr	r2, [pc, #112]	@ (8009fc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d00e      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x80>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009fc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d009      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x80>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a19      	ldr	r2, [pc, #100]	@ (8009fcc <HAL_TIM_Base_Start_IT+0xd8>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d004      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0x80>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a18      	ldr	r2, [pc, #96]	@ (8009fd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d111      	bne.n	8009f98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b06      	cmp	r3, #6
 8009f84:	d010      	beq.n	8009fa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f042 0201 	orr.w	r2, r2, #1
 8009f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f96:	e007      	b.n	8009fa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	40010000 	.word	0x40010000
 8009fbc:	40000400 	.word	0x40000400
 8009fc0:	40000800 	.word	0x40000800
 8009fc4:	40000c00 	.word	0x40000c00
 8009fc8:	40010400 	.word	0x40010400
 8009fcc:	40014000 	.word	0x40014000
 8009fd0:	40001800 	.word	0x40001800

08009fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d020      	beq.n	800a038 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d01b      	beq.n	800a038 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0202 	mvn.w	r2, #2
 800a008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	f003 0303 	and.w	r3, r3, #3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f999 	bl	800a356 <HAL_TIM_IC_CaptureCallback>
 800a024:	e005      	b.n	800a032 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f98b 	bl	800a342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f99c 	bl	800a36a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f003 0304 	and.w	r3, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d020      	beq.n	800a084 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d01b      	beq.n	800a084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f06f 0204 	mvn.w	r2, #4
 800a054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2202      	movs	r2, #2
 800a05a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f973 	bl	800a356 <HAL_TIM_IC_CaptureCallback>
 800a070:	e005      	b.n	800a07e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f965 	bl	800a342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f976 	bl	800a36a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d020      	beq.n	800a0d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01b      	beq.n	800a0d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0208 	mvn.w	r2, #8
 800a0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2204      	movs	r2, #4
 800a0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f94d 	bl	800a356 <HAL_TIM_IC_CaptureCallback>
 800a0bc:	e005      	b.n	800a0ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f93f 	bl	800a342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f950 	bl	800a36a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f003 0310 	and.w	r3, r3, #16
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d020      	beq.n	800a11c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f003 0310 	and.w	r3, r3, #16
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01b      	beq.n	800a11c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f06f 0210 	mvn.w	r2, #16
 800a0ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f927 	bl	800a356 <HAL_TIM_IC_CaptureCallback>
 800a108:	e005      	b.n	800a116 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f919 	bl	800a342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f92a 	bl	800a36a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00c      	beq.n	800a140 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d007      	beq.n	800a140 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f06f 0201 	mvn.w	r2, #1
 800a138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7f9 ff16 	bl	8003f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00c      	beq.n	800a164 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a150:	2b00      	cmp	r3, #0
 800a152:	d007      	beq.n	800a164 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fae4 	bl	800a72c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00c      	beq.n	800a188 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f8fb 	bl	800a37e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f003 0320 	and.w	r3, r3, #32
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00c      	beq.n	800a1ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f003 0320 	and.w	r3, r3, #32
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d007      	beq.n	800a1ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f06f 0220 	mvn.w	r2, #32
 800a1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fab6 	bl	800a718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1ac:	bf00      	nop
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d101      	bne.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	e0b4      	b.n	800a33a <HAL_TIM_ConfigClockSource+0x186>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a1ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a208:	d03e      	beq.n	800a288 <HAL_TIM_ConfigClockSource+0xd4>
 800a20a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a20e:	f200 8087 	bhi.w	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a216:	f000 8086 	beq.w	800a326 <HAL_TIM_ConfigClockSource+0x172>
 800a21a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a21e:	d87f      	bhi.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a220:	2b70      	cmp	r3, #112	@ 0x70
 800a222:	d01a      	beq.n	800a25a <HAL_TIM_ConfigClockSource+0xa6>
 800a224:	2b70      	cmp	r3, #112	@ 0x70
 800a226:	d87b      	bhi.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a228:	2b60      	cmp	r3, #96	@ 0x60
 800a22a:	d050      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x11a>
 800a22c:	2b60      	cmp	r3, #96	@ 0x60
 800a22e:	d877      	bhi.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a230:	2b50      	cmp	r3, #80	@ 0x50
 800a232:	d03c      	beq.n	800a2ae <HAL_TIM_ConfigClockSource+0xfa>
 800a234:	2b50      	cmp	r3, #80	@ 0x50
 800a236:	d873      	bhi.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a238:	2b40      	cmp	r3, #64	@ 0x40
 800a23a:	d058      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0x13a>
 800a23c:	2b40      	cmp	r3, #64	@ 0x40
 800a23e:	d86f      	bhi.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a240:	2b30      	cmp	r3, #48	@ 0x30
 800a242:	d064      	beq.n	800a30e <HAL_TIM_ConfigClockSource+0x15a>
 800a244:	2b30      	cmp	r3, #48	@ 0x30
 800a246:	d86b      	bhi.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a248:	2b20      	cmp	r3, #32
 800a24a:	d060      	beq.n	800a30e <HAL_TIM_ConfigClockSource+0x15a>
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d867      	bhi.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
 800a250:	2b00      	cmp	r3, #0
 800a252:	d05c      	beq.n	800a30e <HAL_TIM_ConfigClockSource+0x15a>
 800a254:	2b10      	cmp	r3, #16
 800a256:	d05a      	beq.n	800a30e <HAL_TIM_ConfigClockSource+0x15a>
 800a258:	e062      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a26a:	f000 f9b9 	bl	800a5e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a27c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	609a      	str	r2, [r3, #8]
      break;
 800a286:	e04f      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a298:	f000 f9a2 	bl	800a5e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689a      	ldr	r2, [r3, #8]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2aa:	609a      	str	r2, [r3, #8]
      break;
 800a2ac:	e03c      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f000 f916 	bl	800a4ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2150      	movs	r1, #80	@ 0x50
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 f96f 	bl	800a5aa <TIM_ITRx_SetConfig>
      break;
 800a2cc:	e02c      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f000 f935 	bl	800a54a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2160      	movs	r1, #96	@ 0x60
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f95f 	bl	800a5aa <TIM_ITRx_SetConfig>
      break;
 800a2ec:	e01c      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f000 f8f6 	bl	800a4ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2140      	movs	r1, #64	@ 0x40
 800a306:	4618      	mov	r0, r3
 800a308:	f000 f94f 	bl	800a5aa <TIM_ITRx_SetConfig>
      break;
 800a30c:	e00c      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f000 f946 	bl	800a5aa <TIM_ITRx_SetConfig>
      break;
 800a31e:	e003      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	73fb      	strb	r3, [r7, #15]
      break;
 800a324:	e000      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a34a:	bf00      	nop
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a35e:	bf00      	nop
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a386:	bf00      	nop
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
	...

0800a394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a46      	ldr	r2, [pc, #280]	@ (800a4c0 <TIM_Base_SetConfig+0x12c>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d013      	beq.n	800a3d4 <TIM_Base_SetConfig+0x40>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b2:	d00f      	beq.n	800a3d4 <TIM_Base_SetConfig+0x40>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a43      	ldr	r2, [pc, #268]	@ (800a4c4 <TIM_Base_SetConfig+0x130>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d00b      	beq.n	800a3d4 <TIM_Base_SetConfig+0x40>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a42      	ldr	r2, [pc, #264]	@ (800a4c8 <TIM_Base_SetConfig+0x134>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d007      	beq.n	800a3d4 <TIM_Base_SetConfig+0x40>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a41      	ldr	r2, [pc, #260]	@ (800a4cc <TIM_Base_SetConfig+0x138>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d003      	beq.n	800a3d4 <TIM_Base_SetConfig+0x40>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a40      	ldr	r2, [pc, #256]	@ (800a4d0 <TIM_Base_SetConfig+0x13c>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d108      	bne.n	800a3e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a35      	ldr	r2, [pc, #212]	@ (800a4c0 <TIM_Base_SetConfig+0x12c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d02b      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f4:	d027      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a32      	ldr	r2, [pc, #200]	@ (800a4c4 <TIM_Base_SetConfig+0x130>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d023      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a31      	ldr	r2, [pc, #196]	@ (800a4c8 <TIM_Base_SetConfig+0x134>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d01f      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a30      	ldr	r2, [pc, #192]	@ (800a4cc <TIM_Base_SetConfig+0x138>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d01b      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2f      	ldr	r2, [pc, #188]	@ (800a4d0 <TIM_Base_SetConfig+0x13c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d017      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a2e      	ldr	r2, [pc, #184]	@ (800a4d4 <TIM_Base_SetConfig+0x140>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d013      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a2d      	ldr	r2, [pc, #180]	@ (800a4d8 <TIM_Base_SetConfig+0x144>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00f      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2c      	ldr	r2, [pc, #176]	@ (800a4dc <TIM_Base_SetConfig+0x148>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00b      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a2b      	ldr	r2, [pc, #172]	@ (800a4e0 <TIM_Base_SetConfig+0x14c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d007      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a2a      	ldr	r2, [pc, #168]	@ (800a4e4 <TIM_Base_SetConfig+0x150>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d003      	beq.n	800a446 <TIM_Base_SetConfig+0xb2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a29      	ldr	r2, [pc, #164]	@ (800a4e8 <TIM_Base_SetConfig+0x154>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d108      	bne.n	800a458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a44c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	4313      	orrs	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a10      	ldr	r2, [pc, #64]	@ (800a4c0 <TIM_Base_SetConfig+0x12c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d003      	beq.n	800a48c <TIM_Base_SetConfig+0xf8>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a12      	ldr	r2, [pc, #72]	@ (800a4d0 <TIM_Base_SetConfig+0x13c>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d103      	bne.n	800a494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	691a      	ldr	r2, [r3, #16]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d105      	bne.n	800a4b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f023 0201 	bic.w	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	611a      	str	r2, [r3, #16]
  }
}
 800a4b2:	bf00      	nop
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40000400 	.word	0x40000400
 800a4c8:	40000800 	.word	0x40000800
 800a4cc:	40000c00 	.word	0x40000c00
 800a4d0:	40010400 	.word	0x40010400
 800a4d4:	40014000 	.word	0x40014000
 800a4d8:	40014400 	.word	0x40014400
 800a4dc:	40014800 	.word	0x40014800
 800a4e0:	40001800 	.word	0x40001800
 800a4e4:	40001c00 	.word	0x40001c00
 800a4e8:	40002000 	.word	0x40002000

0800a4ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	f023 0201 	bic.w	r2, r3, #1
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f023 030a 	bic.w	r3, r3, #10
 800a528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	4313      	orrs	r3, r2
 800a530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	621a      	str	r2, [r3, #32]
}
 800a53e:	bf00      	nop
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b087      	sub	sp, #28
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	f023 0210 	bic.w	r2, r3, #16
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	031b      	lsls	r3, r3, #12
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	011b      	lsls	r3, r3, #4
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	4313      	orrs	r3, r2
 800a590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	621a      	str	r2, [r3, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f043 0307 	orr.w	r3, r3, #7
 800a5cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	609a      	str	r2, [r3, #8]
}
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	021a      	lsls	r2, r3, #8
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	431a      	orrs	r2, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4313      	orrs	r3, r2
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	609a      	str	r2, [r3, #8]
}
 800a614:	bf00      	nop
 800a616:	371c      	adds	r7, #28
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a634:	2302      	movs	r3, #2
 800a636:	e05a      	b.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a65e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a21      	ldr	r2, [pc, #132]	@ (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d022      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a684:	d01d      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a1d      	ldr	r2, [pc, #116]	@ (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d018      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a1b      	ldr	r2, [pc, #108]	@ (800a704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d013      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a1a      	ldr	r2, [pc, #104]	@ (800a708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00e      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a18      	ldr	r2, [pc, #96]	@ (800a70c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d009      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a17      	ldr	r2, [pc, #92]	@ (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a15      	ldr	r2, [pc, #84]	@ (800a714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d10c      	bne.n	800a6dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40000400 	.word	0x40000400
 800a704:	40000800 	.word	0x40000800
 800a708:	40000c00 	.word	0x40000c00
 800a70c:	40010400 	.word	0x40010400
 800a710:	40014000 	.word	0x40014000
 800a714:	40001800 	.word	0x40001800

0800a718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d123      	bne.n	800a79a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a75a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	6851      	ldr	r1, [r2, #4]
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	6892      	ldr	r2, [r2, #8]
 800a766:	4311      	orrs	r1, r2
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	68d2      	ldr	r2, [r2, #12]
 800a76c:	4311      	orrs	r1, r2
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	6912      	ldr	r2, [r2, #16]
 800a772:	4311      	orrs	r1, r2
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	6952      	ldr	r2, [r2, #20]
 800a778:	4311      	orrs	r1, r2
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	6992      	ldr	r2, [r2, #24]
 800a77e:	4311      	orrs	r1, r2
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	69d2      	ldr	r2, [r2, #28]
 800a784:	4311      	orrs	r1, r2
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	6a12      	ldr	r2, [r2, #32]
 800a78a:	4311      	orrs	r1, r2
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a790:	430a      	orrs	r2, r1
 800a792:	431a      	orrs	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	e028      	b.n	800a7ec <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	69d9      	ldr	r1, [r3, #28]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	4319      	orrs	r1, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a7c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	6851      	ldr	r1, [r2, #4]
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	6892      	ldr	r2, [r2, #8]
 800a7cc:	4311      	orrs	r1, r2
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	68d2      	ldr	r2, [r2, #12]
 800a7d2:	4311      	orrs	r1, r2
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	6912      	ldr	r2, [r2, #16]
 800a7d8:	4311      	orrs	r1, r2
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	6952      	ldr	r2, [r2, #20]
 800a7de:	4311      	orrs	r1, r2
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	6992      	ldr	r2, [r2, #24]
 800a7e4:	430a      	orrs	r2, r1
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d128      	bne.n	800a85e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	1e59      	subs	r1, r3, #1
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	3b01      	subs	r3, #1
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	4319      	orrs	r1, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	3b01      	subs	r3, #1
 800a82a:	021b      	lsls	r3, r3, #8
 800a82c:	4319      	orrs	r1, r3
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	3b01      	subs	r3, #1
 800a834:	031b      	lsls	r3, r3, #12
 800a836:	4319      	orrs	r1, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	4319      	orrs	r1, r3
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	3b01      	subs	r3, #1
 800a848:	051b      	lsls	r3, r3, #20
 800a84a:	4319      	orrs	r1, r3
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	3b01      	subs	r3, #1
 800a852:	061b      	lsls	r3, r3, #24
 800a854:	430b      	orrs	r3, r1
 800a856:	431a      	orrs	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	609a      	str	r2, [r3, #8]
 800a85c:	e02f      	b.n	800a8be <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a866:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	68d2      	ldr	r2, [r2, #12]
 800a86e:	3a01      	subs	r2, #1
 800a870:	0311      	lsls	r1, r2, #12
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	6952      	ldr	r2, [r2, #20]
 800a876:	3a01      	subs	r2, #1
 800a878:	0512      	lsls	r2, r2, #20
 800a87a:	430a      	orrs	r2, r1
 800a87c:	431a      	orrs	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	1e59      	subs	r1, r3, #1
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	3b01      	subs	r3, #1
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	4319      	orrs	r1, r3
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	021b      	lsls	r3, r3, #8
 800a8a2:	4319      	orrs	r1, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	041b      	lsls	r3, r3, #16
 800a8ac:	4319      	orrs	r1, r3
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	061b      	lsls	r3, r3, #24
 800a8b6:	430b      	orrs	r3, r1
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	0d9b      	lsrs	r3, r3, #22
 800a8e2:	059b      	lsls	r3, r3, #22
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	6811      	ldr	r1, [r2, #0]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	6852      	ldr	r2, [r2, #4]
 800a8ec:	4311      	orrs	r1, r2
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	6892      	ldr	r2, [r2, #8]
 800a8f2:	3a01      	subs	r2, #1
 800a8f4:	0152      	lsls	r2, r2, #5
 800a8f6:	4311      	orrs	r1, r2
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	68d2      	ldr	r2, [r2, #12]
 800a8fc:	0252      	lsls	r2, r2, #9
 800a8fe:	430a      	orrs	r2, r1
 800a900:	431a      	orrs	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a906:	f7f9 fe83 	bl	8004610 <HAL_GetTick>
 800a90a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a90c:	e010      	b.n	800a930 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a914:	d00c      	beq.n	800a930 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d007      	beq.n	800a92c <FMC_SDRAM_SendCommand+0x60>
 800a91c:	f7f9 fe78 	bl	8004610 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d201      	bcs.n	800a930 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e006      	b.n	800a93e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d0e8      	beq.n	800a90e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a958:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	0052      	lsls	r2, r2, #1
 800a960:	431a      	orrs	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <siprintf>:
 800a974:	b40e      	push	{r1, r2, r3}
 800a976:	b500      	push	{lr}
 800a978:	b09c      	sub	sp, #112	@ 0x70
 800a97a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a97c:	9002      	str	r0, [sp, #8]
 800a97e:	9006      	str	r0, [sp, #24]
 800a980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a984:	4809      	ldr	r0, [pc, #36]	@ (800a9ac <siprintf+0x38>)
 800a986:	9107      	str	r1, [sp, #28]
 800a988:	9104      	str	r1, [sp, #16]
 800a98a:	4909      	ldr	r1, [pc, #36]	@ (800a9b0 <siprintf+0x3c>)
 800a98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a990:	9105      	str	r1, [sp, #20]
 800a992:	6800      	ldr	r0, [r0, #0]
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	a902      	add	r1, sp, #8
 800a998:	f000 f994 	bl	800acc4 <_svfiprintf_r>
 800a99c:	9b02      	ldr	r3, [sp, #8]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	b01c      	add	sp, #112	@ 0x70
 800a9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9a8:	b003      	add	sp, #12
 800a9aa:	4770      	bx	lr
 800a9ac:	20000090 	.word	0x20000090
 800a9b0:	ffff0208 	.word	0xffff0208

0800a9b4 <memset>:
 800a9b4:	4402      	add	r2, r0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d100      	bne.n	800a9be <memset+0xa>
 800a9bc:	4770      	bx	lr
 800a9be:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c2:	e7f9      	b.n	800a9b8 <memset+0x4>

0800a9c4 <__errno>:
 800a9c4:	4b01      	ldr	r3, [pc, #4]	@ (800a9cc <__errno+0x8>)
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20000090 	.word	0x20000090

0800a9d0 <__libc_init_array>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	4d0d      	ldr	r5, [pc, #52]	@ (800aa08 <__libc_init_array+0x38>)
 800a9d4:	4c0d      	ldr	r4, [pc, #52]	@ (800aa0c <__libc_init_array+0x3c>)
 800a9d6:	1b64      	subs	r4, r4, r5
 800a9d8:	10a4      	asrs	r4, r4, #2
 800a9da:	2600      	movs	r6, #0
 800a9dc:	42a6      	cmp	r6, r4
 800a9de:	d109      	bne.n	800a9f4 <__libc_init_array+0x24>
 800a9e0:	4d0b      	ldr	r5, [pc, #44]	@ (800aa10 <__libc_init_array+0x40>)
 800a9e2:	4c0c      	ldr	r4, [pc, #48]	@ (800aa14 <__libc_init_array+0x44>)
 800a9e4:	f000 fc66 	bl	800b2b4 <_init>
 800a9e8:	1b64      	subs	r4, r4, r5
 800a9ea:	10a4      	asrs	r4, r4, #2
 800a9ec:	2600      	movs	r6, #0
 800a9ee:	42a6      	cmp	r6, r4
 800a9f0:	d105      	bne.n	800a9fe <__libc_init_array+0x2e>
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f8:	4798      	blx	r3
 800a9fa:	3601      	adds	r6, #1
 800a9fc:	e7ee      	b.n	800a9dc <__libc_init_array+0xc>
 800a9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa02:	4798      	blx	r3
 800aa04:	3601      	adds	r6, #1
 800aa06:	e7f2      	b.n	800a9ee <__libc_init_array+0x1e>
 800aa08:	0800d9ec 	.word	0x0800d9ec
 800aa0c:	0800d9ec 	.word	0x0800d9ec
 800aa10:	0800d9ec 	.word	0x0800d9ec
 800aa14:	0800d9f0 	.word	0x0800d9f0

0800aa18 <__retarget_lock_acquire_recursive>:
 800aa18:	4770      	bx	lr

0800aa1a <__retarget_lock_release_recursive>:
 800aa1a:	4770      	bx	lr

0800aa1c <_free_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4605      	mov	r5, r0
 800aa20:	2900      	cmp	r1, #0
 800aa22:	d041      	beq.n	800aaa8 <_free_r+0x8c>
 800aa24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa28:	1f0c      	subs	r4, r1, #4
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	bfb8      	it	lt
 800aa2e:	18e4      	addlt	r4, r4, r3
 800aa30:	f000 f8e0 	bl	800abf4 <__malloc_lock>
 800aa34:	4a1d      	ldr	r2, [pc, #116]	@ (800aaac <_free_r+0x90>)
 800aa36:	6813      	ldr	r3, [r2, #0]
 800aa38:	b933      	cbnz	r3, 800aa48 <_free_r+0x2c>
 800aa3a:	6063      	str	r3, [r4, #4]
 800aa3c:	6014      	str	r4, [r2, #0]
 800aa3e:	4628      	mov	r0, r5
 800aa40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa44:	f000 b8dc 	b.w	800ac00 <__malloc_unlock>
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d908      	bls.n	800aa5e <_free_r+0x42>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	1821      	adds	r1, r4, r0
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf01      	itttt	eq
 800aa54:	6819      	ldreq	r1, [r3, #0]
 800aa56:	685b      	ldreq	r3, [r3, #4]
 800aa58:	1809      	addeq	r1, r1, r0
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	e7ed      	b.n	800aa3a <_free_r+0x1e>
 800aa5e:	461a      	mov	r2, r3
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	b10b      	cbz	r3, 800aa68 <_free_r+0x4c>
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d9fa      	bls.n	800aa5e <_free_r+0x42>
 800aa68:	6811      	ldr	r1, [r2, #0]
 800aa6a:	1850      	adds	r0, r2, r1
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d10b      	bne.n	800aa88 <_free_r+0x6c>
 800aa70:	6820      	ldr	r0, [r4, #0]
 800aa72:	4401      	add	r1, r0
 800aa74:	1850      	adds	r0, r2, r1
 800aa76:	4283      	cmp	r3, r0
 800aa78:	6011      	str	r1, [r2, #0]
 800aa7a:	d1e0      	bne.n	800aa3e <_free_r+0x22>
 800aa7c:	6818      	ldr	r0, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	6053      	str	r3, [r2, #4]
 800aa82:	4408      	add	r0, r1
 800aa84:	6010      	str	r0, [r2, #0]
 800aa86:	e7da      	b.n	800aa3e <_free_r+0x22>
 800aa88:	d902      	bls.n	800aa90 <_free_r+0x74>
 800aa8a:	230c      	movs	r3, #12
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	e7d6      	b.n	800aa3e <_free_r+0x22>
 800aa90:	6820      	ldr	r0, [r4, #0]
 800aa92:	1821      	adds	r1, r4, r0
 800aa94:	428b      	cmp	r3, r1
 800aa96:	bf04      	itt	eq
 800aa98:	6819      	ldreq	r1, [r3, #0]
 800aa9a:	685b      	ldreq	r3, [r3, #4]
 800aa9c:	6063      	str	r3, [r4, #4]
 800aa9e:	bf04      	itt	eq
 800aaa0:	1809      	addeq	r1, r1, r0
 800aaa2:	6021      	streq	r1, [r4, #0]
 800aaa4:	6054      	str	r4, [r2, #4]
 800aaa6:	e7ca      	b.n	800aa3e <_free_r+0x22>
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop
 800aaac:	20001cf0 	.word	0x20001cf0

0800aab0 <sbrk_aligned>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	4e0f      	ldr	r6, [pc, #60]	@ (800aaf0 <sbrk_aligned+0x40>)
 800aab4:	460c      	mov	r4, r1
 800aab6:	6831      	ldr	r1, [r6, #0]
 800aab8:	4605      	mov	r5, r0
 800aaba:	b911      	cbnz	r1, 800aac2 <sbrk_aligned+0x12>
 800aabc:	f000 fba6 	bl	800b20c <_sbrk_r>
 800aac0:	6030      	str	r0, [r6, #0]
 800aac2:	4621      	mov	r1, r4
 800aac4:	4628      	mov	r0, r5
 800aac6:	f000 fba1 	bl	800b20c <_sbrk_r>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	d103      	bne.n	800aad6 <sbrk_aligned+0x26>
 800aace:	f04f 34ff 	mov.w	r4, #4294967295
 800aad2:	4620      	mov	r0, r4
 800aad4:	bd70      	pop	{r4, r5, r6, pc}
 800aad6:	1cc4      	adds	r4, r0, #3
 800aad8:	f024 0403 	bic.w	r4, r4, #3
 800aadc:	42a0      	cmp	r0, r4
 800aade:	d0f8      	beq.n	800aad2 <sbrk_aligned+0x22>
 800aae0:	1a21      	subs	r1, r4, r0
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 fb92 	bl	800b20c <_sbrk_r>
 800aae8:	3001      	adds	r0, #1
 800aaea:	d1f2      	bne.n	800aad2 <sbrk_aligned+0x22>
 800aaec:	e7ef      	b.n	800aace <sbrk_aligned+0x1e>
 800aaee:	bf00      	nop
 800aaf0:	20001cec 	.word	0x20001cec

0800aaf4 <_malloc_r>:
 800aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf8:	1ccd      	adds	r5, r1, #3
 800aafa:	f025 0503 	bic.w	r5, r5, #3
 800aafe:	3508      	adds	r5, #8
 800ab00:	2d0c      	cmp	r5, #12
 800ab02:	bf38      	it	cc
 800ab04:	250c      	movcc	r5, #12
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	4606      	mov	r6, r0
 800ab0a:	db01      	blt.n	800ab10 <_malloc_r+0x1c>
 800ab0c:	42a9      	cmp	r1, r5
 800ab0e:	d904      	bls.n	800ab1a <_malloc_r+0x26>
 800ab10:	230c      	movs	r3, #12
 800ab12:	6033      	str	r3, [r6, #0]
 800ab14:	2000      	movs	r0, #0
 800ab16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abf0 <_malloc_r+0xfc>
 800ab1e:	f000 f869 	bl	800abf4 <__malloc_lock>
 800ab22:	f8d8 3000 	ldr.w	r3, [r8]
 800ab26:	461c      	mov	r4, r3
 800ab28:	bb44      	cbnz	r4, 800ab7c <_malloc_r+0x88>
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f7ff ffbf 	bl	800aab0 <sbrk_aligned>
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	4604      	mov	r4, r0
 800ab36:	d158      	bne.n	800abea <_malloc_r+0xf6>
 800ab38:	f8d8 4000 	ldr.w	r4, [r8]
 800ab3c:	4627      	mov	r7, r4
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	d143      	bne.n	800abca <_malloc_r+0xd6>
 800ab42:	2c00      	cmp	r4, #0
 800ab44:	d04b      	beq.n	800abde <_malloc_r+0xea>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	eb04 0903 	add.w	r9, r4, r3
 800ab50:	f000 fb5c 	bl	800b20c <_sbrk_r>
 800ab54:	4581      	cmp	r9, r0
 800ab56:	d142      	bne.n	800abde <_malloc_r+0xea>
 800ab58:	6821      	ldr	r1, [r4, #0]
 800ab5a:	1a6d      	subs	r5, r5, r1
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ffa6 	bl	800aab0 <sbrk_aligned>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d03a      	beq.n	800abde <_malloc_r+0xea>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	442b      	add	r3, r5
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	bb62      	cbnz	r2, 800abd0 <_malloc_r+0xdc>
 800ab76:	f8c8 7000 	str.w	r7, [r8]
 800ab7a:	e00f      	b.n	800ab9c <_malloc_r+0xa8>
 800ab7c:	6822      	ldr	r2, [r4, #0]
 800ab7e:	1b52      	subs	r2, r2, r5
 800ab80:	d420      	bmi.n	800abc4 <_malloc_r+0xd0>
 800ab82:	2a0b      	cmp	r2, #11
 800ab84:	d917      	bls.n	800abb6 <_malloc_r+0xc2>
 800ab86:	1961      	adds	r1, r4, r5
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	6025      	str	r5, [r4, #0]
 800ab8c:	bf18      	it	ne
 800ab8e:	6059      	strne	r1, [r3, #4]
 800ab90:	6863      	ldr	r3, [r4, #4]
 800ab92:	bf08      	it	eq
 800ab94:	f8c8 1000 	streq.w	r1, [r8]
 800ab98:	5162      	str	r2, [r4, r5]
 800ab9a:	604b      	str	r3, [r1, #4]
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f000 f82f 	bl	800ac00 <__malloc_unlock>
 800aba2:	f104 000b 	add.w	r0, r4, #11
 800aba6:	1d23      	adds	r3, r4, #4
 800aba8:	f020 0007 	bic.w	r0, r0, #7
 800abac:	1ac2      	subs	r2, r0, r3
 800abae:	bf1c      	itt	ne
 800abb0:	1a1b      	subne	r3, r3, r0
 800abb2:	50a3      	strne	r3, [r4, r2]
 800abb4:	e7af      	b.n	800ab16 <_malloc_r+0x22>
 800abb6:	6862      	ldr	r2, [r4, #4]
 800abb8:	42a3      	cmp	r3, r4
 800abba:	bf0c      	ite	eq
 800abbc:	f8c8 2000 	streq.w	r2, [r8]
 800abc0:	605a      	strne	r2, [r3, #4]
 800abc2:	e7eb      	b.n	800ab9c <_malloc_r+0xa8>
 800abc4:	4623      	mov	r3, r4
 800abc6:	6864      	ldr	r4, [r4, #4]
 800abc8:	e7ae      	b.n	800ab28 <_malloc_r+0x34>
 800abca:	463c      	mov	r4, r7
 800abcc:	687f      	ldr	r7, [r7, #4]
 800abce:	e7b6      	b.n	800ab3e <_malloc_r+0x4a>
 800abd0:	461a      	mov	r2, r3
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d1fb      	bne.n	800abd0 <_malloc_r+0xdc>
 800abd8:	2300      	movs	r3, #0
 800abda:	6053      	str	r3, [r2, #4]
 800abdc:	e7de      	b.n	800ab9c <_malloc_r+0xa8>
 800abde:	230c      	movs	r3, #12
 800abe0:	6033      	str	r3, [r6, #0]
 800abe2:	4630      	mov	r0, r6
 800abe4:	f000 f80c 	bl	800ac00 <__malloc_unlock>
 800abe8:	e794      	b.n	800ab14 <_malloc_r+0x20>
 800abea:	6005      	str	r5, [r0, #0]
 800abec:	e7d6      	b.n	800ab9c <_malloc_r+0xa8>
 800abee:	bf00      	nop
 800abf0:	20001cf0 	.word	0x20001cf0

0800abf4 <__malloc_lock>:
 800abf4:	4801      	ldr	r0, [pc, #4]	@ (800abfc <__malloc_lock+0x8>)
 800abf6:	f7ff bf0f 	b.w	800aa18 <__retarget_lock_acquire_recursive>
 800abfa:	bf00      	nop
 800abfc:	20001ce8 	.word	0x20001ce8

0800ac00 <__malloc_unlock>:
 800ac00:	4801      	ldr	r0, [pc, #4]	@ (800ac08 <__malloc_unlock+0x8>)
 800ac02:	f7ff bf0a 	b.w	800aa1a <__retarget_lock_release_recursive>
 800ac06:	bf00      	nop
 800ac08:	20001ce8 	.word	0x20001ce8

0800ac0c <__ssputs_r>:
 800ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	688e      	ldr	r6, [r1, #8]
 800ac12:	461f      	mov	r7, r3
 800ac14:	42be      	cmp	r6, r7
 800ac16:	680b      	ldr	r3, [r1, #0]
 800ac18:	4682      	mov	sl, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	4690      	mov	r8, r2
 800ac1e:	d82d      	bhi.n	800ac7c <__ssputs_r+0x70>
 800ac20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac28:	d026      	beq.n	800ac78 <__ssputs_r+0x6c>
 800ac2a:	6965      	ldr	r5, [r4, #20]
 800ac2c:	6909      	ldr	r1, [r1, #16]
 800ac2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac32:	eba3 0901 	sub.w	r9, r3, r1
 800ac36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac3a:	1c7b      	adds	r3, r7, #1
 800ac3c:	444b      	add	r3, r9
 800ac3e:	106d      	asrs	r5, r5, #1
 800ac40:	429d      	cmp	r5, r3
 800ac42:	bf38      	it	cc
 800ac44:	461d      	movcc	r5, r3
 800ac46:	0553      	lsls	r3, r2, #21
 800ac48:	d527      	bpl.n	800ac9a <__ssputs_r+0x8e>
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	f7ff ff52 	bl	800aaf4 <_malloc_r>
 800ac50:	4606      	mov	r6, r0
 800ac52:	b360      	cbz	r0, 800acae <__ssputs_r+0xa2>
 800ac54:	6921      	ldr	r1, [r4, #16]
 800ac56:	464a      	mov	r2, r9
 800ac58:	f000 fae8 	bl	800b22c <memcpy>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	6126      	str	r6, [r4, #16]
 800ac6a:	6165      	str	r5, [r4, #20]
 800ac6c:	444e      	add	r6, r9
 800ac6e:	eba5 0509 	sub.w	r5, r5, r9
 800ac72:	6026      	str	r6, [r4, #0]
 800ac74:	60a5      	str	r5, [r4, #8]
 800ac76:	463e      	mov	r6, r7
 800ac78:	42be      	cmp	r6, r7
 800ac7a:	d900      	bls.n	800ac7e <__ssputs_r+0x72>
 800ac7c:	463e      	mov	r6, r7
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	4632      	mov	r2, r6
 800ac82:	4641      	mov	r1, r8
 800ac84:	f000 faa8 	bl	800b1d8 <memmove>
 800ac88:	68a3      	ldr	r3, [r4, #8]
 800ac8a:	1b9b      	subs	r3, r3, r6
 800ac8c:	60a3      	str	r3, [r4, #8]
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	4433      	add	r3, r6
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	2000      	movs	r0, #0
 800ac96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9a:	462a      	mov	r2, r5
 800ac9c:	f000 fad4 	bl	800b248 <_realloc_r>
 800aca0:	4606      	mov	r6, r0
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d1e0      	bne.n	800ac68 <__ssputs_r+0x5c>
 800aca6:	6921      	ldr	r1, [r4, #16]
 800aca8:	4650      	mov	r0, sl
 800acaa:	f7ff feb7 	bl	800aa1c <_free_r>
 800acae:	230c      	movs	r3, #12
 800acb0:	f8ca 3000 	str.w	r3, [sl]
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	e7e9      	b.n	800ac96 <__ssputs_r+0x8a>
	...

0800acc4 <_svfiprintf_r>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	4698      	mov	r8, r3
 800acca:	898b      	ldrh	r3, [r1, #12]
 800accc:	061b      	lsls	r3, r3, #24
 800acce:	b09d      	sub	sp, #116	@ 0x74
 800acd0:	4607      	mov	r7, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	4614      	mov	r4, r2
 800acd6:	d510      	bpl.n	800acfa <_svfiprintf_r+0x36>
 800acd8:	690b      	ldr	r3, [r1, #16]
 800acda:	b973      	cbnz	r3, 800acfa <_svfiprintf_r+0x36>
 800acdc:	2140      	movs	r1, #64	@ 0x40
 800acde:	f7ff ff09 	bl	800aaf4 <_malloc_r>
 800ace2:	6028      	str	r0, [r5, #0]
 800ace4:	6128      	str	r0, [r5, #16]
 800ace6:	b930      	cbnz	r0, 800acf6 <_svfiprintf_r+0x32>
 800ace8:	230c      	movs	r3, #12
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	b01d      	add	sp, #116	@ 0x74
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf6:	2340      	movs	r3, #64	@ 0x40
 800acf8:	616b      	str	r3, [r5, #20]
 800acfa:	2300      	movs	r3, #0
 800acfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acfe:	2320      	movs	r3, #32
 800ad00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad08:	2330      	movs	r3, #48	@ 0x30
 800ad0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aea8 <_svfiprintf_r+0x1e4>
 800ad0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad12:	f04f 0901 	mov.w	r9, #1
 800ad16:	4623      	mov	r3, r4
 800ad18:	469a      	mov	sl, r3
 800ad1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad1e:	b10a      	cbz	r2, 800ad24 <_svfiprintf_r+0x60>
 800ad20:	2a25      	cmp	r2, #37	@ 0x25
 800ad22:	d1f9      	bne.n	800ad18 <_svfiprintf_r+0x54>
 800ad24:	ebba 0b04 	subs.w	fp, sl, r4
 800ad28:	d00b      	beq.n	800ad42 <_svfiprintf_r+0x7e>
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	4638      	mov	r0, r7
 800ad32:	f7ff ff6b 	bl	800ac0c <__ssputs_r>
 800ad36:	3001      	adds	r0, #1
 800ad38:	f000 80a7 	beq.w	800ae8a <_svfiprintf_r+0x1c6>
 800ad3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad3e:	445a      	add	r2, fp
 800ad40:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad42:	f89a 3000 	ldrb.w	r3, [sl]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 809f 	beq.w	800ae8a <_svfiprintf_r+0x1c6>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad56:	f10a 0a01 	add.w	sl, sl, #1
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	9307      	str	r3, [sp, #28]
 800ad5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad62:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad64:	4654      	mov	r4, sl
 800ad66:	2205      	movs	r2, #5
 800ad68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6c:	484e      	ldr	r0, [pc, #312]	@ (800aea8 <_svfiprintf_r+0x1e4>)
 800ad6e:	f7f5 fa3f 	bl	80001f0 <memchr>
 800ad72:	9a04      	ldr	r2, [sp, #16]
 800ad74:	b9d8      	cbnz	r0, 800adae <_svfiprintf_r+0xea>
 800ad76:	06d0      	lsls	r0, r2, #27
 800ad78:	bf44      	itt	mi
 800ad7a:	2320      	movmi	r3, #32
 800ad7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad80:	0711      	lsls	r1, r2, #28
 800ad82:	bf44      	itt	mi
 800ad84:	232b      	movmi	r3, #43	@ 0x2b
 800ad86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad90:	d015      	beq.n	800adbe <_svfiprintf_r+0xfa>
 800ad92:	9a07      	ldr	r2, [sp, #28]
 800ad94:	4654      	mov	r4, sl
 800ad96:	2000      	movs	r0, #0
 800ad98:	f04f 0c0a 	mov.w	ip, #10
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ada2:	3b30      	subs	r3, #48	@ 0x30
 800ada4:	2b09      	cmp	r3, #9
 800ada6:	d94b      	bls.n	800ae40 <_svfiprintf_r+0x17c>
 800ada8:	b1b0      	cbz	r0, 800add8 <_svfiprintf_r+0x114>
 800adaa:	9207      	str	r2, [sp, #28]
 800adac:	e014      	b.n	800add8 <_svfiprintf_r+0x114>
 800adae:	eba0 0308 	sub.w	r3, r0, r8
 800adb2:	fa09 f303 	lsl.w	r3, r9, r3
 800adb6:	4313      	orrs	r3, r2
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	46a2      	mov	sl, r4
 800adbc:	e7d2      	b.n	800ad64 <_svfiprintf_r+0xa0>
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	1d19      	adds	r1, r3, #4
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	9103      	str	r1, [sp, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bfbb      	ittet	lt
 800adca:	425b      	neglt	r3, r3
 800adcc:	f042 0202 	orrlt.w	r2, r2, #2
 800add0:	9307      	strge	r3, [sp, #28]
 800add2:	9307      	strlt	r3, [sp, #28]
 800add4:	bfb8      	it	lt
 800add6:	9204      	strlt	r2, [sp, #16]
 800add8:	7823      	ldrb	r3, [r4, #0]
 800adda:	2b2e      	cmp	r3, #46	@ 0x2e
 800addc:	d10a      	bne.n	800adf4 <_svfiprintf_r+0x130>
 800adde:	7863      	ldrb	r3, [r4, #1]
 800ade0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ade2:	d132      	bne.n	800ae4a <_svfiprintf_r+0x186>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	1d1a      	adds	r2, r3, #4
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	9203      	str	r2, [sp, #12]
 800adec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adf0:	3402      	adds	r4, #2
 800adf2:	9305      	str	r3, [sp, #20]
 800adf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aeb8 <_svfiprintf_r+0x1f4>
 800adf8:	7821      	ldrb	r1, [r4, #0]
 800adfa:	2203      	movs	r2, #3
 800adfc:	4650      	mov	r0, sl
 800adfe:	f7f5 f9f7 	bl	80001f0 <memchr>
 800ae02:	b138      	cbz	r0, 800ae14 <_svfiprintf_r+0x150>
 800ae04:	9b04      	ldr	r3, [sp, #16]
 800ae06:	eba0 000a 	sub.w	r0, r0, sl
 800ae0a:	2240      	movs	r2, #64	@ 0x40
 800ae0c:	4082      	lsls	r2, r0
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	3401      	adds	r4, #1
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae18:	4824      	ldr	r0, [pc, #144]	@ (800aeac <_svfiprintf_r+0x1e8>)
 800ae1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae1e:	2206      	movs	r2, #6
 800ae20:	f7f5 f9e6 	bl	80001f0 <memchr>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d036      	beq.n	800ae96 <_svfiprintf_r+0x1d2>
 800ae28:	4b21      	ldr	r3, [pc, #132]	@ (800aeb0 <_svfiprintf_r+0x1ec>)
 800ae2a:	bb1b      	cbnz	r3, 800ae74 <_svfiprintf_r+0x1b0>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	3307      	adds	r3, #7
 800ae30:	f023 0307 	bic.w	r3, r3, #7
 800ae34:	3308      	adds	r3, #8
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3a:	4433      	add	r3, r6
 800ae3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae3e:	e76a      	b.n	800ad16 <_svfiprintf_r+0x52>
 800ae40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae44:	460c      	mov	r4, r1
 800ae46:	2001      	movs	r0, #1
 800ae48:	e7a8      	b.n	800ad9c <_svfiprintf_r+0xd8>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	3401      	adds	r4, #1
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	4619      	mov	r1, r3
 800ae52:	f04f 0c0a 	mov.w	ip, #10
 800ae56:	4620      	mov	r0, r4
 800ae58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae5c:	3a30      	subs	r2, #48	@ 0x30
 800ae5e:	2a09      	cmp	r2, #9
 800ae60:	d903      	bls.n	800ae6a <_svfiprintf_r+0x1a6>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0c6      	beq.n	800adf4 <_svfiprintf_r+0x130>
 800ae66:	9105      	str	r1, [sp, #20]
 800ae68:	e7c4      	b.n	800adf4 <_svfiprintf_r+0x130>
 800ae6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6e:	4604      	mov	r4, r0
 800ae70:	2301      	movs	r3, #1
 800ae72:	e7f0      	b.n	800ae56 <_svfiprintf_r+0x192>
 800ae74:	ab03      	add	r3, sp, #12
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	462a      	mov	r2, r5
 800ae7a:	4b0e      	ldr	r3, [pc, #56]	@ (800aeb4 <_svfiprintf_r+0x1f0>)
 800ae7c:	a904      	add	r1, sp, #16
 800ae7e:	4638      	mov	r0, r7
 800ae80:	f3af 8000 	nop.w
 800ae84:	1c42      	adds	r2, r0, #1
 800ae86:	4606      	mov	r6, r0
 800ae88:	d1d6      	bne.n	800ae38 <_svfiprintf_r+0x174>
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	065b      	lsls	r3, r3, #25
 800ae8e:	f53f af2d 	bmi.w	800acec <_svfiprintf_r+0x28>
 800ae92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae94:	e72c      	b.n	800acf0 <_svfiprintf_r+0x2c>
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	4b05      	ldr	r3, [pc, #20]	@ (800aeb4 <_svfiprintf_r+0x1f0>)
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	4638      	mov	r0, r7
 800aea2:	f000 f879 	bl	800af98 <_printf_i>
 800aea6:	e7ed      	b.n	800ae84 <_svfiprintf_r+0x1c0>
 800aea8:	0800d9b0 	.word	0x0800d9b0
 800aeac:	0800d9ba 	.word	0x0800d9ba
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	0800ac0d 	.word	0x0800ac0d
 800aeb8:	0800d9b6 	.word	0x0800d9b6

0800aebc <_printf_common>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	4616      	mov	r6, r2
 800aec2:	4698      	mov	r8, r3
 800aec4:	688a      	ldr	r2, [r1, #8]
 800aec6:	690b      	ldr	r3, [r1, #16]
 800aec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aecc:	4293      	cmp	r3, r2
 800aece:	bfb8      	it	lt
 800aed0:	4613      	movlt	r3, r2
 800aed2:	6033      	str	r3, [r6, #0]
 800aed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aed8:	4607      	mov	r7, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	b10a      	cbz	r2, 800aee2 <_printf_common+0x26>
 800aede:	3301      	adds	r3, #1
 800aee0:	6033      	str	r3, [r6, #0]
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	0699      	lsls	r1, r3, #26
 800aee6:	bf42      	ittt	mi
 800aee8:	6833      	ldrmi	r3, [r6, #0]
 800aeea:	3302      	addmi	r3, #2
 800aeec:	6033      	strmi	r3, [r6, #0]
 800aeee:	6825      	ldr	r5, [r4, #0]
 800aef0:	f015 0506 	ands.w	r5, r5, #6
 800aef4:	d106      	bne.n	800af04 <_printf_common+0x48>
 800aef6:	f104 0a19 	add.w	sl, r4, #25
 800aefa:	68e3      	ldr	r3, [r4, #12]
 800aefc:	6832      	ldr	r2, [r6, #0]
 800aefe:	1a9b      	subs	r3, r3, r2
 800af00:	42ab      	cmp	r3, r5
 800af02:	dc26      	bgt.n	800af52 <_printf_common+0x96>
 800af04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af08:	6822      	ldr	r2, [r4, #0]
 800af0a:	3b00      	subs	r3, #0
 800af0c:	bf18      	it	ne
 800af0e:	2301      	movne	r3, #1
 800af10:	0692      	lsls	r2, r2, #26
 800af12:	d42b      	bmi.n	800af6c <_printf_common+0xb0>
 800af14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af18:	4641      	mov	r1, r8
 800af1a:	4638      	mov	r0, r7
 800af1c:	47c8      	blx	r9
 800af1e:	3001      	adds	r0, #1
 800af20:	d01e      	beq.n	800af60 <_printf_common+0xa4>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	6922      	ldr	r2, [r4, #16]
 800af26:	f003 0306 	and.w	r3, r3, #6
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	bf02      	ittt	eq
 800af2e:	68e5      	ldreq	r5, [r4, #12]
 800af30:	6833      	ldreq	r3, [r6, #0]
 800af32:	1aed      	subeq	r5, r5, r3
 800af34:	68a3      	ldr	r3, [r4, #8]
 800af36:	bf0c      	ite	eq
 800af38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af3c:	2500      	movne	r5, #0
 800af3e:	4293      	cmp	r3, r2
 800af40:	bfc4      	itt	gt
 800af42:	1a9b      	subgt	r3, r3, r2
 800af44:	18ed      	addgt	r5, r5, r3
 800af46:	2600      	movs	r6, #0
 800af48:	341a      	adds	r4, #26
 800af4a:	42b5      	cmp	r5, r6
 800af4c:	d11a      	bne.n	800af84 <_printf_common+0xc8>
 800af4e:	2000      	movs	r0, #0
 800af50:	e008      	b.n	800af64 <_printf_common+0xa8>
 800af52:	2301      	movs	r3, #1
 800af54:	4652      	mov	r2, sl
 800af56:	4641      	mov	r1, r8
 800af58:	4638      	mov	r0, r7
 800af5a:	47c8      	blx	r9
 800af5c:	3001      	adds	r0, #1
 800af5e:	d103      	bne.n	800af68 <_printf_common+0xac>
 800af60:	f04f 30ff 	mov.w	r0, #4294967295
 800af64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af68:	3501      	adds	r5, #1
 800af6a:	e7c6      	b.n	800aefa <_printf_common+0x3e>
 800af6c:	18e1      	adds	r1, r4, r3
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	2030      	movs	r0, #48	@ 0x30
 800af72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af76:	4422      	add	r2, r4
 800af78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af80:	3302      	adds	r3, #2
 800af82:	e7c7      	b.n	800af14 <_printf_common+0x58>
 800af84:	2301      	movs	r3, #1
 800af86:	4622      	mov	r2, r4
 800af88:	4641      	mov	r1, r8
 800af8a:	4638      	mov	r0, r7
 800af8c:	47c8      	blx	r9
 800af8e:	3001      	adds	r0, #1
 800af90:	d0e6      	beq.n	800af60 <_printf_common+0xa4>
 800af92:	3601      	adds	r6, #1
 800af94:	e7d9      	b.n	800af4a <_printf_common+0x8e>
	...

0800af98 <_printf_i>:
 800af98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	7e0f      	ldrb	r7, [r1, #24]
 800af9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afa0:	2f78      	cmp	r7, #120	@ 0x78
 800afa2:	4691      	mov	r9, r2
 800afa4:	4680      	mov	r8, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	469a      	mov	sl, r3
 800afaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afae:	d807      	bhi.n	800afc0 <_printf_i+0x28>
 800afb0:	2f62      	cmp	r7, #98	@ 0x62
 800afb2:	d80a      	bhi.n	800afca <_printf_i+0x32>
 800afb4:	2f00      	cmp	r7, #0
 800afb6:	f000 80d2 	beq.w	800b15e <_printf_i+0x1c6>
 800afba:	2f58      	cmp	r7, #88	@ 0x58
 800afbc:	f000 80b9 	beq.w	800b132 <_printf_i+0x19a>
 800afc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afc8:	e03a      	b.n	800b040 <_printf_i+0xa8>
 800afca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afce:	2b15      	cmp	r3, #21
 800afd0:	d8f6      	bhi.n	800afc0 <_printf_i+0x28>
 800afd2:	a101      	add	r1, pc, #4	@ (adr r1, 800afd8 <_printf_i+0x40>)
 800afd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afd8:	0800b031 	.word	0x0800b031
 800afdc:	0800b045 	.word	0x0800b045
 800afe0:	0800afc1 	.word	0x0800afc1
 800afe4:	0800afc1 	.word	0x0800afc1
 800afe8:	0800afc1 	.word	0x0800afc1
 800afec:	0800afc1 	.word	0x0800afc1
 800aff0:	0800b045 	.word	0x0800b045
 800aff4:	0800afc1 	.word	0x0800afc1
 800aff8:	0800afc1 	.word	0x0800afc1
 800affc:	0800afc1 	.word	0x0800afc1
 800b000:	0800afc1 	.word	0x0800afc1
 800b004:	0800b145 	.word	0x0800b145
 800b008:	0800b06f 	.word	0x0800b06f
 800b00c:	0800b0ff 	.word	0x0800b0ff
 800b010:	0800afc1 	.word	0x0800afc1
 800b014:	0800afc1 	.word	0x0800afc1
 800b018:	0800b167 	.word	0x0800b167
 800b01c:	0800afc1 	.word	0x0800afc1
 800b020:	0800b06f 	.word	0x0800b06f
 800b024:	0800afc1 	.word	0x0800afc1
 800b028:	0800afc1 	.word	0x0800afc1
 800b02c:	0800b107 	.word	0x0800b107
 800b030:	6833      	ldr	r3, [r6, #0]
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6032      	str	r2, [r6, #0]
 800b038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b03c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b040:	2301      	movs	r3, #1
 800b042:	e09d      	b.n	800b180 <_printf_i+0x1e8>
 800b044:	6833      	ldr	r3, [r6, #0]
 800b046:	6820      	ldr	r0, [r4, #0]
 800b048:	1d19      	adds	r1, r3, #4
 800b04a:	6031      	str	r1, [r6, #0]
 800b04c:	0606      	lsls	r6, r0, #24
 800b04e:	d501      	bpl.n	800b054 <_printf_i+0xbc>
 800b050:	681d      	ldr	r5, [r3, #0]
 800b052:	e003      	b.n	800b05c <_printf_i+0xc4>
 800b054:	0645      	lsls	r5, r0, #25
 800b056:	d5fb      	bpl.n	800b050 <_printf_i+0xb8>
 800b058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b05c:	2d00      	cmp	r5, #0
 800b05e:	da03      	bge.n	800b068 <_printf_i+0xd0>
 800b060:	232d      	movs	r3, #45	@ 0x2d
 800b062:	426d      	negs	r5, r5
 800b064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b068:	4859      	ldr	r0, [pc, #356]	@ (800b1d0 <_printf_i+0x238>)
 800b06a:	230a      	movs	r3, #10
 800b06c:	e011      	b.n	800b092 <_printf_i+0xfa>
 800b06e:	6821      	ldr	r1, [r4, #0]
 800b070:	6833      	ldr	r3, [r6, #0]
 800b072:	0608      	lsls	r0, r1, #24
 800b074:	f853 5b04 	ldr.w	r5, [r3], #4
 800b078:	d402      	bmi.n	800b080 <_printf_i+0xe8>
 800b07a:	0649      	lsls	r1, r1, #25
 800b07c:	bf48      	it	mi
 800b07e:	b2ad      	uxthmi	r5, r5
 800b080:	2f6f      	cmp	r7, #111	@ 0x6f
 800b082:	4853      	ldr	r0, [pc, #332]	@ (800b1d0 <_printf_i+0x238>)
 800b084:	6033      	str	r3, [r6, #0]
 800b086:	bf14      	ite	ne
 800b088:	230a      	movne	r3, #10
 800b08a:	2308      	moveq	r3, #8
 800b08c:	2100      	movs	r1, #0
 800b08e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b092:	6866      	ldr	r6, [r4, #4]
 800b094:	60a6      	str	r6, [r4, #8]
 800b096:	2e00      	cmp	r6, #0
 800b098:	bfa2      	ittt	ge
 800b09a:	6821      	ldrge	r1, [r4, #0]
 800b09c:	f021 0104 	bicge.w	r1, r1, #4
 800b0a0:	6021      	strge	r1, [r4, #0]
 800b0a2:	b90d      	cbnz	r5, 800b0a8 <_printf_i+0x110>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	d04b      	beq.n	800b140 <_printf_i+0x1a8>
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0ae:	fb03 5711 	mls	r7, r3, r1, r5
 800b0b2:	5dc7      	ldrb	r7, [r0, r7]
 800b0b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0b8:	462f      	mov	r7, r5
 800b0ba:	42bb      	cmp	r3, r7
 800b0bc:	460d      	mov	r5, r1
 800b0be:	d9f4      	bls.n	800b0aa <_printf_i+0x112>
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d10b      	bne.n	800b0dc <_printf_i+0x144>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	07df      	lsls	r7, r3, #31
 800b0c8:	d508      	bpl.n	800b0dc <_printf_i+0x144>
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	bfde      	ittt	le
 800b0d2:	2330      	movle	r3, #48	@ 0x30
 800b0d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0dc:	1b92      	subs	r2, r2, r6
 800b0de:	6122      	str	r2, [r4, #16]
 800b0e0:	f8cd a000 	str.w	sl, [sp]
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	aa03      	add	r2, sp, #12
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7ff fee6 	bl	800aebc <_printf_common>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d14a      	bne.n	800b18a <_printf_i+0x1f2>
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f8:	b004      	add	sp, #16
 800b0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	f043 0320 	orr.w	r3, r3, #32
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	4833      	ldr	r0, [pc, #204]	@ (800b1d4 <_printf_i+0x23c>)
 800b108:	2778      	movs	r7, #120	@ 0x78
 800b10a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	6831      	ldr	r1, [r6, #0]
 800b112:	061f      	lsls	r7, r3, #24
 800b114:	f851 5b04 	ldr.w	r5, [r1], #4
 800b118:	d402      	bmi.n	800b120 <_printf_i+0x188>
 800b11a:	065f      	lsls	r7, r3, #25
 800b11c:	bf48      	it	mi
 800b11e:	b2ad      	uxthmi	r5, r5
 800b120:	6031      	str	r1, [r6, #0]
 800b122:	07d9      	lsls	r1, r3, #31
 800b124:	bf44      	itt	mi
 800b126:	f043 0320 	orrmi.w	r3, r3, #32
 800b12a:	6023      	strmi	r3, [r4, #0]
 800b12c:	b11d      	cbz	r5, 800b136 <_printf_i+0x19e>
 800b12e:	2310      	movs	r3, #16
 800b130:	e7ac      	b.n	800b08c <_printf_i+0xf4>
 800b132:	4827      	ldr	r0, [pc, #156]	@ (800b1d0 <_printf_i+0x238>)
 800b134:	e7e9      	b.n	800b10a <_printf_i+0x172>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	f023 0320 	bic.w	r3, r3, #32
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	e7f6      	b.n	800b12e <_printf_i+0x196>
 800b140:	4616      	mov	r6, r2
 800b142:	e7bd      	b.n	800b0c0 <_printf_i+0x128>
 800b144:	6833      	ldr	r3, [r6, #0]
 800b146:	6825      	ldr	r5, [r4, #0]
 800b148:	6961      	ldr	r1, [r4, #20]
 800b14a:	1d18      	adds	r0, r3, #4
 800b14c:	6030      	str	r0, [r6, #0]
 800b14e:	062e      	lsls	r6, r5, #24
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	d501      	bpl.n	800b158 <_printf_i+0x1c0>
 800b154:	6019      	str	r1, [r3, #0]
 800b156:	e002      	b.n	800b15e <_printf_i+0x1c6>
 800b158:	0668      	lsls	r0, r5, #25
 800b15a:	d5fb      	bpl.n	800b154 <_printf_i+0x1bc>
 800b15c:	8019      	strh	r1, [r3, #0]
 800b15e:	2300      	movs	r3, #0
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	4616      	mov	r6, r2
 800b164:	e7bc      	b.n	800b0e0 <_printf_i+0x148>
 800b166:	6833      	ldr	r3, [r6, #0]
 800b168:	1d1a      	adds	r2, r3, #4
 800b16a:	6032      	str	r2, [r6, #0]
 800b16c:	681e      	ldr	r6, [r3, #0]
 800b16e:	6862      	ldr	r2, [r4, #4]
 800b170:	2100      	movs	r1, #0
 800b172:	4630      	mov	r0, r6
 800b174:	f7f5 f83c 	bl	80001f0 <memchr>
 800b178:	b108      	cbz	r0, 800b17e <_printf_i+0x1e6>
 800b17a:	1b80      	subs	r0, r0, r6
 800b17c:	6060      	str	r0, [r4, #4]
 800b17e:	6863      	ldr	r3, [r4, #4]
 800b180:	6123      	str	r3, [r4, #16]
 800b182:	2300      	movs	r3, #0
 800b184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b188:	e7aa      	b.n	800b0e0 <_printf_i+0x148>
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	4632      	mov	r2, r6
 800b18e:	4649      	mov	r1, r9
 800b190:	4640      	mov	r0, r8
 800b192:	47d0      	blx	sl
 800b194:	3001      	adds	r0, #1
 800b196:	d0ad      	beq.n	800b0f4 <_printf_i+0x15c>
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	079b      	lsls	r3, r3, #30
 800b19c:	d413      	bmi.n	800b1c6 <_printf_i+0x22e>
 800b19e:	68e0      	ldr	r0, [r4, #12]
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	4298      	cmp	r0, r3
 800b1a4:	bfb8      	it	lt
 800b1a6:	4618      	movlt	r0, r3
 800b1a8:	e7a6      	b.n	800b0f8 <_printf_i+0x160>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	47d0      	blx	sl
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d09d      	beq.n	800b0f4 <_printf_i+0x15c>
 800b1b8:	3501      	adds	r5, #1
 800b1ba:	68e3      	ldr	r3, [r4, #12]
 800b1bc:	9903      	ldr	r1, [sp, #12]
 800b1be:	1a5b      	subs	r3, r3, r1
 800b1c0:	42ab      	cmp	r3, r5
 800b1c2:	dcf2      	bgt.n	800b1aa <_printf_i+0x212>
 800b1c4:	e7eb      	b.n	800b19e <_printf_i+0x206>
 800b1c6:	2500      	movs	r5, #0
 800b1c8:	f104 0619 	add.w	r6, r4, #25
 800b1cc:	e7f5      	b.n	800b1ba <_printf_i+0x222>
 800b1ce:	bf00      	nop
 800b1d0:	0800d9c1 	.word	0x0800d9c1
 800b1d4:	0800d9d2 	.word	0x0800d9d2

0800b1d8 <memmove>:
 800b1d8:	4288      	cmp	r0, r1
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	eb01 0402 	add.w	r4, r1, r2
 800b1e0:	d902      	bls.n	800b1e8 <memmove+0x10>
 800b1e2:	4284      	cmp	r4, r0
 800b1e4:	4623      	mov	r3, r4
 800b1e6:	d807      	bhi.n	800b1f8 <memmove+0x20>
 800b1e8:	1e43      	subs	r3, r0, #1
 800b1ea:	42a1      	cmp	r1, r4
 800b1ec:	d008      	beq.n	800b200 <memmove+0x28>
 800b1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1f6:	e7f8      	b.n	800b1ea <memmove+0x12>
 800b1f8:	4402      	add	r2, r0
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	428a      	cmp	r2, r1
 800b1fe:	d100      	bne.n	800b202 <memmove+0x2a>
 800b200:	bd10      	pop	{r4, pc}
 800b202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b20a:	e7f7      	b.n	800b1fc <memmove+0x24>

0800b20c <_sbrk_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d06      	ldr	r5, [pc, #24]	@ (800b228 <_sbrk_r+0x1c>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	602b      	str	r3, [r5, #0]
 800b218:	f7f9 f87a 	bl	8004310 <_sbrk>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_sbrk_r+0x1a>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_sbrk_r+0x1a>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	20001ce4 	.word	0x20001ce4

0800b22c <memcpy>:
 800b22c:	440a      	add	r2, r1
 800b22e:	4291      	cmp	r1, r2
 800b230:	f100 33ff 	add.w	r3, r0, #4294967295
 800b234:	d100      	bne.n	800b238 <memcpy+0xc>
 800b236:	4770      	bx	lr
 800b238:	b510      	push	{r4, lr}
 800b23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b23e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b242:	4291      	cmp	r1, r2
 800b244:	d1f9      	bne.n	800b23a <memcpy+0xe>
 800b246:	bd10      	pop	{r4, pc}

0800b248 <_realloc_r>:
 800b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b24c:	4680      	mov	r8, r0
 800b24e:	4615      	mov	r5, r2
 800b250:	460c      	mov	r4, r1
 800b252:	b921      	cbnz	r1, 800b25e <_realloc_r+0x16>
 800b254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	4611      	mov	r1, r2
 800b25a:	f7ff bc4b 	b.w	800aaf4 <_malloc_r>
 800b25e:	b92a      	cbnz	r2, 800b26c <_realloc_r+0x24>
 800b260:	f7ff fbdc 	bl	800aa1c <_free_r>
 800b264:	2400      	movs	r4, #0
 800b266:	4620      	mov	r0, r4
 800b268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b26c:	f000 f81a 	bl	800b2a4 <_malloc_usable_size_r>
 800b270:	4285      	cmp	r5, r0
 800b272:	4606      	mov	r6, r0
 800b274:	d802      	bhi.n	800b27c <_realloc_r+0x34>
 800b276:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b27a:	d8f4      	bhi.n	800b266 <_realloc_r+0x1e>
 800b27c:	4629      	mov	r1, r5
 800b27e:	4640      	mov	r0, r8
 800b280:	f7ff fc38 	bl	800aaf4 <_malloc_r>
 800b284:	4607      	mov	r7, r0
 800b286:	2800      	cmp	r0, #0
 800b288:	d0ec      	beq.n	800b264 <_realloc_r+0x1c>
 800b28a:	42b5      	cmp	r5, r6
 800b28c:	462a      	mov	r2, r5
 800b28e:	4621      	mov	r1, r4
 800b290:	bf28      	it	cs
 800b292:	4632      	movcs	r2, r6
 800b294:	f7ff ffca 	bl	800b22c <memcpy>
 800b298:	4621      	mov	r1, r4
 800b29a:	4640      	mov	r0, r8
 800b29c:	f7ff fbbe 	bl	800aa1c <_free_r>
 800b2a0:	463c      	mov	r4, r7
 800b2a2:	e7e0      	b.n	800b266 <_realloc_r+0x1e>

0800b2a4 <_malloc_usable_size_r>:
 800b2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2a8:	1f18      	subs	r0, r3, #4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	bfbc      	itt	lt
 800b2ae:	580b      	ldrlt	r3, [r1, r0]
 800b2b0:	18c0      	addlt	r0, r0, r3
 800b2b2:	4770      	bx	lr

0800b2b4 <_init>:
 800b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b6:	bf00      	nop
 800b2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ba:	bc08      	pop	{r3}
 800b2bc:	469e      	mov	lr, r3
 800b2be:	4770      	bx	lr

0800b2c0 <_fini>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	bf00      	nop
 800b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c6:	bc08      	pop	{r3}
 800b2c8:	469e      	mov	lr, r3
 800b2ca:	4770      	bx	lr
