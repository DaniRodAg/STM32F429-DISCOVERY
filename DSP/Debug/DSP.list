
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b160  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002714  0800b310  0800b310  0000c310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da24  0800da24  0000f0ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800da24  0800da24  0000ea24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da2c  0800da2c  0000f0ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da2c  0800da2c  0000ea2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da30  0800da30  0000ea30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  0800da34  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0ec  2**0
                  CONTENTS
 10 .bss          00001ffc  200000ec  200000ec  0000f0ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020e8  200020e8  0000f0ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a2d  00000000  00000000  0000f11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000579e  00000000  00000000  00030b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  000362e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016c2  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b971  00000000  00000000  00039772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028eef  00000000  00000000  000650e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7e42  00000000  00000000  0008dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00185e14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f68  00000000  00000000  00185e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0018ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b2f8 	.word	0x0800b2f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	0800b2f8 	.word	0x0800b2f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000584:	f000 fe62 	bl	800124c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000588:	20ca      	movs	r0, #202	@ 0xca
 800058a:	f000 f95d 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800058e:	20c3      	movs	r0, #195	@ 0xc3
 8000590:	f000 f967 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000594:	2008      	movs	r0, #8
 8000596:	f000 f964 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800059a:	2050      	movs	r0, #80	@ 0x50
 800059c:	f000 f961 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80005a0:	20cf      	movs	r0, #207	@ 0xcf
 80005a2:	f000 f951 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f95b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80005ac:	20c1      	movs	r0, #193	@ 0xc1
 80005ae:	f000 f958 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80005b2:	2030      	movs	r0, #48	@ 0x30
 80005b4:	f000 f955 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80005b8:	20ed      	movs	r0, #237	@ 0xed
 80005ba:	f000 f945 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f000 f94f 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f94c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80005ca:	2012      	movs	r0, #18
 80005cc:	f000 f949 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80005d0:	2081      	movs	r0, #129	@ 0x81
 80005d2:	f000 f946 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80005d6:	20e8      	movs	r0, #232	@ 0xe8
 80005d8:	f000 f936 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80005dc:	2085      	movs	r0, #133	@ 0x85
 80005de:	f000 f940 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f93d 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80005e8:	2078      	movs	r0, #120	@ 0x78
 80005ea:	f000 f93a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80005ee:	20cb      	movs	r0, #203	@ 0xcb
 80005f0:	f000 f92a 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80005f4:	2039      	movs	r0, #57	@ 0x39
 80005f6:	f000 f934 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80005fa:	202c      	movs	r0, #44	@ 0x2c
 80005fc:	f000 f931 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 f92e 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000606:	2034      	movs	r0, #52	@ 0x34
 8000608:	f000 f92b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800060c:	2002      	movs	r0, #2
 800060e:	f000 f928 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000612:	20f7      	movs	r0, #247	@ 0xf7
 8000614:	f000 f918 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000618:	2020      	movs	r0, #32
 800061a:	f000 f922 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800061e:	20ea      	movs	r0, #234	@ 0xea
 8000620:	f000 f912 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f91c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f919 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000630:	20b1      	movs	r0, #177	@ 0xb1
 8000632:	f000 f909 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f913 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800063c:	201b      	movs	r0, #27
 800063e:	f000 f910 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000642:	20b6      	movs	r0, #182	@ 0xb6
 8000644:	f000 f900 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 f90a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800064e:	20a2      	movs	r0, #162	@ 0xa2
 8000650:	f000 f907 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000654:	20c0      	movs	r0, #192	@ 0xc0
 8000656:	f000 f8f7 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800065a:	2010      	movs	r0, #16
 800065c:	f000 f901 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000660:	20c1      	movs	r0, #193	@ 0xc1
 8000662:	f000 f8f1 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000666:	2010      	movs	r0, #16
 8000668:	f000 f8fb 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800066c:	20c5      	movs	r0, #197	@ 0xc5
 800066e:	f000 f8eb 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000672:	2045      	movs	r0, #69	@ 0x45
 8000674:	f000 f8f5 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000678:	2015      	movs	r0, #21
 800067a:	f000 f8f2 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800067e:	20c7      	movs	r0, #199	@ 0xc7
 8000680:	f000 f8e2 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000684:	2090      	movs	r0, #144	@ 0x90
 8000686:	f000 f8ec 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f000 f8dc 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000690:	20c8      	movs	r0, #200	@ 0xc8
 8000692:	f000 f8e6 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000696:	20f2      	movs	r0, #242	@ 0xf2
 8000698:	f000 f8d6 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 f8e0 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80006a2:	20b0      	movs	r0, #176	@ 0xb0
 80006a4:	f000 f8d0 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80006a8:	20c2      	movs	r0, #194	@ 0xc2
 80006aa:	f000 f8da 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80006ae:	20b6      	movs	r0, #182	@ 0xb6
 80006b0:	f000 f8ca 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80006b4:	200a      	movs	r0, #10
 80006b6:	f000 f8d4 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80006ba:	20a7      	movs	r0, #167	@ 0xa7
 80006bc:	f000 f8d1 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80006c0:	2027      	movs	r0, #39	@ 0x27
 80006c2:	f000 f8ce 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80006c6:	2004      	movs	r0, #4
 80006c8:	f000 f8cb 	bl	8000862 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80006cc:	202a      	movs	r0, #42	@ 0x2a
 80006ce:	f000 f8bb 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 f8c5 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f8c2 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f8bf 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80006e4:	20ef      	movs	r0, #239	@ 0xef
 80006e6:	f000 f8bc 	bl	8000862 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80006ea:	202b      	movs	r0, #43	@ 0x2b
 80006ec:	f000 f8ac 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 f8b6 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f8b3 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 f8b0 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000702:	203f      	movs	r0, #63	@ 0x3f
 8000704:	f000 f8ad 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000708:	20f6      	movs	r0, #246	@ 0xf6
 800070a:	f000 f89d 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800070e:	2001      	movs	r0, #1
 8000710:	f000 f8a7 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8a4 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800071a:	2006      	movs	r0, #6
 800071c:	f000 f8a1 	bl	8000862 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000720:	202c      	movs	r0, #44	@ 0x2c
 8000722:	f000 f891 	bl	8000848 <ili9341_WriteReg>
  LCD_Delay(200);
 8000726:	20c8      	movs	r0, #200	@ 0xc8
 8000728:	f000 fe7e 	bl	8001428 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f000 f88b 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 f895 	bl	8000862 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000738:	20e0      	movs	r0, #224	@ 0xe0
 800073a:	f000 f885 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800073e:	200f      	movs	r0, #15
 8000740:	f000 f88f 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000744:	2029      	movs	r0, #41	@ 0x29
 8000746:	f000 f88c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800074a:	2024      	movs	r0, #36	@ 0x24
 800074c:	f000 f889 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000750:	200c      	movs	r0, #12
 8000752:	f000 f886 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000756:	200e      	movs	r0, #14
 8000758:	f000 f883 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800075c:	2009      	movs	r0, #9
 800075e:	f000 f880 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000762:	204e      	movs	r0, #78	@ 0x4e
 8000764:	f000 f87d 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000768:	2078      	movs	r0, #120	@ 0x78
 800076a:	f000 f87a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800076e:	203c      	movs	r0, #60	@ 0x3c
 8000770:	f000 f877 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000774:	2009      	movs	r0, #9
 8000776:	f000 f874 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800077a:	2013      	movs	r0, #19
 800077c:	f000 f871 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000780:	2005      	movs	r0, #5
 8000782:	f000 f86e 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000786:	2017      	movs	r0, #23
 8000788:	f000 f86b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800078c:	2011      	movs	r0, #17
 800078e:	f000 f868 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f865 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000798:	20e1      	movs	r0, #225	@ 0xe1
 800079a:	f000 f855 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f85f 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80007a4:	2016      	movs	r0, #22
 80007a6:	f000 f85c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80007aa:	201b      	movs	r0, #27
 80007ac:	f000 f859 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80007b0:	2004      	movs	r0, #4
 80007b2:	f000 f856 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007b6:	2011      	movs	r0, #17
 80007b8:	f000 f853 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80007bc:	2007      	movs	r0, #7
 80007be:	f000 f850 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80007c2:	2031      	movs	r0, #49	@ 0x31
 80007c4:	f000 f84d 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80007c8:	2033      	movs	r0, #51	@ 0x33
 80007ca:	f000 f84a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80007ce:	2042      	movs	r0, #66	@ 0x42
 80007d0:	f000 f847 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80007d4:	2005      	movs	r0, #5
 80007d6:	f000 f844 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80007da:	200c      	movs	r0, #12
 80007dc:	f000 f841 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 f83e 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f000 f83b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80007ec:	202f      	movs	r0, #47	@ 0x2f
 80007ee:	f000 f838 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 f835 	bl	8000862 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80007f8:	2011      	movs	r0, #17
 80007fa:	f000 f825 	bl	8000848 <ili9341_WriteReg>
  LCD_Delay(200);
 80007fe:	20c8      	movs	r0, #200	@ 0xc8
 8000800:	f000 fe12 	bl	8001428 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000804:	2029      	movs	r0, #41	@ 0x29
 8000806:	f000 f81f 	bl	8000848 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800080a:	202c      	movs	r0, #44	@ 0x2c
 800080c:	f000 f81c 	bl	8000848 <ili9341_WriteReg>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000818:	f000 fd18 	bl	800124c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800081c:	2103      	movs	r1, #3
 800081e:	20d3      	movs	r0, #211	@ 0xd3
 8000820:	f000 f82c 	bl	800087c <ili9341_ReadData>
 8000824:	4603      	mov	r3, r0
 8000826:	b29b      	uxth	r3, r3
}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}

0800082c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000830:	2029      	movs	r0, #41	@ 0x29
 8000832:	f000 f809 	bl	8000848 <ili9341_WriteReg>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}

0800083a <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800083e:	2028      	movs	r0, #40	@ 0x28
 8000840:	f000 f802 	bl	8000848 <ili9341_WriteReg>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fd93 	bl	8001380 <LCD_IO_WriteReg>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fd64 	bl	800133c <LCD_IO_WriteData>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	80fb      	strh	r3, [r7, #6]
 8000888:	4613      	mov	r3, r2
 800088a:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800088c:	797a      	ldrb	r2, [r7, #5]
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fd96 	bl	80013c4 <LCD_IO_ReadData>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80008a6:	23f0      	movs	r3, #240	@ 0xf0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80008b6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fa59 	bl	8000d88 <stmpe811_GetInstance>
 80008d6:	4603      	mov	r3, r0
 80008d8:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2bff      	cmp	r3, #255	@ 0xff
 80008de:	d112      	bne.n	8000906 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 fa51 	bl	8000d88 <stmpe811_GetInstance>
 80008e6:	4603      	mov	r3, r0
 80008e8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d80a      	bhi.n	8000906 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80008f0:	7bbb      	ldrb	r3, [r7, #14]
 80008f2:	88fa      	ldrh	r2, [r7, #6]
 80008f4:	b2d1      	uxtb	r1, r2
 80008f6:	4a06      	ldr	r2, [pc, #24]	@ (8000910 <stmpe811_Init+0x4c>)
 80008f8:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80008fa:	f000 fda0 	bl	800143e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f807 	bl	8000914 <stmpe811_Reset>
    }
  }
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000108 	.word	0x20000108

08000914 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2202      	movs	r2, #2
 8000924:	2103      	movs	r1, #3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fd95 	bl	8001456 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800092c:	200a      	movs	r0, #10
 800092e:	f000 fdce 	bl	80014ce <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2200      	movs	r2, #0
 8000938:	2103      	movs	r1, #3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fd8b 	bl	8001456 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8000940:	2002      	movs	r0, #2
 8000942:	f000 fdc4 	bl	80014ce <IOE_Delay>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800094e:	b590      	push	{r4, r7, lr}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8000958:	f000 fd71 	bl	800143e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fd8a 	bl	800147c <IOE_Read>
 8000968:	4603      	mov	r3, r0
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fd81 	bl	800147c <IOE_Read>
 800097a:	4603      	mov	r3, r0
 800097c:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800097e:	4323      	orrs	r3, r4
 8000980:	b21b      	sxth	r3, r3
 8000982:	b29b      	uxth	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bd90      	pop	{r4, r7, pc}

0800098c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2109      	movs	r1, #9
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fd6b 	bl	800147c <IOE_Read>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	7bfa      	ldrb	r2, [r7, #15]
 80009b8:	2109      	movs	r1, #9
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fd4b 	bl	8001456 <IOE_Write>
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2109      	movs	r1, #9
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fd4d 	bl	800147c <IOE_Read>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	2109      	movs	r1, #9
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fd2d 	bl	8001456 <IOE_Write>
    
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	4613      	mov	r3, r2
 8000a12:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	210a      	movs	r1, #10
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fd2c 	bl	800147c <IOE_Read>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8000a28:	7bfa      	ldrb	r2, [r7, #15]
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	210a      	movs	r1, #10
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fd0c 	bl	8001456 <IOE_Write>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	460a      	mov	r2, r1
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	4613      	mov	r3, r2
 8000a54:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	210a      	movs	r1, #10
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fd0b 	bl	800147c <IOE_Read>
 8000a66:	4603      	mov	r3, r0
 8000a68:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8000a6a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	b25a      	sxtb	r2, r3
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4013      	ands	r3, r2
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	7bfa      	ldrb	r2, [r7, #15]
 8000a82:	210a      	movs	r1, #10
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fce6 	bl	8001456 <IOE_Write>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	210b      	movs	r1, #11
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fce7 	bl	800147c <IOE_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	797b      	ldrb	r3, [r7, #5]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	460a      	mov	r2, r1
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	4613      	mov	r3, r2
 8000ace:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	797a      	ldrb	r2, [r7, #5]
 8000ad6:	210b      	movs	r1, #11
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fcbc 	bl	8001456 <IOE_Write>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	6039      	str	r1, [r7, #0]
 8000af0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2117      	movs	r1, #23
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fcbd 	bl	800147c <IOE_Read>
 8000b02:	4603      	mov	r3, r0
 8000b04:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	b25a      	sxtb	r2, r3
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4013      	ands	r3, r2
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	2117      	movs	r1, #23
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fc98 	bl	8001456 <IOE_Write>
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fc9c 	bl	800147c <IOE_Read>
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	f023 0304 	bic.w	r3, r3, #4
 8000b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	7bfa      	ldrb	r2, [r7, #15]
 8000b56:	2104      	movs	r1, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fc7c 	bl	8001456 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	21f0      	movs	r1, #240	@ 0xf0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffbf 	bl	8000ae6 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	f023 0303 	bic.w	r3, r3, #3
 8000b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	2104      	movs	r1, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fc6c 	bl	8001456 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2249      	movs	r2, #73	@ 0x49
 8000b84:	2120      	movs	r1, #32
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fc65 	bl	8001456 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fc9e 	bl	80014ce <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2201      	movs	r2, #1
 8000b98:	2121      	movs	r1, #33	@ 0x21
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fc5b 	bl	8001456 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	229a      	movs	r2, #154	@ 0x9a
 8000ba6:	2141      	movs	r1, #65	@ 0x41
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fc54 	bl	8001456 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	214a      	movs	r1, #74	@ 0x4a
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fc4d 	bl	8001456 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	214b      	movs	r1, #75	@ 0x4b
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fc46 	bl	8001456 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2200      	movs	r2, #0
 8000bd0:	214b      	movs	r1, #75	@ 0x4b
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fc3f 	bl	8001456 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2156      	movs	r1, #86	@ 0x56
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fc38 	bl	8001456 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2201      	movs	r2, #1
 8000bec:	2158      	movs	r1, #88	@ 0x58
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fc31 	bl	8001456 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2140      	movs	r1, #64	@ 0x40
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fc2a 	bl	8001456 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	22ff      	movs	r2, #255	@ 0xff
 8000c08:	210b      	movs	r1, #11
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fc23 	bl	8001456 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 fc5c 	bl	80014ce <IOE_Delay>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fc22 	bl	800147c <IOE_Read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	2b80      	cmp	r3, #128	@ 0x80
 8000c40:	bf0c      	ite	eq
 8000c42:	2301      	moveq	r3, #1
 8000c44:	2300      	movne	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00b      	beq.n	8000c68 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	214c      	movs	r1, #76	@ 0x4c
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fc10 	bl	800147c <IOE_Read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d010      	beq.n	8000c84 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e00d      	b.n	8000c84 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	214b      	movs	r1, #75	@ 0x4b
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fbf0 	bl	8001456 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	214b      	movs	r1, #75	@ 0x4b
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fbe9 	bl	8001456 <IOE_Write>
  }
  
  return ret;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	b2d8      	uxtb	r0, r3
 8000ca0:	f107 0210 	add.w	r2, r7, #16
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	21d7      	movs	r1, #215	@ 0xd7
 8000ca8:	f000 fbfb 	bl	80014a2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8000cac:	7c3b      	ldrb	r3, [r7, #16]
 8000cae:	061a      	lsls	r2, r3, #24
 8000cb0:	7c7b      	ldrb	r3, [r7, #17]
 8000cb2:	041b      	lsls	r3, r3, #16
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	7cbb      	ldrb	r3, [r7, #18]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	7cfa      	ldrb	r2, [r7, #19]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	0d1b      	lsrs	r3, r3, #20
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	214b      	movs	r1, #75	@ 0x4b
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fbb6 	bl	8001456 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2200      	movs	r2, #0
 8000cf0:	214b      	movs	r1, #75	@ 0x4b
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fbaf 	bl	8001456 <IOE_Write>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8000d0a:	f000 fb9e 	bl	800144a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	211f      	movs	r1, #31
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fe76 	bl	8000a04 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe36 	bl	800098c <stmpe811_EnableGlobalIT>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe47 	bl	80009c8 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	211f      	movs	r1, #31
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fe81 	bl	8000a46 <stmpe811_DisableITSource>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	211f      	movs	r1, #31
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fe99 	bl	8000a92 <stmpe811_ReadGITStatus>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	211f      	movs	r1, #31
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fea1 	bl	8000ac0 <stmpe811_ClearGlobalIT>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e00b      	b.n	8000db4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <stmpe811_GetInstance+0x40>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	461a      	mov	r2, r3
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	e006      	b.n	8000dbc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d9f0      	bls.n	8000d9c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000dba:	23ff      	movs	r3, #255	@ 0xff
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20000108 	.word	0x20000108

08000dcc <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <BSP_LED_On+0x2c>)
 8000dda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <BSP_LED_On+0x30>)
 8000de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de6:	2201      	movs	r2, #1
 8000de8:	4619      	mov	r1, r3
 8000dea:	f005 fdeb 	bl	80069c4 <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000060 	.word	0x20000060
 8000dfc:	0800b334 	.word	0x0800b334

08000e00 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a33      	ldr	r2, [pc, #204]	@ (8000edc <I2Cx_MspInit+0xdc>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d15f      	bne.n	8000ed2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b32      	ldr	r3, [pc, #200]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a31      	ldr	r2, [pc, #196]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8000e4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	481f      	ldr	r0, [pc, #124]	@ (8000ee4 <I2Cx_MspInit+0xe4>)
 8000e68:	f005 faf4 	bl	8006454 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8000e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e70:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	481b      	ldr	r0, [pc, #108]	@ (8000ee8 <I2Cx_MspInit+0xe8>)
 8000e7a:	f005 faeb 	bl	8006454 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a16      	ldr	r2, [pc, #88]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ea4:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <I2Cx_MspInit+0xe0>)
 8000eac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000eb0:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	2048      	movs	r0, #72	@ 0x48
 8000eb8:	f004 f8cc 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000ebc:	2048      	movs	r0, #72	@ 0x48
 8000ebe:	f004 f8e5 	bl	800508c <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	2049      	movs	r0, #73	@ 0x49
 8000ec8:	f004 f8c4 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000ecc:	2049      	movs	r0, #73	@ 0x49
 8000ece:	f004 f8dd 	bl	800508c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	@ 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40005c00 	.word	0x40005c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020800 	.word	0x40020800

08000eec <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000ef0:	4814      	ldr	r0, [pc, #80]	@ (8000f44 <I2Cx_Init+0x58>)
 8000ef2:	f006 fa3b 	bl	800736c <HAL_I2C_GetState>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d121      	bne.n	8000f40 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <I2Cx_Init+0x58>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <I2Cx_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f04:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <I2Cx_Init+0x60>)
 8000f06:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f1a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000f34:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f36:	f7ff ff63 	bl	8000e00 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000f3a:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <I2Cx_Init+0x58>)
 8000f3c:	f005 fd76 	bl	8006a2c <HAL_I2C_Init>
  }
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000010c 	.word	0x2000010c
 8000f48:	40005c00 	.word	0x40005c00
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <I2Cx_ITConfig+0x58>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <I2Cx_ITConfig+0x58>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <I2Cx_ITConfig+0x58>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8000f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8000f80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f84:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	@ (8000fac <I2Cx_ITConfig+0x5c>)
 8000f8c:	f005 fa62 	bl	8006454 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8000f90:	2200      	movs	r2, #0
 8000f92:	210f      	movs	r1, #15
 8000f94:	2028      	movs	r0, #40	@ 0x28
 8000f96:	f004 f85d 	bl	8005054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8000f9a:	2028      	movs	r0, #40	@ 0x28
 8000f9c:	f004 f876 	bl	800508c <HAL_NVIC_EnableIRQ>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	71bb      	strb	r3, [r7, #6]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <I2Cx_WriteData+0x4c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	1d7b      	adds	r3, r7, #5
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	4808      	ldr	r0, [pc, #32]	@ (8001000 <I2Cx_WriteData+0x50>)
 8000fe0:	f005 fe98 	bl	8006d14 <HAL_I2C_Mem_Write>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8000fee:	f000 f863 	bl	80010b8 <I2Cx_Error>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000068 	.word	0x20000068
 8001000:	2000010c 	.word	0x2000010c

08001004 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af04      	add	r7, sp, #16
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	b299      	uxth	r1, r3
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <I2Cx_ReadData+0x50>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2301      	movs	r3, #1
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	f107 030e 	add.w	r3, r7, #14
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <I2Cx_ReadData+0x54>)
 8001038:	f005 ff66 	bl	8006f08 <HAL_I2C_Mem_Read>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001046:	f000 f837 	bl	80010b8 <I2Cx_Error>

  }
  return value;
 800104a:	7bbb      	ldrb	r3, [r7, #14]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000068 	.word	0x20000068
 8001058:	2000010c 	.word	0x2000010c

0800105c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	603a      	str	r2, [r7, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	460b      	mov	r3, r1
 800106c:	71bb      	strb	r3, [r7, #6]
 800106e:	4613      	mov	r3, r2
 8001070:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	b299      	uxth	r1, r3
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <I2Cx_ReadBuffer+0x54>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	88bb      	ldrh	r3, [r7, #4]
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <I2Cx_ReadBuffer+0x58>)
 8001090:	f005 ff3a 	bl	8006f08 <HAL_I2C_Mem_Read>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	e002      	b.n	80010a8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80010a2:	f000 f809 	bl	80010b8 <I2Cx_Error>

    return 1;
 80010a6:	2301      	movs	r3, #1
  }
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000068 	.word	0x20000068
 80010b4:	2000010c 	.word	0x2000010c

080010b8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <I2Cx_Error+0x14>)
 80010be:	f005 fdf9 	bl	8006cb4 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80010c2:	f7ff ff13 	bl	8000eec <I2Cx_Init>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000010c 	.word	0x2000010c

080010d0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010d4:	4819      	ldr	r0, [pc, #100]	@ (800113c <SPIx_Init+0x6c>)
 80010d6:	f008 fd27 	bl	8009b28 <HAL_SPI_GetState>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d12b      	bne.n	8001138 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <SPIx_Init+0x6c>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <SPIx_Init+0x70>)
 80010e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <SPIx_Init+0x6c>)
 80010e8:	2218      	movs	r2, #24
 80010ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <SPIx_Init+0x6c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <SPIx_Init+0x6c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <SPIx_Init+0x6c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <SPIx_Init+0x6c>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <SPIx_Init+0x6c>)
 8001106:	2207      	movs	r2, #7
 8001108:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <SPIx_Init+0x6c>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <SPIx_Init+0x6c>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <SPIx_Init+0x6c>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <SPIx_Init+0x6c>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SPIx_Init+0x6c>)
 8001126:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800112a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800112c:	4803      	ldr	r0, [pc, #12]	@ (800113c <SPIx_Init+0x6c>)
 800112e:	f000 f853 	bl	80011d8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001132:	4802      	ldr	r0, [pc, #8]	@ (800113c <SPIx_Init+0x6c>)
 8001134:	f008 f841 	bl	80091ba <HAL_SPI_Init>
  }
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000160 	.word	0x20000160
 8001140:	40015000 	.word	0x40015000

08001144 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <SPIx_Read+0x38>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	4808      	ldr	r0, [pc, #32]	@ (8001180 <SPIx_Read+0x3c>)
 8001160:	f008 fa20 	bl	80095a4 <HAL_SPI_Receive>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800116e:	f000 f827 	bl	80011c0 <SPIx_Error>
  }

  return readvalue;
 8001172:	68bb      	ldr	r3, [r7, #8]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000006c 	.word	0x2000006c
 8001180:	20000160 	.word	0x20000160

08001184 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <SPIx_Write+0x34>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1db9      	adds	r1, r7, #6
 8001198:	2201      	movs	r2, #1
 800119a:	4808      	ldr	r0, [pc, #32]	@ (80011bc <SPIx_Write+0x38>)
 800119c:	f008 f8be 	bl	800931c <HAL_SPI_Transmit>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80011aa:	f000 f809 	bl	80011c0 <SPIx_Error>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000006c 	.word	0x2000006c
 80011bc:	20000160 	.word	0x20000160

080011c0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <SPIx_Error+0x14>)
 80011c6:	f008 f881 	bl	80092cc <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80011ca:	f7ff ff81 	bl	80010d0 <SPIx_Init>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000160 	.word	0x20000160

080011d8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <SPIx_MspInit+0x6c>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e8:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <SPIx_MspInit+0x6c>)
 80011ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <SPIx_MspInit+0x6c>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <SPIx_MspInit+0x6c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	4a0f      	ldr	r2, [pc, #60]	@ (8001244 <SPIx_MspInit+0x6c>)
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	6313      	str	r3, [r2, #48]	@ 0x30
 800120c:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <SPIx_MspInit+0x6c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	f003 0320 	and.w	r3, r3, #32
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001218:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001226:	2301      	movs	r3, #1
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800122a:	2305      	movs	r3, #5
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <SPIx_MspInit+0x70>)
 8001236:	f005 f90d 	bl	8006454 <HAL_GPIO_Init>
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40021400 	.word	0x40021400

0800124c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001252:	4b36      	ldr	r3, [pc, #216]	@ (800132c <LCD_IO_Init+0xe0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d164      	bne.n	8001324 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <LCD_IO_Init+0xe0>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b32      	ldr	r3, [pc, #200]	@ (8001330 <LCD_IO_Init+0xe4>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	4a31      	ldr	r2, [pc, #196]	@ (8001330 <LCD_IO_Init+0xe4>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001270:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <LCD_IO_Init+0xe4>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800127c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001280:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	4827      	ldr	r0, [pc, #156]	@ (8001334 <LCD_IO_Init+0xe8>)
 8001296:	f005 f8dd 	bl	8006454 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <LCD_IO_Init+0xe4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a23      	ldr	r2, [pc, #140]	@ (8001330 <LCD_IO_Init+0xe4>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <LCD_IO_Init+0xe4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80012b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	4819      	ldr	r0, [pc, #100]	@ (8001334 <LCD_IO_Init+0xe8>)
 80012d0:	f005 f8c0 	bl	8006454 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <LCD_IO_Init+0xe4>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <LCD_IO_Init+0xe4>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <LCD_IO_Init+0xe4>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80012f0:	2304      	movs	r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	480c      	ldr	r0, [pc, #48]	@ (8001338 <LCD_IO_Init+0xec>)
 8001308:	f005 f8a4 	bl	8006454 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800130c:	2200      	movs	r2, #0
 800130e:	2104      	movs	r1, #4
 8001310:	4809      	ldr	r0, [pc, #36]	@ (8001338 <LCD_IO_Init+0xec>)
 8001312:	f005 fb57 	bl	80069c4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001316:	2201      	movs	r2, #1
 8001318:	2104      	movs	r1, #4
 800131a:	4807      	ldr	r0, [pc, #28]	@ (8001338 <LCD_IO_Init+0xec>)
 800131c:	f005 fb52 	bl	80069c4 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001320:	f7ff fed6 	bl	80010d0 <SPIx_Init>
  }
}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200001b8 	.word	0x200001b8
 8001330:	40023800 	.word	0x40023800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40020800 	.word	0x40020800

0800133c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800134c:	480a      	ldr	r0, [pc, #40]	@ (8001378 <LCD_IO_WriteData+0x3c>)
 800134e:	f005 fb39 	bl	80069c4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001352:	2200      	movs	r2, #0
 8001354:	2104      	movs	r1, #4
 8001356:	4809      	ldr	r0, [pc, #36]	@ (800137c <LCD_IO_WriteData+0x40>)
 8001358:	f005 fb34 	bl	80069c4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff10 	bl	8001184 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001364:	2201      	movs	r2, #1
 8001366:	2104      	movs	r1, #4
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <LCD_IO_WriteData+0x40>)
 800136a:	f005 fb2b 	bl	80069c4 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40020800 	.word	0x40020800

08001380 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001390:	480a      	ldr	r0, [pc, #40]	@ (80013bc <LCD_IO_WriteReg+0x3c>)
 8001392:	f005 fb17 	bl	80069c4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001396:	2200      	movs	r2, #0
 8001398:	2104      	movs	r1, #4
 800139a:	4809      	ldr	r0, [pc, #36]	@ (80013c0 <LCD_IO_WriteReg+0x40>)
 800139c:	f005 fb12 	bl	80069c4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff feed 	bl	8001184 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80013aa:	2201      	movs	r2, #1
 80013ac:	2104      	movs	r1, #4
 80013ae:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <LCD_IO_WriteReg+0x40>)
 80013b0:	f005 fb08 	bl	80069c4 <HAL_GPIO_WritePin>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40020800 	.word	0x40020800

080013c4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	80fb      	strh	r3, [r7, #6]
 80013d0:	4613      	mov	r3, r2
 80013d2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80013d8:	2200      	movs	r2, #0
 80013da:	2104      	movs	r1, #4
 80013dc:	4810      	ldr	r0, [pc, #64]	@ (8001420 <LCD_IO_ReadData+0x5c>)
 80013de:	f005 faf1 	bl	80069c4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013e8:	480e      	ldr	r0, [pc, #56]	@ (8001424 <LCD_IO_ReadData+0x60>)
 80013ea:	f005 faeb 	bl	80069c4 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fec7 	bl	8001184 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fea3 	bl	8001144 <SPIx_Read>
 80013fe:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <LCD_IO_ReadData+0x60>)
 8001408:	f005 fadc 	bl	80069c4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800140c:	2201      	movs	r2, #1
 800140e:	2104      	movs	r1, #4
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <LCD_IO_ReadData+0x5c>)
 8001412:	f005 fad7 	bl	80069c4 <HAL_GPIO_WritePin>

  return readvalue;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00

08001428 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f003 f91b 	bl	800466c <HAL_Delay>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8001442:	f7ff fd53 	bl	8000eec <I2Cx_Init>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800144e:	f7ff fd7f 	bl	8000f50 <I2Cx_ITConfig>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}

08001456 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	460b      	mov	r3, r1
 8001462:	71bb      	strb	r3, [r7, #6]
 8001464:	4613      	mov	r3, r2
 8001466:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001468:	797a      	ldrb	r2, [r7, #5]
 800146a:	79b9      	ldrb	r1, [r7, #6]
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fd9e 	bl	8000fb0 <I2Cx_WriteData>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800148c:	79ba      	ldrb	r2, [r7, #6]
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fdb6 	bl	8001004 <I2Cx_ReadData>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	603a      	str	r2, [r7, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	460b      	mov	r3, r1
 80014b2:	71bb      	strb	r3, [r7, #6]
 80014b4:	4613      	mov	r3, r2
 80014b6:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	79b9      	ldrb	r1, [r7, #6]
 80014bc:	79f8      	ldrb	r0, [r7, #7]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	f7ff fdcc 	bl	800105c <I2Cx_ReadBuffer>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f003 f8c8 	bl	800466c <HAL_Delay>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 80014ea:	4a2e      	ldr	r2, [pc, #184]	@ (80015a4 <BSP_LCD_Init+0xc0>)
 80014ec:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 80014f0:	2209      	movs	r2, #9
 80014f2:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80014fa:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 80014fc:	221d      	movs	r2, #29
 80014fe:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001500:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001502:	2203      	movs	r2, #3
 8001504:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001508:	f240 120d 	movw	r2, #269	@ 0x10d
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001510:	f240 1243 	movw	r2, #323	@ 0x143
 8001514:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001518:	f240 1217 	movw	r2, #279	@ 0x117
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001520:	f240 1247 	movw	r2, #327	@ 0x147
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001526:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <BSP_LCD_Init+0xc4>)
 8001540:	2208      	movs	r2, #8
 8001542:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001544:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <BSP_LCD_Init+0xc4>)
 8001546:	22c0      	movs	r2, #192	@ 0xc0
 8001548:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <BSP_LCD_Init+0xc4>)
 800154c:	2204      	movs	r2, #4
 800154e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <BSP_LCD_Init+0xc4>)
 8001552:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001558:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <BSP_LCD_Init+0xc4>)
 800155a:	f007 fbdd 	bl	8008d18 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001564:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001576:	f000 fb57 	bl	8001c28 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 800157a:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <BSP_LCD_Init+0xbc>)
 800157c:	f006 fb34 	bl	8007be8 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <BSP_LCD_Init+0xc8>)
 8001582:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <BSP_LCD_Init+0xcc>)
 8001584:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <BSP_LCD_Init+0xc8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800158e:	f000 fd93 	bl	80020b8 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001592:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <BSP_LCD_Init+0xd0>)
 8001594:	f000 f8ce 	bl	8001734 <BSP_LCD_SetFont>

  return LCD_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001bc 	.word	0x200001bc
 80015a4:	40016800 	.word	0x40016800
 80015a8:	200002a4 	.word	0x200002a4
 80015ac:	200002f0 	.word	0x200002f0
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000070 	.word	0x20000070

080015b8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <BSP_LCD_GetXSize+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	4798      	blx	r3
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002f0 	.word	0x200002f0

080015d0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <BSP_LCD_GetYSize+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015da:	4798      	blx	r3
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200002f0 	.word	0x200002f0

080015e8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b090      	sub	sp, #64	@ 0x40
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80015f8:	f7ff ffde 	bl	80015b8 <BSP_LCD_GetXSize>
 80015fc:	4603      	mov	r3, r0
 80015fe:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001604:	f7ff ffe4 	bl	80015d0 <BSP_LCD_GetYSize>
 8001608:	4603      	mov	r3, r0
 800160a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001614:	23ff      	movs	r3, #255	@ 0xff
 8001616:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800162e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001634:	2307      	movs	r3, #7
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001638:	f7ff ffbe 	bl	80015b8 <BSP_LCD_GetXSize>
 800163c:	4603      	mov	r3, r0
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001640:	f7ff ffc6 	bl	80015d0 <BSP_LCD_GetYSize>
 8001644:	4603      	mov	r3, r0
 8001646:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001648:	88fa      	ldrh	r2, [r7, #6]
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	4814      	ldr	r0, [pc, #80]	@ (80016a4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001652:	f006 fc5b 	bl	8007f0c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001656:	88fa      	ldrh	r2, [r7, #6]
 8001658:	4913      	ldr	r1, [pc, #76]	@ (80016a8 <BSP_LCD_LayerDefaultInit+0xc0>)
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3304      	adds	r3, #4
 8001666:	f04f 32ff 	mov.w	r2, #4294967295
 800166a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800166c:	88fa      	ldrh	r2, [r7, #6]
 800166e:	490e      	ldr	r1, [pc, #56]	@ (80016a8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3308      	adds	r3, #8
 800167c:	4a0b      	ldr	r2, [pc, #44]	@ (80016ac <BSP_LCD_LayerDefaultInit+0xc4>)
 800167e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001680:	88fa      	ldrh	r2, [r7, #6]
 8001682:	4909      	ldr	r1, [pc, #36]	@ (80016a8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001692:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001696:	f006 fc77 	bl	8007f88 <HAL_LTDC_EnableDither>
}
 800169a:	bf00      	nop
 800169c:	3740      	adds	r7, #64	@ 0x40
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001bc 	.word	0x200001bc
 80016a8:	200002d8 	.word	0x200002d8
 80016ac:	20000070 	.word	0x20000070

080016b0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <BSP_LCD_SelectLayer+0x1c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200002d4 	.word	0x200002d4

080016d0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <BSP_LCD_SetTextColor+0x28>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4907      	ldr	r1, [pc, #28]	@ (80016fc <BSP_LCD_SetTextColor+0x2c>)
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	200002d4 	.word	0x200002d4
 80016fc:	200002d8 	.word	0x200002d8

08001700 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <BSP_LCD_SetBackColor+0x2c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4908      	ldr	r1, [pc, #32]	@ (8001730 <BSP_LCD_SetBackColor+0x30>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3304      	adds	r3, #4
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200002d4 	.word	0x200002d4
 8001730:	200002d8 	.word	0x200002d8

08001734 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <BSP_LCD_SetFont+0x2c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4908      	ldr	r1, [pc, #32]	@ (8001764 <BSP_LCD_SetFont+0x30>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3308      	adds	r3, #8
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200002d4 	.word	0x200002d4
 8001764:	200002d8 	.word	0x200002d8

08001768 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <BSP_LCD_Clear+0x48>)
 8001772:	681c      	ldr	r4, [r3, #0]
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <BSP_LCD_Clear+0x48>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <BSP_LCD_Clear+0x4c>)
 800177a:	2134      	movs	r1, #52	@ 0x34
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	335c      	adds	r3, #92	@ 0x5c
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461e      	mov	r6, r3
 8001788:	f7ff ff16 	bl	80015b8 <BSP_LCD_GetXSize>
 800178c:	4605      	mov	r5, r0
 800178e:	f7ff ff1f 	bl	80015d0 <BSP_LCD_GetYSize>
 8001792:	4602      	mov	r2, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	2300      	movs	r3, #0
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	462a      	mov	r2, r5
 80017a0:	4631      	mov	r1, r6
 80017a2:	4620      	mov	r0, r4
 80017a4:	f000 fc50 	bl	8002048 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b0:	200002d4 	.word	0x200002d4
 80017b4:	200001bc 	.word	0x200001bc

080017b8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, uint8_t Orientation)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4604      	mov	r4, r0
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4623      	mov	r3, r4
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	4603      	mov	r3, r0
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	70fb      	strb	r3, [r7, #3]
 80017d2:	4613      	mov	r3, r2
 80017d4:	70bb      	strb	r3, [r7, #2]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <BSP_LCD_DisplayChar+0x8c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	491b      	ldr	r1, [pc, #108]	@ (8001848 <BSP_LCD_DisplayChar+0x90>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3308      	adds	r3, #8
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <BSP_LCD_DisplayChar+0x8c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4c14      	ldr	r4, [pc, #80]	@ (8001848 <BSP_LCD_DisplayChar+0x90>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4423      	add	r3, r4
 8001802:	3308      	adds	r3, #8
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001808:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <BSP_LCD_DisplayChar+0x8c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4c0d      	ldr	r4, [pc, #52]	@ (8001848 <BSP_LCD_DisplayChar+0x90>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4423      	add	r3, r4
 800181c:	3308      	adds	r3, #8
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	889b      	ldrh	r3, [r3, #4]
 8001822:	3307      	adds	r3, #7
 8001824:	2b00      	cmp	r3, #0
 8001826:	da00      	bge.n	800182a <BSP_LCD_DisplayChar+0x72>
 8001828:	3307      	adds	r3, #7
 800182a:	10db      	asrs	r3, r3, #3
 800182c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001830:	18ca      	adds	r2, r1, r3
 8001832:	78bb      	ldrb	r3, [r7, #2]
 8001834:	88b9      	ldrh	r1, [r7, #4]
 8001836:	88f8      	ldrh	r0, [r7, #6]
 8001838:	f000 faf2 	bl	8001e20 <DrawChar>
														   Orientation);
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	200002d4 	.word	0x200002d4
 8001848:	200002d8 	.word	0x200002d8

0800184c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode, uint8_t Orientation)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60ba      	str	r2, [r7, #8]
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	81fb      	strh	r3, [r7, #14]
 800185a:	460b      	mov	r3, r1
 800185c:	81bb      	strh	r3, [r7, #12]
 800185e:	4613      	mov	r3, r2
 8001860:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001862:	2301      	movs	r3, #1
 8001864:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001866:	2300      	movs	r3, #0
 8001868:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint32_t size = 0, xsize = 0, ysize = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = pText;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	61fb      	str	r3, [r7, #28]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 800187a:	e002      	b.n	8001882 <BSP_LCD_DisplayStringAt+0x36>
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	3301      	adds	r3, #1
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	61fa      	str	r2, [r7, #28]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f6      	bne.n	800187c <BSP_LCD_DisplayStringAt+0x30>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 800188e:	f7ff fe93 	bl	80015b8 <BSP_LCD_GetXSize>
 8001892:	4601      	mov	r1, r0
 8001894:	4b9a      	ldr	r3, [pc, #616]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	489a      	ldr	r0, [pc, #616]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4403      	add	r3, r0
 80018a4:	3308      	adds	r3, #8
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	889b      	ldrh	r3, [r3, #4]
 80018aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ae:	61bb      	str	r3, [r7, #24]
  ysize = (BSP_LCD_GetYSize() / DrawProp[ActiveLayer].pFont->Width);
 80018b0:	f7ff fe8e 	bl	80015d0 <BSP_LCD_GetYSize>
 80018b4:	4601      	mov	r1, r0
 80018b6:	4b92      	ldr	r3, [pc, #584]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4892      	ldr	r0, [pc, #584]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4403      	add	r3, r0
 80018c6:	3308      	adds	r3, #8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	889b      	ldrh	r3, [r3, #4]
 80018cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d0:	617b      	str	r3, [r7, #20]



  if(Orientation){
 80018d2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8087 	beq.w	80019ea <BSP_LCD_DisplayStringAt+0x19e>
	  switch (mode)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d01c      	beq.n	800191c <BSP_LCD_DisplayStringAt+0xd0>
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	dc33      	bgt.n	800194e <BSP_LCD_DisplayStringAt+0x102>
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d002      	beq.n	80018f0 <BSP_LCD_DisplayStringAt+0xa4>
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d019      	beq.n	8001922 <BSP_LCD_DisplayStringAt+0xd6>
 80018ee:	e02e      	b.n	800194e <BSP_LCD_DisplayStringAt+0x102>
	    {
	      case CENTER_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	1ad1      	subs	r1, r2, r3
 80018f6:	4b82      	ldr	r3, [pc, #520]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4882      	ldr	r0, [pc, #520]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4403      	add	r3, r0
 8001906:	3308      	adds	r3, #8
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	889b      	ldrh	r3, [r3, #4]
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	4413      	add	r3, r2
 8001918:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800191a:	e01b      	b.n	8001954 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case LEFT_MODE:
	      {
	        refcolumn = X;
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8001920:	e018      	b.n	8001954 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case RIGHT_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b299      	uxth	r1, r3
 800192a:	4b75      	ldr	r3, [pc, #468]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4875      	ldr	r0, [pc, #468]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4403      	add	r3, r0
 800193a:	3308      	adds	r3, #8
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	889b      	ldrh	r3, [r3, #4]
 8001940:	fb11 f303 	smulbb	r3, r1, r3
 8001944:	b29a      	uxth	r2, r3
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	4413      	add	r3, r2
 800194a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800194c:	e002      	b.n	8001954 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      default:
	      {
	        refcolumn = X;
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8001952:	bf00      	nop
	    }
	  /*
	  ///* Send the string character by character on LCD

	  */
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001954:	e01b      	b.n	800198e <BSP_LCD_DisplayStringAt+0x142>
	                          DrawProp[ActiveLayer].pFont->Width))
	  {
	    ///* Display one character on LCD
	    BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800195e:	89b9      	ldrh	r1, [r7, #12]
 8001960:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001962:	f7ff ff29 	bl	80017b8 <BSP_LCD_DisplayChar>
	    ///* Decrement the column position by 16
	    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001966:	4b66      	ldr	r3, [pc, #408]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4966      	ldr	r1, [pc, #408]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3308      	adds	r3, #8
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	889a      	ldrh	r2, [r3, #4]
 800197c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800197e:	4413      	add	r3, r2
 8001980:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    ///* Point on the next character
	    pText++;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3301      	adds	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
	    i++;
 8001988:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800198a:	3301      	adds	r3, #1
 800198c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2dc      	uxtb	r4, r3
 800199c:	f7ff fe0c 	bl	80015b8 <BSP_LCD_GetXSize>
 80019a0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80019a2:	4b57      	ldr	r3, [pc, #348]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4d57      	ldr	r5, [pc, #348]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	442b      	add	r3, r5
 80019b2:	3308      	adds	r3, #8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	889b      	ldrh	r3, [r3, #4]
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	1ac3      	subs	r3, r0, r3
 80019be:	b299      	uxth	r1, r3
	                          DrawProp[ActiveLayer].pFont->Width))
 80019c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	484f      	ldr	r0, [pc, #316]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4403      	add	r3, r0
 80019d0:	3308      	adds	r3, #8
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80019d6:	4299      	cmp	r1, r3
 80019d8:	bf2c      	ite	cs
 80019da:	2301      	movcs	r3, #1
 80019dc:	2300      	movcc	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4023      	ands	r3, r4
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1b6      	bne.n	8001956 <BSP_LCD_DisplayStringAt+0x10a>
  }




}
 80019e8:	e085      	b.n	8001af6 <BSP_LCD_DisplayStringAt+0x2aa>
	  switch (mode)
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d01c      	beq.n	8001a2a <BSP_LCD_DisplayStringAt+0x1de>
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	dc33      	bgt.n	8001a5c <BSP_LCD_DisplayStringAt+0x210>
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d002      	beq.n	80019fe <BSP_LCD_DisplayStringAt+0x1b2>
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d019      	beq.n	8001a30 <BSP_LCD_DisplayStringAt+0x1e4>
 80019fc:	e02e      	b.n	8001a5c <BSP_LCD_DisplayStringAt+0x210>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	1ad1      	subs	r1, r2, r3
 8001a04:	4b3e      	ldr	r3, [pc, #248]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	483e      	ldr	r0, [pc, #248]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4403      	add	r3, r0
 8001a14:	3308      	adds	r3, #8
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	889b      	ldrh	r3, [r3, #4]
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	4413      	add	r3, r2
 8001a26:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8001a28:	e01b      	b.n	8001a62 <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8001a2e:	e018      	b.n	8001a62 <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width);
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	b299      	uxth	r1, r3
 8001a38:	4b31      	ldr	r3, [pc, #196]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4831      	ldr	r0, [pc, #196]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4403      	add	r3, r0
 8001a48:	3308      	adds	r3, #8
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	889b      	ldrh	r3, [r3, #4]
 8001a4e:	fb11 f303 	smulbb	r3, r1, r3
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	4413      	add	r3, r2
 8001a58:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8001a5a:	e002      	b.n	8001a62 <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8001a60:	bf00      	nop
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001a62:	e01b      	b.n	8001a9c <BSP_LCD_DisplayStringAt+0x250>
	      BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001a6c:	89b9      	ldrh	r1, [r7, #12]
 8001a6e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001a70:	f7ff fea2 	bl	80017b8 <BSP_LCD_DisplayChar>
	      refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001a74:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4922      	ldr	r1, [pc, #136]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	3308      	adds	r3, #8
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	889a      	ldrh	r2, [r3, #4]
 8001a8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a8c:	4413      	add	r3, r2
 8001a8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	      pText++;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
	      i++;
 8001a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a98:	3301      	adds	r3, #1
 8001a9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2dc      	uxtb	r4, r3
 8001aaa:	f7ff fd91 	bl	80015d0 <BSP_LCD_GetYSize>
 8001aae:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4d13      	ldr	r5, [pc, #76]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	442b      	add	r3, r5
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	889b      	ldrh	r3, [r3, #4]
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	1ac3      	subs	r3, r0, r3
 8001acc:	b299      	uxth	r1, r3
	                            DrawProp[ActiveLayer].pFont->Width))
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <BSP_LCD_DisplayStringAt+0x2b4>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <BSP_LCD_DisplayStringAt+0x2b8>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4403      	add	r3, r0
 8001ade:	3308      	adds	r3, #8
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001ae4:	4299      	cmp	r1, r3
 8001ae6:	bf2c      	ite	cs
 8001ae8:	2301      	movcs	r3, #1
 8001aea:	2300      	movcc	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4023      	ands	r3, r4
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1b6      	bne.n	8001a64 <BSP_LCD_DisplayStringAt+0x218>
}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	@ 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200002d4 	.word	0x200002d4
 8001b04:	200002d8 	.word	0x200002d8

08001b08 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
 8001b12:	460b      	mov	r3, r1
 8001b14:	80bb      	strh	r3, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <BSP_LCD_DrawHLine+0x70>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <BSP_LCD_DrawHLine+0x74>)
 8001b24:	2134      	movs	r1, #52	@ 0x34
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	335c      	adds	r3, #92	@ 0x5c
 8001b2e:	681c      	ldr	r4, [r3, #0]
 8001b30:	f7ff fd42 	bl	80015b8 <BSP_LCD_GetXSize>
 8001b34:	4602      	mov	r2, r0
 8001b36:	88bb      	ldrh	r3, [r7, #4]
 8001b38:	fb03 f202 	mul.w	r2, r3, r2
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4423      	add	r3, r4
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <BSP_LCD_DrawHLine+0x70>)
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	68f9      	ldr	r1, [r7, #12]
 8001b4c:	887c      	ldrh	r4, [r7, #2]
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <BSP_LCD_DrawHLine+0x70>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4d0b      	ldr	r5, [pc, #44]	@ (8001b80 <BSP_LCD_DrawHLine+0x78>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	442b      	add	r3, r5
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2301      	movs	r3, #1
 8001b68:	4622      	mov	r2, r4
 8001b6a:	f000 fa6d 	bl	8002048 <FillBuffer>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bdb0      	pop	{r4, r5, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200002d4 	.word	0x200002d4
 8001b7c:	200001bc 	.word	0x200001bc
 8001b80:	200002d8 	.word	0x200002d8

08001b84 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	80bb      	strh	r3, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <BSP_LCD_DrawVLine+0x78>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a18      	ldr	r2, [pc, #96]	@ (8001c00 <BSP_LCD_DrawVLine+0x7c>)
 8001ba0:	2134      	movs	r1, #52	@ 0x34
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	335c      	adds	r3, #92	@ 0x5c
 8001baa:	681c      	ldr	r4, [r3, #0]
 8001bac:	f7ff fd04 	bl	80015b8 <BSP_LCD_GetXSize>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	88bb      	ldrh	r3, [r7, #4]
 8001bb4:	fb03 f202 	mul.w	r2, r3, r2
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4423      	add	r3, r4
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <BSP_LCD_DrawVLine+0x78>)
 8001bc4:	681c      	ldr	r4, [r3, #0]
 8001bc6:	68fd      	ldr	r5, [r7, #12]
 8001bc8:	887e      	ldrh	r6, [r7, #2]
 8001bca:	f7ff fcf5 	bl	80015b8 <BSP_LCD_GetXSize>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	1e59      	subs	r1, r3, #1
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <BSP_LCD_DrawVLine+0x78>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	480b      	ldr	r0, [pc, #44]	@ (8001c04 <BSP_LCD_DrawVLine+0x80>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4403      	add	r3, r0
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	9100      	str	r1, [sp, #0]
 8001be8:	4633      	mov	r3, r6
 8001bea:	2201      	movs	r2, #1
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f000 fa2a 	bl	8002048 <FillBuffer>
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfc:	200002d4 	.word	0x200002d4
 8001c00:	200001bc 	.word	0x200001bc
 8001c04:	200002d8 	.word	0x200002d8

08001c08 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <BSP_LCD_DisplayOn+0x1c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001c16:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <BSP_LCD_DisplayOn+0x1c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4798      	blx	r3
  }
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002f0 	.word	0x200002f0

08001c28 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	@ 0x38
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
 8001c32:	4b61      	ldr	r3, [pc, #388]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a60      	ldr	r2, [pc, #384]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a59      	ldr	r2, [pc, #356]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b57      	ldr	r3, [pc, #348]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b50      	ldr	r3, [pc, #320]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	4b4c      	ldr	r3, [pc, #304]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a4b      	ldr	r2, [pc, #300]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b49      	ldr	r3, [pc, #292]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b45      	ldr	r3, [pc, #276]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a44      	ldr	r2, [pc, #272]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b42      	ldr	r3, [pc, #264]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a36      	ldr	r2, [pc, #216]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001ce0:	f043 0320 	orr.w	r3, r3, #32
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <BSP_LCD_MspInit+0x190>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001d0e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8001d20:	230e      	movs	r3, #14
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4824      	ldr	r0, [pc, #144]	@ (8001dbc <BSP_LCD_MspInit+0x194>)
 8001d2c:	f004 fb92 	bl	8006454 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001d30:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4820      	ldr	r0, [pc, #128]	@ (8001dc0 <BSP_LCD_MspInit+0x198>)
 8001d3e:	f004 fb89 	bl	8006454 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001d42:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	481d      	ldr	r0, [pc, #116]	@ (8001dc4 <BSP_LCD_MspInit+0x19c>)
 8001d50:	f004 fb80 	bl	8006454 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001d54:	2348      	movs	r3, #72	@ 0x48
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481a      	ldr	r0, [pc, #104]	@ (8001dc8 <BSP_LCD_MspInit+0x1a0>)
 8001d60:	f004 fb78 	bl	8006454 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4816      	ldr	r0, [pc, #88]	@ (8001dcc <BSP_LCD_MspInit+0x1a4>)
 8001d72:	f004 fb6f 	bl	8006454 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001d76:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <BSP_LCD_MspInit+0x1a8>)
 8001d84:	f004 fb66 	bl	8006454 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8001d8c:	2309      	movs	r3, #9
 8001d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d94:	4619      	mov	r1, r3
 8001d96:	480a      	ldr	r0, [pc, #40]	@ (8001dc0 <BSP_LCD_MspInit+0x198>)
 8001d98:	f004 fb5c 	bl	8006454 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001d9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <BSP_LCD_MspInit+0x1a8>)
 8001daa:	f004 fb53 	bl	8006454 <HAL_GPIO_Init>
}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	@ 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021400 	.word	0x40021400
 8001dd0:	40021800 	.word	0x40021800

08001dd4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	603a      	str	r2, [r7, #0]
 8001dde:	80fb      	strh	r3, [r7, #6]
 8001de0:	460b      	mov	r3, r1
 8001de2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <BSP_LCD_DrawPixel+0x44>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <BSP_LCD_DrawPixel+0x48>)
 8001dea:	2134      	movs	r1, #52	@ 0x34
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	335c      	adds	r3, #92	@ 0x5c
 8001df4:	681c      	ldr	r4, [r3, #0]
 8001df6:	88bd      	ldrh	r5, [r7, #4]
 8001df8:	f7ff fbde 	bl	80015b8 <BSP_LCD_GetXSize>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	fb03 f205 	mul.w	r2, r3, r5
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4423      	add	r3, r4
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bdb0      	pop	{r4, r5, r7, pc}
 8001e18:	200002d4 	.word	0x200002d4
 8001e1c:	200001bc 	.word	0x200001bc

08001e20 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, uint8_t Orientation)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b08b      	sub	sp, #44	@ 0x2c
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60ba      	str	r2, [r7, #8]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	81fb      	strh	r3, [r7, #14]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	81bb      	strh	r3, [r7, #12]
 8001e32:	4613      	mov	r3, r2
 8001e34:	71fb      	strb	r3, [r7, #7]
  uint32_t i = 0, j = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset, offsetheight;
  uint8_t *pchar;
  uint32_t line = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001e42:	4b7f      	ldr	r3, [pc, #508]	@ (8002040 <DrawChar+0x220>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	497f      	ldr	r1, [pc, #508]	@ (8002044 <DrawChar+0x224>)
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3308      	adds	r3, #8
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	88db      	ldrh	r3, [r3, #6]
 8001e58:	837b      	strh	r3, [r7, #26]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001e5a:	4b79      	ldr	r3, [pc, #484]	@ (8002040 <DrawChar+0x220>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4979      	ldr	r1, [pc, #484]	@ (8002044 <DrawChar+0x224>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	889b      	ldrh	r3, [r3, #4]
 8001e70:	833b      	strh	r3, [r7, #24]

  offset = 8 * ((width + 7) / 8) -  width ;
 8001e72:	8b3b      	ldrh	r3, [r7, #24]
 8001e74:	3307      	adds	r3, #7
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da00      	bge.n	8001e7c <DrawChar+0x5c>
 8001e7a:	3307      	adds	r3, #7
 8001e7c:	10db      	asrs	r3, r3, #3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	8b3b      	ldrh	r3, [r7, #24]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	75fb      	strb	r3, [r7, #23]
  offsetheight = 8 * ((height + 7) / 8) -  height;
 8001e8c:	8b7b      	ldrh	r3, [r7, #26]
 8001e8e:	3307      	adds	r3, #7
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da00      	bge.n	8001e96 <DrawChar+0x76>
 8001e94:	3307      	adds	r3, #7
 8001e96:	10db      	asrs	r3, r3, #3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	8b7b      	ldrh	r3, [r7, #26]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	75bb      	strb	r3, [r7, #22]
  for (i = 0; i < height; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eaa:	e0be      	b.n	800202a <DrawChar+0x20a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8001eac:	8b3b      	ldrh	r3, [r7, #24]
 8001eae:	3307      	adds	r3, #7
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da00      	bge.n	8001eb6 <DrawChar+0x96>
 8001eb4:	3307      	adds	r3, #7
 8001eb6:	10db      	asrs	r3, r3, #3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]

    switch (((width + 7) / 8))
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	3307      	adds	r3, #7
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da00      	bge.n	8001ed0 <DrawChar+0xb0>
 8001ece:	3307      	adds	r3, #7
 8001ed0:	10db      	asrs	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d002      	beq.n	8001edc <DrawChar+0xbc>
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d004      	beq.n	8001ee4 <DrawChar+0xc4>
 8001eda:	e00c      	b.n	8001ef6 <DrawChar+0xd6>
    {
      case 1:
        line =  pchar[0];
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	61fb      	str	r3, [r7, #28]
        break;
 8001ee2:	e016      	b.n	8001f12 <DrawChar+0xf2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	3201      	adds	r2, #1
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61fb      	str	r3, [r7, #28]
        break;
 8001ef4:	e00d      	b.n	8001f12 <DrawChar+0xf2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	3301      	adds	r3, #1
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	4313      	orrs	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	3202      	adds	r2, #2
 8001f0a:	7812      	ldrb	r2, [r2, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
        break;
 8001f10:	bf00      	nop
    }
    if(Orientation){
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03e      	beq.n	8001f96 <DrawChar+0x176>
        for (j = 0; j < width; j++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
 8001f1c:	e036      	b.n	8001f8c <DrawChar+0x16c>
        {
          if (line & (1 << (width - j + offset - 1)))
 8001f1e:	8b3a      	ldrh	r2, [r7, #24]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	4413      	add	r3, r2
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <DrawChar+0x140>
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	4413      	add	r3, r2
 8001f42:	b298      	uxth	r0, r3
 8001f44:	4b3e      	ldr	r3, [pc, #248]	@ (8002040 <DrawChar+0x220>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	493e      	ldr	r1, [pc, #248]	@ (8002044 <DrawChar+0x224>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	89bb      	ldrh	r3, [r7, #12]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7ff ff3b 	bl	8001dd4 <BSP_LCD_DrawPixel>
 8001f5e:	e012      	b.n	8001f86 <DrawChar+0x166>
          }
          else
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	4413      	add	r3, r2
 8001f68:	b298      	uxth	r0, r3
 8001f6a:	4b35      	ldr	r3, [pc, #212]	@ (8002040 <DrawChar+0x220>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4935      	ldr	r1, [pc, #212]	@ (8002044 <DrawChar+0x224>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	89bb      	ldrh	r3, [r7, #12]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7ff ff27 	bl	8001dd4 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	8b3b      	ldrh	r3, [r7, #24]
 8001f8e:	6a3a      	ldr	r2, [r7, #32]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3c4      	bcc.n	8001f1e <DrawChar+0xfe>
 8001f94:	e043      	b.n	800201e <DrawChar+0x1fe>
          }
        }
    }

    else {
        for (j = 0; j < width; j++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	e03c      	b.n	8002016 <DrawChar+0x1f6>
            {
              if (line & (1 << (width - j + offset - 1)))
 8001f9c:	8b3a      	ldrh	r2, [r7, #24]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	1ad2      	subs	r2, r2, r3
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <DrawChar+0x1c4>
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].TextColor);
 8001fb8:	89bb      	ldrh	r3, [r7, #12]
 8001fba:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 8001fbe:	b298      	uxth	r0, r3
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	89fb      	ldrh	r3, [r7, #14]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b299      	uxth	r1, r3
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <DrawChar+0x220>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4c1d      	ldr	r4, [pc, #116]	@ (8002044 <DrawChar+0x224>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4423      	add	r3, r4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f7ff fef9 	bl	8001dd4 <BSP_LCD_DrawPixel>
 8001fe2:	e015      	b.n	8002010 <DrawChar+0x1f0>
              }
              else
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].BackColor);
 8001fe4:	89bb      	ldrh	r3, [r7, #12]
 8001fe6:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 8001fea:	b298      	uxth	r0, r3
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <DrawChar+0x220>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4c12      	ldr	r4, [pc, #72]	@ (8002044 <DrawChar+0x224>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4423      	add	r3, r4
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	f7ff fee2 	bl	8001dd4 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	3301      	adds	r3, #1
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	8b3b      	ldrh	r3, [r7, #24]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	429a      	cmp	r2, r3
 800201c:	d3be      	bcc.n	8001f9c <DrawChar+0x17c>
              }
            }
    }

    Ypos++;
 800201e:	89bb      	ldrh	r3, [r7, #12]
 8002020:	3301      	adds	r3, #1
 8002022:	81bb      	strh	r3, [r7, #12]
  for (i = 0; i < height; i++)
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
 800202a:	8b7b      	ldrh	r3, [r7, #26]
 800202c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202e:	429a      	cmp	r2, r3
 8002030:	f4ff af3c 	bcc.w	8001eac <DrawChar+0x8c>
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	372c      	adds	r7, #44	@ 0x2c
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	bf00      	nop
 8002040:	200002d4 	.word	0x200002d4
 8002044:	200002d8 	.word	0x200002d8

08002048 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002056:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <FillBuffer+0x68>)
 8002058:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800205c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <FillBuffer+0x68>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002064:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <FillBuffer+0x68>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <FillBuffer+0x68>)
 800206c:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <FillBuffer+0x6c>)
 800206e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8002070:	480f      	ldr	r0, [pc, #60]	@ (80020b0 <FillBuffer+0x68>)
 8002072:	f003 fe53 	bl	8005d1c <HAL_DMA2D_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d115      	bne.n	80020a8 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <FillBuffer+0x68>)
 8002080:	f004 f8ba 	bl	80061f8 <HAL_DMA2D_ConfigLayer>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10e      	bne.n	80020a8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69f9      	ldr	r1, [r7, #28]
 8002094:	4806      	ldr	r0, [pc, #24]	@ (80020b0 <FillBuffer+0x68>)
 8002096:	f003 fe8a 	bl	8005dae <HAL_DMA2D_Start>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80020a0:	210a      	movs	r1, #10
 80020a2:	4803      	ldr	r0, [pc, #12]	@ (80020b0 <FillBuffer+0x68>)
 80020a4:	f003 feae 	bl	8005e04 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000264 	.word	0x20000264
 80020b4:	4002b000 	.word	0x4002b000

080020b8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 80020be:	4a2a      	ldr	r2, [pc, #168]	@ (8002168 <BSP_SDRAM_Init+0xb0>)
 80020c0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80020c2:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80020c8:	4b28      	ldr	r3, [pc, #160]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 80020ca:	2207      	movs	r2, #7
 80020cc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80020ce:	4b27      	ldr	r3, [pc, #156]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 80020d0:	2204      	movs	r2, #4
 80020d2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 80020d6:	2207      	movs	r2, #7
 80020d8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 80020dc:	2202      	movs	r2, #2
 80020de:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 80020e2:	2202      	movs	r2, #2
 80020e4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80020e6:	4b21      	ldr	r3, [pc, #132]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 80020e8:	2202      	movs	r2, #2
 80020ea:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 80020fa:	2204      	movs	r2, #4
 80020fc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 8002100:	2210      	movs	r2, #16
 8002102:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 8002106:	2240      	movs	r2, #64	@ 0x40
 8002108:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 800210c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002110:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002112:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 800211a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800211e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002120:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 8002128:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800212e:	2100      	movs	r1, #0
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 8002132:	f000 f87f 	bl	8002234 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002136:	490d      	ldr	r1, [pc, #52]	@ (800216c <BSP_SDRAM_Init+0xb4>)
 8002138:	480a      	ldr	r0, [pc, #40]	@ (8002164 <BSP_SDRAM_Init+0xac>)
 800213a:	f006 ffad 	bl	8009098 <HAL_SDRAM_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002144:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <BSP_SDRAM_Init+0xb8>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	e002      	b.n	8002152 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <BSP_SDRAM_Init+0xb8>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002152:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002156:	f000 f80d 	bl	8002174 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800215a:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <BSP_SDRAM_Init+0xb8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200002f4 	.word	0x200002f4
 8002168:	a0000140 	.word	0xa0000140
 800216c:	20000328 	.word	0x20000328
 8002170:	20000080 	.word	0x20000080

08002174 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002186:	4b29      	ldr	r3, [pc, #164]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002188:	2208      	movs	r2, #8
 800218a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800218c:	4b27      	ldr	r3, [pc, #156]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800218e:	2201      	movs	r2, #1
 8002190:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002192:	4b26      	ldr	r3, [pc, #152]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002198:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800219c:	4923      	ldr	r1, [pc, #140]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800219e:	4824      	ldr	r0, [pc, #144]	@ (8002230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021a0:	f006 ffae 	bl	8009100 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f002 fa61 	bl	800466c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80021b0:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021b2:	2208      	movs	r2, #8
 80021b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80021b6:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80021c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c6:	4919      	ldr	r1, [pc, #100]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021c8:	4819      	ldr	r0, [pc, #100]	@ (8002230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021ca:	f006 ff99 	bl	8009100 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021d0:	2203      	movs	r2, #3
 80021d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021d6:	2208      	movs	r2, #8
 80021d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021dc:	2204      	movs	r2, #4
 80021de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80021e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021ea:	4910      	ldr	r1, [pc, #64]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021ec:	4810      	ldr	r0, [pc, #64]	@ (8002230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021ee:	f006 ff87 	bl	8009100 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80021f2:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80021f6:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021fa:	2204      	movs	r2, #4
 80021fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002200:	2208      	movs	r2, #8
 8002202:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002206:	2201      	movs	r2, #1
 8002208:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a07      	ldr	r2, [pc, #28]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800220e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002214:	4905      	ldr	r1, [pc, #20]	@ (800222c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002216:	4806      	ldr	r0, [pc, #24]	@ (8002230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002218:	f006 ff72 	bl	8009100 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4804      	ldr	r0, [pc, #16]	@ (8002230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002220:	f006 ffa3 	bl	800916a <HAL_SDRAM_ProgramRefreshRate>
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000344 	.word	0x20000344
 8002230:	200002f4 	.word	0x200002f4

08002234 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	@ 0x40
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80ec 	beq.w	800241e <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800224a:	4b77      	ldr	r3, [pc, #476]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	4a76      	ldr	r2, [pc, #472]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6393      	str	r3, [r2, #56]	@ 0x38
 8002256:	4b74      	ldr	r3, [pc, #464]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002260:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	4b70      	ldr	r3, [pc, #448]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a6f      	ldr	r2, [pc, #444]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 800226c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b6d      	ldr	r3, [pc, #436]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	4b69      	ldr	r3, [pc, #420]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a68      	ldr	r2, [pc, #416]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b66      	ldr	r3, [pc, #408]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	623b      	str	r3, [r7, #32]
 8002298:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	4b62      	ldr	r3, [pc, #392]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a61      	ldr	r2, [pc, #388]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a5a      	ldr	r2, [pc, #360]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	4b54      	ldr	r3, [pc, #336]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a53      	ldr	r2, [pc, #332]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b51      	ldr	r3, [pc, #324]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 80022f8:	f043 0320 	orr.w	r3, r3, #32
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b46      	ldr	r3, [pc, #280]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a45      	ldr	r2, [pc, #276]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 8002314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <BSP_SDRAM_MspInit+0x1f4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800232a:	2302      	movs	r3, #2
 800232c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002332:	230c      	movs	r3, #12
 8002334:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002336:	2360      	movs	r3, #96	@ 0x60
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800233a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233e:	4619      	mov	r1, r3
 8002340:	483a      	ldr	r0, [pc, #232]	@ (800242c <BSP_SDRAM_MspInit+0x1f8>)
 8002342:	f004 f887 	bl	8006454 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002346:	2301      	movs	r3, #1
 8002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800234a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234e:	4619      	mov	r1, r3
 8002350:	4837      	ldr	r0, [pc, #220]	@ (8002430 <BSP_SDRAM_MspInit+0x1fc>)
 8002352:	f004 f87f 	bl	8006454 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002356:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800235c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002360:	4619      	mov	r1, r3
 8002362:	4834      	ldr	r0, [pc, #208]	@ (8002434 <BSP_SDRAM_MspInit+0x200>)
 8002364:	f004 f876 	bl	8006454 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002368:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800236e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002372:	4619      	mov	r1, r3
 8002374:	4830      	ldr	r0, [pc, #192]	@ (8002438 <BSP_SDRAM_MspInit+0x204>)
 8002376:	f004 f86d 	bl	8006454 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 800237a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002380:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002384:	4619      	mov	r1, r3
 8002386:	482d      	ldr	r0, [pc, #180]	@ (800243c <BSP_SDRAM_MspInit+0x208>)
 8002388:	f004 f864 	bl	8006454 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800238c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	4829      	ldr	r0, [pc, #164]	@ (8002440 <BSP_SDRAM_MspInit+0x20c>)
 800239a:	f004 f85b 	bl	8006454 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800239e:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80023a4:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80023aa:	4b26      	ldr	r3, [pc, #152]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b0:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80023b2:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023b8:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023c0:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023c8:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023d6:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023e0:	2203      	movs	r2, #3
 80023e2:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80023e4:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023f2:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <BSP_SDRAM_MspInit+0x214>)
 80023f4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80023fc:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002402:	4810      	ldr	r0, [pc, #64]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 8002404:	f003 f96a 	bl	80056dc <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002408:	480e      	ldr	r0, [pc, #56]	@ (8002444 <BSP_SDRAM_MspInit+0x210>)
 800240a:	f003 f8b9 	bl	8005580 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	210f      	movs	r1, #15
 8002412:	2038      	movs	r0, #56	@ 0x38
 8002414:	f002 fe1e 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002418:	2038      	movs	r0, #56	@ 0x38
 800241a:	f002 fe37 	bl	800508c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800241e:	bf00      	nop
 8002420:	3740      	adds	r7, #64	@ 0x40
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	20000354 	.word	0x20000354
 8002448:	40026410 	.word	0x40026410

0800244c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	460a      	mov	r2, r1
 8002456:	80fb      	strh	r3, [r7, #6]
 8002458:	4613      	mov	r3, r2
 800245a:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002460:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <BSP_TS_Init+0x64>)
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002466:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <BSP_TS_Init+0x68>)
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <BSP_TS_Init+0x6c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2082      	movs	r0, #130	@ 0x82
 8002472:	4798      	blx	r3
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	f640 0311 	movw	r3, #2065	@ 0x811
 800247c:	429a      	cmp	r2, r3
 800247e:	d104      	bne.n	800248a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <BSP_TS_Init+0x70>)
 8002482:	4a0d      	ldr	r2, [pc, #52]	@ (80024b8 <BSP_TS_Init+0x6c>)
 8002484:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <BSP_TS_Init+0x70>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2082      	movs	r0, #130	@ 0x82
 8002498:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <BSP_TS_Init+0x70>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2082      	movs	r0, #130	@ 0x82
 80024a2:	4798      	blx	r3
  }

  return ret;
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200003b8 	.word	0x200003b8
 80024b4:	200003ba 	.word	0x200003ba
 80024b8:	20000038 	.word	0x20000038
 80024bc:	200003b4 	.word	0x200003b4

080024c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024c6:	463b      	mov	r3, r7
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  sConfig.Offset = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024d6:	4b21      	ldr	r3, [pc, #132]	@ (800255c <MX_ADC1_Init+0x9c>)
 80024d8:	4a21      	ldr	r2, [pc, #132]	@ (8002560 <MX_ADC1_Init+0xa0>)
 80024da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <MX_ADC1_Init+0x9c>)
 80024de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80024e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <MX_ADC1_Init+0x9c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <MX_ADC1_Init+0x9c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <MX_ADC1_Init+0x9c>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024f6:	4b19      	ldr	r3, [pc, #100]	@ (800255c <MX_ADC1_Init+0x9c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024fe:	4b17      	ldr	r3, [pc, #92]	@ (800255c <MX_ADC1_Init+0x9c>)
 8002500:	2200      	movs	r2, #0
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002504:	4b15      	ldr	r3, [pc, #84]	@ (800255c <MX_ADC1_Init+0x9c>)
 8002506:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <MX_ADC1_Init+0xa4>)
 8002508:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800250a:	4b14      	ldr	r3, [pc, #80]	@ (800255c <MX_ADC1_Init+0x9c>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <MX_ADC1_Init+0x9c>)
 8002512:	2201      	movs	r2, #1
 8002514:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <MX_ADC1_Init+0x9c>)
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800251e:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <MX_ADC1_Init+0x9c>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002524:	480d      	ldr	r0, [pc, #52]	@ (800255c <MX_ADC1_Init+0x9c>)
 8002526:	f002 f8c5 	bl	80046b4 <HAL_ADC_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002530:	f001 fd50 	bl	8003fd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002534:	230d      	movs	r3, #13
 8002536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002538:	2301      	movs	r3, #1
 800253a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800253c:	2306      	movs	r3, #6
 800253e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_ADC1_Init+0x9c>)
 8002546:	f002 fa1d 	bl	8004984 <HAL_ADC_ConfigChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002550:	f001 fd40 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200003bc 	.word	0x200003bc
 8002560:	40012000 	.word	0x40012000
 8002564:	0f000001 	.word	0x0f000001

08002568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3a      	ldr	r2, [pc, #232]	@ (8002670 <HAL_ADC_MspInit+0x108>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d16e      	bne.n	8002668 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
	  /* Enable DMA2 clock */
		DMAx_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a38      	ldr	r2, [pc, #224]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 8002594:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	4a31      	ldr	r2, [pc, #196]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_ADC_MspInit+0x10c>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025de:	2308      	movs	r3, #8
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e2:	2303      	movs	r3, #3
 80025e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4821      	ldr	r0, [pc, #132]	@ (8002678 <HAL_ADC_MspInit+0x110>)
 80025f2:	f003 ff2f 	bl	8006454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80025f6:	4b21      	ldr	r3, [pc, #132]	@ (800267c <HAL_ADC_MspInit+0x114>)
 80025f8:	4a21      	ldr	r2, [pc, #132]	@ (8002680 <HAL_ADC_MspInit+0x118>)
 80025fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025fc:	4b1f      	ldr	r3, [pc, #124]	@ (800267c <HAL_ADC_MspInit+0x114>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <HAL_ADC_MspInit+0x114>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800260e:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002614:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002618:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800261c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002620:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002624:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800262c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002630:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002634:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800263c:	480f      	ldr	r0, [pc, #60]	@ (800267c <HAL_ADC_MspInit+0x114>)
 800263e:	f002 ff9f 	bl	8005580 <HAL_DMA_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002648:	f001 fcc4 	bl	8003fd4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0b      	ldr	r2, [pc, #44]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002650:	639a      	str	r2, [r3, #56]	@ 0x38
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <HAL_ADC_MspInit+0x114>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	2038      	movs	r0, #56	@ 0x38
 800265e:	f002 fcf9 	bl	8005054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 8002662:	2038      	movs	r0, #56	@ 0x38
 8002664:	f002 fd12 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	@ 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40012000 	.word	0x40012000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020800 	.word	0x40020800
 800267c:	20000404 	.word	0x20000404
 8002680:	40026470 	.word	0x40026470

08002684 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <MX_CRC_Init+0x20>)
 800268a:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <MX_CRC_Init+0x24>)
 800268c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	@ (80026a4 <MX_CRC_Init+0x20>)
 8002690:	f002 fd0a 	bl	80050a8 <HAL_CRC_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800269a:	f001 fc9b 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000464 	.word	0x20000464
 80026a8:	40023000 	.word	0x40023000

080026ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0b      	ldr	r2, [pc, #44]	@ (80026e8 <HAL_CRC_MspInit+0x3c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10d      	bne.n	80026da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_CRC_MspInit+0x40>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_CRC_MspInit+0x40>)
 80026c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <HAL_CRC_MspInit+0x40>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023000 	.word	0x40023000
 80026ec:	40023800 	.word	0x40023800

080026f0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_DAC_Init+0x4c>)
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <MX_DAC_Init+0x50>)
 8002702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <MX_DAC_Init+0x4c>)
 8002706:	f002 fceb 	bl	80050e0 <HAL_DAC_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002710:	f001 fc60 	bl	8003fd4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002714:	2324      	movs	r3, #36	@ 0x24
 8002716:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800271c:	463b      	mov	r3, r7
 800271e:	2210      	movs	r2, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4806      	ldr	r0, [pc, #24]	@ (800273c <MX_DAC_Init+0x4c>)
 8002724:	f002 fe3e 	bl	80053a4 <HAL_DAC_ConfigChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800272e:	f001 fc51 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000046c 	.word	0x2000046c
 8002740:	40007400 	.word	0x40007400

08002744 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <HAL_DAC_MspInit+0xf0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d161      	bne.n	800282a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <HAL_DAC_MspInit+0xf4>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a32      	ldr	r2, [pc, #200]	@ (8002838 <HAL_DAC_MspInit+0xf4>)
 8002770:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b30      	ldr	r3, [pc, #192]	@ (8002838 <HAL_DAC_MspInit+0xf4>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <HAL_DAC_MspInit+0xf4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <HAL_DAC_MspInit+0xf4>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b29      	ldr	r3, [pc, #164]	@ (8002838 <HAL_DAC_MspInit+0xf4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800279e:	2320      	movs	r3, #32
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a2:	2303      	movs	r3, #3
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4822      	ldr	r0, [pc, #136]	@ (800283c <HAL_DAC_MspInit+0xf8>)
 80027b2:	f003 fe4f 	bl	8006454 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027b8:	4a22      	ldr	r2, [pc, #136]	@ (8002844 <HAL_DAC_MspInit+0x100>)
 80027ba:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80027bc:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027be:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80027c2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027c6:	2240      	movs	r2, #64	@ 0x40
 80027c8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027de:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027e0:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027e6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80027e8:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027ee:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80027f6:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80027fe:	4810      	ldr	r0, [pc, #64]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 8002800:	f002 febe 	bl	8005580 <HAL_DMA_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800280a:	f001 fbe3 	bl	8003fd4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a0b      	ldr	r2, [pc, #44]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <HAL_DAC_MspInit+0xfc>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	210f      	movs	r1, #15
 800281e:	2036      	movs	r0, #54	@ 0x36
 8002820:	f002 fc18 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002824:	2036      	movs	r0, #54	@ 0x36
 8002826:	f002 fc31 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	@ 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40007400 	.word	0x40007400
 8002838:	40023800 	.word	0x40023800
 800283c:	40020000 	.word	0x40020000
 8002840:	20000480 	.word	0x20000480
 8002844:	400260a0 	.word	0x400260a0

08002848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	4b17      	ldr	r3, [pc, #92]	@ (80028b0 <MX_DMA_Init+0x68>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a16      	ldr	r2, [pc, #88]	@ (80028b0 <MX_DMA_Init+0x68>)
 8002858:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
 800285e:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <MX_DMA_Init+0x68>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <MX_DMA_Init+0x68>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	4a0f      	ldr	r2, [pc, #60]	@ (80028b0 <MX_DMA_Init+0x68>)
 8002874:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002878:	6313      	str	r3, [r2, #48]	@ 0x30
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <MX_DMA_Init+0x68>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	2011      	movs	r0, #17
 800288c:	f002 fbe2 	bl	8005054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002890:	2011      	movs	r0, #17
 8002892:	f002 fbfb 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	203c      	movs	r0, #60	@ 0x3c
 800289c:	f002 fbda 	bl	8005054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80028a0:	203c      	movs	r0, #60	@ 0x3c
 80028a2:	f002 fbf3 	bl	800508c <HAL_NVIC_EnableIRQ>

}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800

080028b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80028b8:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028ba:	4a16      	ldr	r2, [pc, #88]	@ (8002914 <MX_DMA2D_Init+0x60>)
 80028bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80028be:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80028e8:	4809      	ldr	r0, [pc, #36]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028ea:	f003 fa17 	bl	8005d1c <HAL_DMA2D_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80028f4:	f001 fb6e 	bl	8003fd4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80028f8:	2101      	movs	r1, #1
 80028fa:	4805      	ldr	r0, [pc, #20]	@ (8002910 <MX_DMA2D_Init+0x5c>)
 80028fc:	f003 fc7c 	bl	80061f8 <HAL_DMA2D_ConfigLayer>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002906:	f001 fb65 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200004e0 	.word	0x200004e0
 8002914:	4002b000 	.word	0x4002b000

08002918 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0e      	ldr	r2, [pc, #56]	@ (8002960 <HAL_DMA2D_MspInit+0x48>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d115      	bne.n	8002956 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_DMA2D_MspInit+0x4c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	4a0c      	ldr	r2, [pc, #48]	@ (8002964 <HAL_DMA2D_MspInit+0x4c>)
 8002934:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002938:	6313      	str	r3, [r2, #48]	@ 0x30
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_DMA2D_MspInit+0x4c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2105      	movs	r1, #5
 800294a:	205a      	movs	r0, #90	@ 0x5a
 800294c:	f002 fb82 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002950:	205a      	movs	r0, #90	@ 0x5a
 8002952:	f002 fb9b 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	4002b000 	.word	0x4002b000
 8002964:	40023800 	.word	0x40023800

08002968 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
 800297c:	615a      	str	r2, [r3, #20]
 800297e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002980:	4b1f      	ldr	r3, [pc, #124]	@ (8002a00 <MX_FMC_Init+0x98>)
 8002982:	4a20      	ldr	r2, [pc, #128]	@ (8002a04 <MX_FMC_Init+0x9c>)
 8002984:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002986:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <MX_FMC_Init+0x98>)
 8002988:	2201      	movs	r2, #1
 800298a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800298c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a00 <MX_FMC_Init+0x98>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <MX_FMC_Init+0x98>)
 8002994:	2204      	movs	r2, #4
 8002996:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <MX_FMC_Init+0x98>)
 800299a:	2210      	movs	r2, #16
 800299c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800299e:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <MX_FMC_Init+0x98>)
 80029a0:	2240      	movs	r2, #64	@ 0x40
 80029a2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80029a4:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <MX_FMC_Init+0x98>)
 80029a6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80029aa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80029ac:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <MX_FMC_Init+0x98>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <MX_FMC_Init+0x98>)
 80029b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029b8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80029ba:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <MX_FMC_Init+0x98>)
 80029bc:	2200      	movs	r2, #0
 80029be:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <MX_FMC_Init+0x98>)
 80029c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80029c8:	2302      	movs	r3, #2
 80029ca:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80029cc:	2307      	movs	r3, #7
 80029ce:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80029d0:	2304      	movs	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80029d4:	2307      	movs	r3, #7
 80029d6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80029d8:	2303      	movs	r3, #3
 80029da:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <MX_FMC_Init+0x98>)
 80029ea:	f006 fb55 	bl	8009098 <HAL_SDRAM_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80029f4:	f001 faee 	bl	8003fd4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000520 	.word	0x20000520
 8002a04:	a0000140 	.word	0xa0000140

08002a08 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d16f      	bne.n	8002b04 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002a24:	4b39      	ldr	r3, [pc, #228]	@ (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4b38      	ldr	r3, [pc, #224]	@ (8002b10 <HAL_FMC_MspInit+0x108>)
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	4a37      	ldr	r2, [pc, #220]	@ (8002b10 <HAL_FMC_MspInit+0x108>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a3a:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <HAL_FMC_MspInit+0x108>)
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002a46:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002a4a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a58:	230c      	movs	r3, #12
 8002a5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	482c      	ldr	r0, [pc, #176]	@ (8002b14 <HAL_FMC_MspInit+0x10c>)
 8002a62:	f003 fcf7 	bl	8006454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002a66:	2301      	movs	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a76:	230c      	movs	r3, #12
 8002a78:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4826      	ldr	r0, [pc, #152]	@ (8002b18 <HAL_FMC_MspInit+0x110>)
 8002a80:	f003 fce8 	bl	8006454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002a84:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002a88:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a96:	230c      	movs	r3, #12
 8002a98:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	481f      	ldr	r0, [pc, #124]	@ (8002b1c <HAL_FMC_MspInit+0x114>)
 8002aa0:	f003 fcd8 	bl	8006454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002aa4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002aa8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4818      	ldr	r0, [pc, #96]	@ (8002b20 <HAL_FMC_MspInit+0x118>)
 8002ac0:	f003 fcc8 	bl	8006454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002ac4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002ac8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ad6:	230c      	movs	r3, #12
 8002ad8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4811      	ldr	r0, [pc, #68]	@ (8002b24 <HAL_FMC_MspInit+0x11c>)
 8002ae0:	f003 fcb8 	bl	8006454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002ae4:	2360      	movs	r3, #96	@ 0x60
 8002ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002af4:	230c      	movs	r3, #12
 8002af6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	4619      	mov	r1, r3
 8002afc:	480a      	ldr	r0, [pc, #40]	@ (8002b28 <HAL_FMC_MspInit+0x120>)
 8002afe:	f003 fca9 	bl	8006454 <HAL_GPIO_Init>
 8002b02:	e000      	b.n	8002b06 <HAL_FMC_MspInit+0xfe>
    return;
 8002b04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000554 	.word	0x20000554
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40021400 	.word	0x40021400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40021800 	.word	0x40021800
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40020400 	.word	0x40020400

08002b2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b34:	f7ff ff68 	bl	8002a08 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <MX_GPIO_Init>:
     PB15   ------> USB_OTG_HS_DP
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08e      	sub	sp, #56	@ 0x38
 8002b44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
 8002b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	4b99      	ldr	r3, [pc, #612]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a98      	ldr	r2, [pc, #608]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b96      	ldr	r3, [pc, #600]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	4b92      	ldr	r3, [pc, #584]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a91      	ldr	r2, [pc, #580]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b7c:	f043 0320 	orr.w	r3, r3, #32
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	4b8b      	ldr	r3, [pc, #556]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a8a      	ldr	r2, [pc, #552]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b88      	ldr	r3, [pc, #544]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	4b84      	ldr	r3, [pc, #528]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	4a83      	ldr	r2, [pc, #524]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bba:	4b81      	ldr	r3, [pc, #516]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	4b7d      	ldr	r3, [pc, #500]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	4a7c      	ldr	r2, [pc, #496]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b76      	ldr	r3, [pc, #472]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a75      	ldr	r2, [pc, #468]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b73      	ldr	r3, [pc, #460]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002c08:	f043 0310 	orr.w	r3, r3, #16
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	4b68      	ldr	r3, [pc, #416]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	4a67      	ldr	r2, [pc, #412]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002c24:	f043 0308 	orr.w	r3, r3, #8
 8002c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2a:	4b65      	ldr	r3, [pc, #404]	@ (8002dc0 <MX_GPIO_Init+0x280>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2116      	movs	r1, #22
 8002c3a:	4862      	ldr	r0, [pc, #392]	@ (8002dc4 <MX_GPIO_Init+0x284>)
 8002c3c:	f003 fec2 	bl	80069c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	@ 0x80
 8002c44:	4860      	ldr	r0, [pc, #384]	@ (8002dc8 <MX_GPIO_Init+0x288>)
 8002c46:	f003 febd 	bl	80069c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002c50:	485e      	ldr	r0, [pc, #376]	@ (8002dcc <MX_GPIO_Init+0x28c>)
 8002c52:	f003 feb7 	bl	80069c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002c5c:	485c      	ldr	r0, [pc, #368]	@ (8002dd0 <MX_GPIO_Init+0x290>)
 8002c5e:	f003 feb1 	bl	80069c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002c62:	2316      	movs	r3, #22
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c76:	4619      	mov	r1, r3
 8002c78:	4852      	ldr	r0, [pc, #328]	@ (8002dc4 <MX_GPIO_Init+0x284>)
 8002c7a:	f003 fbeb 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8002c7e:	2307      	movs	r3, #7
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c82:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c90:	4619      	mov	r1, r3
 8002c92:	484d      	ldr	r0, [pc, #308]	@ (8002dc8 <MX_GPIO_Init+0x288>)
 8002c94:	f003 fbde 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cac:	4619      	mov	r1, r3
 8002cae:	4846      	ldr	r0, [pc, #280]	@ (8002dc8 <MX_GPIO_Init+0x288>)
 8002cb0:	f003 fbd0 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002cb8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	483e      	ldr	r0, [pc, #248]	@ (8002dc4 <MX_GPIO_Init+0x284>)
 8002cca:	f003 fbc3 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cde:	4619      	mov	r1, r3
 8002ce0:	483c      	ldr	r0, [pc, #240]	@ (8002dd4 <MX_GPIO_Init+0x294>)
 8002ce2:	f003 fbb7 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002ce6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002cf8:	230c      	movs	r3, #12
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d00:	4619      	mov	r1, r3
 8002d02:	4834      	ldr	r0, [pc, #208]	@ (8002dd4 <MX_GPIO_Init+0x294>)
 8002d04:	f003 fba6 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	482d      	ldr	r0, [pc, #180]	@ (8002dd4 <MX_GPIO_Init+0x294>)
 8002d1e:	f003 fb99 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d34:	4619      	mov	r1, r3
 8002d36:	4825      	ldr	r0, [pc, #148]	@ (8002dcc <MX_GPIO_Init+0x28c>)
 8002d38:	f003 fb8c 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002d3c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d42:	2301      	movs	r3, #1
 8002d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d52:	4619      	mov	r1, r3
 8002d54:	481d      	ldr	r0, [pc, #116]	@ (8002dcc <MX_GPIO_Init+0x28c>)
 8002d56:	f003 fb7d 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d74:	4619      	mov	r1, r3
 8002d76:	4814      	ldr	r0, [pc, #80]	@ (8002dc8 <MX_GPIO_Init+0x288>)
 8002d78:	f003 fb6c 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d90:	4619      	mov	r1, r3
 8002d92:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <MX_GPIO_Init+0x288>)
 8002d94:	f003 fb5e 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002d98:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dae:	4619      	mov	r1, r3
 8002db0:	4807      	ldr	r0, [pc, #28]	@ (8002dd0 <MX_GPIO_Init+0x290>)
 8002db2:	f003 fb4f 	bl	8006454 <HAL_GPIO_Init>

}
 8002db6:	bf00      	nop
 8002db8:	3738      	adds	r7, #56	@ 0x38
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020c00 	.word	0x40020c00
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	40020400 	.word	0x40020400

08002dd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002dde:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <MX_I2C3_Init+0x78>)
 8002de0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002de4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e54 <MX_I2C3_Init+0x7c>)
 8002de6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002dee:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002df4:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002df6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dfa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e08:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e14:	480d      	ldr	r0, [pc, #52]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002e16:	f003 fe09 	bl	8006a2c <HAL_I2C_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002e20:	f001 f8d8 	bl	8003fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e24:	2100      	movs	r1, #0
 8002e26:	4809      	ldr	r0, [pc, #36]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002e28:	f004 fe62 	bl	8007af0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002e32:	f001 f8cf 	bl	8003fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002e36:	2100      	movs	r1, #0
 8002e38:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <MX_I2C3_Init+0x74>)
 8002e3a:	f004 fe95 	bl	8007b68 <HAL_I2CEx_ConfigDigitalFilter>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002e44:	f001 f8c6 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000558 	.word	0x20000558
 8002e50:	40005c00 	.word	0x40005c00
 8002e54:	000186a0 	.word	0x000186a0

08002e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a29      	ldr	r2, [pc, #164]	@ (8002f1c <HAL_I2C_MspInit+0xc4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d14b      	bne.n	8002f12 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b28      	ldr	r3, [pc, #160]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	4a27      	ldr	r2, [pc, #156]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8a:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	4a20      	ldr	r2, [pc, #128]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb8:	2312      	movs	r3, #18
 8002eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4815      	ldr	r0, [pc, #84]	@ (8002f24 <HAL_I2C_MspInit+0xcc>)
 8002ed0:	f003 fac0 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eda:	2312      	movs	r3, #18
 8002edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	480d      	ldr	r0, [pc, #52]	@ (8002f28 <HAL_I2C_MspInit+0xd0>)
 8002ef2:	f003 faaf 	bl	8006454 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002f00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_I2C_MspInit+0xc8>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002f12:	bf00      	nop
 8002f14:	3728      	adds	r7, #40	@ 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40005c00 	.word	0x40005c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020000 	.word	0x40020000

08002f2c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0b      	ldr	r2, [pc, #44]	@ (8002f68 <HAL_I2C_MspDeInit+0x3c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10f      	bne.n	8002f5e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_I2C_MspDeInit+0x40>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <HAL_I2C_MspDeInit+0x40>)
 8002f44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f48:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8002f4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f4e:	4808      	ldr	r0, [pc, #32]	@ (8002f70 <HAL_I2C_MspDeInit+0x44>)
 8002f50:	f003 fc2c 	bl	80067ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002f54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f58:	4806      	ldr	r0, [pc, #24]	@ (8002f74 <HAL_I2C_MspDeInit+0x48>)
 8002f5a:	f003 fc27 	bl	80067ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40005c00 	.word	0x40005c00
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020000 	.word	0x40020000

08002f78 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	@ 0x38
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2234      	movs	r2, #52	@ 0x34
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f007 fd37 	bl	800a9f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002f8a:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002f8c:	4a39      	ldr	r2, [pc, #228]	@ (8003074 <MX_LTDC_Init+0xfc>)
 8002f8e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f90:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f96:	4b36      	ldr	r3, [pc, #216]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f9c:	4b34      	ldr	r3, [pc, #208]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fa2:	4b33      	ldr	r3, [pc, #204]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002fa8:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002faa:	2209      	movs	r2, #9
 8002fac:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002fae:	4b30      	ldr	r3, [pc, #192]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fb6:	221d      	movs	r2, #29
 8002fb8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8002fba:	4b2d      	ldr	r3, [pc, #180]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fc2:	f240 120d 	movw	r2, #269	@ 0x10d
 8002fc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8002fc8:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fca:	f240 1243 	movw	r2, #323	@ 0x143
 8002fce:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8002fd0:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fd2:	f240 1217 	movw	r2, #279	@ 0x117
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8002fd8:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fda:	f240 1247 	movw	r2, #327	@ 0x147
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002fe0:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002fe8:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002ff8:	481d      	ldr	r0, [pc, #116]	@ (8003070 <MX_LTDC_Init+0xf8>)
 8002ffa:	f004 fdf5 	bl	8007be8 <HAL_LTDC_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003004:	f000 ffe6 	bl	8003fd4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800300c:	23f0      	movs	r3, #240	@ 0xf0
 800300e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8003014:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003018:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800301a:	2302      	movs	r3, #2
 800301c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800301e:	23ff      	movs	r3, #255	@ 0xff
 8003020:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003026:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800302a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800302c:	2307      	movs	r3, #7
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8003030:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8003036:	23f0      	movs	r3, #240	@ 0xf0
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 800303a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800303e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	2200      	movs	r2, #0
 8003056:	4619      	mov	r1, r3
 8003058:	4805      	ldr	r0, [pc, #20]	@ (8003070 <MX_LTDC_Init+0xf8>)
 800305a:	f004 ff57 	bl	8007f0c <HAL_LTDC_ConfigLayer>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8003064:	f000 ffb6 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003068:	bf00      	nop
 800306a:	3738      	adds	r7, #56	@ 0x38
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200005ac 	.word	0x200005ac
 8003074:	40016800 	.word	0x40016800

08003078 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b09a      	sub	sp, #104	@ 0x68
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003094:	2230      	movs	r2, #48	@ 0x30
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f007 fcad 	bl	800a9f8 <memset>
  if(ltdcHandle->Instance==LTDC)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a85      	ldr	r2, [pc, #532]	@ (80032b8 <HAL_LTDC_MspInit+0x240>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f040 8103 	bne.w	80032b0 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030aa:	2308      	movs	r3, #8
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80030ae:	233c      	movs	r3, #60	@ 0x3c
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80030b2:	2305      	movs	r3, #5
 80030b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80030b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 fe29 	bl	8008d18 <HAL_RCCEx_PeriphCLKConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80030cc:	f000 ff82 	bl	8003fd4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	4b79      	ldr	r3, [pc, #484]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	4a78      	ldr	r2, [pc, #480]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 80030da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030de:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e0:	4b76      	ldr	r3, [pc, #472]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030e8:	623b      	str	r3, [r7, #32]
 80030ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	4b72      	ldr	r3, [pc, #456]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	4a71      	ldr	r2, [pc, #452]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 80030f6:	f043 0320 	orr.w	r3, r3, #32
 80030fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fc:	4b6f      	ldr	r3, [pc, #444]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	4b6b      	ldr	r3, [pc, #428]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	4a6a      	ldr	r2, [pc, #424]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6313      	str	r3, [r2, #48]	@ 0x30
 8003118:	4b68      	ldr	r3, [pc, #416]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	4b64      	ldr	r3, [pc, #400]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312c:	4a63      	ldr	r2, [pc, #396]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	6313      	str	r3, [r2, #48]	@ 0x30
 8003134:	4b61      	ldr	r3, [pc, #388]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	4b5d      	ldr	r3, [pc, #372]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	4a5c      	ldr	r2, [pc, #368]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800314a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800314e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003150:	4b5a      	ldr	r3, [pc, #360]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	4b56      	ldr	r3, [pc, #344]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	4a55      	ldr	r2, [pc, #340]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	6313      	str	r3, [r2, #48]	@ 0x30
 800316c:	4b53      	ldr	r3, [pc, #332]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	4b4f      	ldr	r3, [pc, #316]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	4a4e      	ldr	r2, [pc, #312]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	6313      	str	r3, [r2, #48]	@ 0x30
 8003188:	4b4c      	ldr	r3, [pc, #304]	@ (80032bc <HAL_LTDC_MspInit+0x244>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003198:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031a6:	230e      	movs	r3, #14
 80031a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80031aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031ae:	4619      	mov	r1, r3
 80031b0:	4843      	ldr	r0, [pc, #268]	@ (80032c0 <HAL_LTDC_MspInit+0x248>)
 80031b2:	f003 f94f 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80031b6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80031ba:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031c8:	230e      	movs	r3, #14
 80031ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031d0:	4619      	mov	r1, r3
 80031d2:	483c      	ldr	r0, [pc, #240]	@ (80032c4 <HAL_LTDC_MspInit+0x24c>)
 80031d4:	f003 f93e 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80031d8:	2303      	movs	r3, #3
 80031da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80031e8:	2309      	movs	r3, #9
 80031ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031f0:	4619      	mov	r1, r3
 80031f2:	4835      	ldr	r0, [pc, #212]	@ (80032c8 <HAL_LTDC_MspInit+0x250>)
 80031f4:	f003 f92e 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80031f8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80031fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800320a:	230e      	movs	r3, #14
 800320c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003212:	4619      	mov	r1, r3
 8003214:	482c      	ldr	r0, [pc, #176]	@ (80032c8 <HAL_LTDC_MspInit+0x250>)
 8003216:	f003 f91d 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800321a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800321e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800322c:	230e      	movs	r3, #14
 800322e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003230:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003234:	4619      	mov	r1, r3
 8003236:	4825      	ldr	r0, [pc, #148]	@ (80032cc <HAL_LTDC_MspInit+0x254>)
 8003238:	f003 f90c 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800323c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003240:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800324e:	230e      	movs	r3, #14
 8003250:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003256:	4619      	mov	r1, r3
 8003258:	481d      	ldr	r0, [pc, #116]	@ (80032d0 <HAL_LTDC_MspInit+0x258>)
 800325a:	f003 f8fb 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800325e:	2348      	movs	r3, #72	@ 0x48
 8003260:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800326e:	230e      	movs	r3, #14
 8003270:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003272:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003276:	4619      	mov	r1, r3
 8003278:	4816      	ldr	r0, [pc, #88]	@ (80032d4 <HAL_LTDC_MspInit+0x25c>)
 800327a:	f003 f8eb 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800327e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003282:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	2300      	movs	r3, #0
 800328e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003290:	2309      	movs	r3, #9
 8003292:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003294:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003298:	4619      	mov	r1, r3
 800329a:	480c      	ldr	r0, [pc, #48]	@ (80032cc <HAL_LTDC_MspInit+0x254>)
 800329c:	f003 f8da 	bl	8006454 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2105      	movs	r1, #5
 80032a4:	2058      	movs	r0, #88	@ 0x58
 80032a6:	f001 fed5 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80032aa:	2058      	movs	r0, #88	@ 0x58
 80032ac:	f001 feee 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80032b0:	bf00      	nop
 80032b2:	3768      	adds	r7, #104	@ 0x68
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40016800 	.word	0x40016800
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40021400 	.word	0x40021400
 80032c4:	40020000 	.word	0x40020000
 80032c8:	40020400 	.word	0x40020400
 80032cc:	40021800 	.word	0x40021800
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020c00 	.word	0x40020c00

080032d8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Callback que se llama al completarse la conversión del ADC */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, &adc_data, BUFFER_SIZE, DAC_ALIGN_12B_R);
    if (hadc->Instance == ADC1) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <HAL_ADC_ConvCpltCallback+0x2c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <HAL_ADC_ConvCpltCallback+0x24>
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80032ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80032ee:	4806      	ldr	r0, [pc, #24]	@ (8003308 <HAL_ADC_ConvCpltCallback+0x30>)
 80032f0:	f003 fb81 	bl	80069f6 <HAL_GPIO_TogglePin>
        //Procesa los datos del buffer
    	norm();
 80032f4:	f000 f80a 	bl	800330c <norm>
    	Low_Pass_Filter();
 80032f8:	f000 f838 	bl	800336c <Low_Pass_Filter>
    	//High_Pass_Filter();
    	//Graficar los datos del ADC en la pantalla LCD
    	//print_Sine_Wave();
    }
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40012000 	.word	0x40012000
 8003308:	40021800 	.word	0x40021800

0800330c <norm>:

void norm(void){
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
	for(int i = 0;i < BUFFER_SIZE-1; i++){
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	e018      	b.n	800334a <norm+0x3e>
		adcf_data[i] = ((float)adc_data[i]-2048)/2048;
 8003318:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <norm+0x54>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003328:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003364 <norm+0x58>
 800332c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003330:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003364 <norm+0x58>
 8003334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003338:	4a0b      	ldr	r2, [pc, #44]	@ (8003368 <norm+0x5c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i < BUFFER_SIZE-1; i++){
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3301      	adds	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2bfd      	cmp	r3, #253	@ 0xfd
 800334e:	dde3      	ble.n	8003318 <norm+0xc>
	}
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000a7c 	.word	0x20000a7c
 8003364:	45000000 	.word	0x45000000
 8003368:	20000e78 	.word	0x20000e78

0800336c <Low_Pass_Filter>:
		//dac_data[i] = (uint32_t) (dac_data[i])*2048;
	}
}


void Low_Pass_Filter(void){
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
	for (int n = 0; n < BUFFER_SIZE; n++)
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	f000 bcf3 	b.w	8003d60 <Low_Pass_Filter+0x9f4>
	{
		/*ORDEN 2*/
		if(n==0){
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f040 8090 	bne.w	80034a2 <Low_Pass_Filter+0x136>
			dacf_data[n] = (float)(
							  LP_Filter.xn[0]*adcf_data[n]
 8003382:	4b95      	ldr	r3, [pc, #596]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003384:	ed93 7a01 	vldr	s14, [r3, #4]
 8003388:	4a94      	ldr	r2, [pc, #592]	@ (80035dc <Low_Pass_Filter+0x270>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	ee27 7a27 	vmul.f32	s14, s14, s15
							  +LP_Filter.xn[1]*prev_adcf_data[BUFFER_SIZE-1]
 8003398:	4b8f      	ldr	r3, [pc, #572]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800339a:	edd3 6a02 	vldr	s13, [r3, #8]
 800339e:	4b90      	ldr	r3, [pc, #576]	@ (80035e0 <Low_Pass_Filter+0x274>)
 80033a0:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 80033a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[2]*prev_adcf_data[BUFFER_SIZE-2]
 80033ac:	4b8a      	ldr	r3, [pc, #552]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80033ae:	edd3 6a03 	vldr	s13, [r3, #12]
 80033b2:	4b8b      	ldr	r3, [pc, #556]	@ (80035e0 <Low_Pass_Filter+0x274>)
 80033b4:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 80033b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033bc:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[3]*prev_adcf_data[BUFFER_SIZE-3]
 80033c0:	4b85      	ldr	r3, [pc, #532]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80033c2:	edd3 6a04 	vldr	s13, [r3, #16]
 80033c6:	4b86      	ldr	r3, [pc, #536]	@ (80035e0 <Low_Pass_Filter+0x274>)
 80033c8:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 80033cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d0:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[4]*prev_adcf_data[BUFFER_SIZE-4]
 80033d4:	4b80      	ldr	r3, [pc, #512]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80033d6:	edd3 6a05 	vldr	s13, [r3, #20]
 80033da:	4b81      	ldr	r3, [pc, #516]	@ (80035e0 <Low_Pass_Filter+0x274>)
 80033dc:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 80033e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e4:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[5]*prev_adcf_data[BUFFER_SIZE-5]
 80033e8:	4b7b      	ldr	r3, [pc, #492]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80033ea:	edd3 6a06 	vldr	s13, [r3, #24]
 80033ee:	4b7c      	ldr	r3, [pc, #496]	@ (80035e0 <Low_Pass_Filter+0x274>)
 80033f0:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80033f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f8:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[6]*prev_adcf_data[BUFFER_SIZE-6]
 80033fc:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80033fe:	edd3 6a07 	vldr	s13, [r3, #28]
 8003402:	4b77      	ldr	r3, [pc, #476]	@ (80035e0 <Low_Pass_Filter+0x274>)
 8003404:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8003408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340c:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[1]*dacf_data[BUFFER_SIZE-1]
 8003410:	4b71      	ldr	r3, [pc, #452]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003412:	edd3 6a01 	vldr	s13, [r3, #4]
 8003416:	4b73      	ldr	r3, [pc, #460]	@ (80035e4 <Low_Pass_Filter+0x278>)
 8003418:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 800341c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003420:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[2]*prev_dacf_data[BUFFER_SIZE-2]
 8003424:	4b6c      	ldr	r3, [pc, #432]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003426:	edd3 6a02 	vldr	s13, [r3, #8]
 800342a:	4b6f      	ldr	r3, [pc, #444]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 800342c:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 8003430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003434:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[3]*prev_dacf_data[BUFFER_SIZE-3]
 8003438:	4b67      	ldr	r3, [pc, #412]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800343a:	edd3 6a03 	vldr	s13, [r3, #12]
 800343e:	4b6a      	ldr	r3, [pc, #424]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 8003440:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 8003444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003448:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[4]*prev_dacf_data[BUFFER_SIZE-4]
 800344c:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800344e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003452:	4b65      	ldr	r3, [pc, #404]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 8003454:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 8003458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345c:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[5]*prev_dacf_data[BUFFER_SIZE-5]
 8003460:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003462:	edd3 6a05 	vldr	s13, [r3, #20]
 8003466:	4b60      	ldr	r3, [pc, #384]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 8003468:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 800346c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[6]*prev_dacf_data[BUFFER_SIZE-6]
 8003474:	4b58      	ldr	r3, [pc, #352]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003476:	edd3 6a06 	vldr	s13, [r3, #24]
 800347a:	4b5b      	ldr	r3, [pc, #364]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 800347c:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8003480:	ee66 7aa7 	vmul.f32	s15, s13, s15
			dacf_data[n] = (float)(
 8003484:	ee37 7a27 	vadd.f32	s14, s14, s15
						  )*LP_Filter.G_i ;
 8003488:	4b53      	ldr	r3, [pc, #332]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800348a:	edd3 7a02 	vldr	s15, [r3, #8]
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
			dacf_data[n] = (float)(
 8003492:	4a54      	ldr	r2, [pc, #336]	@ (80035e4 <Low_Pass_Filter+0x278>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	edc3 7a00 	vstr	s15, [r3]
 800349e:	f000 bc33 	b.w	8003d08 <Low_Pass_Filter+0x99c>
		}
		else if(n==1){
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f040 80a1 	bne.w	80035ec <Low_Pass_Filter+0x280>
			dacf_data[n] = (
							  LP_Filter.xn[0]*adcf_data[n]
 80034aa:	4b4b      	ldr	r3, [pc, #300]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80034ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80034b0:	4a4a      	ldr	r2, [pc, #296]	@ (80035dc <Low_Pass_Filter+0x270>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ee27 7a27 	vmul.f32	s14, s14, s15
							  +LP_Filter.xn[1]*adcf_data[n-1]
 80034c0:	4b45      	ldr	r3, [pc, #276]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80034c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	4a44      	ldr	r2, [pc, #272]	@ (80035dc <Low_Pass_Filter+0x270>)
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d8:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[2]*prev_adcf_data[BUFFER_SIZE-2]
 80034dc:	4b3e      	ldr	r3, [pc, #248]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80034de:	edd3 6a03 	vldr	s13, [r3, #12]
 80034e2:	4b3f      	ldr	r3, [pc, #252]	@ (80035e0 <Low_Pass_Filter+0x274>)
 80034e4:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 80034e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ec:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[3]*prev_adcf_data[BUFFER_SIZE-3]
 80034f0:	4b39      	ldr	r3, [pc, #228]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80034f2:	edd3 6a04 	vldr	s13, [r3, #16]
 80034f6:	4b3a      	ldr	r3, [pc, #232]	@ (80035e0 <Low_Pass_Filter+0x274>)
 80034f8:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 80034fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003500:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[4]*prev_adcf_data[BUFFER_SIZE-4]
 8003504:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003506:	edd3 6a05 	vldr	s13, [r3, #20]
 800350a:	4b35      	ldr	r3, [pc, #212]	@ (80035e0 <Low_Pass_Filter+0x274>)
 800350c:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 8003510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003514:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[5]*prev_adcf_data[BUFFER_SIZE-5]
 8003518:	4b2f      	ldr	r3, [pc, #188]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800351a:	edd3 6a06 	vldr	s13, [r3, #24]
 800351e:	4b30      	ldr	r3, [pc, #192]	@ (80035e0 <Low_Pass_Filter+0x274>)
 8003520:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 8003524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003528:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[6]*prev_adcf_data[BUFFER_SIZE-6]
 800352c:	4b2a      	ldr	r3, [pc, #168]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800352e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003532:	4b2b      	ldr	r3, [pc, #172]	@ (80035e0 <Low_Pass_Filter+0x274>)
 8003534:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8003538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353c:	ee37 7a27 	vadd.f32	s14, s14, s15

							  +LP_Filter.yn[1]*dacf_data[n-1]
 8003540:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003542:	edd3 6a01 	vldr	s13, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3b01      	subs	r3, #1
 800354a:	4a26      	ldr	r2, [pc, #152]	@ (80035e4 <Low_Pass_Filter+0x278>)
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003558:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[2]*prev_dacf_data[BUFFER_SIZE-2]
 800355c:	4b1e      	ldr	r3, [pc, #120]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800355e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003562:	4b21      	ldr	r3, [pc, #132]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 8003564:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 8003568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800356c:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[3]*prev_dacf_data[BUFFER_SIZE-3]
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003572:	edd3 6a03 	vldr	s13, [r3, #12]
 8003576:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 8003578:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800357c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003580:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[4]*prev_dacf_data[BUFFER_SIZE-4]
 8003584:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 8003586:	edd3 6a04 	vldr	s13, [r3, #16]
 800358a:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 800358c:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 8003590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003594:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[5]*prev_dacf_data[BUFFER_SIZE-5]
 8003598:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 800359a:	edd3 6a05 	vldr	s13, [r3, #20]
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 80035a0:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80035a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a8:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[6]*prev_dacf_data[BUFFER_SIZE-6]
 80035ac:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80035ae:	edd3 6a06 	vldr	s13, [r3, #24]
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <Low_Pass_Filter+0x27c>)
 80035b4:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 80035b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035bc:	ee37 7a27 	vadd.f32	s14, s14, s15
						  )*LP_Filter.G_i ;
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <Low_Pass_Filter+0x26c>)
 80035c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
			dacf_data[n] = (
 80035ca:	4a06      	ldr	r2, [pc, #24]	@ (80035e4 <Low_Pass_Filter+0x278>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	edc3 7a00 	vstr	s15, [r3]
 80035d6:	e397      	b.n	8003d08 <Low_Pass_Filter+0x99c>
 80035d8:	20000084 	.word	0x20000084
 80035dc:	20000e78 	.word	0x20000e78
 80035e0:	20001a6c 	.word	0x20001a6c
 80035e4:	20001274 	.word	0x20001274
 80035e8:	20001670 	.word	0x20001670
		}
		else if(n==2){
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	f040 809f 	bne.w	8003732 <Low_Pass_Filter+0x3c6>
			dacf_data[n] = (
							  LP_Filter.xn[0]*adcf_data[n]
 80035f4:	4ba4      	ldr	r3, [pc, #656]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80035f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035fa:	4aa4      	ldr	r2, [pc, #656]	@ (800388c <Low_Pass_Filter+0x520>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	ee27 7a27 	vmul.f32	s14, s14, s15
							  +LP_Filter.xn[1]*adcf_data[n-1]
 800360a:	4b9f      	ldr	r3, [pc, #636]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800360c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	4a9d      	ldr	r2, [pc, #628]	@ (800388c <Low_Pass_Filter+0x520>)
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	edd3 7a00 	vldr	s15, [r3]
 800361e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003622:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[2]*adcf_data[n-2]
 8003626:	4b98      	ldr	r3, [pc, #608]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003628:	edd3 6a03 	vldr	s13, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b02      	subs	r3, #2
 8003630:	4a96      	ldr	r2, [pc, #600]	@ (800388c <Low_Pass_Filter+0x520>)
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363e:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[3]*prev_adcf_data[BUFFER_SIZE-3]
 8003642:	4b91      	ldr	r3, [pc, #580]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003644:	edd3 6a04 	vldr	s13, [r3, #16]
 8003648:	4b91      	ldr	r3, [pc, #580]	@ (8003890 <Low_Pass_Filter+0x524>)
 800364a:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800364e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003652:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[4]*prev_adcf_data[BUFFER_SIZE-4]
 8003656:	4b8c      	ldr	r3, [pc, #560]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003658:	edd3 6a05 	vldr	s13, [r3, #20]
 800365c:	4b8c      	ldr	r3, [pc, #560]	@ (8003890 <Low_Pass_Filter+0x524>)
 800365e:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 8003662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003666:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[5]*prev_adcf_data[BUFFER_SIZE-5]
 800366a:	4b87      	ldr	r3, [pc, #540]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800366c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003670:	4b87      	ldr	r3, [pc, #540]	@ (8003890 <Low_Pass_Filter+0x524>)
 8003672:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 8003676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800367a:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.xn[6]*prev_adcf_data[BUFFER_SIZE-6]
 800367e:	4b82      	ldr	r3, [pc, #520]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003680:	edd3 6a07 	vldr	s13, [r3, #28]
 8003684:	4b82      	ldr	r3, [pc, #520]	@ (8003890 <Low_Pass_Filter+0x524>)
 8003686:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 800368a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800368e:	ee37 7a27 	vadd.f32	s14, s14, s15

							  +LP_Filter.yn[1]*dacf_data[n-1]
 8003692:	4b7d      	ldr	r3, [pc, #500]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003694:	edd3 6a01 	vldr	s13, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	4a7d      	ldr	r2, [pc, #500]	@ (8003894 <Low_Pass_Filter+0x528>)
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036aa:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[2]*dacf_data[n-2]
 80036ae:	4b76      	ldr	r3, [pc, #472]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80036b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b02      	subs	r3, #2
 80036b8:	4a76      	ldr	r2, [pc, #472]	@ (8003894 <Low_Pass_Filter+0x528>)
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c6:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[3]*prev_dacf_data[BUFFER_SIZE-3]
 80036ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80036cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80036d0:	4b71      	ldr	r3, [pc, #452]	@ (8003898 <Low_Pass_Filter+0x52c>)
 80036d2:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 80036d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036da:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[4]*prev_dacf_data[BUFFER_SIZE-4]
 80036de:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80036e0:	edd3 6a04 	vldr	s13, [r3, #16]
 80036e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003898 <Low_Pass_Filter+0x52c>)
 80036e6:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 80036ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ee:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[5]*prev_dacf_data[BUFFER_SIZE-5]
 80036f2:	4b65      	ldr	r3, [pc, #404]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80036f4:	edd3 6a05 	vldr	s13, [r3, #20]
 80036f8:	4b67      	ldr	r3, [pc, #412]	@ (8003898 <Low_Pass_Filter+0x52c>)
 80036fa:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80036fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003702:	ee37 7a27 	vadd.f32	s14, s14, s15
							  +LP_Filter.yn[6]*prev_dacf_data[BUFFER_SIZE-6]
 8003706:	4b60      	ldr	r3, [pc, #384]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003708:	edd3 6a06 	vldr	s13, [r3, #24]
 800370c:	4b62      	ldr	r3, [pc, #392]	@ (8003898 <Low_Pass_Filter+0x52c>)
 800370e:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8003712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003716:	ee37 7a27 	vadd.f32	s14, s14, s15
						  )*LP_Filter.G_i ;
 800371a:	4b5b      	ldr	r3, [pc, #364]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800371c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003720:	ee67 7a27 	vmul.f32	s15, s14, s15
			dacf_data[n] = (
 8003724:	4a5b      	ldr	r2, [pc, #364]	@ (8003894 <Low_Pass_Filter+0x528>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	edc3 7a00 	vstr	s15, [r3]
 8003730:	e2ea      	b.n	8003d08 <Low_Pass_Filter+0x99c>
				}
		else if(n==3){
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b03      	cmp	r3, #3
 8003736:	f040 80b1 	bne.w	800389c <Low_Pass_Filter+0x530>
					dacf_data[n] = (
							LP_Filter.xn[0]*adcf_data[n]
 800373a:	4b53      	ldr	r3, [pc, #332]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800373c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003740:	4a52      	ldr	r2, [pc, #328]	@ (800388c <Low_Pass_Filter+0x520>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee27 7a27 	vmul.f32	s14, s14, s15
						  +LP_Filter.xn[1]*adcf_data[n-1]
 8003750:	4b4d      	ldr	r3, [pc, #308]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003752:	edd3 6a02 	vldr	s13, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3b01      	subs	r3, #1
 800375a:	4a4c      	ldr	r2, [pc, #304]	@ (800388c <Low_Pass_Filter+0x520>)
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003768:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[2]*adcf_data[n-2]
 800376c:	4b46      	ldr	r3, [pc, #280]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800376e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3b02      	subs	r3, #2
 8003776:	4a45      	ldr	r2, [pc, #276]	@ (800388c <Low_Pass_Filter+0x520>)
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003784:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[3]*adcf_data[n-3]
 8003788:	4b3f      	ldr	r3, [pc, #252]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800378a:	edd3 6a04 	vldr	s13, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3b03      	subs	r3, #3
 8003792:	4a3e      	ldr	r2, [pc, #248]	@ (800388c <Low_Pass_Filter+0x520>)
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	edd3 7a00 	vldr	s15, [r3]
 800379c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037a0:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[4]*prev_adcf_data[BUFFER_SIZE-4]
 80037a4:	4b38      	ldr	r3, [pc, #224]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80037a6:	edd3 6a05 	vldr	s13, [r3, #20]
 80037aa:	4b39      	ldr	r3, [pc, #228]	@ (8003890 <Low_Pass_Filter+0x524>)
 80037ac:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 80037b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b4:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[5]*prev_adcf_data[BUFFER_SIZE-5]
 80037b8:	4b33      	ldr	r3, [pc, #204]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80037ba:	edd3 6a06 	vldr	s13, [r3, #24]
 80037be:	4b34      	ldr	r3, [pc, #208]	@ (8003890 <Low_Pass_Filter+0x524>)
 80037c0:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80037c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c8:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[6]*prev_adcf_data[BUFFER_SIZE-6]
 80037cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80037ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80037d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003890 <Low_Pass_Filter+0x524>)
 80037d4:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee37 7a27 	vadd.f32	s14, s14, s15

						  +LP_Filter.yn[1]*dacf_data[n-1]
 80037e0:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80037e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003894 <Low_Pass_Filter+0x528>)
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f8:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[2]*dacf_data[n-2]
 80037fc:	4b22      	ldr	r3, [pc, #136]	@ (8003888 <Low_Pass_Filter+0x51c>)
 80037fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3b02      	subs	r3, #2
 8003806:	4a23      	ldr	r2, [pc, #140]	@ (8003894 <Low_Pass_Filter+0x528>)
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003814:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[3]*dacf_data[n-3]
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800381a:	edd3 6a03 	vldr	s13, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3b03      	subs	r3, #3
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <Low_Pass_Filter+0x528>)
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003830:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[4]*prev_dacf_data[BUFFER_SIZE-4]
 8003834:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003836:	edd3 6a04 	vldr	s13, [r3, #16]
 800383a:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <Low_Pass_Filter+0x52c>)
 800383c:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 8003840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003844:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[5]*prev_dacf_data[BUFFER_SIZE-5]
 8003848:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800384a:	edd3 6a05 	vldr	s13, [r3, #20]
 800384e:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <Low_Pass_Filter+0x52c>)
 8003850:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 8003854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003858:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[6]*prev_dacf_data[BUFFER_SIZE-6]
 800385c:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <Low_Pass_Filter+0x51c>)
 800385e:	edd3 6a06 	vldr	s13, [r3, #24]
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <Low_Pass_Filter+0x52c>)
 8003864:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8003868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386c:	ee37 7a27 	vadd.f32	s14, s14, s15

					  )*LP_Filter.G_i ;
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <Low_Pass_Filter+0x51c>)
 8003872:	edd3 7a02 	vldr	s15, [r3, #8]
 8003876:	ee67 7a27 	vmul.f32	s15, s14, s15
					dacf_data[n] = (
 800387a:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <Low_Pass_Filter+0x528>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	edc3 7a00 	vstr	s15, [r3]
 8003886:	e23f      	b.n	8003d08 <Low_Pass_Filter+0x99c>
 8003888:	20000084 	.word	0x20000084
 800388c:	20000e78 	.word	0x20000e78
 8003890:	20001a6c 	.word	0x20001a6c
 8003894:	20001274 	.word	0x20001274
 8003898:	20001670 	.word	0x20001670
				}

		else if(n==4){
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	f040 80af 	bne.w	8003a02 <Low_Pass_Filter+0x696>
			dacf_data[n] = (
							LP_Filter.xn[0]*adcf_data[n]
 80038a4:	4bb4      	ldr	r3, [pc, #720]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80038a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80038aa:	4ab4      	ldr	r2, [pc, #720]	@ (8003b7c <Low_Pass_Filter+0x810>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee27 7a27 	vmul.f32	s14, s14, s15
						  +LP_Filter.xn[1]*adcf_data[n-1]
 80038ba:	4baf      	ldr	r3, [pc, #700]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80038bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	4aad      	ldr	r2, [pc, #692]	@ (8003b7c <Low_Pass_Filter+0x810>)
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	edd3 7a00 	vldr	s15, [r3]
 80038ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d2:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[2]*adcf_data[n-2]
 80038d6:	4ba8      	ldr	r3, [pc, #672]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80038d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b02      	subs	r3, #2
 80038e0:	4aa6      	ldr	r2, [pc, #664]	@ (8003b7c <Low_Pass_Filter+0x810>)
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ee:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[3]*adcf_data[n-3]
 80038f2:	4ba1      	ldr	r3, [pc, #644]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80038f4:	edd3 6a04 	vldr	s13, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b03      	subs	r3, #3
 80038fc:	4a9f      	ldr	r2, [pc, #636]	@ (8003b7c <Low_Pass_Filter+0x810>)
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	edd3 7a00 	vldr	s15, [r3]
 8003906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800390a:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[4]*adcf_data[n-4]
 800390e:	4b9a      	ldr	r3, [pc, #616]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003910:	edd3 6a05 	vldr	s13, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b04      	subs	r3, #4
 8003918:	4a98      	ldr	r2, [pc, #608]	@ (8003b7c <Low_Pass_Filter+0x810>)
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003926:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[5]*prev_adcf_data[BUFFER_SIZE-5]
 800392a:	4b93      	ldr	r3, [pc, #588]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 800392c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003930:	4b93      	ldr	r3, [pc, #588]	@ (8003b80 <Low_Pass_Filter+0x814>)
 8003932:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 8003936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393a:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[6]*prev_adcf_data[BUFFER_SIZE-6]
 800393e:	4b8e      	ldr	r3, [pc, #568]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003940:	edd3 6a07 	vldr	s13, [r3, #28]
 8003944:	4b8e      	ldr	r3, [pc, #568]	@ (8003b80 <Low_Pass_Filter+0x814>)
 8003946:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 800394a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800394e:	ee37 7a27 	vadd.f32	s14, s14, s15

						  +LP_Filter.yn[1]*dacf_data[n-1]
 8003952:	4b89      	ldr	r3, [pc, #548]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003954:	edd3 6a01 	vldr	s13, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	4a89      	ldr	r2, [pc, #548]	@ (8003b84 <Low_Pass_Filter+0x818>)
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	edd3 7a00 	vldr	s15, [r3]
 8003966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396a:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[2]*dacf_data[n-2]
 800396e:	4b82      	ldr	r3, [pc, #520]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003970:	edd3 6a02 	vldr	s13, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b02      	subs	r3, #2
 8003978:	4a82      	ldr	r2, [pc, #520]	@ (8003b84 <Low_Pass_Filter+0x818>)
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003986:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[3]*dacf_data[n-3]
 800398a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 800398c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b03      	subs	r3, #3
 8003994:	4a7b      	ldr	r2, [pc, #492]	@ (8003b84 <Low_Pass_Filter+0x818>)
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	edd3 7a00 	vldr	s15, [r3]
 800399e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a2:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[4]*dacf_data[n-4]
 80039a6:	4b74      	ldr	r3, [pc, #464]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80039a8:	edd3 6a04 	vldr	s13, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b04      	subs	r3, #4
 80039b0:	4a74      	ldr	r2, [pc, #464]	@ (8003b84 <Low_Pass_Filter+0x818>)
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039be:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[5]*prev_dacf_data[BUFFER_SIZE-5]
 80039c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80039c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80039c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b88 <Low_Pass_Filter+0x81c>)
 80039ca:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80039ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d2:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[6]*prev_dacf_data[BUFFER_SIZE-6]
 80039d6:	4b68      	ldr	r3, [pc, #416]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80039d8:	edd3 6a06 	vldr	s13, [r3, #24]
 80039dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b88 <Low_Pass_Filter+0x81c>)
 80039de:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 80039e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e6:	ee37 7a27 	vadd.f32	s14, s14, s15

					  )*LP_Filter.G_i ;
 80039ea:	4b63      	ldr	r3, [pc, #396]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 80039ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80039f0:	ee67 7a27 	vmul.f32	s15, s14, s15
			dacf_data[n] = (
 80039f4:	4a63      	ldr	r2, [pc, #396]	@ (8003b84 <Low_Pass_Filter+0x818>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	edc3 7a00 	vstr	s15, [r3]
 8003a00:	e182      	b.n	8003d08 <Low_Pass_Filter+0x99c>
			}
		else if(n==5){
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	f040 80c1 	bne.w	8003b8c <Low_Pass_Filter+0x820>
			dacf_data[n] = (
							LP_Filter.xn[0]*adcf_data[n]
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003a0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a10:	4a5a      	ldr	r2, [pc, #360]	@ (8003b7c <Low_Pass_Filter+0x810>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
						  +LP_Filter.xn[1]*adcf_data[n-1]
 8003a20:	4b55      	ldr	r3, [pc, #340]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003a22:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <Low_Pass_Filter+0x810>)
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a38:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[2]*adcf_data[n-2]
 8003a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003a3e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3b02      	subs	r3, #2
 8003a46:	4a4d      	ldr	r2, [pc, #308]	@ (8003b7c <Low_Pass_Filter+0x810>)
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a54:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[3]*adcf_data[n-3]
 8003a58:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003a5a:	edd3 6a04 	vldr	s13, [r3, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3b03      	subs	r3, #3
 8003a62:	4a46      	ldr	r2, [pc, #280]	@ (8003b7c <Low_Pass_Filter+0x810>)
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a70:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[4]*adcf_data[n-4]
 8003a74:	4b40      	ldr	r3, [pc, #256]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003a76:	edd3 6a05 	vldr	s13, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3b04      	subs	r3, #4
 8003a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b7c <Low_Pass_Filter+0x810>)
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	edd3 7a00 	vldr	s15, [r3]
 8003a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[5]*adcf_data[n-5]
 8003a90:	4b39      	ldr	r3, [pc, #228]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003a92:	edd3 6a06 	vldr	s13, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3b05      	subs	r3, #5
 8003a9a:	4a38      	ldr	r2, [pc, #224]	@ (8003b7c <Low_Pass_Filter+0x810>)
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[6]*prev_adcf_data[BUFFER_SIZE-6]
 8003aac:	4b32      	ldr	r3, [pc, #200]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003aae:	edd3 6a07 	vldr	s13, [r3, #28]
 8003ab2:	4b33      	ldr	r3, [pc, #204]	@ (8003b80 <Low_Pass_Filter+0x814>)
 8003ab4:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8003ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003abc:	ee37 7a27 	vadd.f32	s14, s14, s15

						  +LP_Filter.yn[1]*dacf_data[n-1]
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003ac2:	edd3 6a01 	vldr	s13, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	4a2e      	ldr	r2, [pc, #184]	@ (8003b84 <Low_Pass_Filter+0x818>)
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	edd3 7a00 	vldr	s15, [r3]
 8003ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[2]*dacf_data[n-2]
 8003adc:	4b26      	ldr	r3, [pc, #152]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003ade:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3b02      	subs	r3, #2
 8003ae6:	4a27      	ldr	r2, [pc, #156]	@ (8003b84 <Low_Pass_Filter+0x818>)
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af4:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[3]*dacf_data[n-3]
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003afa:	edd3 6a03 	vldr	s13, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3b03      	subs	r3, #3
 8003b02:	4a20      	ldr	r2, [pc, #128]	@ (8003b84 <Low_Pass_Filter+0x818>)
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b10:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[4]*dacf_data[n-4]
 8003b14:	4b18      	ldr	r3, [pc, #96]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003b16:	edd3 6a04 	vldr	s13, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3b04      	subs	r3, #4
 8003b1e:	4a19      	ldr	r2, [pc, #100]	@ (8003b84 <Low_Pass_Filter+0x818>)
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[5]*dacf_data[n-5]
 8003b30:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003b32:	edd3 6a05 	vldr	s13, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3b05      	subs	r3, #5
 8003b3a:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <Low_Pass_Filter+0x818>)
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b48:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[6]*prev_dacf_data[BUFFER_SIZE-6]
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003b4e:	edd3 6a06 	vldr	s13, [r3, #24]
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <Low_Pass_Filter+0x81c>)
 8003b54:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8003b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5c:	ee37 7a27 	vadd.f32	s14, s14, s15

					  )*LP_Filter.G_i ;
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <Low_Pass_Filter+0x80c>)
 8003b62:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
			dacf_data[n] = (
 8003b6a:	4a06      	ldr	r2, [pc, #24]	@ (8003b84 <Low_Pass_Filter+0x818>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	edc3 7a00 	vstr	s15, [r3]
 8003b76:	e0c7      	b.n	8003d08 <Low_Pass_Filter+0x99c>
 8003b78:	20000084 	.word	0x20000084
 8003b7c:	20000e78 	.word	0x20000e78
 8003b80:	20001a6c 	.word	0x20001a6c
 8003b84:	20001274 	.word	0x20001274
 8003b88:	20001670 	.word	0x20001670
					}
		else{
			dacf_data[n] = (
							LP_Filter.xn[0]*adcf_data[n]
 8003b8c:	4b7a      	ldr	r3, [pc, #488]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003b8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b92:	4a7a      	ldr	r2, [pc, #488]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
						  +LP_Filter.xn[1]*adcf_data[n-1]
 8003ba2:	4b75      	ldr	r3, [pc, #468]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003ba4:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	4a73      	ldr	r2, [pc, #460]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bba:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[2]*adcf_data[n-2]
 8003bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003bc0:	edd3 6a03 	vldr	s13, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b02      	subs	r3, #2
 8003bc8:	4a6c      	ldr	r2, [pc, #432]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[3]*adcf_data[n-3]
 8003bda:	4b67      	ldr	r3, [pc, #412]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003bdc:	edd3 6a04 	vldr	s13, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b03      	subs	r3, #3
 8003be4:	4a65      	ldr	r2, [pc, #404]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[4]*adcf_data[n-4]
 8003bf6:	4b60      	ldr	r3, [pc, #384]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003bf8:	edd3 6a05 	vldr	s13, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	4a5e      	ldr	r2, [pc, #376]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	edd3 7a00 	vldr	s15, [r3]
 8003c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[5]*adcf_data[n-5]
 8003c12:	4b59      	ldr	r3, [pc, #356]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003c14:	edd3 6a06 	vldr	s13, [r3, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b05      	subs	r3, #5
 8003c1c:	4a57      	ldr	r2, [pc, #348]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.xn[6]*adcf_data[n-6]
 8003c2e:	4b52      	ldr	r3, [pc, #328]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003c30:	edd3 6a07 	vldr	s13, [r3, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b06      	subs	r3, #6
 8003c38:	4a50      	ldr	r2, [pc, #320]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c46:	ee37 7a27 	vadd.f32	s14, s14, s15

						  +LP_Filter.yn[1]*dacf_data[n-1]
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003c4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c62:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[2]*dacf_data[n-2]
 8003c66:	4b44      	ldr	r3, [pc, #272]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003c68:	edd3 6a02 	vldr	s13, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b02      	subs	r3, #2
 8003c70:	4a43      	ldr	r2, [pc, #268]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[3]*dacf_data[n-3]
 8003c82:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003c84:	edd3 6a03 	vldr	s13, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3b03      	subs	r3, #3
 8003c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[4]*dacf_data[n-4]
 8003c9e:	4b36      	ldr	r3, [pc, #216]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003ca0:	edd3 6a04 	vldr	s13, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3b04      	subs	r3, #4
 8003ca8:	4a35      	ldr	r2, [pc, #212]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[5]*dacf_data[n-5]
 8003cba:	4b2f      	ldr	r3, [pc, #188]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003cbc:	edd3 6a05 	vldr	s13, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b05      	subs	r3, #5
 8003cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	edd3 7a00 	vldr	s15, [r3]
 8003cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
						  +LP_Filter.yn[6]*dacf_data[n-6]
 8003cd6:	4b28      	ldr	r3, [pc, #160]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003cd8:	edd3 6a06 	vldr	s13, [r3, #24]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b06      	subs	r3, #6
 8003ce0:	4a27      	ldr	r2, [pc, #156]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cee:	ee37 7a27 	vadd.f32	s14, s14, s15

					)*LP_Filter.G_i ;
 8003cf2:	4b21      	ldr	r3, [pc, #132]	@ (8003d78 <Low_Pass_Filter+0xa0c>)
 8003cf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
			dacf_data[n] = (
 8003cfc:	4a20      	ldr	r2, [pc, #128]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	edc3 7a00 	vstr	s15, [r3]
		}
		dac_data[n] = ((int32_t)(dacf_data[n]*2048)) + 2048;
 8003d08:	4a1d      	ldr	r2, [pc, #116]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003d84 <Low_Pass_Filter+0xa18>
 8003d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d20:	ee17 3a90 	vmov	r3, s15
 8003d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4a17      	ldr	r2, [pc, #92]	@ (8003d88 <Low_Pass_Filter+0xa1c>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		prev_adcf_data[n] = adcf_data[n];
 8003d32:	4a12      	ldr	r2, [pc, #72]	@ (8003d7c <Low_Pass_Filter+0xa10>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4913      	ldr	r1, [pc, #76]	@ (8003d8c <Low_Pass_Filter+0xa20>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	601a      	str	r2, [r3, #0]
	    prev_dacf_data[n] = dacf_data[n];
 8003d46:	4a0e      	ldr	r2, [pc, #56]	@ (8003d80 <Low_Pass_Filter+0xa14>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	490f      	ldr	r1, [pc, #60]	@ (8003d90 <Low_Pass_Filter+0xa24>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < BUFFER_SIZE; n++)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2bfe      	cmp	r3, #254	@ 0xfe
 8003d64:	f77f ab09 	ble.w	800337a <Low_Pass_Filter+0xe>
	}
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000084 	.word	0x20000084
 8003d7c:	20000e78 	.word	0x20000e78
 8003d80:	20001274 	.word	0x20001274
 8003d84:	45000000 	.word	0x45000000
 8003d88:	20000680 	.word	0x20000680
 8003d8c:	20001a6c 	.word	0x20001a6c
 8003d90:	20001670 	.word	0x20001670

08003d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d9a:	f000 fc25 	bl	80045e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d9e:	f000 f897 	bl	8003ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003da2:	f7fe fecd 	bl	8002b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8003da6:	f7fe fd4f 	bl	8002848 <MX_DMA_Init>
  MX_CRC_Init();
 8003daa:	f7fe fc6b 	bl	8002684 <MX_CRC_Init>
  MX_DMA2D_Init();
 8003dae:	f7fe fd81 	bl	80028b4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003db2:	f7fe fdd9 	bl	8002968 <MX_FMC_Init>
  MX_I2C3_Init();
 8003db6:	f7ff f80f 	bl	8002dd8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003dba:	f7ff f8dd 	bl	8002f78 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003dbe:	f000 f913 	bl	8003fe8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003dc2:	f000 fb0f 	bl	80043e4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003dc6:	f7fe fb7b 	bl	80024c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003dca:	f000 fb5b 	bl	8004484 <MX_TIM2_Init>
  MX_DAC_Init();
 8003dce:	f7fe fc8f 	bl	80026f0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	BSP_SDRAM_Init();
 8003dd2:	f7fe f971 	bl	80020b8 <BSP_SDRAM_Init>
	BSP_LCD_Init();
 8003dd6:	f7fd fb85 	bl	80014e4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8003dda:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003dde:	2000      	movs	r0, #0
 8003de0:	f7fd fc02 	bl	80015e8 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8003de4:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7fd fbfd 	bl	80015e8 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8003dee:	2001      	movs	r0, #1
 8003df0:	f7fd fc5e 	bl	80016b0 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8003df4:	f7fd ff08 	bl	8001c08 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8003df8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003dfc:	f7fd fcb4 	bl	8001768 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003e00:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003e04:	f7fd fc7c 	bl	8001700 <BSP_LCD_SetBackColor>
	BSP_TS_Init(240,320);
 8003e08:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003e0c:	20f0      	movs	r0, #240	@ 0xf0
 8003e0e:	f7fe fb1d 	bl	800244c <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	BSP_LCD_SetFont(&Font16);
 8003e12:	4824      	ldr	r0, [pc, #144]	@ (8003ea4 <main+0x110>)
 8003e14:	f7fd fc8e 	bl	8001734 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	f7fd fc58 	bl	80016d0 <BSP_LCD_SetTextColor>
	sprintf(texto,"KHz");
 8003e20:	4921      	ldr	r1, [pc, #132]	@ (8003ea8 <main+0x114>)
 8003e22:	4822      	ldr	r0, [pc, #136]	@ (8003eac <main+0x118>)
 8003e24:	f006 fdc8 	bl	800a9b8 <siprintf>
	BSP_LCD_DisplayStringAt(0, 224, texto, CENTER_MODE, 0);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003eac <main+0x118>)
 8003e30:	21e0      	movs	r1, #224	@ 0xe0
 8003e32:	2000      	movs	r0, #0
 8003e34:	f7fd fd0a 	bl	800184c <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(14,(uint8_t*)"24KHz", 0);
	BSP_LCD_DisplayStringAt(0, 0, "Input Signal", CENTER_MODE, 0);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <main+0x11c>)
 8003e40:	2100      	movs	r1, #0
 8003e42:	2000      	movs	r0, #0
 8003e44:	f7fd fd02 	bl	800184c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 0, "Voltage", CENTER_MODE, 1);
 8003e48:	2301      	movs	r3, #1
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <main+0x120>)
 8003e50:	2100      	movs	r1, #0
 8003e52:	2000      	movs	r0, #0
 8003e54:	f7fd fcfa 	bl	800184c <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(9,(uint8_t*)" 0123456789");
	BSP_LCD_DrawHLine(0, 11, 240);
 8003e58:	22f0      	movs	r2, #240	@ 0xf0
 8003e5a:	210b      	movs	r1, #11
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7fd fe53 	bl	8001b08 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(11, 0, 320);
 8003e62:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e66:	2100      	movs	r1, #0
 8003e68:	200b      	movs	r0, #11
 8003e6a:	f7fd fe8b 	bl	8001b84 <BSP_LCD_DrawVLine>
	contador=0;
 8003e6e:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <main+0x124>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	801a      	strh	r2, [r3, #0]
	//Generate_Sine_Wave(dac_data, BUFFER_SIZE, ADC_RES/2); // 2048 para señal de 12 bits (amplitud)
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, &dac_data, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8003e74:	2300      	movs	r3, #0
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	23ff      	movs	r3, #255	@ 0xff
 8003e7a:	4a10      	ldr	r2, [pc, #64]	@ (8003ebc <main+0x128>)
 8003e7c:	2110      	movs	r1, #16
 8003e7e:	4810      	ldr	r0, [pc, #64]	@ (8003ec0 <main+0x12c>)
 8003e80:	f001 f950 	bl	8005124 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8003e84:	480f      	ldr	r0, [pc, #60]	@ (8003ec4 <main+0x130>)
 8003e86:	f005 ffef 	bl	8009e68 <HAL_TIM_Base_Start>

	  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, BUFFER_SIZE) != HAL_OK)
 8003e8a:	22ff      	movs	r2, #255	@ 0xff
 8003e8c:	490e      	ldr	r1, [pc, #56]	@ (8003ec8 <main+0x134>)
 8003e8e:	480f      	ldr	r0, [pc, #60]	@ (8003ecc <main+0x138>)
 8003e90:	f000 fc54 	bl	800473c <HAL_ADC_Start_DMA>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <main+0x10c>
	  {
	    /* Start Conversation Error */
	    Error_Handler();
 8003e9a:	f000 f89b 	bl	8003fd4 <Error_Handler>
	  }


  while (1)
 8003e9e:	bf00      	nop
 8003ea0:	bf00      	nop
 8003ea2:	e7fd      	b.n	8003ea0 <main+0x10c>
 8003ea4:	20000078 	.word	0x20000078
 8003ea8:	0800b310 	.word	0x0800b310
 8003eac:	20000658 	.word	0x20000658
 8003eb0:	0800b314 	.word	0x0800b314
 8003eb4:	0800b324 	.word	0x0800b324
 8003eb8:	20000654 	.word	0x20000654
 8003ebc:	20000680 	.word	0x20000680
 8003ec0:	2000046c 	.word	0x2000046c
 8003ec4:	20001f54 	.word	0x20001f54
 8003ec8:	20000a7c 	.word	0x20000a7c
 8003ecc:	200003bc 	.word	0x200003bc

08003ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b094      	sub	sp, #80	@ 0x50
 8003ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed6:	f107 0320 	add.w	r3, r7, #32
 8003eda:	2230      	movs	r2, #48	@ 0x30
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f006 fd8a 	bl	800a9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <SystemClock_Config+0xd8>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa8 <SystemClock_Config+0xd8>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f04:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <SystemClock_Config+0xd8>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f10:	2300      	movs	r3, #0
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <SystemClock_Config+0xdc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a24      	ldr	r2, [pc, #144]	@ (8003fac <SystemClock_Config+0xdc>)
 8003f1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <SystemClock_Config+0xdc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f36:	2302      	movs	r3, #2
 8003f38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f40:	2304      	movs	r3, #4
 8003f42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003f44:	23b4      	movs	r3, #180	@ 0xb4
 8003f46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f50:	f107 0320 	add.w	r3, r7, #32
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 fa29 	bl	80083ac <HAL_RCC_OscConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003f60:	f000 f838 	bl	8003fd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003f64:	f004 f9d2 	bl	800830c <HAL_PWREx_EnableOverDrive>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003f6e:	f000 f831 	bl	8003fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f72:	230f      	movs	r3, #15
 8003f74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f76:	2302      	movs	r3, #2
 8003f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f7e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	2105      	movs	r1, #5
 8003f90:	4618      	mov	r0, r3
 8003f92:	f004 fc83 	bl	800889c <HAL_RCC_ClockConfig>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003f9c:	f000 f81a 	bl	8003fd4 <Error_Handler>
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	3750      	adds	r7, #80	@ 0x50
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000

08003fb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003fc2:	f000 fb33 	bl	800462c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40001000 	.word	0x40001000

08003fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd8:	b672      	cpsid	i
}
 8003fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f7fc fef5 	bl	8000dcc <BSP_LED_On>
  while (1)
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <Error_Handler+0xe>
	...

08003fe8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003fec:	4b17      	ldr	r3, [pc, #92]	@ (800404c <MX_SPI5_Init+0x64>)
 8003fee:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <MX_SPI5_Init+0x68>)
 8003ff0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003ff2:	4b16      	ldr	r3, [pc, #88]	@ (800404c <MX_SPI5_Init+0x64>)
 8003ff4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ff8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003ffa:	4b14      	ldr	r3, [pc, #80]	@ (800404c <MX_SPI5_Init+0x64>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004000:	4b12      	ldr	r3, [pc, #72]	@ (800404c <MX_SPI5_Init+0x64>)
 8004002:	2200      	movs	r2, #0
 8004004:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004006:	4b11      	ldr	r3, [pc, #68]	@ (800404c <MX_SPI5_Init+0x64>)
 8004008:	2200      	movs	r2, #0
 800400a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800400c:	4b0f      	ldr	r3, [pc, #60]	@ (800404c <MX_SPI5_Init+0x64>)
 800400e:	2200      	movs	r2, #0
 8004010:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004012:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <MX_SPI5_Init+0x64>)
 8004014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004018:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800401a:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <MX_SPI5_Init+0x64>)
 800401c:	2218      	movs	r2, #24
 800401e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004020:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <MX_SPI5_Init+0x64>)
 8004022:	2200      	movs	r2, #0
 8004024:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004026:	4b09      	ldr	r3, [pc, #36]	@ (800404c <MX_SPI5_Init+0x64>)
 8004028:	2200      	movs	r2, #0
 800402a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800402c:	4b07      	ldr	r3, [pc, #28]	@ (800404c <MX_SPI5_Init+0x64>)
 800402e:	2200      	movs	r2, #0
 8004030:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <MX_SPI5_Init+0x64>)
 8004034:	220a      	movs	r2, #10
 8004036:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004038:	4804      	ldr	r0, [pc, #16]	@ (800404c <MX_SPI5_Init+0x64>)
 800403a:	f005 f8be 	bl	80091ba <HAL_SPI_Init>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004044:	f7ff ffc6 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004048:	bf00      	nop
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20001e68 	.word	0x20001e68
 8004050:	40015000 	.word	0x40015000

08004054 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <HAL_SPI_MspInit+0x84>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d12c      	bne.n	80040d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <HAL_SPI_MspInit+0x88>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	4a17      	ldr	r2, [pc, #92]	@ (80040dc <HAL_SPI_MspInit+0x88>)
 8004080:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004084:	6453      	str	r3, [r2, #68]	@ 0x44
 8004086:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <HAL_SPI_MspInit+0x88>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <HAL_SPI_MspInit+0x88>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	4a10      	ldr	r2, [pc, #64]	@ (80040dc <HAL_SPI_MspInit+0x88>)
 800409c:	f043 0320 	orr.w	r3, r3, #32
 80040a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <HAL_SPI_MspInit+0x88>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80040ae:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80040b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80040c0:	2305      	movs	r3, #5
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	4619      	mov	r1, r3
 80040ca:	4805      	ldr	r0, [pc, #20]	@ (80040e0 <HAL_SPI_MspInit+0x8c>)
 80040cc:	f002 f9c2 	bl	8006454 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80040d0:	bf00      	nop
 80040d2:	3728      	adds	r7, #40	@ 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40015000 	.word	0x40015000
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40021400 	.word	0x40021400

080040e4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a08      	ldr	r2, [pc, #32]	@ (8004114 <HAL_SPI_MspDeInit+0x30>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10a      	bne.n	800410c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80040f6:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <HAL_SPI_MspDeInit+0x34>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	4a07      	ldr	r2, [pc, #28]	@ (8004118 <HAL_SPI_MspDeInit+0x34>)
 80040fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004100:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004102:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8004106:	4805      	ldr	r0, [pc, #20]	@ (800411c <HAL_SPI_MspDeInit+0x38>)
 8004108:	f002 fb50 	bl	80067ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40015000 	.word	0x40015000
 8004118:	40023800 	.word	0x40023800
 800411c:	40021400 	.word	0x40021400

08004120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <HAL_MspInit+0x4c>)
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	4a0f      	ldr	r2, [pc, #60]	@ (800416c <HAL_MspInit+0x4c>)
 8004130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004134:	6453      	str	r3, [r2, #68]	@ 0x44
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <HAL_MspInit+0x4c>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_MspInit+0x4c>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	4a08      	ldr	r2, [pc, #32]	@ (800416c <HAL_MspInit+0x4c>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	@ 0x40
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_MspInit+0x4c>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800

08004170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08e      	sub	sp, #56	@ 0x38
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	4b33      	ldr	r3, [pc, #204]	@ (8004254 <HAL_InitTick+0xe4>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	4a32      	ldr	r2, [pc, #200]	@ (8004254 <HAL_InitTick+0xe4>)
 800418a:	f043 0310 	orr.w	r3, r3, #16
 800418e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004190:	4b30      	ldr	r3, [pc, #192]	@ (8004254 <HAL_InitTick+0xe4>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800419c:	f107 0210 	add.w	r2, r7, #16
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f004 fd84 	bl	8008cb4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80041b6:	f004 fd69 	bl	8008c8c <HAL_RCC_GetPCLK1Freq>
 80041ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80041bc:	e004      	b.n	80041c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80041be:	f004 fd65 	bl	8008c8c <HAL_RCC_GetPCLK1Freq>
 80041c2:	4603      	mov	r3, r0
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ca:	4a23      	ldr	r2, [pc, #140]	@ (8004258 <HAL_InitTick+0xe8>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	0c9b      	lsrs	r3, r3, #18
 80041d2:	3b01      	subs	r3, #1
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80041d6:	4b21      	ldr	r3, [pc, #132]	@ (800425c <HAL_InitTick+0xec>)
 80041d8:	4a21      	ldr	r2, [pc, #132]	@ (8004260 <HAL_InitTick+0xf0>)
 80041da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80041dc:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <HAL_InitTick+0xec>)
 80041de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80041e4:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <HAL_InitTick+0xec>)
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80041ea:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <HAL_InitTick+0xec>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f0:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <HAL_InitTick+0xec>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <HAL_InitTick+0xec>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80041fc:	4817      	ldr	r0, [pc, #92]	@ (800425c <HAL_InitTick+0xec>)
 80041fe:	f005 fde3 	bl	8009dc8 <HAL_TIM_Base_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004208:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11b      	bne.n	8004248 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004210:	4812      	ldr	r0, [pc, #72]	@ (800425c <HAL_InitTick+0xec>)
 8004212:	f005 fe91 	bl	8009f38 <HAL_TIM_Base_Start_IT>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800421c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004220:	2b00      	cmp	r3, #0
 8004222:	d111      	bne.n	8004248 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004224:	2036      	movs	r0, #54	@ 0x36
 8004226:	f000 ff31 	bl	800508c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d808      	bhi.n	8004242 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004230:	2200      	movs	r2, #0
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	2036      	movs	r0, #54	@ 0x36
 8004236:	f000 ff0d 	bl	8005054 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800423a:	4a0a      	ldr	r2, [pc, #40]	@ (8004264 <HAL_InitTick+0xf4>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	e002      	b.n	8004248 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004248:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800424c:	4618      	mov	r0, r3
 800424e:	3738      	adds	r7, #56	@ 0x38
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	431bde83 	.word	0x431bde83
 800425c:	20001ec0 	.word	0x20001ec0
 8004260:	40001000 	.word	0x40001000
 8004264:	20000094 	.word	0x20000094

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <NMI_Handler+0x4>

08004270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <HardFault_Handler+0x4>

08004278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <MemManage_Handler+0x4>

08004280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <BusFault_Handler+0x4>

08004288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <UsageFault_Handler+0x4>

08004290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80042cc:	4802      	ldr	r0, [pc, #8]	@ (80042d8 <DMA1_Stream6_IRQHandler+0x10>)
 80042ce:	f001 fabb 	bl	8005848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000480 	.word	0x20000480

080042dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042e0:	4802      	ldr	r0, [pc, #8]	@ (80042ec <TIM2_IRQHandler+0x10>)
 80042e2:	f005 fe99 	bl	800a018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20001f54 	.word	0x20001f54

080042f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80042f4:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <TIM6_DAC_IRQHandler+0x20>)
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80042fe:	4804      	ldr	r0, [pc, #16]	@ (8004310 <TIM6_DAC_IRQHandler+0x20>)
 8004300:	f000 ffd2 	bl	80052a8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004304:	4803      	ldr	r0, [pc, #12]	@ (8004314 <TIM6_DAC_IRQHandler+0x24>)
 8004306:	f005 fe87 	bl	800a018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000046c 	.word	0x2000046c
 8004314:	20001ec0 	.word	0x20001ec0

08004318 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800431c:	4802      	ldr	r0, [pc, #8]	@ (8004328 <DMA2_Stream4_IRQHandler+0x10>)
 800431e:	f001 fa93 	bl	8005848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000404 	.word	0x20000404

0800432c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004330:	4802      	ldr	r0, [pc, #8]	@ (800433c <LTDC_IRQHandler+0x10>)
 8004332:	f003 fd29 	bl	8007d88 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200005ac 	.word	0x200005ac

08004340 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004344:	4802      	ldr	r0, [pc, #8]	@ (8004350 <DMA2D_IRQHandler+0x10>)
 8004346:	f001 fe46 	bl	8005fd6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200004e0 	.word	0x200004e0

08004354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800435c:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <_sbrk+0x5c>)
 800435e:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <_sbrk+0x60>)
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <_sbrk+0x64>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <_sbrk+0x64>)
 8004372:	4a12      	ldr	r2, [pc, #72]	@ (80043bc <_sbrk+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004376:	4b10      	ldr	r3, [pc, #64]	@ (80043b8 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d207      	bcs.n	8004394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004384:	f006 fb40 	bl	800aa08 <__errno>
 8004388:	4603      	mov	r3, r0
 800438a:	220c      	movs	r2, #12
 800438c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	e009      	b.n	80043a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004394:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <_sbrk+0x64>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800439a:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <_sbrk+0x64>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	4a05      	ldr	r2, [pc, #20]	@ (80043b8 <_sbrk+0x64>)
 80043a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20030000 	.word	0x20030000
 80043b4:	00000400 	.word	0x00000400
 80043b8:	20001f08 	.word	0x20001f08
 80043bc:	200020e8 	.word	0x200020e8

080043c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <SystemInit+0x20>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <SystemInit+0x20>)
 80043cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f8:	463b      	mov	r3, r7
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004400:	4b1e      	ldr	r3, [pc, #120]	@ (800447c <MX_TIM1_Init+0x98>)
 8004402:	4a1f      	ldr	r2, [pc, #124]	@ (8004480 <MX_TIM1_Init+0x9c>)
 8004404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004406:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <MX_TIM1_Init+0x98>)
 8004408:	2200      	movs	r2, #0
 800440a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440c:	4b1b      	ldr	r3, [pc, #108]	@ (800447c <MX_TIM1_Init+0x98>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004412:	4b1a      	ldr	r3, [pc, #104]	@ (800447c <MX_TIM1_Init+0x98>)
 8004414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441a:	4b18      	ldr	r3, [pc, #96]	@ (800447c <MX_TIM1_Init+0x98>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004420:	4b16      	ldr	r3, [pc, #88]	@ (800447c <MX_TIM1_Init+0x98>)
 8004422:	2200      	movs	r2, #0
 8004424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004426:	4b15      	ldr	r3, [pc, #84]	@ (800447c <MX_TIM1_Init+0x98>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800442c:	4813      	ldr	r0, [pc, #76]	@ (800447c <MX_TIM1_Init+0x98>)
 800442e:	f005 fccb 	bl	8009dc8 <HAL_TIM_Base_Init>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004438:	f7ff fdcc 	bl	8003fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800443c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004440:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	4619      	mov	r1, r3
 8004448:	480c      	ldr	r0, [pc, #48]	@ (800447c <MX_TIM1_Init+0x98>)
 800444a:	f005 fed5 	bl	800a1f8 <HAL_TIM_ConfigClockSource>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004454:	f7ff fdbe 	bl	8003fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004460:	463b      	mov	r3, r7
 8004462:	4619      	mov	r1, r3
 8004464:	4805      	ldr	r0, [pc, #20]	@ (800447c <MX_TIM1_Init+0x98>)
 8004466:	f006 f8fd 	bl	800a664 <HAL_TIMEx_MasterConfigSynchronization>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004470:	f7ff fdb0 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004474:	bf00      	nop
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20001f0c 	.word	0x20001f0c
 8004480:	40010000 	.word	0x40010000

08004484 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	609a      	str	r2, [r3, #8]
 8004496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004498:	463b      	mov	r3, r7
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80044a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 620;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044aa:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 80044ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b0:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80044b6:	4b18      	ldr	r3, [pc, #96]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044bc:	4b16      	ldr	r3, [pc, #88]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044c2:	4b15      	ldr	r3, [pc, #84]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044c4:	2280      	movs	r2, #128	@ 0x80
 80044c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044c8:	4813      	ldr	r0, [pc, #76]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044ca:	f005 fc7d 	bl	8009dc8 <HAL_TIM_Base_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80044d4:	f7ff fd7e 	bl	8003fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	4619      	mov	r1, r3
 80044e4:	480c      	ldr	r0, [pc, #48]	@ (8004518 <MX_TIM2_Init+0x94>)
 80044e6:	f005 fe87 	bl	800a1f8 <HAL_TIM_ConfigClockSource>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80044f0:	f7ff fd70 	bl	8003fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044f4:	2320      	movs	r3, #32
 80044f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044fc:	463b      	mov	r3, r7
 80044fe:	4619      	mov	r1, r3
 8004500:	4805      	ldr	r0, [pc, #20]	@ (8004518 <MX_TIM2_Init+0x94>)
 8004502:	f006 f8af 	bl	800a664 <HAL_TIMEx_MasterConfigSynchronization>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800450c:	f7ff fd62 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20001f54 	.word	0x20001f54

0800451c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_TIM_Base_MspInit+0x70>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10e      	bne.n	800454c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b17      	ldr	r3, [pc, #92]	@ (8004590 <HAL_TIM_Base_MspInit+0x74>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_TIM_Base_MspInit+0x74>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6453      	str	r3, [r2, #68]	@ 0x44
 800453e:	4b14      	ldr	r3, [pc, #80]	@ (8004590 <HAL_TIM_Base_MspInit+0x74>)
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800454a:	e01a      	b.n	8004582 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004554:	d115      	bne.n	8004582 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <HAL_TIM_Base_MspInit+0x74>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	4a0c      	ldr	r2, [pc, #48]	@ (8004590 <HAL_TIM_Base_MspInit+0x74>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	6413      	str	r3, [r2, #64]	@ 0x40
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <HAL_TIM_Base_MspInit+0x74>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004572:	2200      	movs	r2, #0
 8004574:	2100      	movs	r1, #0
 8004576:	201c      	movs	r0, #28
 8004578:	f000 fd6c 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800457c:	201c      	movs	r0, #28
 800457e:	f000 fd85 	bl	800508c <HAL_NVIC_EnableIRQ>
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40010000 	.word	0x40010000
 8004590:	40023800 	.word	0x40023800

08004594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004594:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004598:	f7ff ff12 	bl	80043c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800459c:	480c      	ldr	r0, [pc, #48]	@ (80045d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800459e:	490d      	ldr	r1, [pc, #52]	@ (80045d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045a0:	4a0d      	ldr	r2, [pc, #52]	@ (80045d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045a4:	e002      	b.n	80045ac <LoopCopyDataInit>

080045a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045aa:	3304      	adds	r3, #4

080045ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045b0:	d3f9      	bcc.n	80045a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045b2:	4a0a      	ldr	r2, [pc, #40]	@ (80045dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045b4:	4c0a      	ldr	r4, [pc, #40]	@ (80045e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80045b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045b8:	e001      	b.n	80045be <LoopFillZerobss>

080045ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045bc:	3204      	adds	r2, #4

080045be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045c0:	d3fb      	bcc.n	80045ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80045c2:	f006 fa27 	bl	800aa14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045c6:	f7ff fbe5 	bl	8003d94 <main>
  bx  lr    
 80045ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80045cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80045d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045d4:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80045d8:	0800da34 	.word	0x0800da34
  ldr r2, =_sbss
 80045dc:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80045e0:	200020e8 	.word	0x200020e8

080045e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045e4:	e7fe      	b.n	80045e4 <ADC_IRQHandler>
	...

080045e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004628 <HAL_Init+0x40>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004628 <HAL_Init+0x40>)
 80045f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <HAL_Init+0x40>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004628 <HAL_Init+0x40>)
 80045fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004604:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <HAL_Init+0x40>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a07      	ldr	r2, [pc, #28]	@ (8004628 <HAL_Init+0x40>)
 800460a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004610:	2003      	movs	r0, #3
 8004612:	f000 fd14 	bl	800503e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004616:	200f      	movs	r0, #15
 8004618:	f7ff fdaa 	bl	8004170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800461c:	f7ff fd80 	bl	8004120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023c00 	.word	0x40023c00

0800462c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <HAL_IncTick+0x20>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_IncTick+0x24>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4413      	add	r3, r2
 800463c:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <HAL_IncTick+0x24>)
 800463e:	6013      	str	r3, [r2, #0]
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000098 	.word	0x20000098
 8004650:	20001f9c 	.word	0x20001f9c

08004654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return uwTick;
 8004658:	4b03      	ldr	r3, [pc, #12]	@ (8004668 <HAL_GetTick+0x14>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20001f9c 	.word	0x20001f9c

0800466c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004674:	f7ff ffee 	bl	8004654 <HAL_GetTick>
 8004678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d005      	beq.n	8004692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004686:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <HAL_Delay+0x44>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004692:	bf00      	nop
 8004694:	f7ff ffde 	bl	8004654 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d8f7      	bhi.n	8004694 <HAL_Delay+0x28>
  {
  }
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000098 	.word	0x20000098

080046b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e033      	b.n	8004732 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd ff48 	bl	8002568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80046fa:	f023 0302 	bic.w	r3, r3, #2
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa6e 	bl	8004be8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	f043 0201 	orr.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	@ 0x40
 8004722:	e001      	b.n	8004728 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_ADC_Start_DMA+0x1e>
 8004756:	2302      	movs	r3, #2
 8004758:	e0e9      	b.n	800492e <HAL_ADC_Start_DMA+0x1f2>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d018      	beq.n	80047a2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004780:	4b6d      	ldr	r3, [pc, #436]	@ (8004938 <HAL_ADC_Start_DMA+0x1fc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6d      	ldr	r2, [pc, #436]	@ (800493c <HAL_ADC_Start_DMA+0x200>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0c9a      	lsrs	r2, r3, #18
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004794:	e002      	b.n	800479c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3b01      	subs	r3, #1
 800479a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f9      	bne.n	8004796 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b0:	d107      	bne.n	80047c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 80a1 	bne.w	8004914 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004810:	d106      	bne.n	8004820 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004816:	f023 0206 	bic.w	r2, r3, #6
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	645a      	str	r2, [r3, #68]	@ 0x44
 800481e:	e002      	b.n	8004826 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800482e:	4b44      	ldr	r3, [pc, #272]	@ (8004940 <HAL_ADC_Start_DMA+0x204>)
 8004830:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	4a43      	ldr	r2, [pc, #268]	@ (8004944 <HAL_ADC_Start_DMA+0x208>)
 8004838:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	4a42      	ldr	r2, [pc, #264]	@ (8004948 <HAL_ADC_Start_DMA+0x20c>)
 8004840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	4a41      	ldr	r2, [pc, #260]	@ (800494c <HAL_ADC_Start_DMA+0x210>)
 8004848:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004852:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004862:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004872:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	334c      	adds	r3, #76	@ 0x4c
 800487e:	4619      	mov	r1, r3
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f000 ff88 	bl	8005798 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2b00      	cmp	r3, #0
 8004892:	d12a      	bne.n	80048ea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2d      	ldr	r2, [pc, #180]	@ (8004950 <HAL_ADC_Start_DMA+0x214>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d015      	beq.n	80048ca <HAL_ADC_Start_DMA+0x18e>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004954 <HAL_ADC_Start_DMA+0x218>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d105      	bne.n	80048b4 <HAL_ADC_Start_DMA+0x178>
 80048a8:	4b25      	ldr	r3, [pc, #148]	@ (8004940 <HAL_ADC_Start_DMA+0x204>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <HAL_ADC_Start_DMA+0x21c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d136      	bne.n	800492c <HAL_ADC_Start_DMA+0x1f0>
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_ADC_Start_DMA+0x204>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d130      	bne.n	800492c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d129      	bne.n	800492c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	e020      	b.n	800492c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <HAL_ADC_Start_DMA+0x214>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d11b      	bne.n	800492c <HAL_ADC_Start_DMA+0x1f0>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d114      	bne.n	800492c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004910:	609a      	str	r2, [r3, #8]
 8004912:	e00b      	b.n	800492c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	f043 0210 	orr.w	r2, r3, #16
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004924:	f043 0201 	orr.w	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000090 	.word	0x20000090
 800493c:	431bde83 	.word	0x431bde83
 8004940:	40012300 	.word	0x40012300
 8004944:	08004de1 	.word	0x08004de1
 8004948:	08004e9b 	.word	0x08004e9b
 800494c:	08004eb7 	.word	0x08004eb7
 8004950:	40012000 	.word	0x40012000
 8004954:	40012100 	.word	0x40012100
 8004958:	40012200 	.word	0x40012200

0800495c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x1c>
 800499c:	2302      	movs	r3, #2
 800499e:	e113      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x244>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b09      	cmp	r3, #9
 80049ae:	d925      	bls.n	80049fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68d9      	ldr	r1, [r3, #12]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	4613      	mov	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	3b1e      	subs	r3, #30
 80049c6:	2207      	movs	r2, #7
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43da      	mvns	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	400a      	ands	r2, r1
 80049d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68d9      	ldr	r1, [r3, #12]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	4618      	mov	r0, r3
 80049e8:	4603      	mov	r3, r0
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4403      	add	r3, r0
 80049ee:	3b1e      	subs	r3, #30
 80049f0:	409a      	lsls	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	e022      	b.n	8004a42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6919      	ldr	r1, [r3, #16]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	2207      	movs	r2, #7
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43da      	mvns	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6919      	ldr	r1, [r3, #16]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4403      	add	r3, r0
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d824      	bhi.n	8004a94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	3b05      	subs	r3, #5
 8004a5c:	221f      	movs	r2, #31
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43da      	mvns	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	400a      	ands	r2, r1
 8004a6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4618      	mov	r0, r3
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	3b05      	subs	r3, #5
 8004a86:	fa00 f203 	lsl.w	r2, r0, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a92:	e04c      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	d824      	bhi.n	8004ae6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	3b23      	subs	r3, #35	@ 0x23
 8004aae:	221f      	movs	r2, #31
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	400a      	ands	r2, r1
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	4618      	mov	r0, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3b23      	subs	r3, #35	@ 0x23
 8004ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ae4:	e023      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	3b41      	subs	r3, #65	@ 0x41
 8004af8:	221f      	movs	r2, #31
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43da      	mvns	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	400a      	ands	r2, r1
 8004b06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	4618      	mov	r0, r3
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	3b41      	subs	r3, #65	@ 0x41
 8004b22:	fa00 f203 	lsl.w	r2, r0, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b2e:	4b29      	ldr	r3, [pc, #164]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x250>)
 8004b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a28      	ldr	r2, [pc, #160]	@ (8004bd8 <HAL_ADC_ConfigChannel+0x254>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d10f      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x1d8>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b12      	cmp	r3, #18
 8004b42:	d10b      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd8 <HAL_ADC_ConfigChannel+0x254>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d12b      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x23a>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bdc <HAL_ADC_ConfigChannel+0x258>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <HAL_ADC_ConfigChannel+0x1f4>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b11      	cmp	r3, #17
 8004b76:	d122      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a11      	ldr	r2, [pc, #68]	@ (8004bdc <HAL_ADC_ConfigChannel+0x258>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d111      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b9a:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <HAL_ADC_ConfigChannel+0x25c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <HAL_ADC_ConfigChannel+0x260>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	0c9a      	lsrs	r2, r3, #18
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004bb0:	e002      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f9      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012300 	.word	0x40012300
 8004bd8:	40012000 	.word	0x40012000
 8004bdc:	10000012 	.word	0x10000012
 8004be0:	20000090 	.word	0x20000090
 8004be4:	431bde83 	.word	0x431bde83

08004be8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bf0:	4b79      	ldr	r3, [pc, #484]	@ (8004dd8 <ADC_Init+0x1f0>)
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	021a      	lsls	r2, r3, #8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6899      	ldr	r1, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	4a58      	ldr	r2, [pc, #352]	@ (8004ddc <ADC_Init+0x1f4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	e00f      	b.n	8004ce6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ce4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0202 	bic.w	r2, r2, #2
 8004cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6899      	ldr	r1, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7e1b      	ldrb	r3, [r3, #24]
 8004d00:	005a      	lsls	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d22:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004d32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	035a      	lsls	r2, r3, #13
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	e007      	b.n	8004d5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d5a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	051a      	lsls	r2, r3, #20
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6899      	ldr	r1, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d9e:	025a      	lsls	r2, r3, #9
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6899      	ldr	r1, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	029a      	lsls	r2, r3, #10
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40012300 	.word	0x40012300
 8004ddc:	0f000001 	.word	0x0f000001

08004de0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d13c      	bne.n	8004e74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d12b      	bne.n	8004e6c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d127      	bne.n	8004e6c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d006      	beq.n	8004e38 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d119      	bne.n	8004e6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0220 	bic.w	r2, r2, #32
 8004e46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	f043 0201 	orr.w	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7fe fa33 	bl	80032d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e72:	e00e      	b.n	8004e92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fd75 	bl	8004970 <HAL_ADC_ErrorCallback>
}
 8004e86:	e004      	b.n	8004e92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	4798      	blx	r3
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff fd57 	bl	800495c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2240      	movs	r2, #64	@ 0x40
 8004ec8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ece:	f043 0204 	orr.w	r2, r3, #4
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff fd4a 	bl	8004970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f00:	4013      	ands	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f16:	4a04      	ldr	r2, [pc, #16]	@ (8004f28 <__NVIC_SetPriorityGrouping+0x44>)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	60d3      	str	r3, [r2, #12]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <__NVIC_GetPriorityGrouping+0x18>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	f003 0307 	and.w	r3, r3, #7
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db0b      	blt.n	8004f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	4907      	ldr	r1, [pc, #28]	@ (8004f80 <__NVIC_EnableIRQ+0x38>)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2001      	movs	r0, #1
 8004f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e100 	.word	0xe000e100

08004f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	db0a      	blt.n	8004fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	490c      	ldr	r1, [pc, #48]	@ (8004fd0 <__NVIC_SetPriority+0x4c>)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fac:	e00a      	b.n	8004fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4908      	ldr	r1, [pc, #32]	@ (8004fd4 <__NVIC_SetPriority+0x50>)
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	761a      	strb	r2, [r3, #24]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000e100 	.word	0xe000e100
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	@ 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f1c3 0307 	rsb	r3, r3, #7
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf28      	it	cs
 8004ff6:	2304      	movcs	r3, #4
 8004ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d902      	bls.n	8005008 <NVIC_EncodePriority+0x30>
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3b03      	subs	r3, #3
 8005006:	e000      	b.n	800500a <NVIC_EncodePriority+0x32>
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	401a      	ands	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005020:	f04f 31ff 	mov.w	r1, #4294967295
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	43d9      	mvns	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005030:	4313      	orrs	r3, r2
         );
}
 8005032:	4618      	mov	r0, r3
 8005034:	3724      	adds	r7, #36	@ 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ff4c 	bl	8004ee4 <__NVIC_SetPriorityGrouping>
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005066:	f7ff ff61 	bl	8004f2c <__NVIC_GetPriorityGrouping>
 800506a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	6978      	ldr	r0, [r7, #20]
 8005072:	f7ff ffb1 	bl	8004fd8 <NVIC_EncodePriority>
 8005076:	4602      	mov	r2, r0
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff80 	bl	8004f84 <__NVIC_SetPriority>
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff54 	bl	8004f48 <__NVIC_EnableIRQ>
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e00e      	b.n	80050d8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	795b      	ldrb	r3, [r3, #5]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fd faee 	bl	80026ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e014      	b.n	800511c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	791b      	ldrb	r3, [r3, #4]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd fb1e 	bl	8002744 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0a2      	b.n	8005286 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	795b      	ldrb	r3, [r3, #5]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_DAC_Start_DMA+0x28>
 8005148:	2302      	movs	r3, #2
 800514a:	e09c      	b.n	8005286 <HAL_DAC_Start_DMA+0x162>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2202      	movs	r2, #2
 8005156:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d129      	bne.n	80051b2 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4a4b      	ldr	r2, [pc, #300]	@ (8005290 <HAL_DAC_Start_DMA+0x16c>)
 8005164:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4a4a      	ldr	r2, [pc, #296]	@ (8005294 <HAL_DAC_Start_DMA+0x170>)
 800516c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4a49      	ldr	r2, [pc, #292]	@ (8005298 <HAL_DAC_Start_DMA+0x174>)
 8005174:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005184:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_DAC_Start_DMA+0x70>
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b04      	cmp	r3, #4
 8005190:	d005      	beq.n	800519e <HAL_DAC_Start_DMA+0x7a>
 8005192:	e009      	b.n	80051a8 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	613b      	str	r3, [r7, #16]
        break;
 800519c:	e033      	b.n	8005206 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	613b      	str	r3, [r7, #16]
        break;
 80051a6:	e02e      	b.n	8005206 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3310      	adds	r3, #16
 80051ae:	613b      	str	r3, [r7, #16]
        break;
 80051b0:	e029      	b.n	8005206 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4a39      	ldr	r2, [pc, #228]	@ (800529c <HAL_DAC_Start_DMA+0x178>)
 80051b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	4a38      	ldr	r2, [pc, #224]	@ (80052a0 <HAL_DAC_Start_DMA+0x17c>)
 80051c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	4a37      	ldr	r2, [pc, #220]	@ (80052a4 <HAL_DAC_Start_DMA+0x180>)
 80051c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80051d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_DAC_Start_DMA+0xc4>
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d005      	beq.n	80051f2 <HAL_DAC_Start_DMA+0xce>
 80051e6:	e009      	b.n	80051fc <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	613b      	str	r3, [r7, #16]
        break;
 80051f0:	e009      	b.n	8005206 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3318      	adds	r3, #24
 80051f8:	613b      	str	r3, [r7, #16]
        break;
 80051fa:	e004      	b.n	8005206 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	331c      	adds	r3, #28
 8005202:	613b      	str	r3, [r7, #16]
        break;
 8005204:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d111      	bne.n	8005230 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800521a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6898      	ldr	r0, [r3, #8]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	f000 fab7 	bl	8005798 <HAL_DMA_Start_IT>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]
 800522e:	e010      	b.n	8005252 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800523e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68d8      	ldr	r0, [r3, #12]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	f000 faa5 	bl	8005798 <HAL_DMA_Start_IT>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10c      	bne.n	8005278 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2201      	movs	r2, #1
 800526c:	409a      	lsls	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e005      	b.n	8005284 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f043 0204 	orr.w	r2, r3, #4
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	08005457 	.word	0x08005457
 8005294:	08005479 	.word	0x08005479
 8005298:	08005495 	.word	0x08005495
 800529c:	08005513 	.word	0x08005513
 80052a0:	08005535 	.word	0x08005535
 80052a4:	08005551 	.word	0x08005551

080052a8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01d      	beq.n	8005306 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d018      	beq.n	8005306 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2204      	movs	r2, #4
 80052d8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80052ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052fe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f845 	bl	8005390 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01d      	beq.n	800534c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f043 0202 	orr.w	r2, r3, #2
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005334:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005344:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8d9 	bl	80054fe <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	@ 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_DAC_ConfigChannel+0x1c>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e042      	b.n	800544a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	795b      	ldrb	r3, [r3, #5]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_DAC_ConfigChannel+0x2c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e03c      	b.n	800544a <HAL_DAC_ConfigChannel+0xa6>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2202      	movs	r2, #2
 80053da:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4313      	orrs	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6819      	ldr	r1, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	22c0      	movs	r2, #192	@ 0xc0
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43da      	mvns	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	400a      	ands	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005448:	7ffb      	ldrb	r3, [r7, #31]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3724      	adds	r7, #36	@ 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff ff75 	bl	8005354 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	711a      	strb	r2, [r3, #4]
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff ff6e 	bl	8005368 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f043 0204 	orr.w	r2, r3, #4
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff ff64 	bl	800537c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	711a      	strb	r2, [r3, #4]
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff ffce 	bl	80054c2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	711a      	strb	r2, [r3, #4]
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff ffc7 	bl	80054d6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff ffbd 	bl	80054ea <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	711a      	strb	r2, [r3, #4]
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800558c:	f7ff f862 	bl	8004654 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e099      	b.n	80056d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055bc:	e00f      	b.n	80055de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055be:	f7ff f849 	bl	8004654 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d908      	bls.n	80055de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2203      	movs	r2, #3
 80055d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e078      	b.n	80056d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e8      	bne.n	80055be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4b38      	ldr	r3, [pc, #224]	@ (80056d8 <HAL_DMA_Init+0x158>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005634:	2b04      	cmp	r3, #4
 8005636:	d107      	bne.n	8005648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	4313      	orrs	r3, r2
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	2b04      	cmp	r3, #4
 8005670:	d117      	bne.n	80056a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00e      	beq.n	80056a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 facd 	bl	8005c24 <DMA_CheckFifoParam>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2240      	movs	r2, #64	@ 0x40
 8005694:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800569e:	2301      	movs	r3, #1
 80056a0:	e016      	b.n	80056d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa84 	bl	8005bb8 <DMA_CalcBaseAndBitshift>
 80056b0:	4603      	mov	r3, r0
 80056b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b8:	223f      	movs	r2, #63	@ 0x3f
 80056ba:	409a      	lsls	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	f010803f 	.word	0xf010803f

080056dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e050      	b.n	8005790 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d101      	bne.n	80056fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	e048      	b.n	8005790 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2221      	movs	r2, #33	@ 0x21
 800573c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa3a 	bl	8005bb8 <DMA_CalcBaseAndBitshift>
 8005744:	4603      	mov	r3, r0
 8005746:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005770:	223f      	movs	r2, #63	@ 0x3f
 8005772:	409a      	lsls	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_DMA_Start_IT+0x26>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e040      	b.n	8005840 <HAL_DMA_Start_IT+0xa8>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d12f      	bne.n	8005832 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f9b8 	bl	8005b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f0:	223f      	movs	r2, #63	@ 0x3f
 80057f2:	409a      	lsls	r2, r3
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0216 	orr.w	r2, r2, #22
 8005806:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0208 	orr.w	r2, r2, #8
 800581e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e005      	b.n	800583e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800583a:	2302      	movs	r3, #2
 800583c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800583e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005854:	4b8e      	ldr	r3, [pc, #568]	@ (8005a90 <HAL_DMA_IRQHandler+0x248>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a8e      	ldr	r2, [pc, #568]	@ (8005a94 <HAL_DMA_IRQHandler+0x24c>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0a9b      	lsrs	r3, r3, #10
 8005860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	2208      	movs	r2, #8
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01a      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d013      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0204 	bic.w	r2, r2, #4
 800589a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a0:	2208      	movs	r2, #8
 80058a2:	409a      	lsls	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ac:	f043 0201 	orr.w	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	2201      	movs	r2, #1
 80058d8:	409a      	lsls	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e2:	f043 0202 	orr.w	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ee:	2204      	movs	r2, #4
 80058f0:	409a      	lsls	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d012      	beq.n	8005920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800590c:	2204      	movs	r2, #4
 800590e:	409a      	lsls	r2, r3
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005918:	f043 0204 	orr.w	r2, r3, #4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	2210      	movs	r2, #16
 8005926:	409a      	lsls	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d043      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d03c      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005942:	2210      	movs	r2, #16
 8005944:	409a      	lsls	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d018      	beq.n	800598a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d108      	bne.n	8005978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d024      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
 8005976:	e01f      	b.n	80059b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
 8005988:	e016      	b.n	80059b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d107      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0208 	bic.w	r2, r2, #8
 80059a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059bc:	2220      	movs	r2, #32
 80059be:	409a      	lsls	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 808f 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8087 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059de:	2220      	movs	r2, #32
 80059e0:	409a      	lsls	r2, r3
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d136      	bne.n	8005a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0216 	bic.w	r2, r2, #22
 8005a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <HAL_DMA_IRQHandler+0x1da>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0208 	bic.w	r2, r2, #8
 8005a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a36:	223f      	movs	r2, #63	@ 0x3f
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d07e      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
        }
        return;
 8005a5e:	e079      	b.n	8005b54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10d      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d031      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4798      	blx	r3
 8005a8c:	e02c      	b.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
 8005a8e:	bf00      	nop
 8005a90:	20000090 	.word	0x20000090
 8005a94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d023      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
 8005aa8:	e01e      	b.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10f      	bne.n	8005ad8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0210 	bic.w	r2, r2, #16
 8005ac6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d032      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d022      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2205      	movs	r2, #5
 8005b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d307      	bcc.n	8005b30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f2      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x2cc>
 8005b2e:	e000      	b.n	8005b32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
 8005b52:	e000      	b.n	8005b56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b54:	bf00      	nop
    }
  }
}
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b40      	cmp	r3, #64	@ 0x40
 8005b88:	d108      	bne.n	8005b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b9a:	e007      	b.n	8005bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	3b10      	subs	r3, #16
 8005bc8:	4a14      	ldr	r2, [pc, #80]	@ (8005c1c <DMA_CalcBaseAndBitshift+0x64>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bd2:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <DMA_CalcBaseAndBitshift+0x68>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d909      	bls.n	8005bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	1d1a      	adds	r2, r3, #4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bf8:	e007      	b.n	8005c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	aaaaaaab 	.word	0xaaaaaaab
 8005c20:	0800d9e8 	.word	0x0800d9e8

08005c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11f      	bne.n	8005c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d856      	bhi.n	8005cf2 <DMA_CheckFifoParam+0xce>
 8005c44:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <DMA_CheckFifoParam+0x28>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c6f 	.word	0x08005c6f
 8005c54:	08005c5d 	.word	0x08005c5d
 8005c58:	08005cf3 	.word	0x08005cf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d046      	beq.n	8005cf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c6c:	e043      	b.n	8005cf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c76:	d140      	bne.n	8005cfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c7c:	e03d      	b.n	8005cfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c86:	d121      	bne.n	8005ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d837      	bhi.n	8005cfe <DMA_CheckFifoParam+0xda>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <DMA_CheckFifoParam+0x70>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cab 	.word	0x08005cab
 8005c9c:	08005ca5 	.word	0x08005ca5
 8005ca0:	08005cbd 	.word	0x08005cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca8:	e030      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d025      	beq.n	8005d02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cba:	e022      	b.n	8005d02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cc4:	d11f      	bne.n	8005d06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cca:	e01c      	b.n	8005d06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d903      	bls.n	8005cda <DMA_CheckFifoParam+0xb6>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d003      	beq.n	8005ce0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cd8:	e018      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cde:	e015      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e00b      	b.n	8005d0a <DMA_CheckFifoParam+0xe6>
      break;
 8005cf2:	bf00      	nop
 8005cf4:	e00a      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e008      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e006      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;   
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005d0a:	bf00      	nop
    }
  } 
  
  return status; 
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop

08005d1c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e03b      	b.n	8005da6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fc fde8 	bl	8002918 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6c:	f023 0107 	bic.w	r1, r3, #7
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68d1      	ldr	r1, [r2, #12]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	430b      	orrs	r3, r1
 8005d94:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af02      	add	r7, sp, #8
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_DMA2D_Start+0x1c>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e018      	b.n	8005dfc <HAL_DMA2D_Start+0x4e>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fa99 	bl	800631c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d056      	beq.n	8005ece <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e20:	f7fe fc18 	bl	8004654 <HAL_GetTick>
 8005e24:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005e26:	e04b      	b.n	8005ec0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d023      	beq.n	8005e82 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	f043 0202 	orr.w	r2, r3, #2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5e:	f043 0201 	orr.w	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2221      	movs	r2, #33	@ 0x21
 8005e6c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2204      	movs	r2, #4
 8005e72:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e0a5      	b.n	8005fce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d01a      	beq.n	8005ec0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e8a:	f7fe fbe3 	bl	8004654 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <HAL_DMA2D_PollForTransfer+0x9c>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e086      	b.n	8005fce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0ac      	beq.n	8005e28 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d061      	beq.n	8005fb4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ef0:	f7fe fbb0 	bl	8004654 <HAL_GetTick>
 8005ef4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ef6:	e056      	b.n	8005fa6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d02e      	beq.n	8005f68 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2e:	f043 0202 	orr.w	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2229      	movs	r2, #41	@ 0x29
 8005f52:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2204      	movs	r2, #4
 8005f58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e032      	b.n	8005fce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d01a      	beq.n	8005fa6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f70:	f7fe fb70 	bl	8004654 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d302      	bcc.n	8005f86 <HAL_DMA2D_PollForTransfer+0x182>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2203      	movs	r2, #3
 8005f96:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e013      	b.n	8005fce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0a1      	beq.n	8005ef8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2212      	movs	r2, #18
 8005fba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d026      	beq.n	8006046 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d021      	beq.n	8006046 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006010:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006016:	f043 0201 	orr.w	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2201      	movs	r2, #1
 8006024:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2204      	movs	r2, #4
 800602a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d026      	beq.n	800609e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d021      	beq.n	800609e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006068:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2220      	movs	r2, #32
 8006070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	f043 0202 	orr.w	r2, r3, #2
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2204      	movs	r2, #4
 8006082:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d026      	beq.n	80060f6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d021      	beq.n	80060f6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2208      	movs	r2, #8
 80060c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ce:	f043 0204 	orr.w	r2, r3, #4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2204      	movs	r2, #4
 80060da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d013      	beq.n	8006128 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00e      	beq.n	8006128 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006118:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2204      	movs	r2, #4
 8006120:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f853 	bl	80061ce <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d024      	beq.n	800617c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01f      	beq.n	800617c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800614a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2202      	movs	r2, #2
 8006152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01f      	beq.n	80061c6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01a      	beq.n	80061c6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800619e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2210      	movs	r2, #16
 80061a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f80e 	bl	80061e2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_DMA2D_ConfigLayer+0x20>
 8006214:	2302      	movs	r3, #2
 8006216:	e079      	b.n	800630c <HAL_DMA2D_ConfigLayer+0x114>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	3318      	adds	r3, #24
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006242:	4b35      	ldr	r3, [pc, #212]	@ (8006318 <HAL_DMA2D_ConfigLayer+0x120>)
 8006244:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b0a      	cmp	r3, #10
 800624c:	d003      	beq.n	8006256 <HAL_DMA2D_ConfigLayer+0x5e>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b09      	cmp	r3, #9
 8006254:	d107      	bne.n	8006266 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e005      	b.n	8006272 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d120      	bne.n	80062ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	43db      	mvns	r3, r3
 8006282:	ea02 0103 	and.w	r1, r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	430a      	orrs	r2, r1
 800628e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b0a      	cmp	r3, #10
 80062a0:	d003      	beq.n	80062aa <HAL_DMA2D_ConfigLayer+0xb2>
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d127      	bne.n	80062fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80062b8:	e01f      	b.n	80062fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	ea02 0103 	and.w	r1, r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b0a      	cmp	r3, #10
 80062e2:	d003      	beq.n	80062ec <HAL_DMA2D_ConfigLayer+0xf4>
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b09      	cmp	r3, #9
 80062ea:	d106      	bne.n	80062fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062f8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	ff03000f 	.word	0xff03000f

0800631c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800631c:	b480      	push	{r7}
 800631e:	b08b      	sub	sp, #44	@ 0x2c
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006330:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	041a      	lsls	r2, r3, #16
 8006338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633a:	431a      	orrs	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006354:	d174      	bne.n	8006440 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800635c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006364:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800636c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	431a      	orrs	r2, r3
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	4313      	orrs	r3, r2
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
 800638c:	e053      	b.n	8006436 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d106      	bne.n	80063a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4313      	orrs	r3, r2
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a2:	e048      	b.n	8006436 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d111      	bne.n	80063d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	0cdb      	lsrs	r3, r3, #19
 80063b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	0a9b      	lsrs	r3, r3, #10
 80063b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	08db      	lsrs	r3, r3, #3
 80063bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	02db      	lsls	r3, r3, #11
 80063c6:	4313      	orrs	r3, r2
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ce:	e032      	b.n	8006436 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d117      	bne.n	8006408 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	0fdb      	lsrs	r3, r3, #31
 80063dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	0cdb      	lsrs	r3, r3, #19
 80063e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	0adb      	lsrs	r3, r3, #11
 80063e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	08db      	lsrs	r3, r3, #3
 80063ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	029b      	lsls	r3, r3, #10
 80063f8:	431a      	orrs	r2, r3
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	03db      	lsls	r3, r3, #15
 80063fe:	4313      	orrs	r3, r2
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
 8006406:	e016      	b.n	8006436 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	0f1b      	lsrs	r3, r3, #28
 800640c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	0d1b      	lsrs	r3, r3, #20
 8006412:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	0b1b      	lsrs	r3, r3, #12
 8006418:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	011a      	lsls	r2, r3, #4
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	431a      	orrs	r2, r3
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	031b      	lsls	r3, r3, #12
 800642e:	4313      	orrs	r3, r2
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800643e:	e003      	b.n	8006448 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	60da      	str	r2, [r3, #12]
}
 8006448:	bf00      	nop
 800644a:	372c      	adds	r7, #44	@ 0x2c
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006454:	b480      	push	{r7}
 8006456:	b089      	sub	sp, #36	@ 0x24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	e177      	b.n	8006760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006470:	2201      	movs	r2, #1
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4013      	ands	r3, r2
 8006482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	429a      	cmp	r2, r3
 800648a:	f040 8166 	bne.w	800675a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d005      	beq.n	80064a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d130      	bne.n	8006508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	2203      	movs	r2, #3
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	43db      	mvns	r3, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4013      	ands	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064dc:	2201      	movs	r2, #1
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	091b      	lsrs	r3, r3, #4
 80064f2:	f003 0201 	and.w	r2, r3, #1
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	2b03      	cmp	r3, #3
 8006512:	d017      	beq.n	8006544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	2203      	movs	r2, #3
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4013      	ands	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d123      	bne.n	8006598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	08da      	lsrs	r2, r3, #3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3208      	adds	r2, #8
 8006558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	220f      	movs	r2, #15
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4013      	ands	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4313      	orrs	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	08da      	lsrs	r2, r3, #3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3208      	adds	r2, #8
 8006592:	69b9      	ldr	r1, [r7, #24]
 8006594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	2203      	movs	r2, #3
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f003 0203 	and.w	r2, r3, #3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80c0 	beq.w	800675a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	4b66      	ldr	r3, [pc, #408]	@ (8006778 <HAL_GPIO_Init+0x324>)
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	4a65      	ldr	r2, [pc, #404]	@ (8006778 <HAL_GPIO_Init+0x324>)
 80065e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80065ea:	4b63      	ldr	r3, [pc, #396]	@ (8006778 <HAL_GPIO_Init+0x324>)
 80065ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065f6:	4a61      	ldr	r2, [pc, #388]	@ (800677c <HAL_GPIO_Init+0x328>)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	3302      	adds	r3, #2
 80065fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	220f      	movs	r2, #15
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	43db      	mvns	r3, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	4013      	ands	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a58      	ldr	r2, [pc, #352]	@ (8006780 <HAL_GPIO_Init+0x32c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d037      	beq.n	8006692 <HAL_GPIO_Init+0x23e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a57      	ldr	r2, [pc, #348]	@ (8006784 <HAL_GPIO_Init+0x330>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d031      	beq.n	800668e <HAL_GPIO_Init+0x23a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a56      	ldr	r2, [pc, #344]	@ (8006788 <HAL_GPIO_Init+0x334>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d02b      	beq.n	800668a <HAL_GPIO_Init+0x236>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a55      	ldr	r2, [pc, #340]	@ (800678c <HAL_GPIO_Init+0x338>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d025      	beq.n	8006686 <HAL_GPIO_Init+0x232>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a54      	ldr	r2, [pc, #336]	@ (8006790 <HAL_GPIO_Init+0x33c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01f      	beq.n	8006682 <HAL_GPIO_Init+0x22e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a53      	ldr	r2, [pc, #332]	@ (8006794 <HAL_GPIO_Init+0x340>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d019      	beq.n	800667e <HAL_GPIO_Init+0x22a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a52      	ldr	r2, [pc, #328]	@ (8006798 <HAL_GPIO_Init+0x344>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_GPIO_Init+0x226>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a51      	ldr	r2, [pc, #324]	@ (800679c <HAL_GPIO_Init+0x348>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00d      	beq.n	8006676 <HAL_GPIO_Init+0x222>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a50      	ldr	r2, [pc, #320]	@ (80067a0 <HAL_GPIO_Init+0x34c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <HAL_GPIO_Init+0x21e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a4f      	ldr	r2, [pc, #316]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d101      	bne.n	800666e <HAL_GPIO_Init+0x21a>
 800666a:	2309      	movs	r3, #9
 800666c:	e012      	b.n	8006694 <HAL_GPIO_Init+0x240>
 800666e:	230a      	movs	r3, #10
 8006670:	e010      	b.n	8006694 <HAL_GPIO_Init+0x240>
 8006672:	2308      	movs	r3, #8
 8006674:	e00e      	b.n	8006694 <HAL_GPIO_Init+0x240>
 8006676:	2307      	movs	r3, #7
 8006678:	e00c      	b.n	8006694 <HAL_GPIO_Init+0x240>
 800667a:	2306      	movs	r3, #6
 800667c:	e00a      	b.n	8006694 <HAL_GPIO_Init+0x240>
 800667e:	2305      	movs	r3, #5
 8006680:	e008      	b.n	8006694 <HAL_GPIO_Init+0x240>
 8006682:	2304      	movs	r3, #4
 8006684:	e006      	b.n	8006694 <HAL_GPIO_Init+0x240>
 8006686:	2303      	movs	r3, #3
 8006688:	e004      	b.n	8006694 <HAL_GPIO_Init+0x240>
 800668a:	2302      	movs	r3, #2
 800668c:	e002      	b.n	8006694 <HAL_GPIO_Init+0x240>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_GPIO_Init+0x240>
 8006692:	2300      	movs	r3, #0
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	f002 0203 	and.w	r2, r2, #3
 800669a:	0092      	lsls	r2, r2, #2
 800669c:	4093      	lsls	r3, r2
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066a4:	4935      	ldr	r1, [pc, #212]	@ (800677c <HAL_GPIO_Init+0x328>)
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	089b      	lsrs	r3, r3, #2
 80066aa:	3302      	adds	r3, #2
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066b2:	4b3d      	ldr	r3, [pc, #244]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066d6:	4a34      	ldr	r2, [pc, #208]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066dc:	4b32      	ldr	r3, [pc, #200]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006700:	4a29      	ldr	r2, [pc, #164]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006706:	4b28      	ldr	r3, [pc, #160]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	43db      	mvns	r3, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800672a:	4a1f      	ldr	r2, [pc, #124]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006730:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	43db      	mvns	r3, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4013      	ands	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006754:	4a14      	ldr	r2, [pc, #80]	@ (80067a8 <HAL_GPIO_Init+0x354>)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3301      	adds	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b0f      	cmp	r3, #15
 8006764:	f67f ae84 	bls.w	8006470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	3724      	adds	r7, #36	@ 0x24
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800
 800677c:	40013800 	.word	0x40013800
 8006780:	40020000 	.word	0x40020000
 8006784:	40020400 	.word	0x40020400
 8006788:	40020800 	.word	0x40020800
 800678c:	40020c00 	.word	0x40020c00
 8006790:	40021000 	.word	0x40021000
 8006794:	40021400 	.word	0x40021400
 8006798:	40021800 	.word	0x40021800
 800679c:	40021c00 	.word	0x40021c00
 80067a0:	40022000 	.word	0x40022000
 80067a4:	40022400 	.word	0x40022400
 80067a8:	40013c00 	.word	0x40013c00

080067ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e0d9      	b.n	800697c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067c8:	2201      	movs	r2, #1
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4013      	ands	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	f040 80c9 	bne.w	8006976 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80067e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006994 <HAL_GPIO_DeInit+0x1e8>)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	089b      	lsrs	r3, r3, #2
 80067ea:	3302      	adds	r3, #2
 80067ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	220f      	movs	r2, #15
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4013      	ands	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a63      	ldr	r2, [pc, #396]	@ (8006998 <HAL_GPIO_DeInit+0x1ec>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d037      	beq.n	800687e <HAL_GPIO_DeInit+0xd2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a62      	ldr	r2, [pc, #392]	@ (800699c <HAL_GPIO_DeInit+0x1f0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_GPIO_DeInit+0xce>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a61      	ldr	r2, [pc, #388]	@ (80069a0 <HAL_GPIO_DeInit+0x1f4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d02b      	beq.n	8006876 <HAL_GPIO_DeInit+0xca>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a60      	ldr	r2, [pc, #384]	@ (80069a4 <HAL_GPIO_DeInit+0x1f8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d025      	beq.n	8006872 <HAL_GPIO_DeInit+0xc6>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a5f      	ldr	r2, [pc, #380]	@ (80069a8 <HAL_GPIO_DeInit+0x1fc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01f      	beq.n	800686e <HAL_GPIO_DeInit+0xc2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a5e      	ldr	r2, [pc, #376]	@ (80069ac <HAL_GPIO_DeInit+0x200>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d019      	beq.n	800686a <HAL_GPIO_DeInit+0xbe>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a5d      	ldr	r2, [pc, #372]	@ (80069b0 <HAL_GPIO_DeInit+0x204>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_GPIO_DeInit+0xba>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a5c      	ldr	r2, [pc, #368]	@ (80069b4 <HAL_GPIO_DeInit+0x208>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00d      	beq.n	8006862 <HAL_GPIO_DeInit+0xb6>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a5b      	ldr	r2, [pc, #364]	@ (80069b8 <HAL_GPIO_DeInit+0x20c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <HAL_GPIO_DeInit+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a5a      	ldr	r2, [pc, #360]	@ (80069bc <HAL_GPIO_DeInit+0x210>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d101      	bne.n	800685a <HAL_GPIO_DeInit+0xae>
 8006856:	2309      	movs	r3, #9
 8006858:	e012      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 800685a:	230a      	movs	r3, #10
 800685c:	e010      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 800685e:	2308      	movs	r3, #8
 8006860:	e00e      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 8006862:	2307      	movs	r3, #7
 8006864:	e00c      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 8006866:	2306      	movs	r3, #6
 8006868:	e00a      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 800686a:	2305      	movs	r3, #5
 800686c:	e008      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 800686e:	2304      	movs	r3, #4
 8006870:	e006      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 8006872:	2303      	movs	r3, #3
 8006874:	e004      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 8006876:	2302      	movs	r3, #2
 8006878:	e002      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_GPIO_DeInit+0xd4>
 800687e:	2300      	movs	r3, #0
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	f002 0203 	and.w	r2, r2, #3
 8006886:	0092      	lsls	r2, r2, #2
 8006888:	4093      	lsls	r3, r2
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	429a      	cmp	r2, r3
 800688e:	d132      	bne.n	80068f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006890:	4b4b      	ldr	r3, [pc, #300]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	43db      	mvns	r3, r3
 8006898:	4949      	ldr	r1, [pc, #292]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 800689a:	4013      	ands	r3, r2
 800689c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800689e:	4b48      	ldr	r3, [pc, #288]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	4946      	ldr	r1, [pc, #280]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80068ac:	4b44      	ldr	r3, [pc, #272]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	4942      	ldr	r1, [pc, #264]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80068ba:	4b41      	ldr	r3, [pc, #260]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	493f      	ldr	r1, [pc, #252]	@ (80069c0 <HAL_GPIO_DeInit+0x214>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	220f      	movs	r2, #15
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80068d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006994 <HAL_GPIO_DeInit+0x1e8>)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	3302      	adds	r3, #2
 80068e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	43da      	mvns	r2, r3
 80068e8:	482a      	ldr	r0, [pc, #168]	@ (8006994 <HAL_GPIO_DeInit+0x1e8>)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	089b      	lsrs	r3, r3, #2
 80068ee:	400a      	ands	r2, r1
 80068f0:	3302      	adds	r3, #2
 80068f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	2103      	movs	r1, #3
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	43db      	mvns	r3, r3
 8006906:	401a      	ands	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	08da      	lsrs	r2, r3, #3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3208      	adds	r2, #8
 8006914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	220f      	movs	r2, #15
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43db      	mvns	r3, r3
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	08d2      	lsrs	r2, r2, #3
 800692c:	4019      	ands	r1, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3208      	adds	r2, #8
 8006932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	2103      	movs	r1, #3
 8006940:	fa01 f303 	lsl.w	r3, r1, r3
 8006944:	43db      	mvns	r3, r3
 8006946:	401a      	ands	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	2101      	movs	r1, #1
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	2103      	movs	r1, #3
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	43db      	mvns	r3, r3
 8006970:	401a      	ands	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	3301      	adds	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	f67f af22 	bls.w	80067c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40013800 	.word	0x40013800
 8006998:	40020000 	.word	0x40020000
 800699c:	40020400 	.word	0x40020400
 80069a0:	40020800 	.word	0x40020800
 80069a4:	40020c00 	.word	0x40020c00
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40021400 	.word	0x40021400
 80069b0:	40021800 	.word	0x40021800
 80069b4:	40021c00 	.word	0x40021c00
 80069b8:	40022000 	.word	0x40022000
 80069bc:	40022400 	.word	0x40022400
 80069c0:	40013c00 	.word	0x40013c00

080069c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	807b      	strh	r3, [r7, #2]
 80069d0:	4613      	mov	r3, r2
 80069d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069d4:	787b      	ldrb	r3, [r7, #1]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069da:	887a      	ldrh	r2, [r7, #2]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069e0:	e003      	b.n	80069ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069e2:	887b      	ldrh	r3, [r7, #2]
 80069e4:	041a      	lsls	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	619a      	str	r2, [r3, #24]
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a08:	887a      	ldrh	r2, [r7, #2]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	041a      	lsls	r2, r3, #16
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	43d9      	mvns	r1, r3
 8006a14:	887b      	ldrh	r3, [r7, #2]
 8006a16:	400b      	ands	r3, r1
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	619a      	str	r2, [r3, #24]
}
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e12b      	b.n	8006c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fc fa00 	bl	8002e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	@ 0x24
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a90:	f002 f8fc 	bl	8008c8c <HAL_RCC_GetPCLK1Freq>
 8006a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	4a81      	ldr	r2, [pc, #516]	@ (8006ca0 <HAL_I2C_Init+0x274>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d807      	bhi.n	8006ab0 <HAL_I2C_Init+0x84>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a80      	ldr	r2, [pc, #512]	@ (8006ca4 <HAL_I2C_Init+0x278>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	bf94      	ite	ls
 8006aa8:	2301      	movls	r3, #1
 8006aaa:	2300      	movhi	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e006      	b.n	8006abe <HAL_I2C_Init+0x92>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a7d      	ldr	r2, [pc, #500]	@ (8006ca8 <HAL_I2C_Init+0x27c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	bf94      	ite	ls
 8006ab8:	2301      	movls	r3, #1
 8006aba:	2300      	movhi	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e0e7      	b.n	8006c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a78      	ldr	r2, [pc, #480]	@ (8006cac <HAL_I2C_Init+0x280>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	0c9b      	lsrs	r3, r3, #18
 8006ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4a6a      	ldr	r2, [pc, #424]	@ (8006ca0 <HAL_I2C_Init+0x274>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d802      	bhi.n	8006b00 <HAL_I2C_Init+0xd4>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	3301      	adds	r3, #1
 8006afe:	e009      	b.n	8006b14 <HAL_I2C_Init+0xe8>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
 8006b0a:	4a69      	ldr	r2, [pc, #420]	@ (8006cb0 <HAL_I2C_Init+0x284>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	099b      	lsrs	r3, r3, #6
 8006b12:	3301      	adds	r3, #1
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006b26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	495c      	ldr	r1, [pc, #368]	@ (8006ca0 <HAL_I2C_Init+0x274>)
 8006b30:	428b      	cmp	r3, r1
 8006b32:	d819      	bhi.n	8006b68 <HAL_I2C_Init+0x13c>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	1e59      	subs	r1, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b42:	1c59      	adds	r1, r3, #1
 8006b44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b48:	400b      	ands	r3, r1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <HAL_I2C_Init+0x138>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1e59      	subs	r1, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b62:	e051      	b.n	8006c08 <HAL_I2C_Init+0x1dc>
 8006b64:	2304      	movs	r3, #4
 8006b66:	e04f      	b.n	8006c08 <HAL_I2C_Init+0x1dc>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d111      	bne.n	8006b94 <HAL_I2C_Init+0x168>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1e58      	subs	r0, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6859      	ldr	r1, [r3, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	440b      	add	r3, r1
 8006b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b82:	3301      	adds	r3, #1
 8006b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	bf0c      	ite	eq
 8006b8c:	2301      	moveq	r3, #1
 8006b8e:	2300      	movne	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	e012      	b.n	8006bba <HAL_I2C_Init+0x18e>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	1e58      	subs	r0, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6859      	ldr	r1, [r3, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	0099      	lsls	r1, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006baa:	3301      	adds	r3, #1
 8006bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bf0c      	ite	eq
 8006bb4:	2301      	moveq	r3, #1
 8006bb6:	2300      	movne	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_I2C_Init+0x196>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e022      	b.n	8006c08 <HAL_I2C_Init+0x1dc>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10e      	bne.n	8006be8 <HAL_I2C_Init+0x1bc>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1e58      	subs	r0, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6859      	ldr	r1, [r3, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	440b      	add	r3, r1
 8006bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be6:	e00f      	b.n	8006c08 <HAL_I2C_Init+0x1dc>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	1e58      	subs	r0, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	0099      	lsls	r1, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	6809      	ldr	r1, [r1, #0]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69da      	ldr	r2, [r3, #28]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006c36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6911      	ldr	r1, [r2, #16]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68d2      	ldr	r2, [r2, #12]
 8006c42:	4311      	orrs	r1, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	695a      	ldr	r2, [r3, #20]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	000186a0 	.word	0x000186a0
 8006ca4:	001e847f 	.word	0x001e847f
 8006ca8:	003d08ff 	.word	0x003d08ff
 8006cac:	431bde83 	.word	0x431bde83
 8006cb0:	10624dd3 	.word	0x10624dd3

08006cb4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e021      	b.n	8006d0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2224      	movs	r2, #36	@ 0x24
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fc f924 	bl	8002f2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	817b      	strh	r3, [r7, #10]
 8006d26:	460b      	mov	r3, r1
 8006d28:	813b      	strh	r3, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d2e:	f7fd fc91 	bl	8004654 <HAL_GetTick>
 8006d32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	f040 80d9 	bne.w	8006ef4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	2319      	movs	r3, #25
 8006d48:	2201      	movs	r2, #1
 8006d4a:	496d      	ldr	r1, [pc, #436]	@ (8006f00 <HAL_I2C_Mem_Write+0x1ec>)
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fc99 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e0cc      	b.n	8006ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_I2C_Mem_Write+0x56>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e0c5      	b.n	8006ef6 <HAL_I2C_Mem_Write+0x1e2>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d007      	beq.n	8006d90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2221      	movs	r2, #33	@ 0x21
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2240      	movs	r2, #64	@ 0x40
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a3a      	ldr	r2, [r7, #32]
 8006dba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4a4d      	ldr	r2, [pc, #308]	@ (8006f04 <HAL_I2C_Mem_Write+0x1f0>)
 8006dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dd2:	88f8      	ldrh	r0, [r7, #6]
 8006dd4:	893a      	ldrh	r2, [r7, #8]
 8006dd6:	8979      	ldrh	r1, [r7, #10]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	4603      	mov	r3, r0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fad0 	bl	8007388 <I2C_RequestMemoryWrite>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d052      	beq.n	8006e94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e081      	b.n	8006ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fd5e 	bl	80078b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00d      	beq.n	8006e1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d107      	bne.n	8006e1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e06b      	b.n	8006ef6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d11b      	bne.n	8006e94 <HAL_I2C_Mem_Write+0x180>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d017      	beq.n	8006e94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1aa      	bne.n	8006df2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fd51 	bl	8007948 <I2C_WaitOnBTFFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00d      	beq.n	8006ec8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d107      	bne.n	8006ec4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ec2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e016      	b.n	8006ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e000      	b.n	8006ef6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ef4:	2302      	movs	r3, #2
  }
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	00100002 	.word	0x00100002
 8006f04:	ffff0000 	.word	0xffff0000

08006f08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08c      	sub	sp, #48	@ 0x30
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	4608      	mov	r0, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	817b      	strh	r3, [r7, #10]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	813b      	strh	r3, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f22:	f7fd fb97 	bl	8004654 <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	f040 8214 	bne.w	800735e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2319      	movs	r3, #25
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	497b      	ldr	r1, [pc, #492]	@ (800712c <HAL_I2C_Mem_Read+0x224>)
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fb9f 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e207      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_I2C_Mem_Read+0x56>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e200      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d007      	beq.n	8006f84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2222      	movs	r2, #34	@ 0x22
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2240      	movs	r2, #64	@ 0x40
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8007130 <HAL_I2C_Mem_Read+0x228>)
 8006fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fc6:	88f8      	ldrh	r0, [r7, #6]
 8006fc8:	893a      	ldrh	r2, [r7, #8]
 8006fca:	8979      	ldrh	r1, [r7, #10]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fa6c 	bl	80074b4 <I2C_RequestMemoryRead>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e1bc      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d113      	bne.n	8007016 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fee:	2300      	movs	r3, #0
 8006ff0:	623b      	str	r3, [r7, #32]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	623b      	str	r3, [r7, #32]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	623b      	str	r3, [r7, #32]
 8007002:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e190      	b.n	8007338 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800701a:	2b01      	cmp	r3, #1
 800701c:	d11b      	bne.n	8007056 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800702c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	e170      	b.n	8007338 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800705a:	2b02      	cmp	r3, #2
 800705c:	d11b      	bne.n	8007096 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800706c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800707c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	e150      	b.n	8007338 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80070ac:	e144      	b.n	8007338 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	f200 80f1 	bhi.w	800729a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d123      	bne.n	8007108 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fc87 	bl	80079d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e145      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007106:	e117      	b.n	8007338 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710c:	2b02      	cmp	r3, #2
 800710e:	d14e      	bne.n	80071ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007116:	2200      	movs	r2, #0
 8007118:	4906      	ldr	r1, [pc, #24]	@ (8007134 <HAL_I2C_Mem_Read+0x22c>)
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fab2 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e11a      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
 800712a:	bf00      	nop
 800712c:	00100002 	.word	0x00100002
 8007130:	ffff0000 	.word	0xffff0000
 8007134:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007146:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071ac:	e0c4      	b.n	8007338 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	2200      	movs	r2, #0
 80071b6:	496c      	ldr	r1, [pc, #432]	@ (8007368 <HAL_I2C_Mem_Read+0x460>)
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fa63 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0cb      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691a      	ldr	r2, [r3, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	2200      	movs	r2, #0
 8007212:	4955      	ldr	r1, [pc, #340]	@ (8007368 <HAL_I2C_Mem_Read+0x460>)
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fa35 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e09d      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007298:	e04e      	b.n	8007338 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800729a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fb9a 	bl	80079d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e058      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d124      	bne.n	8007338 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d107      	bne.n	8007306 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007304:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800733c:	2b00      	cmp	r3, #0
 800733e:	f47f aeb6 	bne.w	80070ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	e000      	b.n	8007360 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800735e:	2302      	movs	r3, #2
  }
}
 8007360:	4618      	mov	r0, r3
 8007362:	3728      	adds	r7, #40	@ 0x28
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	00010004 	.word	0x00010004

0800736c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737a:	b2db      	uxtb	r3, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	461a      	mov	r2, r3
 8007396:	4603      	mov	r3, r0
 8007398:	817b      	strh	r3, [r7, #10]
 800739a:	460b      	mov	r3, r1
 800739c:	813b      	strh	r3, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f960 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d8:	d103      	bne.n	80073e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e05f      	b.n	80074a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073e6:	897b      	ldrh	r3, [r7, #10]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	6a3a      	ldr	r2, [r7, #32]
 80073fa:	492d      	ldr	r1, [pc, #180]	@ (80074b0 <I2C_RequestMemoryWrite+0x128>)
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f9bb 	bl	8007778 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e04c      	b.n	80074a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007424:	6a39      	ldr	r1, [r7, #32]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fa46 	bl	80078b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00d      	beq.n	800744e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	2b04      	cmp	r3, #4
 8007438:	d107      	bne.n	800744a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007448:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e02b      	b.n	80074a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d105      	bne.n	8007460 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007454:	893b      	ldrh	r3, [r7, #8]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	611a      	str	r2, [r3, #16]
 800745e:	e021      	b.n	80074a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007460:	893b      	ldrh	r3, [r7, #8]
 8007462:	0a1b      	lsrs	r3, r3, #8
 8007464:	b29b      	uxth	r3, r3
 8007466:	b2da      	uxtb	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800746e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007470:	6a39      	ldr	r1, [r7, #32]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fa20 	bl	80078b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	2b04      	cmp	r3, #4
 8007484:	d107      	bne.n	8007496 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007494:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e005      	b.n	80074a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800749a:	893b      	ldrh	r3, [r7, #8]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	00010002 	.word	0x00010002

080074b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	817b      	strh	r3, [r7, #10]
 80074c6:	460b      	mov	r3, r1
 80074c8:	813b      	strh	r3, [r7, #8]
 80074ca:	4613      	mov	r3, r2
 80074cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80074dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f8c2 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00d      	beq.n	8007522 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007514:	d103      	bne.n	800751e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800751c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e0aa      	b.n	8007678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007522:	897b      	ldrh	r3, [r7, #10]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	6a3a      	ldr	r2, [r7, #32]
 8007536:	4952      	ldr	r1, [pc, #328]	@ (8007680 <I2C_RequestMemoryRead+0x1cc>)
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f91d 	bl	8007778 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e097      	b.n	8007678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800755e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007560:	6a39      	ldr	r1, [r7, #32]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f9a8 	bl	80078b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007572:	2b04      	cmp	r3, #4
 8007574:	d107      	bne.n	8007586 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e076      	b.n	8007678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d105      	bne.n	800759c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007590:	893b      	ldrh	r3, [r7, #8]
 8007592:	b2da      	uxtb	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	611a      	str	r2, [r3, #16]
 800759a:	e021      	b.n	80075e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800759c:	893b      	ldrh	r3, [r7, #8]
 800759e:	0a1b      	lsrs	r3, r3, #8
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ac:	6a39      	ldr	r1, [r7, #32]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 f982 	bl	80078b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d107      	bne.n	80075d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e050      	b.n	8007678 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075d6:	893b      	ldrh	r3, [r7, #8]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e2:	6a39      	ldr	r1, [r7, #32]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f967 	bl	80078b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d107      	bne.n	8007608 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007606:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e035      	b.n	8007678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800761a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	2200      	movs	r2, #0
 8007624:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f82b 	bl	8007684 <I2C_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00d      	beq.n	8007650 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800763e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007642:	d103      	bne.n	800764c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800764a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e013      	b.n	8007678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007650:	897b      	ldrh	r3, [r7, #10]
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	4906      	ldr	r1, [pc, #24]	@ (8007680 <I2C_RequestMemoryRead+0x1cc>)
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 f886 	bl	8007778 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e000      	b.n	8007678 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	00010002 	.word	0x00010002

08007684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007694:	e048      	b.n	8007728 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d044      	beq.n	8007728 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769e:	f7fc ffd9 	bl	8004654 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d139      	bne.n	8007728 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	0c1b      	lsrs	r3, r3, #16
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d10d      	bne.n	80076da <I2C_WaitOnFlagUntilTimeout+0x56>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	43da      	mvns	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4013      	ands	r3, r2
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bf0c      	ite	eq
 80076d0:	2301      	moveq	r3, #1
 80076d2:	2300      	movne	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	e00c      	b.n	80076f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	43da      	mvns	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	4013      	ands	r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bf0c      	ite	eq
 80076ec:	2301      	moveq	r3, #1
 80076ee:	2300      	movne	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	461a      	mov	r2, r3
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d116      	bne.n	8007728 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	f043 0220 	orr.w	r2, r3, #32
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e023      	b.n	8007770 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	0c1b      	lsrs	r3, r3, #16
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10d      	bne.n	800774e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	43da      	mvns	r2, r3
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4013      	ands	r3, r2
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	bf0c      	ite	eq
 8007744:	2301      	moveq	r3, #1
 8007746:	2300      	movne	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	461a      	mov	r2, r3
 800774c:	e00c      	b.n	8007768 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	43da      	mvns	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4013      	ands	r3, r2
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf0c      	ite	eq
 8007760:	2301      	moveq	r3, #1
 8007762:	2300      	movne	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	461a      	mov	r2, r3
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	429a      	cmp	r2, r3
 800776c:	d093      	beq.n	8007696 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007786:	e071      	b.n	800786c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007796:	d123      	bne.n	80077e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077cc:	f043 0204 	orr.w	r2, r3, #4
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e067      	b.n	80078b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d041      	beq.n	800786c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e8:	f7fc ff34 	bl	8004654 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d302      	bcc.n	80077fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d136      	bne.n	800786c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	0c1b      	lsrs	r3, r3, #16
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10c      	bne.n	8007822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	43da      	mvns	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4013      	ands	r3, r2
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	bf14      	ite	ne
 800781a:	2301      	movne	r3, #1
 800781c:	2300      	moveq	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	e00b      	b.n	800783a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	43da      	mvns	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4013      	ands	r3, r2
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	bf14      	ite	ne
 8007834:	2301      	movne	r3, #1
 8007836:	2300      	moveq	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d016      	beq.n	800786c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007858:	f043 0220 	orr.w	r2, r3, #32
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e021      	b.n	80078b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b01      	cmp	r3, #1
 8007874:	d10c      	bne.n	8007890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	43da      	mvns	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	4013      	ands	r3, r2
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	bf14      	ite	ne
 8007888:	2301      	movne	r3, #1
 800788a:	2300      	moveq	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	e00b      	b.n	80078a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	43da      	mvns	r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bf14      	ite	ne
 80078a2:	2301      	movne	r3, #1
 80078a4:	2300      	moveq	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f47f af6d 	bne.w	8007788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078c4:	e034      	b.n	8007930 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f8e3 	bl	8007a92 <I2C_IsAcknowledgeFailed>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e034      	b.n	8007940 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d028      	beq.n	8007930 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7fc feb9 	bl	8004654 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11d      	bne.n	8007930 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fe:	2b80      	cmp	r3, #128	@ 0x80
 8007900:	d016      	beq.n	8007930 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791c:	f043 0220 	orr.w	r2, r3, #32
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e007      	b.n	8007940 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800793a:	2b80      	cmp	r3, #128	@ 0x80
 800793c:	d1c3      	bne.n	80078c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007954:	e034      	b.n	80079c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f89b 	bl	8007a92 <I2C_IsAcknowledgeFailed>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e034      	b.n	80079d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d028      	beq.n	80079c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796e:	f7fc fe71 	bl	8004654 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	d302      	bcc.n	8007984 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11d      	bne.n	80079c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b04      	cmp	r3, #4
 8007990:	d016      	beq.n	80079c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e007      	b.n	80079d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d1c3      	bne.n	8007956 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079e4:	e049      	b.n	8007a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d119      	bne.n	8007a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f06f 0210 	mvn.w	r2, #16
 80079fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e030      	b.n	8007a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a28:	f7fc fe14 	bl	8004654 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d302      	bcc.n	8007a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d11d      	bne.n	8007a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a48:	2b40      	cmp	r3, #64	@ 0x40
 8007a4a:	d016      	beq.n	8007a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a66:	f043 0220 	orr.w	r2, r3, #32
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e007      	b.n	8007a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a84:	2b40      	cmp	r3, #64	@ 0x40
 8007a86:	d1ae      	bne.n	80079e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa8:	d11b      	bne.n	8007ae2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ab2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ace:	f043 0204 	orr.w	r2, r3, #4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d129      	bne.n	8007b5a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2224      	movs	r2, #36	@ 0x24
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0201 	bic.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0210 	bic.w	r2, r2, #16
 8007b2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e000      	b.n	8007b5c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007b5a:	2302      	movs	r3, #2
  }
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d12a      	bne.n	8007bd8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2224      	movs	r2, #36	@ 0x24
 8007b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0201 	bic.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007ba2:	89fb      	ldrh	r3, [r7, #14]
 8007ba4:	f023 030f 	bic.w	r3, r3, #15
 8007ba8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	89fb      	ldrh	r3, [r7, #14]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	89fa      	ldrh	r2, [r7, #14]
 8007bba:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0201 	orr.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e000      	b.n	8007bda <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007bd8:	2302      	movs	r3, #2
  }
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e0bf      	b.n	8007d7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fb fa32 	bl	8003078 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007c2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6999      	ldr	r1, [r3, #24]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6899      	ldr	r1, [r3, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d84 <HAL_LTDC_Init+0x19c>)
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6899      	ldr	r1, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68d9      	ldr	r1, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4b3e      	ldr	r3, [pc, #248]	@ (8007d84 <HAL_LTDC_Init+0x19c>)
 8007c8a:	400b      	ands	r3, r1
 8007c8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	041b      	lsls	r3, r3, #16
 8007c94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68d9      	ldr	r1, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1a      	ldr	r2, [r3, #32]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6919      	ldr	r1, [r3, #16]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b33      	ldr	r3, [pc, #204]	@ (8007d84 <HAL_LTDC_Init+0x19c>)
 8007cb8:	400b      	ands	r3, r1
 8007cba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6919      	ldr	r1, [r3, #16]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6959      	ldr	r1, [r3, #20]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	4b27      	ldr	r3, [pc, #156]	@ (8007d84 <HAL_LTDC_Init+0x19c>)
 8007ce6:	400b      	ands	r3, r1
 8007ce8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6959      	ldr	r1, [r3, #20]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007d18:	041b      	lsls	r3, r3, #16
 8007d1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0206 	orr.w	r2, r2, #6
 8007d56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0201 	orr.w	r2, r2, #1
 8007d66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	f000f800 	.word	0xf000f800

08007d88 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d9e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d023      	beq.n	8007df2 <HAL_LTDC_IRQHandler+0x6a>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01e      	beq.n	8007df2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0204 	bic.w	r2, r2, #4
 8007dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dd2:	f043 0201 	orr.w	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f86f 	bl	8007ed0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d023      	beq.n	8007e44 <HAL_LTDC_IRQHandler+0xbc>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01e      	beq.n	8007e44 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0202 	bic.w	r2, r2, #2
 8007e14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e24:	f043 0202 	orr.w	r2, r3, #2
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2204      	movs	r2, #4
 8007e32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f846 	bl	8007ed0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01b      	beq.n	8007e86 <HAL_LTDC_IRQHandler+0xfe>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d016      	beq.n	8007e86 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0201 	bic.w	r2, r2, #1
 8007e66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f82f 	bl	8007ee4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01b      	beq.n	8007ec8 <HAL_LTDC_IRQHandler+0x140>
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0208 	bic.w	r2, r2, #8
 8007ea8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2208      	movs	r2, #8
 8007eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f818 	bl	8007ef8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f0c:	b5b0      	push	{r4, r5, r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_LTDC_ConfigLayer+0x1a>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e02c      	b.n	8007f80 <HAL_LTDC_ConfigLayer+0x74>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2202      	movs	r2, #2
 8007f32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2134      	movs	r1, #52	@ 0x34
 8007f3c:	fb01 f303 	mul.w	r3, r1, r3
 8007f40:	4413      	add	r3, r2
 8007f42:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	4614      	mov	r4, r2
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f83b 	bl	8007fdc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bdb0      	pop	{r4, r5, r7, pc}

08007f88 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d101      	bne.n	8007f9e <HAL_LTDC_EnableDither+0x16>
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e016      	b.n	8007fcc <HAL_LTDC_EnableDither+0x44>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007fae:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd8 <HAL_LTDC_EnableDither+0x50>)
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	4a09      	ldr	r2, [pc, #36]	@ (8007fd8 <HAL_LTDC_EnableDither+0x50>)
 8007fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fb8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	40016800 	.word	0x40016800

08007fdc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b089      	sub	sp, #36	@ 0x24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	0c1b      	lsrs	r3, r3, #16
 8007ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ff8:	4413      	add	r3, r2
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	01db      	lsls	r3, r3, #7
 8008008:	4413      	add	r3, r2
 800800a:	3384      	adds	r3, #132	@ 0x84
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	4611      	mov	r1, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	01d2      	lsls	r2, r2, #7
 8008018:	440a      	add	r2, r1
 800801a:	3284      	adds	r2, #132	@ 0x84
 800801c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008020:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	0c1b      	lsrs	r3, r3, #16
 800802e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008032:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008034:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4619      	mov	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	01db      	lsls	r3, r3, #7
 8008040:	440b      	add	r3, r1
 8008042:	3384      	adds	r3, #132	@ 0x84
 8008044:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800804a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800805a:	4413      	add	r3, r2
 800805c:	041b      	lsls	r3, r3, #16
 800805e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	01db      	lsls	r3, r3, #7
 800806a:	4413      	add	r3, r2
 800806c:	3384      	adds	r3, #132	@ 0x84
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	6812      	ldr	r2, [r2, #0]
 8008074:	4611      	mov	r1, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	01d2      	lsls	r2, r2, #7
 800807a:	440a      	add	r2, r1
 800807c:	3284      	adds	r2, #132	@ 0x84
 800807e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008082:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008092:	4413      	add	r3, r2
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4619      	mov	r1, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	01db      	lsls	r3, r3, #7
 80080a0:	440b      	add	r3, r1
 80080a2:	3384      	adds	r3, #132	@ 0x84
 80080a4:	4619      	mov	r1, r3
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	01db      	lsls	r3, r3, #7
 80080b6:	4413      	add	r3, r2
 80080b8:	3384      	adds	r3, #132	@ 0x84
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	4611      	mov	r1, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	01d2      	lsls	r2, r2, #7
 80080c6:	440a      	add	r2, r1
 80080c8:	3284      	adds	r2, #132	@ 0x84
 80080ca:	f023 0307 	bic.w	r3, r3, #7
 80080ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	01db      	lsls	r3, r3, #7
 80080da:	4413      	add	r3, r2
 80080dc:	3384      	adds	r3, #132	@ 0x84
 80080de:	461a      	mov	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	061b      	lsls	r3, r3, #24
 8008100:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	01db      	lsls	r3, r3, #7
 800810c:	4413      	add	r3, r2
 800810e:	3384      	adds	r3, #132	@ 0x84
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	01db      	lsls	r3, r3, #7
 800811c:	4413      	add	r3, r2
 800811e:	3384      	adds	r3, #132	@ 0x84
 8008120:	461a      	mov	r2, r3
 8008122:	2300      	movs	r3, #0
 8008124:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800812c:	461a      	mov	r2, r3
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	431a      	orrs	r2, r3
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	431a      	orrs	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4619      	mov	r1, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	01db      	lsls	r3, r3, #7
 8008140:	440b      	add	r3, r1
 8008142:	3384      	adds	r3, #132	@ 0x84
 8008144:	4619      	mov	r1, r3
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	01db      	lsls	r3, r3, #7
 8008156:	4413      	add	r3, r2
 8008158:	3384      	adds	r3, #132	@ 0x84
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	4611      	mov	r1, r2
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	01d2      	lsls	r2, r2, #7
 8008166:	440a      	add	r2, r1
 8008168:	3284      	adds	r2, #132	@ 0x84
 800816a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800816e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	01db      	lsls	r3, r3, #7
 800817a:	4413      	add	r3, r2
 800817c:	3384      	adds	r3, #132	@ 0x84
 800817e:	461a      	mov	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	01db      	lsls	r3, r3, #7
 8008190:	4413      	add	r3, r2
 8008192:	3384      	adds	r3, #132	@ 0x84
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	4611      	mov	r1, r2
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	01d2      	lsls	r2, r2, #7
 80081a0:	440a      	add	r2, r1
 80081a2:	3284      	adds	r2, #132	@ 0x84
 80081a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80081a8:	f023 0307 	bic.w	r3, r3, #7
 80081ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	69da      	ldr	r2, [r3, #28]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	6809      	ldr	r1, [r1, #0]
 80081ba:	4608      	mov	r0, r1
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	01c9      	lsls	r1, r1, #7
 80081c0:	4401      	add	r1, r0
 80081c2:	3184      	adds	r1, #132	@ 0x84
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	461a      	mov	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	01db      	lsls	r3, r3, #7
 80081d2:	4413      	add	r3, r2
 80081d4:	3384      	adds	r3, #132	@ 0x84
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	01db      	lsls	r3, r3, #7
 80081e2:	4413      	add	r3, r2
 80081e4:	3384      	adds	r3, #132	@ 0x84
 80081e6:	461a      	mov	r2, r3
 80081e8:	2300      	movs	r3, #0
 80081ea:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	01db      	lsls	r3, r3, #7
 80081f6:	4413      	add	r3, r2
 80081f8:	3384      	adds	r3, #132	@ 0x84
 80081fa:	461a      	mov	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008200:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800820a:	2304      	movs	r3, #4
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	e01b      	b.n	8008248 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d102      	bne.n	800821e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008218:	2303      	movs	r3, #3
 800821a:	61fb      	str	r3, [r7, #28]
 800821c:	e014      	b.n	8008248 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b04      	cmp	r3, #4
 8008224:	d00b      	beq.n	800823e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800822a:	2b02      	cmp	r3, #2
 800822c:	d007      	beq.n	800823e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008232:	2b03      	cmp	r3, #3
 8008234:	d003      	beq.n	800823e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800823a:	2b07      	cmp	r3, #7
 800823c:	d102      	bne.n	8008244 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800823e:	2302      	movs	r3, #2
 8008240:	61fb      	str	r3, [r7, #28]
 8008242:	e001      	b.n	8008248 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008244:	2301      	movs	r3, #1
 8008246:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	01db      	lsls	r3, r3, #7
 8008252:	4413      	add	r3, r2
 8008254:	3384      	adds	r3, #132	@ 0x84
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	4611      	mov	r1, r2
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	01d2      	lsls	r2, r2, #7
 8008262:	440a      	add	r2, r1
 8008264:	3284      	adds	r2, #132	@ 0x84
 8008266:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800826a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	fb02 f303 	mul.w	r3, r2, r3
 8008276:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	1acb      	subs	r3, r1, r3
 8008282:	69f9      	ldr	r1, [r7, #28]
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800828a:	68f9      	ldr	r1, [r7, #12]
 800828c:	6809      	ldr	r1, [r1, #0]
 800828e:	4608      	mov	r0, r1
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	01c9      	lsls	r1, r1, #7
 8008294:	4401      	add	r1, r0
 8008296:	3184      	adds	r1, #132	@ 0x84
 8008298:	4313      	orrs	r3, r2
 800829a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	01db      	lsls	r3, r3, #7
 80082a6:	4413      	add	r3, r2
 80082a8:	3384      	adds	r3, #132	@ 0x84
 80082aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	6812      	ldr	r2, [r2, #0]
 80082b0:	4611      	mov	r1, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	01d2      	lsls	r2, r2, #7
 80082b6:	440a      	add	r2, r1
 80082b8:	3284      	adds	r2, #132	@ 0x84
 80082ba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80082be:	f023 0307 	bic.w	r3, r3, #7
 80082c2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	01db      	lsls	r3, r3, #7
 80082ce:	4413      	add	r3, r2
 80082d0:	3384      	adds	r3, #132	@ 0x84
 80082d2:	461a      	mov	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	01db      	lsls	r3, r3, #7
 80082e4:	4413      	add	r3, r2
 80082e6:	3384      	adds	r3, #132	@ 0x84
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	4611      	mov	r1, r2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	01d2      	lsls	r2, r2, #7
 80082f4:	440a      	add	r2, r1
 80082f6:	3284      	adds	r2, #132	@ 0x84
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	6013      	str	r3, [r2, #0]
}
 80082fe:	bf00      	nop
 8008300:	3724      	adds	r7, #36	@ 0x24
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008316:	2300      	movs	r3, #0
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	4b20      	ldr	r3, [pc, #128]	@ (800839c <HAL_PWREx_EnableOverDrive+0x90>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831e:	4a1f      	ldr	r2, [pc, #124]	@ (800839c <HAL_PWREx_EnableOverDrive+0x90>)
 8008320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008324:	6413      	str	r3, [r2, #64]	@ 0x40
 8008326:	4b1d      	ldr	r3, [pc, #116]	@ (800839c <HAL_PWREx_EnableOverDrive+0x90>)
 8008328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008332:	4b1b      	ldr	r3, [pc, #108]	@ (80083a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008334:	2201      	movs	r2, #1
 8008336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008338:	f7fc f98c 	bl	8004654 <HAL_GetTick>
 800833c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800833e:	e009      	b.n	8008354 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008340:	f7fc f988 	bl	8004654 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800834e:	d901      	bls.n	8008354 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e01f      	b.n	8008394 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008354:	4b13      	ldr	r3, [pc, #76]	@ (80083a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800835c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008360:	d1ee      	bne.n	8008340 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008362:	4b11      	ldr	r3, [pc, #68]	@ (80083a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008364:	2201      	movs	r2, #1
 8008366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008368:	f7fc f974 	bl	8004654 <HAL_GetTick>
 800836c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800836e:	e009      	b.n	8008384 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008370:	f7fc f970 	bl	8004654 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800837e:	d901      	bls.n	8008384 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e007      	b.n	8008394 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008384:	4b07      	ldr	r3, [pc, #28]	@ (80083a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800838c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008390:	d1ee      	bne.n	8008370 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	40023800 	.word	0x40023800
 80083a0:	420e0040 	.word	0x420e0040
 80083a4:	40007000 	.word	0x40007000
 80083a8:	420e0044 	.word	0x420e0044

080083ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e267      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d075      	beq.n	80084b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80083ca:	4b88      	ldr	r3, [pc, #544]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f003 030c 	and.w	r3, r3, #12
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d00c      	beq.n	80083f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083d6:	4b85      	ldr	r3, [pc, #532]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80083de:	2b08      	cmp	r3, #8
 80083e0:	d112      	bne.n	8008408 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083e2:	4b82      	ldr	r3, [pc, #520]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083ee:	d10b      	bne.n	8008408 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083f0:	4b7e      	ldr	r3, [pc, #504]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05b      	beq.n	80084b4 <HAL_RCC_OscConfig+0x108>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d157      	bne.n	80084b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e242      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008410:	d106      	bne.n	8008420 <HAL_RCC_OscConfig+0x74>
 8008412:	4b76      	ldr	r3, [pc, #472]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a75      	ldr	r2, [pc, #468]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	e01d      	b.n	800845c <HAL_RCC_OscConfig+0xb0>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008428:	d10c      	bne.n	8008444 <HAL_RCC_OscConfig+0x98>
 800842a:	4b70      	ldr	r3, [pc, #448]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a6f      	ldr	r2, [pc, #444]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	4b6d      	ldr	r3, [pc, #436]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a6c      	ldr	r2, [pc, #432]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 800843c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e00b      	b.n	800845c <HAL_RCC_OscConfig+0xb0>
 8008444:	4b69      	ldr	r3, [pc, #420]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a68      	ldr	r2, [pc, #416]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 800844a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	4b66      	ldr	r3, [pc, #408]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a65      	ldr	r2, [pc, #404]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800845a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d013      	beq.n	800848c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008464:	f7fc f8f6 	bl	8004654 <HAL_GetTick>
 8008468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800846c:	f7fc f8f2 	bl	8004654 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b64      	cmp	r3, #100	@ 0x64
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e207      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800847e:	4b5b      	ldr	r3, [pc, #364]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f0      	beq.n	800846c <HAL_RCC_OscConfig+0xc0>
 800848a:	e014      	b.n	80084b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800848c:	f7fc f8e2 	bl	8004654 <HAL_GetTick>
 8008490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008494:	f7fc f8de 	bl	8004654 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b64      	cmp	r3, #100	@ 0x64
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e1f3      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084a6:	4b51      	ldr	r3, [pc, #324]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f0      	bne.n	8008494 <HAL_RCC_OscConfig+0xe8>
 80084b2:	e000      	b.n	80084b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d063      	beq.n	800858a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80084c2:	4b4a      	ldr	r3, [pc, #296]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 030c 	and.w	r3, r3, #12
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00b      	beq.n	80084e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084ce:	4b47      	ldr	r3, [pc, #284]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80084d6:	2b08      	cmp	r3, #8
 80084d8:	d11c      	bne.n	8008514 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084da:	4b44      	ldr	r3, [pc, #272]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d116      	bne.n	8008514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084e6:	4b41      	ldr	r3, [pc, #260]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d005      	beq.n	80084fe <HAL_RCC_OscConfig+0x152>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d001      	beq.n	80084fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e1c7      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084fe:	4b3b      	ldr	r3, [pc, #236]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4937      	ldr	r1, [pc, #220]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 800850e:	4313      	orrs	r3, r2
 8008510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008512:	e03a      	b.n	800858a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d020      	beq.n	800855e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800851c:	4b34      	ldr	r3, [pc, #208]	@ (80085f0 <HAL_RCC_OscConfig+0x244>)
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008522:	f7fc f897 	bl	8004654 <HAL_GetTick>
 8008526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008528:	e008      	b.n	800853c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800852a:	f7fc f893 	bl	8004654 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e1a8      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800853c:	4b2b      	ldr	r3, [pc, #172]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0f0      	beq.n	800852a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008548:	4b28      	ldr	r3, [pc, #160]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	4925      	ldr	r1, [pc, #148]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008558:	4313      	orrs	r3, r2
 800855a:	600b      	str	r3, [r1, #0]
 800855c:	e015      	b.n	800858a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800855e:	4b24      	ldr	r3, [pc, #144]	@ (80085f0 <HAL_RCC_OscConfig+0x244>)
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008564:	f7fc f876 	bl	8004654 <HAL_GetTick>
 8008568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800856a:	e008      	b.n	800857e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800856c:	f7fc f872 	bl	8004654 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e187      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800857e:	4b1b      	ldr	r3, [pc, #108]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1f0      	bne.n	800856c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d036      	beq.n	8008604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d016      	beq.n	80085cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800859e:	4b15      	ldr	r3, [pc, #84]	@ (80085f4 <HAL_RCC_OscConfig+0x248>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a4:	f7fc f856 	bl	8004654 <HAL_GetTick>
 80085a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085ac:	f7fc f852 	bl	8004654 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e167      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085be:	4b0b      	ldr	r3, [pc, #44]	@ (80085ec <HAL_RCC_OscConfig+0x240>)
 80085c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0f0      	beq.n	80085ac <HAL_RCC_OscConfig+0x200>
 80085ca:	e01b      	b.n	8008604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085cc:	4b09      	ldr	r3, [pc, #36]	@ (80085f4 <HAL_RCC_OscConfig+0x248>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085d2:	f7fc f83f 	bl	8004654 <HAL_GetTick>
 80085d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085d8:	e00e      	b.n	80085f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085da:	f7fc f83b 	bl	8004654 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d907      	bls.n	80085f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e150      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
 80085ec:	40023800 	.word	0x40023800
 80085f0:	42470000 	.word	0x42470000
 80085f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f8:	4b88      	ldr	r3, [pc, #544]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80085fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1ea      	bne.n	80085da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 8097 	beq.w	8008740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008616:	4b81      	ldr	r3, [pc, #516]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10f      	bne.n	8008642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008622:	2300      	movs	r3, #0
 8008624:	60bb      	str	r3, [r7, #8]
 8008626:	4b7d      	ldr	r3, [pc, #500]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 8008628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862a:	4a7c      	ldr	r2, [pc, #496]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 800862c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008630:	6413      	str	r3, [r2, #64]	@ 0x40
 8008632:	4b7a      	ldr	r3, [pc, #488]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800863a:	60bb      	str	r3, [r7, #8]
 800863c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800863e:	2301      	movs	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008642:	4b77      	ldr	r3, [pc, #476]	@ (8008820 <HAL_RCC_OscConfig+0x474>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d118      	bne.n	8008680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800864e:	4b74      	ldr	r3, [pc, #464]	@ (8008820 <HAL_RCC_OscConfig+0x474>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a73      	ldr	r2, [pc, #460]	@ (8008820 <HAL_RCC_OscConfig+0x474>)
 8008654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800865a:	f7fb fffb 	bl	8004654 <HAL_GetTick>
 800865e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008660:	e008      	b.n	8008674 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008662:	f7fb fff7 	bl	8004654 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e10c      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008674:	4b6a      	ldr	r3, [pc, #424]	@ (8008820 <HAL_RCC_OscConfig+0x474>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d106      	bne.n	8008696 <HAL_RCC_OscConfig+0x2ea>
 8008688:	4b64      	ldr	r3, [pc, #400]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 800868a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868c:	4a63      	ldr	r2, [pc, #396]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	6713      	str	r3, [r2, #112]	@ 0x70
 8008694:	e01c      	b.n	80086d0 <HAL_RCC_OscConfig+0x324>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2b05      	cmp	r3, #5
 800869c:	d10c      	bne.n	80086b8 <HAL_RCC_OscConfig+0x30c>
 800869e:	4b5f      	ldr	r3, [pc, #380]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a2:	4a5e      	ldr	r2, [pc, #376]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086a4:	f043 0304 	orr.w	r3, r3, #4
 80086a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80086aa:	4b5c      	ldr	r3, [pc, #368]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ae:	4a5b      	ldr	r2, [pc, #364]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b6:	e00b      	b.n	80086d0 <HAL_RCC_OscConfig+0x324>
 80086b8:	4b58      	ldr	r3, [pc, #352]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086bc:	4a57      	ldr	r2, [pc, #348]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086be:	f023 0301 	bic.w	r3, r3, #1
 80086c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c4:	4b55      	ldr	r3, [pc, #340]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c8:	4a54      	ldr	r2, [pc, #336]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086ca:	f023 0304 	bic.w	r3, r3, #4
 80086ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d015      	beq.n	8008704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d8:	f7fb ffbc 	bl	8004654 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086de:	e00a      	b.n	80086f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086e0:	f7fb ffb8 	bl	8004654 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e0cb      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086f6:	4b49      	ldr	r3, [pc, #292]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80086f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0ee      	beq.n	80086e0 <HAL_RCC_OscConfig+0x334>
 8008702:	e014      	b.n	800872e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008704:	f7fb ffa6 	bl	8004654 <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800870a:	e00a      	b.n	8008722 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800870c:	f7fb ffa2 	bl	8004654 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800871a:	4293      	cmp	r3, r2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e0b5      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008722:	4b3e      	ldr	r3, [pc, #248]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 8008724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1ee      	bne.n	800870c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d105      	bne.n	8008740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008734:	4b39      	ldr	r3, [pc, #228]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 8008736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008738:	4a38      	ldr	r2, [pc, #224]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 800873a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800873e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 80a1 	beq.w	800888c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800874a:	4b34      	ldr	r3, [pc, #208]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f003 030c 	and.w	r3, r3, #12
 8008752:	2b08      	cmp	r3, #8
 8008754:	d05c      	beq.n	8008810 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d141      	bne.n	80087e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875e:	4b31      	ldr	r3, [pc, #196]	@ (8008824 <HAL_RCC_OscConfig+0x478>)
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008764:	f7fb ff76 	bl	8004654 <HAL_GetTick>
 8008768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800876c:	f7fb ff72 	bl	8004654 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e087      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800877e:	4b27      	ldr	r3, [pc, #156]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f0      	bne.n	800876c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	019b      	lsls	r3, r3, #6
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	3b01      	subs	r3, #1
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ac:	061b      	lsls	r3, r3, #24
 80087ae:	491b      	ldr	r1, [pc, #108]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008824 <HAL_RCC_OscConfig+0x478>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ba:	f7fb ff4b 	bl	8004654 <HAL_GetTick>
 80087be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c0:	e008      	b.n	80087d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087c2:	f7fb ff47 	bl	8004654 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d901      	bls.n	80087d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e05c      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087d4:	4b11      	ldr	r3, [pc, #68]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d0f0      	beq.n	80087c2 <HAL_RCC_OscConfig+0x416>
 80087e0:	e054      	b.n	800888c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087e2:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <HAL_RCC_OscConfig+0x478>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e8:	f7fb ff34 	bl	8004654 <HAL_GetTick>
 80087ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f0:	f7fb ff30 	bl	8004654 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e045      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008802:	4b06      	ldr	r3, [pc, #24]	@ (800881c <HAL_RCC_OscConfig+0x470>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0x444>
 800880e:	e03d      	b.n	800888c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d107      	bne.n	8008828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e038      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
 800881c:	40023800 	.word	0x40023800
 8008820:	40007000 	.word	0x40007000
 8008824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008828:	4b1b      	ldr	r3, [pc, #108]	@ (8008898 <HAL_RCC_OscConfig+0x4ec>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d028      	beq.n	8008888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008840:	429a      	cmp	r2, r3
 8008842:	d121      	bne.n	8008888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800884e:	429a      	cmp	r2, r3
 8008850:	d11a      	bne.n	8008888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008858:	4013      	ands	r3, r2
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800885e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008860:	4293      	cmp	r3, r2
 8008862:	d111      	bne.n	8008888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	3b01      	subs	r3, #1
 8008872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008874:	429a      	cmp	r2, r3
 8008876:	d107      	bne.n	8008888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	40023800 	.word	0x40023800

0800889c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0cc      	b.n	8008a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088b0:	4b68      	ldr	r3, [pc, #416]	@ (8008a54 <HAL_RCC_ClockConfig+0x1b8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d90c      	bls.n	80088d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088be:	4b65      	ldr	r3, [pc, #404]	@ (8008a54 <HAL_RCC_ClockConfig+0x1b8>)
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c6:	4b63      	ldr	r3, [pc, #396]	@ (8008a54 <HAL_RCC_ClockConfig+0x1b8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d001      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e0b8      	b.n	8008a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0302 	and.w	r3, r3, #2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d020      	beq.n	8008926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088f0:	4b59      	ldr	r3, [pc, #356]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	4a58      	ldr	r2, [pc, #352]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 80088f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80088fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008908:	4b53      	ldr	r3, [pc, #332]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	4a52      	ldr	r2, [pc, #328]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 800890e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008914:	4b50      	ldr	r3, [pc, #320]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	494d      	ldr	r1, [pc, #308]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	4313      	orrs	r3, r2
 8008924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d044      	beq.n	80089bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d107      	bne.n	800894a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800893a:	4b47      	ldr	r3, [pc, #284]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d119      	bne.n	800897a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e07f      	b.n	8008a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d003      	beq.n	800895a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008956:	2b03      	cmp	r3, #3
 8008958:	d107      	bne.n	800896a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800895a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e06f      	b.n	8008a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800896a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e067      	b.n	8008a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800897a:	4b37      	ldr	r3, [pc, #220]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f023 0203 	bic.w	r2, r3, #3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	4934      	ldr	r1, [pc, #208]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 8008988:	4313      	orrs	r3, r2
 800898a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800898c:	f7fb fe62 	bl	8004654 <HAL_GetTick>
 8008990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008992:	e00a      	b.n	80089aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008994:	f7fb fe5e 	bl	8004654 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e04f      	b.n	8008a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 020c 	and.w	r2, r3, #12
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d1eb      	bne.n	8008994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089bc:	4b25      	ldr	r3, [pc, #148]	@ (8008a54 <HAL_RCC_ClockConfig+0x1b8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 030f 	and.w	r3, r3, #15
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d20c      	bcs.n	80089e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ca:	4b22      	ldr	r3, [pc, #136]	@ (8008a54 <HAL_RCC_ClockConfig+0x1b8>)
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d2:	4b20      	ldr	r3, [pc, #128]	@ (8008a54 <HAL_RCC_ClockConfig+0x1b8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d001      	beq.n	80089e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e032      	b.n	8008a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d008      	beq.n	8008a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089f0:	4b19      	ldr	r3, [pc, #100]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	4916      	ldr	r1, [pc, #88]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d009      	beq.n	8008a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a0e:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	490e      	ldr	r1, [pc, #56]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a22:	f000 f821 	bl	8008a68 <HAL_RCC_GetSysClockFreq>
 8008a26:	4602      	mov	r2, r0
 8008a28:	4b0b      	ldr	r3, [pc, #44]	@ (8008a58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	091b      	lsrs	r3, r3, #4
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	490a      	ldr	r1, [pc, #40]	@ (8008a5c <HAL_RCC_ClockConfig+0x1c0>)
 8008a34:	5ccb      	ldrb	r3, [r1, r3]
 8008a36:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3a:	4a09      	ldr	r2, [pc, #36]	@ (8008a60 <HAL_RCC_ClockConfig+0x1c4>)
 8008a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008a3e:	4b09      	ldr	r3, [pc, #36]	@ (8008a64 <HAL_RCC_ClockConfig+0x1c8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fb fb94 	bl	8004170 <HAL_InitTick>

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40023c00 	.word	0x40023c00
 8008a58:	40023800 	.word	0x40023800
 8008a5c:	0800d9d0 	.word	0x0800d9d0
 8008a60:	20000090 	.word	0x20000090
 8008a64:	20000094 	.word	0x20000094

08008a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a6c:	b094      	sub	sp, #80	@ 0x50
 8008a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a80:	4b79      	ldr	r3, [pc, #484]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 030c 	and.w	r3, r3, #12
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d00d      	beq.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8008a8c:	2b08      	cmp	r3, #8
 8008a8e:	f200 80e1 	bhi.w	8008c54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <HAL_RCC_GetSysClockFreq+0x34>
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d003      	beq.n	8008aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008a9a:	e0db      	b.n	8008c54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a9c:	4b73      	ldr	r3, [pc, #460]	@ (8008c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8008a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008aa0:	e0db      	b.n	8008c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008aa2:	4b73      	ldr	r3, [pc, #460]	@ (8008c70 <HAL_RCC_GetSysClockFreq+0x208>)
 8008aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008aa6:	e0d8      	b.n	8008c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ab0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d063      	beq.n	8008b86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008abe:	4b6a      	ldr	r3, [pc, #424]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	099b      	lsrs	r3, r3, #6
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ac8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008ada:	4622      	mov	r2, r4
 8008adc:	462b      	mov	r3, r5
 8008ade:	f04f 0000 	mov.w	r0, #0
 8008ae2:	f04f 0100 	mov.w	r1, #0
 8008ae6:	0159      	lsls	r1, r3, #5
 8008ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008aec:	0150      	lsls	r0, r2, #5
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4621      	mov	r1, r4
 8008af4:	1a51      	subs	r1, r2, r1
 8008af6:	6139      	str	r1, [r7, #16]
 8008af8:	4629      	mov	r1, r5
 8008afa:	eb63 0301 	sbc.w	r3, r3, r1
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	018b      	lsls	r3, r1, #6
 8008b10:	4651      	mov	r1, sl
 8008b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b16:	4651      	mov	r1, sl
 8008b18:	018a      	lsls	r2, r1, #6
 8008b1a:	4651      	mov	r1, sl
 8008b1c:	ebb2 0801 	subs.w	r8, r2, r1
 8008b20:	4659      	mov	r1, fp
 8008b22:	eb63 0901 	sbc.w	r9, r3, r1
 8008b26:	f04f 0200 	mov.w	r2, #0
 8008b2a:	f04f 0300 	mov.w	r3, #0
 8008b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b3a:	4690      	mov	r8, r2
 8008b3c:	4699      	mov	r9, r3
 8008b3e:	4623      	mov	r3, r4
 8008b40:	eb18 0303 	adds.w	r3, r8, r3
 8008b44:	60bb      	str	r3, [r7, #8]
 8008b46:	462b      	mov	r3, r5
 8008b48:	eb49 0303 	adc.w	r3, r9, r3
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	f04f 0300 	mov.w	r3, #0
 8008b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	024b      	lsls	r3, r1, #9
 8008b5e:	4621      	mov	r1, r4
 8008b60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b64:	4621      	mov	r1, r4
 8008b66:	024a      	lsls	r2, r1, #9
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b6e:	2200      	movs	r2, #0
 8008b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b78:	f7f7 fb8a 	bl	8000290 <__aeabi_uldivmod>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4613      	mov	r3, r2
 8008b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b84:	e058      	b.n	8008c38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b86:	4b38      	ldr	r3, [pc, #224]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	099b      	lsrs	r3, r3, #6
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	4611      	mov	r1, r2
 8008b92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b96:	623b      	str	r3, [r7, #32]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	f04f 0000 	mov.w	r0, #0
 8008ba8:	f04f 0100 	mov.w	r1, #0
 8008bac:	0159      	lsls	r1, r3, #5
 8008bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bb2:	0150      	lsls	r0, r2, #5
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4641      	mov	r1, r8
 8008bba:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008bd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008bd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008bd8:	ebb2 040a 	subs.w	r4, r2, sl
 8008bdc:	eb63 050b 	sbc.w	r5, r3, fp
 8008be0:	f04f 0200 	mov.w	r2, #0
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	00eb      	lsls	r3, r5, #3
 8008bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bee:	00e2      	lsls	r2, r4, #3
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	461d      	mov	r5, r3
 8008bf4:	4643      	mov	r3, r8
 8008bf6:	18e3      	adds	r3, r4, r3
 8008bf8:	603b      	str	r3, [r7, #0]
 8008bfa:	464b      	mov	r3, r9
 8008bfc:	eb45 0303 	adc.w	r3, r5, r3
 8008c00:	607b      	str	r3, [r7, #4]
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	f04f 0300 	mov.w	r3, #0
 8008c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c0e:	4629      	mov	r1, r5
 8008c10:	028b      	lsls	r3, r1, #10
 8008c12:	4621      	mov	r1, r4
 8008c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c18:	4621      	mov	r1, r4
 8008c1a:	028a      	lsls	r2, r1, #10
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c22:	2200      	movs	r2, #0
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	61fa      	str	r2, [r7, #28]
 8008c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c2c:	f7f7 fb30 	bl	8000290 <__aeabi_uldivmod>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4613      	mov	r3, r2
 8008c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008c38:	4b0b      	ldr	r3, [pc, #44]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	3301      	adds	r3, #1
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c52:	e002      	b.n	8008c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c54:	4b05      	ldr	r3, [pc, #20]	@ (8008c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8008c56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3750      	adds	r7, #80	@ 0x50
 8008c60:	46bd      	mov	sp, r7
 8008c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c66:	bf00      	nop
 8008c68:	40023800 	.word	0x40023800
 8008c6c:	00f42400 	.word	0x00f42400
 8008c70:	007a1200 	.word	0x007a1200

08008c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c78:	4b03      	ldr	r3, [pc, #12]	@ (8008c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20000090 	.word	0x20000090

08008c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c90:	f7ff fff0 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 8008c94:	4602      	mov	r2, r0
 8008c96:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	0a9b      	lsrs	r3, r3, #10
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	4903      	ldr	r1, [pc, #12]	@ (8008cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ca2:	5ccb      	ldrb	r3, [r1, r3]
 8008ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	40023800 	.word	0x40023800
 8008cb0:	0800d9e0 	.word	0x0800d9e0

08008cb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	220f      	movs	r2, #15
 8008cc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008cc4:	4b12      	ldr	r3, [pc, #72]	@ (8008d10 <HAL_RCC_GetClockConfig+0x5c>)
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f003 0203 	and.w	r2, r3, #3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d10 <HAL_RCC_GetClockConfig+0x5c>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d10 <HAL_RCC_GetClockConfig+0x5c>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ce8:	4b09      	ldr	r3, [pc, #36]	@ (8008d10 <HAL_RCC_GetClockConfig+0x5c>)
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	08db      	lsrs	r3, r3, #3
 8008cee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008cf6:	4b07      	ldr	r3, [pc, #28]	@ (8008d14 <HAL_RCC_GetClockConfig+0x60>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 020f 	and.w	r2, r3, #15
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	601a      	str	r2, [r3, #0]
}
 8008d02:	bf00      	nop
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40023800 	.word	0x40023800
 8008d14:	40023c00 	.word	0x40023c00

08008d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10b      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d075      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008d4c:	4b91      	ldr	r3, [pc, #580]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d52:	f7fb fc7f 	bl	8004654 <HAL_GetTick>
 8008d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d58:	e008      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d5a:	f7fb fc7b 	bl	8004654 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e189      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d6c:	4b8a      	ldr	r3, [pc, #552]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1f0      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	019a      	lsls	r2, r3, #6
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	071b      	lsls	r3, r3, #28
 8008d90:	4981      	ldr	r1, [pc, #516]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01f      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008da4:	4b7c      	ldr	r3, [pc, #496]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008daa:	0f1b      	lsrs	r3, r3, #28
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	019a      	lsls	r2, r3, #6
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	061b      	lsls	r3, r3, #24
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	071b      	lsls	r3, r3, #28
 8008dc4:	4974      	ldr	r1, [pc, #464]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008dcc:	4b72      	ldr	r3, [pc, #456]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dd2:	f023 021f 	bic.w	r2, r3, #31
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	496e      	ldr	r1, [pc, #440]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00d      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	019a      	lsls	r2, r3, #6
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	061b      	lsls	r3, r3, #24
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	071b      	lsls	r3, r3, #28
 8008e04:	4964      	ldr	r1, [pc, #400]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008e0c:	4b61      	ldr	r3, [pc, #388]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e12:	f7fb fc1f 	bl	8004654 <HAL_GetTick>
 8008e16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e18:	e008      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e1a:	f7fb fc1b 	bl	8004654 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d901      	bls.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e129      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0f0      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d079      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008e50:	4b52      	ldr	r3, [pc, #328]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e56:	f7fb fbfd 	bl	8004654 <HAL_GetTick>
 8008e5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e5e:	f7fb fbf9 	bl	8004654 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e107      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e70:	4b49      	ldr	r3, [pc, #292]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e7c:	d0ef      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d020      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e8a:	4b43      	ldr	r3, [pc, #268]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e90:	0f1b      	lsrs	r3, r3, #28
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	019a      	lsls	r2, r3, #6
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	061b      	lsls	r3, r3, #24
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	071b      	lsls	r3, r3, #28
 8008eaa:	493b      	ldr	r1, [pc, #236]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008eb2:	4b39      	ldr	r3, [pc, #228]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	4934      	ldr	r1, [pc, #208]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01e      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ede:	0e1b      	lsrs	r3, r3, #24
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	019a      	lsls	r2, r3, #6
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	061b      	lsls	r3, r3, #24
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	071b      	lsls	r3, r3, #28
 8008ef8:	4927      	ldr	r1, [pc, #156]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008f00:	4b25      	ldr	r3, [pc, #148]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0e:	4922      	ldr	r1, [pc, #136]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008f16:	4b21      	ldr	r3, [pc, #132]	@ (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008f18:	2201      	movs	r2, #1
 8008f1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f1c:	f7fb fb9a 	bl	8004654 <HAL_GetTick>
 8008f20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f22:	e008      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008f24:	f7fb fb96 	bl	8004654 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d901      	bls.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e0a4      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f36:	4b18      	ldr	r3, [pc, #96]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f42:	d1ef      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0320 	and.w	r3, r3, #32
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 808b 	beq.w	8009068 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	4b10      	ldr	r3, [pc, #64]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f62:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a0b      	ldr	r2, [pc, #44]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f7a:	f7fb fb6b 	bl	8004654 <HAL_GetTick>
 8008f7e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008f80:	e010      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f82:	f7fb fb67 	bl	8004654 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d909      	bls.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e075      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008f94:	42470068 	.word	0x42470068
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	42470070 	.word	0x42470070
 8008fa0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008fa4:	4b38      	ldr	r3, [pc, #224]	@ (8009088 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0e8      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008fb0:	4b36      	ldr	r3, [pc, #216]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d02f      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d028      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fce:	4b2f      	ldr	r3, [pc, #188]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008fde:	4b2c      	ldr	r3, [pc, #176]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008fe4:	4a29      	ldr	r2, [pc, #164]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008fea:	4b28      	ldr	r3, [pc, #160]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d114      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008ff6:	f7fb fb2d 	bl	8004654 <HAL_GetTick>
 8008ffa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ffc:	e00a      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ffe:	f7fb fb29 	bl	8004654 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800900c:	4293      	cmp	r3, r2
 800900e:	d901      	bls.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e035      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009014:	4b1d      	ldr	r3, [pc, #116]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0ee      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800902c:	d10d      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800902e:	4b17      	ldr	r3, [pc, #92]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800903e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009042:	4912      	ldr	r1, [pc, #72]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009044:	4313      	orrs	r3, r2
 8009046:	608b      	str	r3, [r1, #8]
 8009048:	e005      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800904a:	4b10      	ldr	r3, [pc, #64]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	4a0f      	ldr	r2, [pc, #60]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009050:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009054:	6093      	str	r3, [r2, #8]
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009058:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009062:	490a      	ldr	r1, [pc, #40]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009064:	4313      	orrs	r3, r2
 8009066:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800907a:	4b06      	ldr	r3, [pc, #24]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800907c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	40007000 	.word	0x40007000
 800908c:	40023800 	.word	0x40023800
 8009090:	42470e40 	.word	0x42470e40
 8009094:	424711e0 	.word	0x424711e0

08009098 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e025      	b.n	80090f8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7f9 fd33 	bl	8002b2c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2202      	movs	r2, #2
 80090ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3304      	adds	r3, #4
 80090d6:	4619      	mov	r1, r3
 80090d8:	4610      	mov	r0, r2
 80090da:	f001 fb53 	bl	800a784 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	461a      	mov	r2, r3
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	f001 fba8 	bl	800a83e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009112:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d101      	bne.n	800911e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800911a:	2302      	movs	r3, #2
 800911c:	e021      	b.n	8009162 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d002      	beq.n	800912a <HAL_SDRAM_SendCommand+0x2a>
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	2b05      	cmp	r3, #5
 8009128:	d118      	bne.n	800915c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2202      	movs	r2, #2
 800912e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	4618      	mov	r0, r3
 800913c:	f001 fbe8 	bl	800a910 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d104      	bne.n	8009152 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2205      	movs	r2, #5
 800914c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009150:	e006      	b.n	8009160 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800915a:	e001      	b.n	8009160 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e000      	b.n	8009162 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d101      	bne.n	8009184 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009180:	2302      	movs	r3, #2
 8009182:	e016      	b.n	80091b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b01      	cmp	r3, #1
 800918e:	d10f      	bne.n	80091b0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	4618      	mov	r0, r3
 80091a0:	f001 fbf3 	bl	800a98a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	e000      	b.n	80091b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e07b      	b.n	80092c4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d108      	bne.n	80091e6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091dc:	d009      	beq.n	80091f2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	61da      	str	r2, [r3, #28]
 80091e4:	e005      	b.n	80091f2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7fa ff21 	bl	8004054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2202      	movs	r2, #2
 8009216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009228:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800923a:	431a      	orrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	431a      	orrs	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009276:	ea42 0103 	orr.w	r1, r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	0c1b      	lsrs	r3, r3, #16
 8009290:	f003 0104 	and.w	r1, r3, #4
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009298:	f003 0210 	and.w	r2, r3, #16
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69da      	ldr	r2, [r3, #28]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e01a      	b.n	8009314 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fa fef4 	bl	80040e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	4613      	mov	r3, r2
 800932a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800932c:	f7fb f992 	bl	8004654 <HAL_GetTick>
 8009330:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b01      	cmp	r3, #1
 8009340:	d001      	beq.n	8009346 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009342:	2302      	movs	r3, #2
 8009344:	e12a      	b.n	800959c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <HAL_SPI_Transmit+0x36>
 800934c:	88fb      	ldrh	r3, [r7, #6]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e122      	b.n	800959c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_SPI_Transmit+0x48>
 8009360:	2302      	movs	r3, #2
 8009362:	e11b      	b.n	800959c <HAL_SPI_Transmit+0x280>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2203      	movs	r2, #3
 8009370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	88fa      	ldrh	r2, [r7, #6]
 8009384:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	88fa      	ldrh	r2, [r7, #6]
 800938a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093b2:	d10f      	bne.n	80093d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093de:	2b40      	cmp	r3, #64	@ 0x40
 80093e0:	d007      	beq.n	80093f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093fa:	d152      	bne.n	80094a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <HAL_SPI_Transmit+0xee>
 8009404:	8b7b      	ldrh	r3, [r7, #26]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d145      	bne.n	8009496 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940e:	881a      	ldrh	r2, [r3, #0]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941a:	1c9a      	adds	r2, r3, #2
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009424:	b29b      	uxth	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	b29a      	uxth	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800942e:	e032      	b.n	8009496 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b02      	cmp	r3, #2
 800943c:	d112      	bne.n	8009464 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009442:	881a      	ldrh	r2, [r3, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944e:	1c9a      	adds	r2, r3, #2
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009458:	b29b      	uxth	r3, r3
 800945a:	3b01      	subs	r3, #1
 800945c:	b29a      	uxth	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009462:	e018      	b.n	8009496 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009464:	f7fb f8f6 	bl	8004654 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d803      	bhi.n	800947c <HAL_SPI_Transmit+0x160>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d102      	bne.n	8009482 <HAL_SPI_Transmit+0x166>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d109      	bne.n	8009496 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e082      	b.n	800959c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1c7      	bne.n	8009430 <HAL_SPI_Transmit+0x114>
 80094a0:	e053      	b.n	800954a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_SPI_Transmit+0x194>
 80094aa:	8b7b      	ldrh	r3, [r7, #26]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d147      	bne.n	8009540 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	330c      	adds	r3, #12
 80094ba:	7812      	ldrb	r2, [r2, #0]
 80094bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	3b01      	subs	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80094d6:	e033      	b.n	8009540 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d113      	bne.n	800950e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	330c      	adds	r3, #12
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009502:	b29b      	uxth	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800950c:	e018      	b.n	8009540 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800950e:	f7fb f8a1 	bl	8004654 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d803      	bhi.n	8009526 <HAL_SPI_Transmit+0x20a>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d102      	bne.n	800952c <HAL_SPI_Transmit+0x210>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d109      	bne.n	8009540 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e02d      	b.n	800959c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009544:	b29b      	uxth	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1c6      	bne.n	80094d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 fbe6 	bl	8009d20 <SPI_EndRxTxTransaction>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2220      	movs	r2, #32
 800955e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009568:	2300      	movs	r3, #0
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800959a:	2300      	movs	r3, #0
  }
}
 800959c:	4618      	mov	r0, r3
 800959e:	3720      	adds	r7, #32
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4613      	mov	r3, r2
 80095b2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d001      	beq.n	80095c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80095c0:	2302      	movs	r3, #2
 80095c2:	e104      	b.n	80097ce <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095cc:	d112      	bne.n	80095f4 <HAL_SPI_Receive+0x50>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10e      	bne.n	80095f4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2204      	movs	r2, #4
 80095da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	4613      	mov	r3, r2
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 f8f3 	bl	80097d6 <HAL_SPI_TransmitReceive>
 80095f0:	4603      	mov	r3, r0
 80095f2:	e0ec      	b.n	80097ce <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095f4:	f7fb f82e 	bl	8004654 <HAL_GetTick>
 80095f8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <HAL_SPI_Receive+0x62>
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e0e1      	b.n	80097ce <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_SPI_Receive+0x74>
 8009614:	2302      	movs	r3, #2
 8009616:	e0da      	b.n	80097ce <HAL_SPI_Receive+0x22a>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2204      	movs	r2, #4
 8009624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009666:	d10f      	bne.n	8009688 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009686:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009692:	2b40      	cmp	r3, #64	@ 0x40
 8009694:	d007      	beq.n	80096a6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d170      	bne.n	8009790 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80096ae:	e035      	b.n	800971c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d115      	bne.n	80096ea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f103 020c 	add.w	r2, r3, #12
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	b2d2      	uxtb	r2, r2
 80096ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80096e8:	e018      	b.n	800971c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ea:	f7fa ffb3 	bl	8004654 <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d803      	bhi.n	8009702 <HAL_SPI_Receive+0x15e>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009700:	d102      	bne.n	8009708 <HAL_SPI_Receive+0x164>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d109      	bne.n	800971c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e058      	b.n	80097ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1c4      	bne.n	80096b0 <HAL_SPI_Receive+0x10c>
 8009726:	e038      	b.n	800979a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b01      	cmp	r3, #1
 8009734:	d113      	bne.n	800975e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009740:	b292      	uxth	r2, r2
 8009742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009748:	1c9a      	adds	r2, r3, #2
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009752:	b29b      	uxth	r3, r3
 8009754:	3b01      	subs	r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800975c:	e018      	b.n	8009790 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800975e:	f7fa ff79 	bl	8004654 <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d803      	bhi.n	8009776 <HAL_SPI_Receive+0x1d2>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009774:	d102      	bne.n	800977c <HAL_SPI_Receive+0x1d8>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d109      	bne.n	8009790 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e01e      	b.n	80097ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1c6      	bne.n	8009728 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fa58 	bl	8009c54 <SPI_EndRxTransaction>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80097cc:	2300      	movs	r3, #0
  }
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b08a      	sub	sp, #40	@ 0x28
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097e4:	2301      	movs	r3, #1
 80097e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097e8:	f7fa ff34 	bl	8004654 <HAL_GetTick>
 80097ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80097fc:	887b      	ldrh	r3, [r7, #2]
 80097fe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009800:	7ffb      	ldrb	r3, [r7, #31]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d00c      	beq.n	8009820 <HAL_SPI_TransmitReceive+0x4a>
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800980c:	d106      	bne.n	800981c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <HAL_SPI_TransmitReceive+0x46>
 8009816:	7ffb      	ldrb	r3, [r7, #31]
 8009818:	2b04      	cmp	r3, #4
 800981a:	d001      	beq.n	8009820 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800981c:	2302      	movs	r3, #2
 800981e:	e17f      	b.n	8009b20 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <HAL_SPI_TransmitReceive+0x5c>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <HAL_SPI_TransmitReceive+0x5c>
 800982c:	887b      	ldrh	r3, [r7, #2]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e174      	b.n	8009b20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800983c:	2b01      	cmp	r3, #1
 800983e:	d101      	bne.n	8009844 <HAL_SPI_TransmitReceive+0x6e>
 8009840:	2302      	movs	r3, #2
 8009842:	e16d      	b.n	8009b20 <HAL_SPI_TransmitReceive+0x34a>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b04      	cmp	r3, #4
 8009856:	d003      	beq.n	8009860 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2205      	movs	r2, #5
 800985c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	887a      	ldrh	r2, [r7, #2]
 8009870:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	887a      	ldrh	r2, [r7, #2]
 8009876:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	887a      	ldrh	r2, [r7, #2]
 8009882:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	887a      	ldrh	r2, [r7, #2]
 8009888:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a0:	2b40      	cmp	r3, #64	@ 0x40
 80098a2:	d007      	beq.n	80098b4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098bc:	d17e      	bne.n	80099bc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <HAL_SPI_TransmitReceive+0xf6>
 80098c6:	8afb      	ldrh	r3, [r7, #22]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d16c      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098dc:	1c9a      	adds	r2, r3, #2
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098f0:	e059      	b.n	80099a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d11b      	bne.n	8009938 <HAL_SPI_TransmitReceive+0x162>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d016      	beq.n	8009938 <HAL_SPI_TransmitReceive+0x162>
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	2b01      	cmp	r3, #1
 800990e:	d113      	bne.n	8009938 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009914:	881a      	ldrh	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009920:	1c9a      	adds	r2, r3, #2
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b01      	cmp	r3, #1
 8009944:	d119      	bne.n	800997a <HAL_SPI_TransmitReceive+0x1a4>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800994a:	b29b      	uxth	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d014      	beq.n	800997a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995a:	b292      	uxth	r2, r2
 800995c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009962:	1c9a      	adds	r2, r3, #2
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	b29a      	uxth	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009976:	2301      	movs	r3, #1
 8009978:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800997a:	f7fa fe6b 	bl	8004654 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009986:	429a      	cmp	r2, r3
 8009988:	d80d      	bhi.n	80099a6 <HAL_SPI_TransmitReceive+0x1d0>
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d009      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e0bc      	b.n	8009b20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1a0      	bne.n	80098f2 <HAL_SPI_TransmitReceive+0x11c>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d19b      	bne.n	80098f2 <HAL_SPI_TransmitReceive+0x11c>
 80099ba:	e082      	b.n	8009ac2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <HAL_SPI_TransmitReceive+0x1f4>
 80099c4:	8afb      	ldrh	r3, [r7, #22]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d171      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	330c      	adds	r3, #12
 80099d4:	7812      	ldrb	r2, [r2, #0]
 80099d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099f0:	e05d      	b.n	8009aae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d11c      	bne.n	8009a3a <HAL_SPI_TransmitReceive+0x264>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d017      	beq.n	8009a3a <HAL_SPI_TransmitReceive+0x264>
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d114      	bne.n	8009a3a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	330c      	adds	r3, #12
 8009a1a:	7812      	ldrb	r2, [r2, #0]
 8009a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d119      	bne.n	8009a7c <HAL_SPI_TransmitReceive+0x2a6>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d014      	beq.n	8009a7c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	3b01      	subs	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a7c:	f7fa fdea 	bl	8004654 <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d803      	bhi.n	8009a94 <HAL_SPI_TransmitReceive+0x2be>
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d102      	bne.n	8009a9a <HAL_SPI_TransmitReceive+0x2c4>
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d109      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e038      	b.n	8009b20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d19c      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x21c>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d197      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ac2:	6a3a      	ldr	r2, [r7, #32]
 8009ac4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f92a 	bl	8009d20 <SPI_EndRxTxTransaction>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e01d      	b.n	8009b20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aec:	2300      	movs	r3, #0
 8009aee:	613b      	str	r3, [r7, #16]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	613b      	str	r3, [r7, #16]
 8009b00:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
  }
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3728      	adds	r7, #40	@ 0x28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009b36:	b2db      	uxtb	r3, r3
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b54:	f7fa fd7e 	bl	8004654 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5c:	1a9b      	subs	r3, r3, r2
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b64:	f7fa fd76 	bl	8004654 <HAL_GetTick>
 8009b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b6a:	4b39      	ldr	r3, [pc, #228]	@ (8009c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	015b      	lsls	r3, r3, #5
 8009b70:	0d1b      	lsrs	r3, r3, #20
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7a:	e054      	b.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d050      	beq.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b84:	f7fa fd66 	bl	8004654 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d902      	bls.n	8009b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d13d      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bb2:	d111      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bbc:	d004      	beq.n	8009bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc6:	d107      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009be0:	d10f      	bne.n	8009c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e017      	b.n	8009c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	bf0c      	ite	eq
 8009c36:	2301      	moveq	r3, #1
 8009c38:	2300      	movne	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d19b      	bne.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3720      	adds	r7, #32
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000090 	.word	0x20000090

08009c54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c68:	d111      	bne.n	8009c8e <SPI_EndRxTransaction+0x3a>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c72:	d004      	beq.n	8009c7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c7c:	d107      	bne.n	8009c8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c96:	d12a      	bne.n	8009cee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca0:	d012      	beq.n	8009cc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2180      	movs	r1, #128	@ 0x80
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff ff49 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d02d      	beq.n	8009d14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cbc:	f043 0220 	orr.w	r2, r3, #32
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e026      	b.n	8009d16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff ff36 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01a      	beq.n	8009d14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce2:	f043 0220 	orr.w	r2, r3, #32
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e013      	b.n	8009d16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7ff ff23 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d007      	beq.n	8009d14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d08:	f043 0220 	orr.w	r2, r3, #32
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e000      	b.n	8009d16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2201      	movs	r2, #1
 8009d34:	2102      	movs	r1, #2
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7ff ff04 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d46:	f043 0220 	orr.w	r2, r3, #32
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e032      	b.n	8009db8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d52:	4b1b      	ldr	r3, [pc, #108]	@ (8009dc0 <SPI_EndRxTxTransaction+0xa0>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc4 <SPI_EndRxTxTransaction+0xa4>)
 8009d58:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5c:	0d5b      	lsrs	r3, r3, #21
 8009d5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d62:	fb02 f303 	mul.w	r3, r2, r3
 8009d66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d70:	d112      	bne.n	8009d98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2180      	movs	r1, #128	@ 0x80
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff fee1 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d016      	beq.n	8009db6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8c:	f043 0220 	orr.w	r2, r3, #32
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e00f      	b.n	8009db8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	3b01      	subs	r3, #1
 8009da2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dae:	2b80      	cmp	r3, #128	@ 0x80
 8009db0:	d0f2      	beq.n	8009d98 <SPI_EndRxTxTransaction+0x78>
 8009db2:	e000      	b.n	8009db6 <SPI_EndRxTxTransaction+0x96>
        break;
 8009db4:	bf00      	nop
  }

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000090 	.word	0x20000090
 8009dc4:	165e9f81 	.word	0x165e9f81

08009dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e041      	b.n	8009e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d106      	bne.n	8009df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7fa fb94 	bl	800451c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f000 fae6 	bl	800a3d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d001      	beq.n	8009e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e046      	b.n	8009f0e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2202      	movs	r2, #2
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a23      	ldr	r2, [pc, #140]	@ (8009f1c <HAL_TIM_Base_Start+0xb4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d022      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x70>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e9a:	d01d      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x70>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8009f20 <HAL_TIM_Base_Start+0xb8>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d018      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x70>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8009f24 <HAL_TIM_Base_Start+0xbc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d013      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x70>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009f28 <HAL_TIM_Base_Start+0xc0>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d00e      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x70>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8009f2c <HAL_TIM_Base_Start+0xc4>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d009      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x70>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a19      	ldr	r2, [pc, #100]	@ (8009f30 <HAL_TIM_Base_Start+0xc8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d004      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x70>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a18      	ldr	r2, [pc, #96]	@ (8009f34 <HAL_TIM_Base_Start+0xcc>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d111      	bne.n	8009efc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b06      	cmp	r3, #6
 8009ee8:	d010      	beq.n	8009f0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f042 0201 	orr.w	r2, r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009efa:	e007      	b.n	8009f0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	40010000 	.word	0x40010000
 8009f20:	40000400 	.word	0x40000400
 8009f24:	40000800 	.word	0x40000800
 8009f28:	40000c00 	.word	0x40000c00
 8009f2c:	40010400 	.word	0x40010400
 8009f30:	40014000 	.word	0x40014000
 8009f34:	40001800 	.word	0x40001800

08009f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d001      	beq.n	8009f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e04e      	b.n	8009fee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0201 	orr.w	r2, r2, #1
 8009f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a23      	ldr	r2, [pc, #140]	@ (8009ffc <HAL_TIM_Base_Start_IT+0xc4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d022      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x80>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f7a:	d01d      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x80>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a1f      	ldr	r2, [pc, #124]	@ (800a000 <HAL_TIM_Base_Start_IT+0xc8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d018      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x80>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a1e      	ldr	r2, [pc, #120]	@ (800a004 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d013      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x80>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1c      	ldr	r2, [pc, #112]	@ (800a008 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d00e      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x80>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800a00c <HAL_TIM_Base_Start_IT+0xd4>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d009      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x80>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a19      	ldr	r2, [pc, #100]	@ (800a010 <HAL_TIM_Base_Start_IT+0xd8>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d004      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x80>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a18      	ldr	r2, [pc, #96]	@ (800a014 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d111      	bne.n	8009fdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b06      	cmp	r3, #6
 8009fc8:	d010      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f042 0201 	orr.w	r2, r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fda:	e007      	b.n	8009fec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f042 0201 	orr.w	r2, r2, #1
 8009fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	40010000 	.word	0x40010000
 800a000:	40000400 	.word	0x40000400
 800a004:	40000800 	.word	0x40000800
 800a008:	40000c00 	.word	0x40000c00
 800a00c:	40010400 	.word	0x40010400
 800a010:	40014000 	.word	0x40014000
 800a014:	40001800 	.word	0x40001800

0800a018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d020      	beq.n	800a07c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d01b      	beq.n	800a07c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f06f 0202 	mvn.w	r2, #2
 800a04c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	f003 0303 	and.w	r3, r3, #3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f999 	bl	800a39a <HAL_TIM_IC_CaptureCallback>
 800a068:	e005      	b.n	800a076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f98b 	bl	800a386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f99c 	bl	800a3ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f003 0304 	and.w	r3, r3, #4
 800a082:	2b00      	cmp	r3, #0
 800a084:	d020      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01b      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f06f 0204 	mvn.w	r2, #4
 800a098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2202      	movs	r2, #2
 800a09e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f973 	bl	800a39a <HAL_TIM_IC_CaptureCallback>
 800a0b4:	e005      	b.n	800a0c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f965 	bl	800a386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f976 	bl	800a3ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f003 0308 	and.w	r3, r3, #8
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d020      	beq.n	800a114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01b      	beq.n	800a114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f06f 0208 	mvn.w	r2, #8
 800a0e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2204      	movs	r2, #4
 800a0ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f94d 	bl	800a39a <HAL_TIM_IC_CaptureCallback>
 800a100:	e005      	b.n	800a10e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f93f 	bl	800a386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f950 	bl	800a3ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f003 0310 	and.w	r3, r3, #16
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d020      	beq.n	800a160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01b      	beq.n	800a160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f06f 0210 	mvn.w	r2, #16
 800a130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2208      	movs	r2, #8
 800a136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f927 	bl	800a39a <HAL_TIM_IC_CaptureCallback>
 800a14c:	e005      	b.n	800a15a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f919 	bl	800a386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f92a 	bl	800a3ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00c      	beq.n	800a184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d007      	beq.n	800a184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f06f 0201 	mvn.w	r2, #1
 800a17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7f9 ff16 	bl	8003fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00c      	beq.n	800a1a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a194:	2b00      	cmp	r3, #0
 800a196:	d007      	beq.n	800a1a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fae4 	bl	800a770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00c      	beq.n	800a1cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d007      	beq.n	800a1cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a1c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f8fb 	bl	800a3c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00c      	beq.n	800a1f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f003 0320 	and.w	r3, r3, #32
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d007      	beq.n	800a1f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f06f 0220 	mvn.w	r2, #32
 800a1e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fab6 	bl	800a75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_TIM_ConfigClockSource+0x1c>
 800a210:	2302      	movs	r3, #2
 800a212:	e0b4      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x186>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a23a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a24c:	d03e      	beq.n	800a2cc <HAL_TIM_ConfigClockSource+0xd4>
 800a24e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a252:	f200 8087 	bhi.w	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a25a:	f000 8086 	beq.w	800a36a <HAL_TIM_ConfigClockSource+0x172>
 800a25e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a262:	d87f      	bhi.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a264:	2b70      	cmp	r3, #112	@ 0x70
 800a266:	d01a      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0xa6>
 800a268:	2b70      	cmp	r3, #112	@ 0x70
 800a26a:	d87b      	bhi.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a26c:	2b60      	cmp	r3, #96	@ 0x60
 800a26e:	d050      	beq.n	800a312 <HAL_TIM_ConfigClockSource+0x11a>
 800a270:	2b60      	cmp	r3, #96	@ 0x60
 800a272:	d877      	bhi.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a274:	2b50      	cmp	r3, #80	@ 0x50
 800a276:	d03c      	beq.n	800a2f2 <HAL_TIM_ConfigClockSource+0xfa>
 800a278:	2b50      	cmp	r3, #80	@ 0x50
 800a27a:	d873      	bhi.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a27c:	2b40      	cmp	r3, #64	@ 0x40
 800a27e:	d058      	beq.n	800a332 <HAL_TIM_ConfigClockSource+0x13a>
 800a280:	2b40      	cmp	r3, #64	@ 0x40
 800a282:	d86f      	bhi.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a284:	2b30      	cmp	r3, #48	@ 0x30
 800a286:	d064      	beq.n	800a352 <HAL_TIM_ConfigClockSource+0x15a>
 800a288:	2b30      	cmp	r3, #48	@ 0x30
 800a28a:	d86b      	bhi.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d060      	beq.n	800a352 <HAL_TIM_ConfigClockSource+0x15a>
 800a290:	2b20      	cmp	r3, #32
 800a292:	d867      	bhi.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
 800a294:	2b00      	cmp	r3, #0
 800a296:	d05c      	beq.n	800a352 <HAL_TIM_ConfigClockSource+0x15a>
 800a298:	2b10      	cmp	r3, #16
 800a29a:	d05a      	beq.n	800a352 <HAL_TIM_ConfigClockSource+0x15a>
 800a29c:	e062      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2ae:	f000 f9b9 	bl	800a624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a2c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	609a      	str	r2, [r3, #8]
      break;
 800a2ca:	e04f      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2dc:	f000 f9a2 	bl	800a624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2ee:	609a      	str	r2, [r3, #8]
      break;
 800a2f0:	e03c      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2fe:	461a      	mov	r2, r3
 800a300:	f000 f916 	bl	800a530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2150      	movs	r1, #80	@ 0x50
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 f96f 	bl	800a5ee <TIM_ITRx_SetConfig>
      break;
 800a310:	e02c      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a31e:	461a      	mov	r2, r3
 800a320:	f000 f935 	bl	800a58e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2160      	movs	r1, #96	@ 0x60
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 f95f 	bl	800a5ee <TIM_ITRx_SetConfig>
      break;
 800a330:	e01c      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a33e:	461a      	mov	r2, r3
 800a340:	f000 f8f6 	bl	800a530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2140      	movs	r1, #64	@ 0x40
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f94f 	bl	800a5ee <TIM_ITRx_SetConfig>
      break;
 800a350:	e00c      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4619      	mov	r1, r3
 800a35c:	4610      	mov	r0, r2
 800a35e:	f000 f946 	bl	800a5ee <TIM_ITRx_SetConfig>
      break;
 800a362:	e003      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	73fb      	strb	r3, [r7, #15]
      break;
 800a368:	e000      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a36a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a38e:	bf00      	nop
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3a2:	bf00      	nop
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3b6:	bf00      	nop
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b083      	sub	sp, #12
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3ca:	bf00      	nop
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
	...

0800a3d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a46      	ldr	r2, [pc, #280]	@ (800a504 <TIM_Base_SetConfig+0x12c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d013      	beq.n	800a418 <TIM_Base_SetConfig+0x40>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f6:	d00f      	beq.n	800a418 <TIM_Base_SetConfig+0x40>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a43      	ldr	r2, [pc, #268]	@ (800a508 <TIM_Base_SetConfig+0x130>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d00b      	beq.n	800a418 <TIM_Base_SetConfig+0x40>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a42      	ldr	r2, [pc, #264]	@ (800a50c <TIM_Base_SetConfig+0x134>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d007      	beq.n	800a418 <TIM_Base_SetConfig+0x40>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a41      	ldr	r2, [pc, #260]	@ (800a510 <TIM_Base_SetConfig+0x138>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d003      	beq.n	800a418 <TIM_Base_SetConfig+0x40>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a40      	ldr	r2, [pc, #256]	@ (800a514 <TIM_Base_SetConfig+0x13c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d108      	bne.n	800a42a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a41e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4313      	orrs	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a35      	ldr	r2, [pc, #212]	@ (800a504 <TIM_Base_SetConfig+0x12c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d02b      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a438:	d027      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a32      	ldr	r2, [pc, #200]	@ (800a508 <TIM_Base_SetConfig+0x130>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d023      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a31      	ldr	r2, [pc, #196]	@ (800a50c <TIM_Base_SetConfig+0x134>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d01f      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a30      	ldr	r2, [pc, #192]	@ (800a510 <TIM_Base_SetConfig+0x138>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d01b      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a2f      	ldr	r2, [pc, #188]	@ (800a514 <TIM_Base_SetConfig+0x13c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d017      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a2e      	ldr	r2, [pc, #184]	@ (800a518 <TIM_Base_SetConfig+0x140>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d013      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a2d      	ldr	r2, [pc, #180]	@ (800a51c <TIM_Base_SetConfig+0x144>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00f      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a2c      	ldr	r2, [pc, #176]	@ (800a520 <TIM_Base_SetConfig+0x148>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d00b      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a2b      	ldr	r2, [pc, #172]	@ (800a524 <TIM_Base_SetConfig+0x14c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d007      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a2a      	ldr	r2, [pc, #168]	@ (800a528 <TIM_Base_SetConfig+0x150>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d003      	beq.n	800a48a <TIM_Base_SetConfig+0xb2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a29      	ldr	r2, [pc, #164]	@ (800a52c <TIM_Base_SetConfig+0x154>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d108      	bne.n	800a49c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	4313      	orrs	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	689a      	ldr	r2, [r3, #8]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a10      	ldr	r2, [pc, #64]	@ (800a504 <TIM_Base_SetConfig+0x12c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d003      	beq.n	800a4d0 <TIM_Base_SetConfig+0xf8>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a12      	ldr	r2, [pc, #72]	@ (800a514 <TIM_Base_SetConfig+0x13c>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d103      	bne.n	800a4d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d105      	bne.n	800a4f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f023 0201 	bic.w	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	611a      	str	r2, [r3, #16]
  }
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	40010000 	.word	0x40010000
 800a508:	40000400 	.word	0x40000400
 800a50c:	40000800 	.word	0x40000800
 800a510:	40000c00 	.word	0x40000c00
 800a514:	40010400 	.word	0x40010400
 800a518:	40014000 	.word	0x40014000
 800a51c:	40014400 	.word	0x40014400
 800a520:	40014800 	.word	0x40014800
 800a524:	40001800 	.word	0x40001800
 800a528:	40001c00 	.word	0x40001c00
 800a52c:	40002000 	.word	0x40002000

0800a530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	f023 0201 	bic.w	r2, r3, #1
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a55a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	011b      	lsls	r3, r3, #4
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	4313      	orrs	r3, r2
 800a564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f023 030a 	bic.w	r3, r3, #10
 800a56c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4313      	orrs	r3, r2
 800a574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	621a      	str	r2, [r3, #32]
}
 800a582:	bf00      	nop
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a58e:	b480      	push	{r7}
 800a590:	b087      	sub	sp, #28
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	60b9      	str	r1, [r7, #8]
 800a598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	f023 0210 	bic.w	r2, r3, #16
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	031b      	lsls	r3, r3, #12
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	621a      	str	r2, [r3, #32]
}
 800a5e2:	bf00      	nop
 800a5e4:	371c      	adds	r7, #28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b085      	sub	sp, #20
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	f043 0307 	orr.w	r3, r3, #7
 800a610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	609a      	str	r2, [r3, #8]
}
 800a618:	bf00      	nop
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a63e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	021a      	lsls	r2, r3, #8
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	431a      	orrs	r2, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	4313      	orrs	r3, r2
 800a650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	609a      	str	r2, [r3, #8]
}
 800a658:	bf00      	nop
 800a65a:	371c      	adds	r7, #28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a674:	2b01      	cmp	r3, #1
 800a676:	d101      	bne.n	800a67c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a678:	2302      	movs	r3, #2
 800a67a:	e05a      	b.n	800a732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2202      	movs	r2, #2
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a21      	ldr	r2, [pc, #132]	@ (800a740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d022      	beq.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6c8:	d01d      	beq.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d018      	beq.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d013      	beq.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a1a      	ldr	r2, [pc, #104]	@ (800a74c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d00e      	beq.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a18      	ldr	r2, [pc, #96]	@ (800a750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d009      	beq.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a17      	ldr	r2, [pc, #92]	@ (800a754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d004      	beq.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a15      	ldr	r2, [pc, #84]	@ (800a758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d10c      	bne.n	800a720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a70c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	4313      	orrs	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	40010000 	.word	0x40010000
 800a744:	40000400 	.word	0x40000400
 800a748:	40000800 	.word	0x40000800
 800a74c:	40000c00 	.word	0x40000c00
 800a750:	40010400 	.word	0x40010400
 800a754:	40014000 	.word	0x40014000
 800a758:	40001800 	.word	0x40001800

0800a75c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d123      	bne.n	800a7de <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a79e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	6851      	ldr	r1, [r2, #4]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	6892      	ldr	r2, [r2, #8]
 800a7aa:	4311      	orrs	r1, r2
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	68d2      	ldr	r2, [r2, #12]
 800a7b0:	4311      	orrs	r1, r2
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	6912      	ldr	r2, [r2, #16]
 800a7b6:	4311      	orrs	r1, r2
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	6952      	ldr	r2, [r2, #20]
 800a7bc:	4311      	orrs	r1, r2
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	6992      	ldr	r2, [r2, #24]
 800a7c2:	4311      	orrs	r1, r2
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	69d2      	ldr	r2, [r2, #28]
 800a7c8:	4311      	orrs	r1, r2
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	6a12      	ldr	r2, [r2, #32]
 800a7ce:	4311      	orrs	r1, r2
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	e028      	b.n	800a830 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	69d9      	ldr	r1, [r3, #28]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	4319      	orrs	r1, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	431a      	orrs	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a804:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	6851      	ldr	r1, [r2, #4]
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	6892      	ldr	r2, [r2, #8]
 800a810:	4311      	orrs	r1, r2
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	68d2      	ldr	r2, [r2, #12]
 800a816:	4311      	orrs	r1, r2
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	6912      	ldr	r2, [r2, #16]
 800a81c:	4311      	orrs	r1, r2
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	6952      	ldr	r2, [r2, #20]
 800a822:	4311      	orrs	r1, r2
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	6992      	ldr	r2, [r2, #24]
 800a828:	430a      	orrs	r2, r1
 800a82a:	431a      	orrs	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d128      	bne.n	800a8a2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	1e59      	subs	r1, r3, #1
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	3b01      	subs	r3, #1
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	4319      	orrs	r1, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	4319      	orrs	r1, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	3b01      	subs	r3, #1
 800a878:	031b      	lsls	r3, r3, #12
 800a87a:	4319      	orrs	r1, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	3b01      	subs	r3, #1
 800a882:	041b      	lsls	r3, r3, #16
 800a884:	4319      	orrs	r1, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	051b      	lsls	r3, r3, #20
 800a88e:	4319      	orrs	r1, r3
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	3b01      	subs	r3, #1
 800a896:	061b      	lsls	r3, r3, #24
 800a898:	430b      	orrs	r3, r1
 800a89a:	431a      	orrs	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	609a      	str	r2, [r3, #8]
 800a8a0:	e02f      	b.n	800a902 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	68d2      	ldr	r2, [r2, #12]
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	0311      	lsls	r1, r2, #12
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	6952      	ldr	r2, [r2, #20]
 800a8ba:	3a01      	subs	r2, #1
 800a8bc:	0512      	lsls	r2, r2, #20
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	1e59      	subs	r1, r3, #1
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	4319      	orrs	r1, r3
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	4319      	orrs	r1, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	041b      	lsls	r3, r3, #16
 800a8f0:	4319      	orrs	r1, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	061b      	lsls	r3, r3, #24
 800a8fa:	430b      	orrs	r3, r1
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	0d9b      	lsrs	r3, r3, #22
 800a926:	059b      	lsls	r3, r3, #22
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	6811      	ldr	r1, [r2, #0]
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	6852      	ldr	r2, [r2, #4]
 800a930:	4311      	orrs	r1, r2
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	6892      	ldr	r2, [r2, #8]
 800a936:	3a01      	subs	r2, #1
 800a938:	0152      	lsls	r2, r2, #5
 800a93a:	4311      	orrs	r1, r2
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	68d2      	ldr	r2, [r2, #12]
 800a940:	0252      	lsls	r2, r2, #9
 800a942:	430a      	orrs	r2, r1
 800a944:	431a      	orrs	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a94a:	f7f9 fe83 	bl	8004654 <HAL_GetTick>
 800a94e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a950:	e010      	b.n	800a974 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a958:	d00c      	beq.n	800a974 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d007      	beq.n	800a970 <FMC_SDRAM_SendCommand+0x60>
 800a960:	f7f9 fe78 	bl	8004654 <HAL_GetTick>
 800a964:	4602      	mov	r2, r0
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d201      	bcs.n	800a974 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e006      	b.n	800a982 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d0e8      	beq.n	800a952 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a99c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	0052      	lsls	r2, r2, #1
 800a9a4:	431a      	orrs	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <siprintf>:
 800a9b8:	b40e      	push	{r1, r2, r3}
 800a9ba:	b500      	push	{lr}
 800a9bc:	b09c      	sub	sp, #112	@ 0x70
 800a9be:	ab1d      	add	r3, sp, #116	@ 0x74
 800a9c0:	9002      	str	r0, [sp, #8]
 800a9c2:	9006      	str	r0, [sp, #24]
 800a9c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9c8:	4809      	ldr	r0, [pc, #36]	@ (800a9f0 <siprintf+0x38>)
 800a9ca:	9107      	str	r1, [sp, #28]
 800a9cc:	9104      	str	r1, [sp, #16]
 800a9ce:	4909      	ldr	r1, [pc, #36]	@ (800a9f4 <siprintf+0x3c>)
 800a9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d4:	9105      	str	r1, [sp, #20]
 800a9d6:	6800      	ldr	r0, [r0, #0]
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	a902      	add	r1, sp, #8
 800a9dc:	f000 f994 	bl	800ad08 <_svfiprintf_r>
 800a9e0:	9b02      	ldr	r3, [sp, #8]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	b01c      	add	sp, #112	@ 0x70
 800a9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9ec:	b003      	add	sp, #12
 800a9ee:	4770      	bx	lr
 800a9f0:	2000009c 	.word	0x2000009c
 800a9f4:	ffff0208 	.word	0xffff0208

0800a9f8 <memset>:
 800a9f8:	4402      	add	r2, r0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d100      	bne.n	800aa02 <memset+0xa>
 800aa00:	4770      	bx	lr
 800aa02:	f803 1b01 	strb.w	r1, [r3], #1
 800aa06:	e7f9      	b.n	800a9fc <memset+0x4>

0800aa08 <__errno>:
 800aa08:	4b01      	ldr	r3, [pc, #4]	@ (800aa10 <__errno+0x8>)
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	2000009c 	.word	0x2000009c

0800aa14 <__libc_init_array>:
 800aa14:	b570      	push	{r4, r5, r6, lr}
 800aa16:	4d0d      	ldr	r5, [pc, #52]	@ (800aa4c <__libc_init_array+0x38>)
 800aa18:	4c0d      	ldr	r4, [pc, #52]	@ (800aa50 <__libc_init_array+0x3c>)
 800aa1a:	1b64      	subs	r4, r4, r5
 800aa1c:	10a4      	asrs	r4, r4, #2
 800aa1e:	2600      	movs	r6, #0
 800aa20:	42a6      	cmp	r6, r4
 800aa22:	d109      	bne.n	800aa38 <__libc_init_array+0x24>
 800aa24:	4d0b      	ldr	r5, [pc, #44]	@ (800aa54 <__libc_init_array+0x40>)
 800aa26:	4c0c      	ldr	r4, [pc, #48]	@ (800aa58 <__libc_init_array+0x44>)
 800aa28:	f000 fc66 	bl	800b2f8 <_init>
 800aa2c:	1b64      	subs	r4, r4, r5
 800aa2e:	10a4      	asrs	r4, r4, #2
 800aa30:	2600      	movs	r6, #0
 800aa32:	42a6      	cmp	r6, r4
 800aa34:	d105      	bne.n	800aa42 <__libc_init_array+0x2e>
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa3c:	4798      	blx	r3
 800aa3e:	3601      	adds	r6, #1
 800aa40:	e7ee      	b.n	800aa20 <__libc_init_array+0xc>
 800aa42:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa46:	4798      	blx	r3
 800aa48:	3601      	adds	r6, #1
 800aa4a:	e7f2      	b.n	800aa32 <__libc_init_array+0x1e>
 800aa4c:	0800da2c 	.word	0x0800da2c
 800aa50:	0800da2c 	.word	0x0800da2c
 800aa54:	0800da2c 	.word	0x0800da2c
 800aa58:	0800da30 	.word	0x0800da30

0800aa5c <__retarget_lock_acquire_recursive>:
 800aa5c:	4770      	bx	lr

0800aa5e <__retarget_lock_release_recursive>:
 800aa5e:	4770      	bx	lr

0800aa60 <_free_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4605      	mov	r5, r0
 800aa64:	2900      	cmp	r1, #0
 800aa66:	d041      	beq.n	800aaec <_free_r+0x8c>
 800aa68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6c:	1f0c      	subs	r4, r1, #4
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bfb8      	it	lt
 800aa72:	18e4      	addlt	r4, r4, r3
 800aa74:	f000 f8e0 	bl	800ac38 <__malloc_lock>
 800aa78:	4a1d      	ldr	r2, [pc, #116]	@ (800aaf0 <_free_r+0x90>)
 800aa7a:	6813      	ldr	r3, [r2, #0]
 800aa7c:	b933      	cbnz	r3, 800aa8c <_free_r+0x2c>
 800aa7e:	6063      	str	r3, [r4, #4]
 800aa80:	6014      	str	r4, [r2, #0]
 800aa82:	4628      	mov	r0, r5
 800aa84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa88:	f000 b8dc 	b.w	800ac44 <__malloc_unlock>
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d908      	bls.n	800aaa2 <_free_r+0x42>
 800aa90:	6820      	ldr	r0, [r4, #0]
 800aa92:	1821      	adds	r1, r4, r0
 800aa94:	428b      	cmp	r3, r1
 800aa96:	bf01      	itttt	eq
 800aa98:	6819      	ldreq	r1, [r3, #0]
 800aa9a:	685b      	ldreq	r3, [r3, #4]
 800aa9c:	1809      	addeq	r1, r1, r0
 800aa9e:	6021      	streq	r1, [r4, #0]
 800aaa0:	e7ed      	b.n	800aa7e <_free_r+0x1e>
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	b10b      	cbz	r3, 800aaac <_free_r+0x4c>
 800aaa8:	42a3      	cmp	r3, r4
 800aaaa:	d9fa      	bls.n	800aaa2 <_free_r+0x42>
 800aaac:	6811      	ldr	r1, [r2, #0]
 800aaae:	1850      	adds	r0, r2, r1
 800aab0:	42a0      	cmp	r0, r4
 800aab2:	d10b      	bne.n	800aacc <_free_r+0x6c>
 800aab4:	6820      	ldr	r0, [r4, #0]
 800aab6:	4401      	add	r1, r0
 800aab8:	1850      	adds	r0, r2, r1
 800aaba:	4283      	cmp	r3, r0
 800aabc:	6011      	str	r1, [r2, #0]
 800aabe:	d1e0      	bne.n	800aa82 <_free_r+0x22>
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	6053      	str	r3, [r2, #4]
 800aac6:	4408      	add	r0, r1
 800aac8:	6010      	str	r0, [r2, #0]
 800aaca:	e7da      	b.n	800aa82 <_free_r+0x22>
 800aacc:	d902      	bls.n	800aad4 <_free_r+0x74>
 800aace:	230c      	movs	r3, #12
 800aad0:	602b      	str	r3, [r5, #0]
 800aad2:	e7d6      	b.n	800aa82 <_free_r+0x22>
 800aad4:	6820      	ldr	r0, [r4, #0]
 800aad6:	1821      	adds	r1, r4, r0
 800aad8:	428b      	cmp	r3, r1
 800aada:	bf04      	itt	eq
 800aadc:	6819      	ldreq	r1, [r3, #0]
 800aade:	685b      	ldreq	r3, [r3, #4]
 800aae0:	6063      	str	r3, [r4, #4]
 800aae2:	bf04      	itt	eq
 800aae4:	1809      	addeq	r1, r1, r0
 800aae6:	6021      	streq	r1, [r4, #0]
 800aae8:	6054      	str	r4, [r2, #4]
 800aaea:	e7ca      	b.n	800aa82 <_free_r+0x22>
 800aaec:	bd38      	pop	{r3, r4, r5, pc}
 800aaee:	bf00      	nop
 800aaf0:	200020e4 	.word	0x200020e4

0800aaf4 <sbrk_aligned>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ab34 <sbrk_aligned+0x40>)
 800aaf8:	460c      	mov	r4, r1
 800aafa:	6831      	ldr	r1, [r6, #0]
 800aafc:	4605      	mov	r5, r0
 800aafe:	b911      	cbnz	r1, 800ab06 <sbrk_aligned+0x12>
 800ab00:	f000 fba6 	bl	800b250 <_sbrk_r>
 800ab04:	6030      	str	r0, [r6, #0]
 800ab06:	4621      	mov	r1, r4
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f000 fba1 	bl	800b250 <_sbrk_r>
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	d103      	bne.n	800ab1a <sbrk_aligned+0x26>
 800ab12:	f04f 34ff 	mov.w	r4, #4294967295
 800ab16:	4620      	mov	r0, r4
 800ab18:	bd70      	pop	{r4, r5, r6, pc}
 800ab1a:	1cc4      	adds	r4, r0, #3
 800ab1c:	f024 0403 	bic.w	r4, r4, #3
 800ab20:	42a0      	cmp	r0, r4
 800ab22:	d0f8      	beq.n	800ab16 <sbrk_aligned+0x22>
 800ab24:	1a21      	subs	r1, r4, r0
 800ab26:	4628      	mov	r0, r5
 800ab28:	f000 fb92 	bl	800b250 <_sbrk_r>
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d1f2      	bne.n	800ab16 <sbrk_aligned+0x22>
 800ab30:	e7ef      	b.n	800ab12 <sbrk_aligned+0x1e>
 800ab32:	bf00      	nop
 800ab34:	200020e0 	.word	0x200020e0

0800ab38 <_malloc_r>:
 800ab38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab3c:	1ccd      	adds	r5, r1, #3
 800ab3e:	f025 0503 	bic.w	r5, r5, #3
 800ab42:	3508      	adds	r5, #8
 800ab44:	2d0c      	cmp	r5, #12
 800ab46:	bf38      	it	cc
 800ab48:	250c      	movcc	r5, #12
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	db01      	blt.n	800ab54 <_malloc_r+0x1c>
 800ab50:	42a9      	cmp	r1, r5
 800ab52:	d904      	bls.n	800ab5e <_malloc_r+0x26>
 800ab54:	230c      	movs	r3, #12
 800ab56:	6033      	str	r3, [r6, #0]
 800ab58:	2000      	movs	r0, #0
 800ab5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac34 <_malloc_r+0xfc>
 800ab62:	f000 f869 	bl	800ac38 <__malloc_lock>
 800ab66:	f8d8 3000 	ldr.w	r3, [r8]
 800ab6a:	461c      	mov	r4, r3
 800ab6c:	bb44      	cbnz	r4, 800abc0 <_malloc_r+0x88>
 800ab6e:	4629      	mov	r1, r5
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7ff ffbf 	bl	800aaf4 <sbrk_aligned>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	4604      	mov	r4, r0
 800ab7a:	d158      	bne.n	800ac2e <_malloc_r+0xf6>
 800ab7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ab80:	4627      	mov	r7, r4
 800ab82:	2f00      	cmp	r7, #0
 800ab84:	d143      	bne.n	800ac0e <_malloc_r+0xd6>
 800ab86:	2c00      	cmp	r4, #0
 800ab88:	d04b      	beq.n	800ac22 <_malloc_r+0xea>
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	4630      	mov	r0, r6
 800ab90:	eb04 0903 	add.w	r9, r4, r3
 800ab94:	f000 fb5c 	bl	800b250 <_sbrk_r>
 800ab98:	4581      	cmp	r9, r0
 800ab9a:	d142      	bne.n	800ac22 <_malloc_r+0xea>
 800ab9c:	6821      	ldr	r1, [r4, #0]
 800ab9e:	1a6d      	subs	r5, r5, r1
 800aba0:	4629      	mov	r1, r5
 800aba2:	4630      	mov	r0, r6
 800aba4:	f7ff ffa6 	bl	800aaf4 <sbrk_aligned>
 800aba8:	3001      	adds	r0, #1
 800abaa:	d03a      	beq.n	800ac22 <_malloc_r+0xea>
 800abac:	6823      	ldr	r3, [r4, #0]
 800abae:	442b      	add	r3, r5
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	f8d8 3000 	ldr.w	r3, [r8]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	bb62      	cbnz	r2, 800ac14 <_malloc_r+0xdc>
 800abba:	f8c8 7000 	str.w	r7, [r8]
 800abbe:	e00f      	b.n	800abe0 <_malloc_r+0xa8>
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	1b52      	subs	r2, r2, r5
 800abc4:	d420      	bmi.n	800ac08 <_malloc_r+0xd0>
 800abc6:	2a0b      	cmp	r2, #11
 800abc8:	d917      	bls.n	800abfa <_malloc_r+0xc2>
 800abca:	1961      	adds	r1, r4, r5
 800abcc:	42a3      	cmp	r3, r4
 800abce:	6025      	str	r5, [r4, #0]
 800abd0:	bf18      	it	ne
 800abd2:	6059      	strne	r1, [r3, #4]
 800abd4:	6863      	ldr	r3, [r4, #4]
 800abd6:	bf08      	it	eq
 800abd8:	f8c8 1000 	streq.w	r1, [r8]
 800abdc:	5162      	str	r2, [r4, r5]
 800abde:	604b      	str	r3, [r1, #4]
 800abe0:	4630      	mov	r0, r6
 800abe2:	f000 f82f 	bl	800ac44 <__malloc_unlock>
 800abe6:	f104 000b 	add.w	r0, r4, #11
 800abea:	1d23      	adds	r3, r4, #4
 800abec:	f020 0007 	bic.w	r0, r0, #7
 800abf0:	1ac2      	subs	r2, r0, r3
 800abf2:	bf1c      	itt	ne
 800abf4:	1a1b      	subne	r3, r3, r0
 800abf6:	50a3      	strne	r3, [r4, r2]
 800abf8:	e7af      	b.n	800ab5a <_malloc_r+0x22>
 800abfa:	6862      	ldr	r2, [r4, #4]
 800abfc:	42a3      	cmp	r3, r4
 800abfe:	bf0c      	ite	eq
 800ac00:	f8c8 2000 	streq.w	r2, [r8]
 800ac04:	605a      	strne	r2, [r3, #4]
 800ac06:	e7eb      	b.n	800abe0 <_malloc_r+0xa8>
 800ac08:	4623      	mov	r3, r4
 800ac0a:	6864      	ldr	r4, [r4, #4]
 800ac0c:	e7ae      	b.n	800ab6c <_malloc_r+0x34>
 800ac0e:	463c      	mov	r4, r7
 800ac10:	687f      	ldr	r7, [r7, #4]
 800ac12:	e7b6      	b.n	800ab82 <_malloc_r+0x4a>
 800ac14:	461a      	mov	r2, r3
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	42a3      	cmp	r3, r4
 800ac1a:	d1fb      	bne.n	800ac14 <_malloc_r+0xdc>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	6053      	str	r3, [r2, #4]
 800ac20:	e7de      	b.n	800abe0 <_malloc_r+0xa8>
 800ac22:	230c      	movs	r3, #12
 800ac24:	6033      	str	r3, [r6, #0]
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 f80c 	bl	800ac44 <__malloc_unlock>
 800ac2c:	e794      	b.n	800ab58 <_malloc_r+0x20>
 800ac2e:	6005      	str	r5, [r0, #0]
 800ac30:	e7d6      	b.n	800abe0 <_malloc_r+0xa8>
 800ac32:	bf00      	nop
 800ac34:	200020e4 	.word	0x200020e4

0800ac38 <__malloc_lock>:
 800ac38:	4801      	ldr	r0, [pc, #4]	@ (800ac40 <__malloc_lock+0x8>)
 800ac3a:	f7ff bf0f 	b.w	800aa5c <__retarget_lock_acquire_recursive>
 800ac3e:	bf00      	nop
 800ac40:	200020dc 	.word	0x200020dc

0800ac44 <__malloc_unlock>:
 800ac44:	4801      	ldr	r0, [pc, #4]	@ (800ac4c <__malloc_unlock+0x8>)
 800ac46:	f7ff bf0a 	b.w	800aa5e <__retarget_lock_release_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	200020dc 	.word	0x200020dc

0800ac50 <__ssputs_r>:
 800ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	688e      	ldr	r6, [r1, #8]
 800ac56:	461f      	mov	r7, r3
 800ac58:	42be      	cmp	r6, r7
 800ac5a:	680b      	ldr	r3, [r1, #0]
 800ac5c:	4682      	mov	sl, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	4690      	mov	r8, r2
 800ac62:	d82d      	bhi.n	800acc0 <__ssputs_r+0x70>
 800ac64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac6c:	d026      	beq.n	800acbc <__ssputs_r+0x6c>
 800ac6e:	6965      	ldr	r5, [r4, #20]
 800ac70:	6909      	ldr	r1, [r1, #16]
 800ac72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac76:	eba3 0901 	sub.w	r9, r3, r1
 800ac7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac7e:	1c7b      	adds	r3, r7, #1
 800ac80:	444b      	add	r3, r9
 800ac82:	106d      	asrs	r5, r5, #1
 800ac84:	429d      	cmp	r5, r3
 800ac86:	bf38      	it	cc
 800ac88:	461d      	movcc	r5, r3
 800ac8a:	0553      	lsls	r3, r2, #21
 800ac8c:	d527      	bpl.n	800acde <__ssputs_r+0x8e>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	f7ff ff52 	bl	800ab38 <_malloc_r>
 800ac94:	4606      	mov	r6, r0
 800ac96:	b360      	cbz	r0, 800acf2 <__ssputs_r+0xa2>
 800ac98:	6921      	ldr	r1, [r4, #16]
 800ac9a:	464a      	mov	r2, r9
 800ac9c:	f000 fae8 	bl	800b270 <memcpy>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	6126      	str	r6, [r4, #16]
 800acae:	6165      	str	r5, [r4, #20]
 800acb0:	444e      	add	r6, r9
 800acb2:	eba5 0509 	sub.w	r5, r5, r9
 800acb6:	6026      	str	r6, [r4, #0]
 800acb8:	60a5      	str	r5, [r4, #8]
 800acba:	463e      	mov	r6, r7
 800acbc:	42be      	cmp	r6, r7
 800acbe:	d900      	bls.n	800acc2 <__ssputs_r+0x72>
 800acc0:	463e      	mov	r6, r7
 800acc2:	6820      	ldr	r0, [r4, #0]
 800acc4:	4632      	mov	r2, r6
 800acc6:	4641      	mov	r1, r8
 800acc8:	f000 faa8 	bl	800b21c <memmove>
 800accc:	68a3      	ldr	r3, [r4, #8]
 800acce:	1b9b      	subs	r3, r3, r6
 800acd0:	60a3      	str	r3, [r4, #8]
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	4433      	add	r3, r6
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	2000      	movs	r0, #0
 800acda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acde:	462a      	mov	r2, r5
 800ace0:	f000 fad4 	bl	800b28c <_realloc_r>
 800ace4:	4606      	mov	r6, r0
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d1e0      	bne.n	800acac <__ssputs_r+0x5c>
 800acea:	6921      	ldr	r1, [r4, #16]
 800acec:	4650      	mov	r0, sl
 800acee:	f7ff feb7 	bl	800aa60 <_free_r>
 800acf2:	230c      	movs	r3, #12
 800acf4:	f8ca 3000 	str.w	r3, [sl]
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295
 800ad04:	e7e9      	b.n	800acda <__ssputs_r+0x8a>
	...

0800ad08 <_svfiprintf_r>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	4698      	mov	r8, r3
 800ad0e:	898b      	ldrh	r3, [r1, #12]
 800ad10:	061b      	lsls	r3, r3, #24
 800ad12:	b09d      	sub	sp, #116	@ 0x74
 800ad14:	4607      	mov	r7, r0
 800ad16:	460d      	mov	r5, r1
 800ad18:	4614      	mov	r4, r2
 800ad1a:	d510      	bpl.n	800ad3e <_svfiprintf_r+0x36>
 800ad1c:	690b      	ldr	r3, [r1, #16]
 800ad1e:	b973      	cbnz	r3, 800ad3e <_svfiprintf_r+0x36>
 800ad20:	2140      	movs	r1, #64	@ 0x40
 800ad22:	f7ff ff09 	bl	800ab38 <_malloc_r>
 800ad26:	6028      	str	r0, [r5, #0]
 800ad28:	6128      	str	r0, [r5, #16]
 800ad2a:	b930      	cbnz	r0, 800ad3a <_svfiprintf_r+0x32>
 800ad2c:	230c      	movs	r3, #12
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	f04f 30ff 	mov.w	r0, #4294967295
 800ad34:	b01d      	add	sp, #116	@ 0x74
 800ad36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3a:	2340      	movs	r3, #64	@ 0x40
 800ad3c:	616b      	str	r3, [r5, #20]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad42:	2320      	movs	r3, #32
 800ad44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad4c:	2330      	movs	r3, #48	@ 0x30
 800ad4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aeec <_svfiprintf_r+0x1e4>
 800ad52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad56:	f04f 0901 	mov.w	r9, #1
 800ad5a:	4623      	mov	r3, r4
 800ad5c:	469a      	mov	sl, r3
 800ad5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad62:	b10a      	cbz	r2, 800ad68 <_svfiprintf_r+0x60>
 800ad64:	2a25      	cmp	r2, #37	@ 0x25
 800ad66:	d1f9      	bne.n	800ad5c <_svfiprintf_r+0x54>
 800ad68:	ebba 0b04 	subs.w	fp, sl, r4
 800ad6c:	d00b      	beq.n	800ad86 <_svfiprintf_r+0x7e>
 800ad6e:	465b      	mov	r3, fp
 800ad70:	4622      	mov	r2, r4
 800ad72:	4629      	mov	r1, r5
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff ff6b 	bl	800ac50 <__ssputs_r>
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f000 80a7 	beq.w	800aece <_svfiprintf_r+0x1c6>
 800ad80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad82:	445a      	add	r2, fp
 800ad84:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad86:	f89a 3000 	ldrb.w	r3, [sl]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 809f 	beq.w	800aece <_svfiprintf_r+0x1c6>
 800ad90:	2300      	movs	r3, #0
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad9a:	f10a 0a01 	add.w	sl, sl, #1
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	9307      	str	r3, [sp, #28]
 800ada2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ada6:	931a      	str	r3, [sp, #104]	@ 0x68
 800ada8:	4654      	mov	r4, sl
 800adaa:	2205      	movs	r2, #5
 800adac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb0:	484e      	ldr	r0, [pc, #312]	@ (800aeec <_svfiprintf_r+0x1e4>)
 800adb2:	f7f5 fa1d 	bl	80001f0 <memchr>
 800adb6:	9a04      	ldr	r2, [sp, #16]
 800adb8:	b9d8      	cbnz	r0, 800adf2 <_svfiprintf_r+0xea>
 800adba:	06d0      	lsls	r0, r2, #27
 800adbc:	bf44      	itt	mi
 800adbe:	2320      	movmi	r3, #32
 800adc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adc4:	0711      	lsls	r1, r2, #28
 800adc6:	bf44      	itt	mi
 800adc8:	232b      	movmi	r3, #43	@ 0x2b
 800adca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adce:	f89a 3000 	ldrb.w	r3, [sl]
 800add2:	2b2a      	cmp	r3, #42	@ 0x2a
 800add4:	d015      	beq.n	800ae02 <_svfiprintf_r+0xfa>
 800add6:	9a07      	ldr	r2, [sp, #28]
 800add8:	4654      	mov	r4, sl
 800adda:	2000      	movs	r0, #0
 800addc:	f04f 0c0a 	mov.w	ip, #10
 800ade0:	4621      	mov	r1, r4
 800ade2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ade6:	3b30      	subs	r3, #48	@ 0x30
 800ade8:	2b09      	cmp	r3, #9
 800adea:	d94b      	bls.n	800ae84 <_svfiprintf_r+0x17c>
 800adec:	b1b0      	cbz	r0, 800ae1c <_svfiprintf_r+0x114>
 800adee:	9207      	str	r2, [sp, #28]
 800adf0:	e014      	b.n	800ae1c <_svfiprintf_r+0x114>
 800adf2:	eba0 0308 	sub.w	r3, r0, r8
 800adf6:	fa09 f303 	lsl.w	r3, r9, r3
 800adfa:	4313      	orrs	r3, r2
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	46a2      	mov	sl, r4
 800ae00:	e7d2      	b.n	800ada8 <_svfiprintf_r+0xa0>
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	1d19      	adds	r1, r3, #4
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	9103      	str	r1, [sp, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	bfbb      	ittet	lt
 800ae0e:	425b      	neglt	r3, r3
 800ae10:	f042 0202 	orrlt.w	r2, r2, #2
 800ae14:	9307      	strge	r3, [sp, #28]
 800ae16:	9307      	strlt	r3, [sp, #28]
 800ae18:	bfb8      	it	lt
 800ae1a:	9204      	strlt	r2, [sp, #16]
 800ae1c:	7823      	ldrb	r3, [r4, #0]
 800ae1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae20:	d10a      	bne.n	800ae38 <_svfiprintf_r+0x130>
 800ae22:	7863      	ldrb	r3, [r4, #1]
 800ae24:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae26:	d132      	bne.n	800ae8e <_svfiprintf_r+0x186>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	1d1a      	adds	r2, r3, #4
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	9203      	str	r2, [sp, #12]
 800ae30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae34:	3402      	adds	r4, #2
 800ae36:	9305      	str	r3, [sp, #20]
 800ae38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aefc <_svfiprintf_r+0x1f4>
 800ae3c:	7821      	ldrb	r1, [r4, #0]
 800ae3e:	2203      	movs	r2, #3
 800ae40:	4650      	mov	r0, sl
 800ae42:	f7f5 f9d5 	bl	80001f0 <memchr>
 800ae46:	b138      	cbz	r0, 800ae58 <_svfiprintf_r+0x150>
 800ae48:	9b04      	ldr	r3, [sp, #16]
 800ae4a:	eba0 000a 	sub.w	r0, r0, sl
 800ae4e:	2240      	movs	r2, #64	@ 0x40
 800ae50:	4082      	lsls	r2, r0
 800ae52:	4313      	orrs	r3, r2
 800ae54:	3401      	adds	r4, #1
 800ae56:	9304      	str	r3, [sp, #16]
 800ae58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae5c:	4824      	ldr	r0, [pc, #144]	@ (800aef0 <_svfiprintf_r+0x1e8>)
 800ae5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae62:	2206      	movs	r2, #6
 800ae64:	f7f5 f9c4 	bl	80001f0 <memchr>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d036      	beq.n	800aeda <_svfiprintf_r+0x1d2>
 800ae6c:	4b21      	ldr	r3, [pc, #132]	@ (800aef4 <_svfiprintf_r+0x1ec>)
 800ae6e:	bb1b      	cbnz	r3, 800aeb8 <_svfiprintf_r+0x1b0>
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	3307      	adds	r3, #7
 800ae74:	f023 0307 	bic.w	r3, r3, #7
 800ae78:	3308      	adds	r3, #8
 800ae7a:	9303      	str	r3, [sp, #12]
 800ae7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae7e:	4433      	add	r3, r6
 800ae80:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae82:	e76a      	b.n	800ad5a <_svfiprintf_r+0x52>
 800ae84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae88:	460c      	mov	r4, r1
 800ae8a:	2001      	movs	r0, #1
 800ae8c:	e7a8      	b.n	800ade0 <_svfiprintf_r+0xd8>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	3401      	adds	r4, #1
 800ae92:	9305      	str	r3, [sp, #20]
 800ae94:	4619      	mov	r1, r3
 800ae96:	f04f 0c0a 	mov.w	ip, #10
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea0:	3a30      	subs	r2, #48	@ 0x30
 800aea2:	2a09      	cmp	r2, #9
 800aea4:	d903      	bls.n	800aeae <_svfiprintf_r+0x1a6>
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d0c6      	beq.n	800ae38 <_svfiprintf_r+0x130>
 800aeaa:	9105      	str	r1, [sp, #20]
 800aeac:	e7c4      	b.n	800ae38 <_svfiprintf_r+0x130>
 800aeae:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e7f0      	b.n	800ae9a <_svfiprintf_r+0x192>
 800aeb8:	ab03      	add	r3, sp, #12
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	462a      	mov	r2, r5
 800aebe:	4b0e      	ldr	r3, [pc, #56]	@ (800aef8 <_svfiprintf_r+0x1f0>)
 800aec0:	a904      	add	r1, sp, #16
 800aec2:	4638      	mov	r0, r7
 800aec4:	f3af 8000 	nop.w
 800aec8:	1c42      	adds	r2, r0, #1
 800aeca:	4606      	mov	r6, r0
 800aecc:	d1d6      	bne.n	800ae7c <_svfiprintf_r+0x174>
 800aece:	89ab      	ldrh	r3, [r5, #12]
 800aed0:	065b      	lsls	r3, r3, #25
 800aed2:	f53f af2d 	bmi.w	800ad30 <_svfiprintf_r+0x28>
 800aed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aed8:	e72c      	b.n	800ad34 <_svfiprintf_r+0x2c>
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	462a      	mov	r2, r5
 800aee0:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <_svfiprintf_r+0x1f0>)
 800aee2:	a904      	add	r1, sp, #16
 800aee4:	4638      	mov	r0, r7
 800aee6:	f000 f879 	bl	800afdc <_printf_i>
 800aeea:	e7ed      	b.n	800aec8 <_svfiprintf_r+0x1c0>
 800aeec:	0800d9f0 	.word	0x0800d9f0
 800aef0:	0800d9fa 	.word	0x0800d9fa
 800aef4:	00000000 	.word	0x00000000
 800aef8:	0800ac51 	.word	0x0800ac51
 800aefc:	0800d9f6 	.word	0x0800d9f6

0800af00 <_printf_common>:
 800af00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af04:	4616      	mov	r6, r2
 800af06:	4698      	mov	r8, r3
 800af08:	688a      	ldr	r2, [r1, #8]
 800af0a:	690b      	ldr	r3, [r1, #16]
 800af0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af10:	4293      	cmp	r3, r2
 800af12:	bfb8      	it	lt
 800af14:	4613      	movlt	r3, r2
 800af16:	6033      	str	r3, [r6, #0]
 800af18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af1c:	4607      	mov	r7, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	b10a      	cbz	r2, 800af26 <_printf_common+0x26>
 800af22:	3301      	adds	r3, #1
 800af24:	6033      	str	r3, [r6, #0]
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	0699      	lsls	r1, r3, #26
 800af2a:	bf42      	ittt	mi
 800af2c:	6833      	ldrmi	r3, [r6, #0]
 800af2e:	3302      	addmi	r3, #2
 800af30:	6033      	strmi	r3, [r6, #0]
 800af32:	6825      	ldr	r5, [r4, #0]
 800af34:	f015 0506 	ands.w	r5, r5, #6
 800af38:	d106      	bne.n	800af48 <_printf_common+0x48>
 800af3a:	f104 0a19 	add.w	sl, r4, #25
 800af3e:	68e3      	ldr	r3, [r4, #12]
 800af40:	6832      	ldr	r2, [r6, #0]
 800af42:	1a9b      	subs	r3, r3, r2
 800af44:	42ab      	cmp	r3, r5
 800af46:	dc26      	bgt.n	800af96 <_printf_common+0x96>
 800af48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af4c:	6822      	ldr	r2, [r4, #0]
 800af4e:	3b00      	subs	r3, #0
 800af50:	bf18      	it	ne
 800af52:	2301      	movne	r3, #1
 800af54:	0692      	lsls	r2, r2, #26
 800af56:	d42b      	bmi.n	800afb0 <_printf_common+0xb0>
 800af58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af5c:	4641      	mov	r1, r8
 800af5e:	4638      	mov	r0, r7
 800af60:	47c8      	blx	r9
 800af62:	3001      	adds	r0, #1
 800af64:	d01e      	beq.n	800afa4 <_printf_common+0xa4>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	6922      	ldr	r2, [r4, #16]
 800af6a:	f003 0306 	and.w	r3, r3, #6
 800af6e:	2b04      	cmp	r3, #4
 800af70:	bf02      	ittt	eq
 800af72:	68e5      	ldreq	r5, [r4, #12]
 800af74:	6833      	ldreq	r3, [r6, #0]
 800af76:	1aed      	subeq	r5, r5, r3
 800af78:	68a3      	ldr	r3, [r4, #8]
 800af7a:	bf0c      	ite	eq
 800af7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af80:	2500      	movne	r5, #0
 800af82:	4293      	cmp	r3, r2
 800af84:	bfc4      	itt	gt
 800af86:	1a9b      	subgt	r3, r3, r2
 800af88:	18ed      	addgt	r5, r5, r3
 800af8a:	2600      	movs	r6, #0
 800af8c:	341a      	adds	r4, #26
 800af8e:	42b5      	cmp	r5, r6
 800af90:	d11a      	bne.n	800afc8 <_printf_common+0xc8>
 800af92:	2000      	movs	r0, #0
 800af94:	e008      	b.n	800afa8 <_printf_common+0xa8>
 800af96:	2301      	movs	r3, #1
 800af98:	4652      	mov	r2, sl
 800af9a:	4641      	mov	r1, r8
 800af9c:	4638      	mov	r0, r7
 800af9e:	47c8      	blx	r9
 800afa0:	3001      	adds	r0, #1
 800afa2:	d103      	bne.n	800afac <_printf_common+0xac>
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afac:	3501      	adds	r5, #1
 800afae:	e7c6      	b.n	800af3e <_printf_common+0x3e>
 800afb0:	18e1      	adds	r1, r4, r3
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	2030      	movs	r0, #48	@ 0x30
 800afb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afba:	4422      	add	r2, r4
 800afbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800afc4:	3302      	adds	r3, #2
 800afc6:	e7c7      	b.n	800af58 <_printf_common+0x58>
 800afc8:	2301      	movs	r3, #1
 800afca:	4622      	mov	r2, r4
 800afcc:	4641      	mov	r1, r8
 800afce:	4638      	mov	r0, r7
 800afd0:	47c8      	blx	r9
 800afd2:	3001      	adds	r0, #1
 800afd4:	d0e6      	beq.n	800afa4 <_printf_common+0xa4>
 800afd6:	3601      	adds	r6, #1
 800afd8:	e7d9      	b.n	800af8e <_printf_common+0x8e>
	...

0800afdc <_printf_i>:
 800afdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe0:	7e0f      	ldrb	r7, [r1, #24]
 800afe2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afe4:	2f78      	cmp	r7, #120	@ 0x78
 800afe6:	4691      	mov	r9, r2
 800afe8:	4680      	mov	r8, r0
 800afea:	460c      	mov	r4, r1
 800afec:	469a      	mov	sl, r3
 800afee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aff2:	d807      	bhi.n	800b004 <_printf_i+0x28>
 800aff4:	2f62      	cmp	r7, #98	@ 0x62
 800aff6:	d80a      	bhi.n	800b00e <_printf_i+0x32>
 800aff8:	2f00      	cmp	r7, #0
 800affa:	f000 80d2 	beq.w	800b1a2 <_printf_i+0x1c6>
 800affe:	2f58      	cmp	r7, #88	@ 0x58
 800b000:	f000 80b9 	beq.w	800b176 <_printf_i+0x19a>
 800b004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b008:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b00c:	e03a      	b.n	800b084 <_printf_i+0xa8>
 800b00e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b012:	2b15      	cmp	r3, #21
 800b014:	d8f6      	bhi.n	800b004 <_printf_i+0x28>
 800b016:	a101      	add	r1, pc, #4	@ (adr r1, 800b01c <_printf_i+0x40>)
 800b018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b01c:	0800b075 	.word	0x0800b075
 800b020:	0800b089 	.word	0x0800b089
 800b024:	0800b005 	.word	0x0800b005
 800b028:	0800b005 	.word	0x0800b005
 800b02c:	0800b005 	.word	0x0800b005
 800b030:	0800b005 	.word	0x0800b005
 800b034:	0800b089 	.word	0x0800b089
 800b038:	0800b005 	.word	0x0800b005
 800b03c:	0800b005 	.word	0x0800b005
 800b040:	0800b005 	.word	0x0800b005
 800b044:	0800b005 	.word	0x0800b005
 800b048:	0800b189 	.word	0x0800b189
 800b04c:	0800b0b3 	.word	0x0800b0b3
 800b050:	0800b143 	.word	0x0800b143
 800b054:	0800b005 	.word	0x0800b005
 800b058:	0800b005 	.word	0x0800b005
 800b05c:	0800b1ab 	.word	0x0800b1ab
 800b060:	0800b005 	.word	0x0800b005
 800b064:	0800b0b3 	.word	0x0800b0b3
 800b068:	0800b005 	.word	0x0800b005
 800b06c:	0800b005 	.word	0x0800b005
 800b070:	0800b14b 	.word	0x0800b14b
 800b074:	6833      	ldr	r3, [r6, #0]
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	6032      	str	r2, [r6, #0]
 800b07c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b080:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b084:	2301      	movs	r3, #1
 800b086:	e09d      	b.n	800b1c4 <_printf_i+0x1e8>
 800b088:	6833      	ldr	r3, [r6, #0]
 800b08a:	6820      	ldr	r0, [r4, #0]
 800b08c:	1d19      	adds	r1, r3, #4
 800b08e:	6031      	str	r1, [r6, #0]
 800b090:	0606      	lsls	r6, r0, #24
 800b092:	d501      	bpl.n	800b098 <_printf_i+0xbc>
 800b094:	681d      	ldr	r5, [r3, #0]
 800b096:	e003      	b.n	800b0a0 <_printf_i+0xc4>
 800b098:	0645      	lsls	r5, r0, #25
 800b09a:	d5fb      	bpl.n	800b094 <_printf_i+0xb8>
 800b09c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	da03      	bge.n	800b0ac <_printf_i+0xd0>
 800b0a4:	232d      	movs	r3, #45	@ 0x2d
 800b0a6:	426d      	negs	r5, r5
 800b0a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0ac:	4859      	ldr	r0, [pc, #356]	@ (800b214 <_printf_i+0x238>)
 800b0ae:	230a      	movs	r3, #10
 800b0b0:	e011      	b.n	800b0d6 <_printf_i+0xfa>
 800b0b2:	6821      	ldr	r1, [r4, #0]
 800b0b4:	6833      	ldr	r3, [r6, #0]
 800b0b6:	0608      	lsls	r0, r1, #24
 800b0b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0bc:	d402      	bmi.n	800b0c4 <_printf_i+0xe8>
 800b0be:	0649      	lsls	r1, r1, #25
 800b0c0:	bf48      	it	mi
 800b0c2:	b2ad      	uxthmi	r5, r5
 800b0c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0c6:	4853      	ldr	r0, [pc, #332]	@ (800b214 <_printf_i+0x238>)
 800b0c8:	6033      	str	r3, [r6, #0]
 800b0ca:	bf14      	ite	ne
 800b0cc:	230a      	movne	r3, #10
 800b0ce:	2308      	moveq	r3, #8
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b0d6:	6866      	ldr	r6, [r4, #4]
 800b0d8:	60a6      	str	r6, [r4, #8]
 800b0da:	2e00      	cmp	r6, #0
 800b0dc:	bfa2      	ittt	ge
 800b0de:	6821      	ldrge	r1, [r4, #0]
 800b0e0:	f021 0104 	bicge.w	r1, r1, #4
 800b0e4:	6021      	strge	r1, [r4, #0]
 800b0e6:	b90d      	cbnz	r5, 800b0ec <_printf_i+0x110>
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	d04b      	beq.n	800b184 <_printf_i+0x1a8>
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0f2:	fb03 5711 	mls	r7, r3, r1, r5
 800b0f6:	5dc7      	ldrb	r7, [r0, r7]
 800b0f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0fc:	462f      	mov	r7, r5
 800b0fe:	42bb      	cmp	r3, r7
 800b100:	460d      	mov	r5, r1
 800b102:	d9f4      	bls.n	800b0ee <_printf_i+0x112>
 800b104:	2b08      	cmp	r3, #8
 800b106:	d10b      	bne.n	800b120 <_printf_i+0x144>
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	07df      	lsls	r7, r3, #31
 800b10c:	d508      	bpl.n	800b120 <_printf_i+0x144>
 800b10e:	6923      	ldr	r3, [r4, #16]
 800b110:	6861      	ldr	r1, [r4, #4]
 800b112:	4299      	cmp	r1, r3
 800b114:	bfde      	ittt	le
 800b116:	2330      	movle	r3, #48	@ 0x30
 800b118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b11c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b120:	1b92      	subs	r2, r2, r6
 800b122:	6122      	str	r2, [r4, #16]
 800b124:	f8cd a000 	str.w	sl, [sp]
 800b128:	464b      	mov	r3, r9
 800b12a:	aa03      	add	r2, sp, #12
 800b12c:	4621      	mov	r1, r4
 800b12e:	4640      	mov	r0, r8
 800b130:	f7ff fee6 	bl	800af00 <_printf_common>
 800b134:	3001      	adds	r0, #1
 800b136:	d14a      	bne.n	800b1ce <_printf_i+0x1f2>
 800b138:	f04f 30ff 	mov.w	r0, #4294967295
 800b13c:	b004      	add	sp, #16
 800b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	f043 0320 	orr.w	r3, r3, #32
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	4833      	ldr	r0, [pc, #204]	@ (800b218 <_printf_i+0x23c>)
 800b14c:	2778      	movs	r7, #120	@ 0x78
 800b14e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	6831      	ldr	r1, [r6, #0]
 800b156:	061f      	lsls	r7, r3, #24
 800b158:	f851 5b04 	ldr.w	r5, [r1], #4
 800b15c:	d402      	bmi.n	800b164 <_printf_i+0x188>
 800b15e:	065f      	lsls	r7, r3, #25
 800b160:	bf48      	it	mi
 800b162:	b2ad      	uxthmi	r5, r5
 800b164:	6031      	str	r1, [r6, #0]
 800b166:	07d9      	lsls	r1, r3, #31
 800b168:	bf44      	itt	mi
 800b16a:	f043 0320 	orrmi.w	r3, r3, #32
 800b16e:	6023      	strmi	r3, [r4, #0]
 800b170:	b11d      	cbz	r5, 800b17a <_printf_i+0x19e>
 800b172:	2310      	movs	r3, #16
 800b174:	e7ac      	b.n	800b0d0 <_printf_i+0xf4>
 800b176:	4827      	ldr	r0, [pc, #156]	@ (800b214 <_printf_i+0x238>)
 800b178:	e7e9      	b.n	800b14e <_printf_i+0x172>
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	f023 0320 	bic.w	r3, r3, #32
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	e7f6      	b.n	800b172 <_printf_i+0x196>
 800b184:	4616      	mov	r6, r2
 800b186:	e7bd      	b.n	800b104 <_printf_i+0x128>
 800b188:	6833      	ldr	r3, [r6, #0]
 800b18a:	6825      	ldr	r5, [r4, #0]
 800b18c:	6961      	ldr	r1, [r4, #20]
 800b18e:	1d18      	adds	r0, r3, #4
 800b190:	6030      	str	r0, [r6, #0]
 800b192:	062e      	lsls	r6, r5, #24
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	d501      	bpl.n	800b19c <_printf_i+0x1c0>
 800b198:	6019      	str	r1, [r3, #0]
 800b19a:	e002      	b.n	800b1a2 <_printf_i+0x1c6>
 800b19c:	0668      	lsls	r0, r5, #25
 800b19e:	d5fb      	bpl.n	800b198 <_printf_i+0x1bc>
 800b1a0:	8019      	strh	r1, [r3, #0]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	6123      	str	r3, [r4, #16]
 800b1a6:	4616      	mov	r6, r2
 800b1a8:	e7bc      	b.n	800b124 <_printf_i+0x148>
 800b1aa:	6833      	ldr	r3, [r6, #0]
 800b1ac:	1d1a      	adds	r2, r3, #4
 800b1ae:	6032      	str	r2, [r6, #0]
 800b1b0:	681e      	ldr	r6, [r3, #0]
 800b1b2:	6862      	ldr	r2, [r4, #4]
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7f5 f81a 	bl	80001f0 <memchr>
 800b1bc:	b108      	cbz	r0, 800b1c2 <_printf_i+0x1e6>
 800b1be:	1b80      	subs	r0, r0, r6
 800b1c0:	6060      	str	r0, [r4, #4]
 800b1c2:	6863      	ldr	r3, [r4, #4]
 800b1c4:	6123      	str	r3, [r4, #16]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1cc:	e7aa      	b.n	800b124 <_printf_i+0x148>
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	4632      	mov	r2, r6
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	47d0      	blx	sl
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d0ad      	beq.n	800b138 <_printf_i+0x15c>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	079b      	lsls	r3, r3, #30
 800b1e0:	d413      	bmi.n	800b20a <_printf_i+0x22e>
 800b1e2:	68e0      	ldr	r0, [r4, #12]
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	4298      	cmp	r0, r3
 800b1e8:	bfb8      	it	lt
 800b1ea:	4618      	movlt	r0, r3
 800b1ec:	e7a6      	b.n	800b13c <_printf_i+0x160>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	4649      	mov	r1, r9
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	47d0      	blx	sl
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d09d      	beq.n	800b138 <_printf_i+0x15c>
 800b1fc:	3501      	adds	r5, #1
 800b1fe:	68e3      	ldr	r3, [r4, #12]
 800b200:	9903      	ldr	r1, [sp, #12]
 800b202:	1a5b      	subs	r3, r3, r1
 800b204:	42ab      	cmp	r3, r5
 800b206:	dcf2      	bgt.n	800b1ee <_printf_i+0x212>
 800b208:	e7eb      	b.n	800b1e2 <_printf_i+0x206>
 800b20a:	2500      	movs	r5, #0
 800b20c:	f104 0619 	add.w	r6, r4, #25
 800b210:	e7f5      	b.n	800b1fe <_printf_i+0x222>
 800b212:	bf00      	nop
 800b214:	0800da01 	.word	0x0800da01
 800b218:	0800da12 	.word	0x0800da12

0800b21c <memmove>:
 800b21c:	4288      	cmp	r0, r1
 800b21e:	b510      	push	{r4, lr}
 800b220:	eb01 0402 	add.w	r4, r1, r2
 800b224:	d902      	bls.n	800b22c <memmove+0x10>
 800b226:	4284      	cmp	r4, r0
 800b228:	4623      	mov	r3, r4
 800b22a:	d807      	bhi.n	800b23c <memmove+0x20>
 800b22c:	1e43      	subs	r3, r0, #1
 800b22e:	42a1      	cmp	r1, r4
 800b230:	d008      	beq.n	800b244 <memmove+0x28>
 800b232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b23a:	e7f8      	b.n	800b22e <memmove+0x12>
 800b23c:	4402      	add	r2, r0
 800b23e:	4601      	mov	r1, r0
 800b240:	428a      	cmp	r2, r1
 800b242:	d100      	bne.n	800b246 <memmove+0x2a>
 800b244:	bd10      	pop	{r4, pc}
 800b246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b24a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b24e:	e7f7      	b.n	800b240 <memmove+0x24>

0800b250 <_sbrk_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d06      	ldr	r5, [pc, #24]	@ (800b26c <_sbrk_r+0x1c>)
 800b254:	2300      	movs	r3, #0
 800b256:	4604      	mov	r4, r0
 800b258:	4608      	mov	r0, r1
 800b25a:	602b      	str	r3, [r5, #0]
 800b25c:	f7f9 f87a 	bl	8004354 <_sbrk>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d102      	bne.n	800b26a <_sbrk_r+0x1a>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b103      	cbz	r3, 800b26a <_sbrk_r+0x1a>
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	200020d8 	.word	0x200020d8

0800b270 <memcpy>:
 800b270:	440a      	add	r2, r1
 800b272:	4291      	cmp	r1, r2
 800b274:	f100 33ff 	add.w	r3, r0, #4294967295
 800b278:	d100      	bne.n	800b27c <memcpy+0xc>
 800b27a:	4770      	bx	lr
 800b27c:	b510      	push	{r4, lr}
 800b27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b282:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b286:	4291      	cmp	r1, r2
 800b288:	d1f9      	bne.n	800b27e <memcpy+0xe>
 800b28a:	bd10      	pop	{r4, pc}

0800b28c <_realloc_r>:
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4680      	mov	r8, r0
 800b292:	4615      	mov	r5, r2
 800b294:	460c      	mov	r4, r1
 800b296:	b921      	cbnz	r1, 800b2a2 <_realloc_r+0x16>
 800b298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	4611      	mov	r1, r2
 800b29e:	f7ff bc4b 	b.w	800ab38 <_malloc_r>
 800b2a2:	b92a      	cbnz	r2, 800b2b0 <_realloc_r+0x24>
 800b2a4:	f7ff fbdc 	bl	800aa60 <_free_r>
 800b2a8:	2400      	movs	r4, #0
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b0:	f000 f81a 	bl	800b2e8 <_malloc_usable_size_r>
 800b2b4:	4285      	cmp	r5, r0
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	d802      	bhi.n	800b2c0 <_realloc_r+0x34>
 800b2ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2be:	d8f4      	bhi.n	800b2aa <_realloc_r+0x1e>
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	f7ff fc38 	bl	800ab38 <_malloc_r>
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d0ec      	beq.n	800b2a8 <_realloc_r+0x1c>
 800b2ce:	42b5      	cmp	r5, r6
 800b2d0:	462a      	mov	r2, r5
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	bf28      	it	cs
 800b2d6:	4632      	movcs	r2, r6
 800b2d8:	f7ff ffca 	bl	800b270 <memcpy>
 800b2dc:	4621      	mov	r1, r4
 800b2de:	4640      	mov	r0, r8
 800b2e0:	f7ff fbbe 	bl	800aa60 <_free_r>
 800b2e4:	463c      	mov	r4, r7
 800b2e6:	e7e0      	b.n	800b2aa <_realloc_r+0x1e>

0800b2e8 <_malloc_usable_size_r>:
 800b2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ec:	1f18      	subs	r0, r3, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bfbc      	itt	lt
 800b2f2:	580b      	ldrlt	r3, [r1, r0]
 800b2f4:	18c0      	addlt	r0, r0, r3
 800b2f6:	4770      	bx	lr

0800b2f8 <_init>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr

0800b304 <_fini>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr
