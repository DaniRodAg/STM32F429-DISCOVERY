
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6ac  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ae4  0800b85c  0800b85c  0000c85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e340  0800e340  000100e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e340  0800e340  0000f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e348  0800e348  000100e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e348  0800e348  0000f348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e34c  0800e34c  0000f34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800e350  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000100e0  2**0
                  CONTENTS
 10 .bss          00000b34  200000e0  200000e0  000100e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c14  20000c14  000100e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000100e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000213b9  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000575e  00000000  00000000  000314c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  00036c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a1  00000000  00000000  000389c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b97d  00000000  00000000  0003a069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000282b0  00000000  00000000  000659e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7dca  00000000  00000000  0008dc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00185a60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000812c  00000000  00000000  00185aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0018dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b844 	.word	0x0800b844

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	0800b844 	.word	0x0800b844

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000dc0:	f000 fe62 	bl	8001a88 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000dc4:	20ca      	movs	r0, #202	@ 0xca
 8000dc6:	f000 f95d 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000dca:	20c3      	movs	r0, #195	@ 0xc3
 8000dcc:	f000 f967 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000dd0:	2008      	movs	r0, #8
 8000dd2:	f000 f964 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000dd6:	2050      	movs	r0, #80	@ 0x50
 8000dd8:	f000 f961 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000ddc:	20cf      	movs	r0, #207	@ 0xcf
 8000dde:	f000 f951 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f95b 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000de8:	20c1      	movs	r0, #193	@ 0xc1
 8000dea:	f000 f958 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000dee:	2030      	movs	r0, #48	@ 0x30
 8000df0:	f000 f955 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000df4:	20ed      	movs	r0, #237	@ 0xed
 8000df6:	f000 f945 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000dfa:	2064      	movs	r0, #100	@ 0x64
 8000dfc:	f000 f94f 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f94c 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000e06:	2012      	movs	r0, #18
 8000e08:	f000 f949 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000e0c:	2081      	movs	r0, #129	@ 0x81
 8000e0e:	f000 f946 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000e12:	20e8      	movs	r0, #232	@ 0xe8
 8000e14:	f000 f936 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000e18:	2085      	movs	r0, #133	@ 0x85
 8000e1a:	f000 f940 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f93d 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000e24:	2078      	movs	r0, #120	@ 0x78
 8000e26:	f000 f93a 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000e2a:	20cb      	movs	r0, #203	@ 0xcb
 8000e2c:	f000 f92a 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000e30:	2039      	movs	r0, #57	@ 0x39
 8000e32:	f000 f934 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000e36:	202c      	movs	r0, #44	@ 0x2c
 8000e38:	f000 f931 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f92e 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000e42:	2034      	movs	r0, #52	@ 0x34
 8000e44:	f000 f92b 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f000 f928 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000e4e:	20f7      	movs	r0, #247	@ 0xf7
 8000e50:	f000 f918 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000e54:	2020      	movs	r0, #32
 8000e56:	f000 f922 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000e5a:	20ea      	movs	r0, #234	@ 0xea
 8000e5c:	f000 f912 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f91c 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f919 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000e6c:	20b1      	movs	r0, #177	@ 0xb1
 8000e6e:	f000 f909 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f913 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000e78:	201b      	movs	r0, #27
 8000e7a:	f000 f910 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e7e:	20b6      	movs	r0, #182	@ 0xb6
 8000e80:	f000 f900 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e84:	200a      	movs	r0, #10
 8000e86:	f000 f90a 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000e8a:	20a2      	movs	r0, #162	@ 0xa2
 8000e8c:	f000 f907 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000e90:	20c0      	movs	r0, #192	@ 0xc0
 8000e92:	f000 f8f7 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e96:	2010      	movs	r0, #16
 8000e98:	f000 f901 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000e9c:	20c1      	movs	r0, #193	@ 0xc1
 8000e9e:	f000 f8f1 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000ea2:	2010      	movs	r0, #16
 8000ea4:	f000 f8fb 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000ea8:	20c5      	movs	r0, #197	@ 0xc5
 8000eaa:	f000 f8eb 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000eae:	2045      	movs	r0, #69	@ 0x45
 8000eb0:	f000 f8f5 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000eb4:	2015      	movs	r0, #21
 8000eb6:	f000 f8f2 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000eba:	20c7      	movs	r0, #199	@ 0xc7
 8000ebc:	f000 f8e2 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000ec0:	2090      	movs	r0, #144	@ 0x90
 8000ec2:	f000 f8ec 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000ec6:	2036      	movs	r0, #54	@ 0x36
 8000ec8:	f000 f8dc 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000ecc:	20c8      	movs	r0, #200	@ 0xc8
 8000ece:	f000 f8e6 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000ed2:	20f2      	movs	r0, #242	@ 0xf2
 8000ed4:	f000 f8d6 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 f8e0 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000ede:	20b0      	movs	r0, #176	@ 0xb0
 8000ee0:	f000 f8d0 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000ee4:	20c2      	movs	r0, #194	@ 0xc2
 8000ee6:	f000 f8da 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000eea:	20b6      	movs	r0, #182	@ 0xb6
 8000eec:	f000 f8ca 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f000 f8d4 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000ef6:	20a7      	movs	r0, #167	@ 0xa7
 8000ef8:	f000 f8d1 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000efc:	2027      	movs	r0, #39	@ 0x27
 8000efe:	f000 f8ce 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000f02:	2004      	movs	r0, #4
 8000f04:	f000 f8cb 	bl	800109e <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000f08:	202a      	movs	r0, #42	@ 0x2a
 8000f0a:	f000 f8bb 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f8c5 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 f8c2 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f000 f8bf 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000f20:	20ef      	movs	r0, #239	@ 0xef
 8000f22:	f000 f8bc 	bl	800109e <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000f26:	202b      	movs	r0, #43	@ 0x2b
 8000f28:	f000 f8ac 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f8b6 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f8b3 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f000 f8b0 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000f3e:	203f      	movs	r0, #63	@ 0x3f
 8000f40:	f000 f8ad 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000f44:	20f6      	movs	r0, #246	@ 0xf6
 8000f46:	f000 f89d 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 f8a7 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f8a4 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000f56:	2006      	movs	r0, #6
 8000f58:	f000 f8a1 	bl	800109e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000f5c:	202c      	movs	r0, #44	@ 0x2c
 8000f5e:	f000 f891 	bl	8001084 <ili9341_WriteReg>
  LCD_Delay(200);
 8000f62:	20c8      	movs	r0, #200	@ 0xc8
 8000f64:	f000 fe7e 	bl	8001c64 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000f68:	2026      	movs	r0, #38	@ 0x26
 8000f6a:	f000 f88b 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 f895 	bl	800109e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000f74:	20e0      	movs	r0, #224	@ 0xe0
 8000f76:	f000 f885 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f000 f88f 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000f80:	2029      	movs	r0, #41	@ 0x29
 8000f82:	f000 f88c 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000f86:	2024      	movs	r0, #36	@ 0x24
 8000f88:	f000 f889 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000f8c:	200c      	movs	r0, #12
 8000f8e:	f000 f886 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000f92:	200e      	movs	r0, #14
 8000f94:	f000 f883 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f98:	2009      	movs	r0, #9
 8000f9a:	f000 f880 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000f9e:	204e      	movs	r0, #78	@ 0x4e
 8000fa0:	f000 f87d 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000fa4:	2078      	movs	r0, #120	@ 0x78
 8000fa6:	f000 f87a 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000faa:	203c      	movs	r0, #60	@ 0x3c
 8000fac:	f000 f877 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000fb0:	2009      	movs	r0, #9
 8000fb2:	f000 f874 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000fb6:	2013      	movs	r0, #19
 8000fb8:	f000 f871 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f000 f86e 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000fc2:	2017      	movs	r0, #23
 8000fc4:	f000 f86b 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000fc8:	2011      	movs	r0, #17
 8000fca:	f000 f868 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f865 	bl	800109e <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000fd4:	20e1      	movs	r0, #225	@ 0xe1
 8000fd6:	f000 f855 	bl	8001084 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f85f 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000fe0:	2016      	movs	r0, #22
 8000fe2:	f000 f85c 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fe6:	201b      	movs	r0, #27
 8000fe8:	f000 f859 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000fec:	2004      	movs	r0, #4
 8000fee:	f000 f856 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000ff2:	2011      	movs	r0, #17
 8000ff4:	f000 f853 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000ff8:	2007      	movs	r0, #7
 8000ffa:	f000 f850 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000ffe:	2031      	movs	r0, #49	@ 0x31
 8001000:	f000 f84d 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001004:	2033      	movs	r0, #51	@ 0x33
 8001006:	f000 f84a 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800100a:	2042      	movs	r0, #66	@ 0x42
 800100c:	f000 f847 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001010:	2005      	movs	r0, #5
 8001012:	f000 f844 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001016:	200c      	movs	r0, #12
 8001018:	f000 f841 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800101c:	200a      	movs	r0, #10
 800101e:	f000 f83e 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001022:	2028      	movs	r0, #40	@ 0x28
 8001024:	f000 f83b 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001028:	202f      	movs	r0, #47	@ 0x2f
 800102a:	f000 f838 	bl	800109e <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800102e:	200f      	movs	r0, #15
 8001030:	f000 f835 	bl	800109e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001034:	2011      	movs	r0, #17
 8001036:	f000 f825 	bl	8001084 <ili9341_WriteReg>
  LCD_Delay(200);
 800103a:	20c8      	movs	r0, #200	@ 0xc8
 800103c:	f000 fe12 	bl	8001c64 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001040:	2029      	movs	r0, #41	@ 0x29
 8001042:	f000 f81f 	bl	8001084 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001046:	202c      	movs	r0, #44	@ 0x2c
 8001048:	f000 f81c 	bl	8001084 <ili9341_WriteReg>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001054:	f000 fd18 	bl	8001a88 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001058:	2103      	movs	r1, #3
 800105a:	20d3      	movs	r0, #211	@ 0xd3
 800105c:	f000 f82c 	bl	80010b8 <ili9341_ReadData>
 8001060:	4603      	mov	r3, r0
 8001062:	b29b      	uxth	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}

08001068 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800106c:	2029      	movs	r0, #41	@ 0x29
 800106e:	f000 f809 	bl	8001084 <ili9341_WriteReg>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800107a:	2028      	movs	r0, #40	@ 0x28
 800107c:	f000 f802 	bl	8001084 <ili9341_WriteReg>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fd93 	bl	8001bbc <LCD_IO_WriteReg>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fd64 	bl	8001b78 <LCD_IO_WriteData>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	4613      	mov	r3, r2
 80010c6:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80010c8:	797a      	ldrb	r2, [r7, #5]
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fd96 	bl	8001c00 <LCD_IO_ReadData>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80010e2:	23f0      	movs	r3, #240	@ 0xf0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80010f2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fa59 	bl	80015c4 <stmpe811_GetInstance>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2bff      	cmp	r3, #255	@ 0xff
 800111a:	d112      	bne.n	8001142 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 fa51 	bl	80015c4 <stmpe811_GetInstance>
 8001122:	4603      	mov	r3, r0
 8001124:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d80a      	bhi.n	8001142 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	b2d1      	uxtb	r1, r2
 8001132:	4a06      	ldr	r2, [pc, #24]	@ (800114c <stmpe811_Init+0x4c>)
 8001134:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001136:	f000 fda0 	bl	8001c7a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f807 	bl	8001150 <stmpe811_Reset>
    }
  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000fc 	.word	0x200000fc

08001150 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2202      	movs	r2, #2
 8001160:	2103      	movs	r1, #3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fd95 	bl	8001c92 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001168:	200a      	movs	r0, #10
 800116a:	f000 fdce 	bl	8001d0a <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2200      	movs	r2, #0
 8001174:	2103      	movs	r1, #3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fd8b 	bl	8001c92 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800117c:	2002      	movs	r0, #2
 800117e:	f000 fdc4 	bl	8001d0a <IOE_Delay>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800118a:	b590      	push	{r4, r7, lr}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001194:	f000 fd71 	bl	8001c7a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fd8a 	bl	8001cb8 <IOE_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fd81 	bl	8001cb8 <IOE_Read>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80011ba:	4323      	orrs	r3, r4
 80011bc:	b21b      	sxth	r3, r3
 80011be:	b29b      	uxth	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}

080011c8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2109      	movs	r1, #9
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fd6b 	bl	8001cb8 <IOE_Read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	2109      	movs	r1, #9
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd4b 	bl	8001c92 <IOE_Write>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2109      	movs	r1, #9
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fd4d 	bl	8001cb8 <IOE_Read>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	2109      	movs	r1, #9
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fd2d 	bl	8001c92 <IOE_Write>
    
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	210a      	movs	r1, #10
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fd2c 	bl	8001cb8 <IOE_Read>
 8001260:	4603      	mov	r3, r0
 8001262:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	4313      	orrs	r3, r2
 800126a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	210a      	movs	r1, #10
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fd0c 	bl	8001c92 <IOE_Write>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	460a      	mov	r2, r1
 800128c:	80fb      	strh	r3, [r7, #6]
 800128e:	4613      	mov	r3, r2
 8001290:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	210a      	movs	r1, #10
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fd0b 	bl	8001cb8 <IOE_Read>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80012a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	b25a      	sxtb	r2, r3
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4013      	ands	r3, r2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	210a      	movs	r1, #10
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fce6 	bl	8001c92 <IOE_Write>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	460a      	mov	r2, r1
 80012d8:	80fb      	strh	r3, [r7, #6]
 80012da:	4613      	mov	r3, r2
 80012dc:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	210b      	movs	r1, #11
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fce7 	bl	8001cb8 <IOE_Read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	797b      	ldrb	r3, [r7, #5]
 80012f0:	4013      	ands	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	797a      	ldrb	r2, [r7, #5]
 8001312:	210b      	movs	r1, #11
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fcbc 	bl	8001c92 <IOE_Write>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	6039      	str	r1, [r7, #0]
 800132c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2117      	movs	r1, #23
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fcbd 	bl	8001cb8 <IOE_Read>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b25b      	sxtb	r3, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	b25a      	sxtb	r2, r3
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4013      	ands	r3, r2
 8001350:	b25b      	sxtb	r3, r3
 8001352:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	2117      	movs	r1, #23
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fc98 	bl	8001c92 <IOE_Write>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2104      	movs	r1, #4
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fc9c 	bl	8001cb8 <IOE_Read>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	2104      	movs	r1, #4
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fc7c 	bl	8001c92 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	21f0      	movs	r1, #240	@ 0xf0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffbf 	bl	8001322 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	2104      	movs	r1, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fc6c 	bl	8001c92 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2249      	movs	r2, #73	@ 0x49
 80013c0:	2120      	movs	r1, #32
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fc65 	bl	8001c92 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80013c8:	2002      	movs	r0, #2
 80013ca:	f000 fc9e 	bl	8001d0a <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2201      	movs	r2, #1
 80013d4:	2121      	movs	r1, #33	@ 0x21
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fc5b 	bl	8001c92 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	229a      	movs	r2, #154	@ 0x9a
 80013e2:	2141      	movs	r1, #65	@ 0x41
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fc54 	bl	8001c92 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2201      	movs	r2, #1
 80013f0:	214a      	movs	r1, #74	@ 0x4a
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc4d 	bl	8001c92 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2201      	movs	r2, #1
 80013fe:	214b      	movs	r1, #75	@ 0x4b
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fc46 	bl	8001c92 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2200      	movs	r2, #0
 800140c:	214b      	movs	r1, #75	@ 0x4b
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fc3f 	bl	8001c92 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2201      	movs	r2, #1
 800141a:	2156      	movs	r1, #86	@ 0x56
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fc38 	bl	8001c92 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2201      	movs	r2, #1
 8001428:	2158      	movs	r1, #88	@ 0x58
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fc31 	bl	8001c92 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2201      	movs	r2, #1
 8001436:	2140      	movs	r1, #64	@ 0x40
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fc2a 	bl	8001c92 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	22ff      	movs	r2, #255	@ 0xff
 8001444:	210b      	movs	r1, #11
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fc23 	bl	8001c92 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800144c:	2002      	movs	r0, #2
 800144e:	f000 fc5c 	bl	8001d0a <IOE_Delay>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2140      	movs	r1, #64	@ 0x40
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fc22 	bl	8001cb8 <IOE_Read>
 8001474:	4603      	mov	r3, r0
 8001476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147a:	2b80      	cmp	r3, #128	@ 0x80
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	214c      	movs	r1, #76	@ 0x4c
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fc10 	bl	8001cb8 <IOE_Read>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d010      	beq.n	80014c0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e00d      	b.n	80014c0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2201      	movs	r2, #1
 80014aa:	214b      	movs	r1, #75	@ 0x4b
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fbf0 	bl	8001c92 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	214b      	movs	r1, #75	@ 0x4b
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fbe9 	bl	8001c92 <IOE_Write>
  }
  
  return ret;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	b2d8      	uxtb	r0, r3
 80014dc:	f107 0210 	add.w	r2, r7, #16
 80014e0:	2304      	movs	r3, #4
 80014e2:	21d7      	movs	r1, #215	@ 0xd7
 80014e4:	f000 fbfb 	bl	8001cde <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80014e8:	7c3b      	ldrb	r3, [r7, #16]
 80014ea:	061a      	lsls	r2, r3, #24
 80014ec:	7c7b      	ldrb	r3, [r7, #17]
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	7cbb      	ldrb	r3, [r7, #18]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	4313      	orrs	r3, r2
 80014f8:	7cfa      	ldrb	r2, [r7, #19]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	0d1b      	lsrs	r3, r3, #20
 8001502:	b29a      	uxth	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2201      	movs	r2, #1
 800151e:	214b      	movs	r1, #75	@ 0x4b
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fbb6 	bl	8001c92 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2200      	movs	r2, #0
 800152c:	214b      	movs	r1, #75	@ 0x4b
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fbaf 	bl	8001c92 <IOE_Write>
}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8001546:	f000 fb9e 	bl	8001c86 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	211f      	movs	r1, #31
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fe76 	bl	8001240 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe36 	bl	80011c8 <stmpe811_EnableGlobalIT>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe47 	bl	8001204 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	211f      	movs	r1, #31
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe81 	bl	8001282 <stmpe811_DisableITSource>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	211f      	movs	r1, #31
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe99 	bl	80012ce <stmpe811_ReadGITStatus>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	211f      	movs	r1, #31
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fea1 	bl	80012fc <stmpe811_ClearGlobalIT>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e00b      	b.n	80015f0 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <stmpe811_GetInstance+0x40>)
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	461a      	mov	r2, r3
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	e006      	b.n	80015f8 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	3301      	adds	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d9f0      	bls.n	80015d8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80015f6:	23ff      	movs	r3, #255	@ 0xff
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	200000fc 	.word	0x200000fc

08001608 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <BSP_LED_On+0x2c>)
 8001616:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <BSP_LED_On+0x30>)
 800161e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001622:	2201      	movs	r2, #1
 8001624:	4619      	mov	r1, r3
 8001626:	f004 ffa1 	bl	800656c <HAL_GPIO_WritePin>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000060 	.word	0x20000060
 8001638:	0800b880 	.word	0x0800b880

0800163c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a33      	ldr	r2, [pc, #204]	@ (8001718 <I2Cx_MspInit+0xdc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d15f      	bne.n	800170e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <I2Cx_MspInit+0xe0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a31      	ldr	r2, [pc, #196]	@ (800171c <I2Cx_MspInit+0xe0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <I2Cx_MspInit+0xe0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <I2Cx_MspInit+0xe0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <I2Cx_MspInit+0xe0>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b28      	ldr	r3, [pc, #160]	@ (800171c <I2Cx_MspInit+0xe0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8001686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001698:	2304      	movs	r3, #4
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	481f      	ldr	r0, [pc, #124]	@ (8001720 <I2Cx_MspInit+0xe4>)
 80016a4:	f004 fcaa 	bl	8005ffc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80016a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ac:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	481b      	ldr	r0, [pc, #108]	@ (8001724 <I2Cx_MspInit+0xe8>)
 80016b6:	f004 fca1 	bl	8005ffc <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <I2Cx_MspInit+0xe0>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <I2Cx_MspInit+0xe0>)
 80016c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <I2Cx_MspInit+0xe0>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <I2Cx_MspInit+0xe0>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <I2Cx_MspInit+0xe0>)
 80016dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016e0:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <I2Cx_MspInit+0xe0>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <I2Cx_MspInit+0xe0>)
 80016e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80016ec:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	210f      	movs	r1, #15
 80016f2:	2048      	movs	r0, #72	@ 0x48
 80016f4:	f003 fbec 	bl	8004ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80016f8:	2048      	movs	r0, #72	@ 0x48
 80016fa:	f003 fc05 	bl	8004f08 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	210f      	movs	r1, #15
 8001702:	2049      	movs	r0, #73	@ 0x49
 8001704:	f003 fbe4 	bl	8004ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001708:	2049      	movs	r0, #73	@ 0x49
 800170a:	f003 fbfd 	bl	8004f08 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40005c00 	.word	0x40005c00
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020800 	.word	0x40020800

08001728 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800172c:	4814      	ldr	r0, [pc, #80]	@ (8001780 <I2Cx_Init+0x58>)
 800172e:	f005 fbf1 	bl	8006f14 <HAL_I2C_GetState>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d121      	bne.n	800177c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <I2Cx_Init+0x58>)
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <I2Cx_Init+0x5c>)
 800173c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <I2Cx_Init+0x58>)
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <I2Cx_Init+0x60>)
 8001742:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <I2Cx_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <I2Cx_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <I2Cx_Init+0x58>)
 8001752:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001756:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <I2Cx_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <I2Cx_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <I2Cx_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <I2Cx_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <I2Cx_Init+0x58>)
 8001772:	f7ff ff63 	bl	800163c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001776:	4802      	ldr	r0, [pc, #8]	@ (8001780 <I2Cx_Init+0x58>)
 8001778:	f004 ff2c 	bl	80065d4 <HAL_I2C_Init>
  }
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000100 	.word	0x20000100
 8001784:	40005c00 	.word	0x40005c00
 8001788:	000186a0 	.word	0x000186a0

0800178c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <I2Cx_ITConfig+0x58>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <I2Cx_ITConfig+0x58>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <I2Cx_ITConfig+0x58>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80017ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80017bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017c0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <I2Cx_ITConfig+0x5c>)
 80017c8:	f004 fc18 	bl	8005ffc <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80017cc:	2200      	movs	r2, #0
 80017ce:	210f      	movs	r1, #15
 80017d0:	2028      	movs	r0, #40	@ 0x28
 80017d2:	f003 fb7d 	bl	8004ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80017d6:	2028      	movs	r0, #40	@ 0x28
 80017d8:	f003 fb96 	bl	8004f08 <HAL_NVIC_EnableIRQ>
}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000

080017ec <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af04      	add	r7, sp, #16
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	460b      	mov	r3, r1
 80017f8:	71bb      	strb	r3, [r7, #6]
 80017fa:	4613      	mov	r3, r2
 80017fc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	b299      	uxth	r1, r3
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <I2Cx_WriteData+0x4c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	1d7b      	adds	r3, r7, #5
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	4808      	ldr	r0, [pc, #32]	@ (800183c <I2Cx_WriteData+0x50>)
 800181c:	f005 f84e 	bl	80068bc <HAL_I2C_Mem_Write>
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800182a:	f000 f863 	bl	80018f4 <I2Cx_Error>
  }
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000068 	.word	0x20000068
 800183c:	20000100 	.word	0x20000100

08001840 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af04      	add	r7, sp, #16
 8001846:	4603      	mov	r3, r0
 8001848:	460a      	mov	r2, r1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	4613      	mov	r3, r2
 800184e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	b299      	uxth	r1, r3
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <I2Cx_ReadData+0x50>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2301      	movs	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f107 030e 	add.w	r3, r7, #14
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	4808      	ldr	r0, [pc, #32]	@ (8001894 <I2Cx_ReadData+0x54>)
 8001874:	f005 f91c 	bl	8006ab0 <HAL_I2C_Mem_Read>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001882:	f000 f837 	bl	80018f4 <I2Cx_Error>

  }
  return value;
 8001886:	7bbb      	ldrb	r3, [r7, #14]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000068 	.word	0x20000068
 8001894:	20000100 	.word	0x20000100

08001898 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af04      	add	r7, sp, #16
 800189e:	603a      	str	r2, [r7, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	460b      	mov	r3, r1
 80018a8:	71bb      	strb	r3, [r7, #6]
 80018aa:	4613      	mov	r3, r2
 80018ac:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	b299      	uxth	r1, r3
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <I2Cx_ReadBuffer+0x54>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <I2Cx_ReadBuffer+0x58>)
 80018cc:	f005 f8f0 	bl	8006ab0 <HAL_I2C_Mem_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	e002      	b.n	80018e4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80018de:	f000 f809 	bl	80018f4 <I2Cx_Error>

    return 1;
 80018e2:	2301      	movs	r3, #1
  }
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000068 	.word	0x20000068
 80018f0:	20000100 	.word	0x20000100

080018f4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <I2Cx_Error+0x14>)
 80018fa:	f004 ffaf 	bl	800685c <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80018fe:	f7ff ff13 	bl	8001728 <I2Cx_Init>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000100 	.word	0x20000100

0800190c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001910:	4819      	ldr	r0, [pc, #100]	@ (8001978 <SPIx_Init+0x6c>)
 8001912:	f007 fedd 	bl	80096d0 <HAL_SPI_GetState>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d12b      	bne.n	8001974 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <SPIx_Init+0x6c>)
 800191e:	4a17      	ldr	r2, [pc, #92]	@ (800197c <SPIx_Init+0x70>)
 8001920:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <SPIx_Init+0x6c>)
 8001924:	2218      	movs	r2, #24
 8001926:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <SPIx_Init+0x6c>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <SPIx_Init+0x6c>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001934:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <SPIx_Init+0x6c>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800193a:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <SPIx_Init+0x6c>)
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <SPIx_Init+0x6c>)
 8001942:	2207      	movs	r2, #7
 8001944:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <SPIx_Init+0x6c>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <SPIx_Init+0x6c>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <SPIx_Init+0x6c>)
 8001954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001958:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <SPIx_Init+0x6c>)
 800195c:	2200      	movs	r2, #0
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SPIx_Init+0x6c>)
 8001962:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001966:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001968:	4803      	ldr	r0, [pc, #12]	@ (8001978 <SPIx_Init+0x6c>)
 800196a:	f000 f853 	bl	8001a14 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800196e:	4802      	ldr	r0, [pc, #8]	@ (8001978 <SPIx_Init+0x6c>)
 8001970:	f007 f9f7 	bl	8008d62 <HAL_SPI_Init>
  }
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000154 	.word	0x20000154
 800197c:	40015000 	.word	0x40015000

08001980 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <SPIx_Read+0x38>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f107 0108 	add.w	r1, r7, #8
 800199a:	4808      	ldr	r0, [pc, #32]	@ (80019bc <SPIx_Read+0x3c>)
 800199c:	f007 fbd6 	bl	800914c <HAL_SPI_Receive>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80019aa:	f000 f827 	bl	80019fc <SPIx_Error>
  }

  return readvalue;
 80019ae:	68bb      	ldr	r3, [r7, #8]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000006c 	.word	0x2000006c
 80019bc:	20000154 	.word	0x20000154

080019c0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <SPIx_Write+0x34>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1db9      	adds	r1, r7, #6
 80019d4:	2201      	movs	r2, #1
 80019d6:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <SPIx_Write+0x38>)
 80019d8:	f007 fa74 	bl	8008ec4 <HAL_SPI_Transmit>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80019e6:	f000 f809 	bl	80019fc <SPIx_Error>
  }
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000006c 	.word	0x2000006c
 80019f8:	20000154 	.word	0x20000154

080019fc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <SPIx_Error+0x14>)
 8001a02:	f007 fa37 	bl	8008e74 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001a06:	f7ff ff81 	bl	800190c <SPIx_Init>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000154 	.word	0x20000154

08001a14 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <SPIx_MspInit+0x6c>)
 8001a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a24:	4a16      	ldr	r2, [pc, #88]	@ (8001a80 <SPIx_MspInit+0x6c>)
 8001a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <SPIx_MspInit+0x6c>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <SPIx_MspInit+0x6c>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a40:	4a0f      	ldr	r2, [pc, #60]	@ (8001a80 <SPIx_MspInit+0x6c>)
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <SPIx_MspInit+0x6c>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001a54:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a62:	2301      	movs	r3, #1
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001a66:	2305      	movs	r3, #5
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4804      	ldr	r0, [pc, #16]	@ (8001a84 <SPIx_MspInit+0x70>)
 8001a72:	f004 fac3 	bl	8005ffc <HAL_GPIO_Init>
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	@ 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40021400 	.word	0x40021400

08001a88 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001a8e:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <LCD_IO_Init+0xe0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d164      	bne.n	8001b60 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <LCD_IO_Init+0xe0>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	4a31      	ldr	r2, [pc, #196]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001abc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4827      	ldr	r0, [pc, #156]	@ (8001b70 <LCD_IO_Init+0xe8>)
 8001ad2:	f004 fa93 	bl	8005ffc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4819      	ldr	r0, [pc, #100]	@ (8001b70 <LCD_IO_Init+0xe8>)
 8001b0c:	f004 fa76 	bl	8005ffc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <LCD_IO_Init+0xe4>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <LCD_IO_Init+0xec>)
 8001b44:	f004 fa5a 	bl	8005ffc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4809      	ldr	r0, [pc, #36]	@ (8001b74 <LCD_IO_Init+0xec>)
 8001b4e:	f004 fd0d 	bl	800656c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001b52:	2201      	movs	r2, #1
 8001b54:	2104      	movs	r1, #4
 8001b56:	4807      	ldr	r0, [pc, #28]	@ (8001b74 <LCD_IO_Init+0xec>)
 8001b58:	f004 fd08 	bl	800656c <HAL_GPIO_WritePin>

    SPIx_Init();
 8001b5c:	f7ff fed6 	bl	800190c <SPIx_Init>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200001ac 	.word	0x200001ac
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40020800 	.word	0x40020800

08001b78 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b82:	2201      	movs	r2, #1
 8001b84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b88:	480a      	ldr	r0, [pc, #40]	@ (8001bb4 <LCD_IO_WriteData+0x3c>)
 8001b8a:	f004 fcef 	bl	800656c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2104      	movs	r1, #4
 8001b92:	4809      	ldr	r0, [pc, #36]	@ (8001bb8 <LCD_IO_WriteData+0x40>)
 8001b94:	f004 fcea 	bl	800656c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff10 	bl	80019c0 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	4804      	ldr	r0, [pc, #16]	@ (8001bb8 <LCD_IO_WriteData+0x40>)
 8001ba6:	f004 fce1 	bl	800656c <HAL_GPIO_WritePin>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40020800 	.word	0x40020800

08001bbc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bcc:	480a      	ldr	r0, [pc, #40]	@ (8001bf8 <LCD_IO_WriteReg+0x3c>)
 8001bce:	f004 fccd 	bl	800656c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4809      	ldr	r0, [pc, #36]	@ (8001bfc <LCD_IO_WriteReg+0x40>)
 8001bd8:	f004 fcc8 	bl	800656c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff feed 	bl	80019c0 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001be6:	2201      	movs	r2, #1
 8001be8:	2104      	movs	r1, #4
 8001bea:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <LCD_IO_WriteReg+0x40>)
 8001bec:	f004 fcbe 	bl	800656c <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40020800 	.word	0x40020800

08001c00 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	460a      	mov	r2, r1
 8001c0a:	80fb      	strh	r3, [r7, #6]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001c14:	2200      	movs	r2, #0
 8001c16:	2104      	movs	r1, #4
 8001c18:	4810      	ldr	r0, [pc, #64]	@ (8001c5c <LCD_IO_ReadData+0x5c>)
 8001c1a:	f004 fca7 	bl	800656c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c24:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <LCD_IO_ReadData+0x60>)
 8001c26:	f004 fca1 	bl	800656c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fec7 	bl	80019c0 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001c32:	797b      	ldrb	r3, [r7, #5]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fea3 	bl	8001980 <SPIx_Read>
 8001c3a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c42:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <LCD_IO_ReadData+0x60>)
 8001c44:	f004 fc92 	bl	800656c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <LCD_IO_ReadData+0x5c>)
 8001c4e:	f004 fc8d 	bl	800656c <HAL_GPIO_WritePin>

  return readvalue;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00

08001c64 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f002 fc3b 	bl	80044e8 <HAL_Delay>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8001c7e:	f7ff fd53 	bl	8001728 <I2Cx_Init>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8001c8a:	f7ff fd7f 	bl	800178c <I2Cx_ITConfig>
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	71bb      	strb	r3, [r7, #6]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001ca4:	797a      	ldrb	r2, [r7, #5]
 8001ca6:	79b9      	ldrb	r1, [r7, #6]
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fd9e 	bl	80017ec <I2Cx_WriteData>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001cc8:	79ba      	ldrb	r2, [r7, #6]
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fdb6 	bl	8001840 <I2Cx_ReadData>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	603a      	str	r2, [r7, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	460b      	mov	r3, r1
 8001cee:	71bb      	strb	r3, [r7, #6]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001cf4:	88bb      	ldrh	r3, [r7, #4]
 8001cf6:	79b9      	ldrb	r1, [r7, #6]
 8001cf8:	79f8      	ldrb	r0, [r7, #7]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	f7ff fdcc 	bl	8001898 <I2Cx_ReadBuffer>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f002 fbe8 	bl	80044e8 <HAL_Delay>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001d24:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d26:	4a2e      	ldr	r2, [pc, #184]	@ (8001de0 <BSP_LCD_Init+0xc0>)
 8001d28:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d2c:	2209      	movs	r2, #9
 8001d2e:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001d30:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d38:	221d      	movs	r2, #29
 8001d3a:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001d3c:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d3e:	2203      	movs	r2, #3
 8001d40:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001d42:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d44:	f240 120d 	movw	r2, #269	@ 0x10d
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001d4a:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d4c:	f240 1243 	movw	r2, #323	@ 0x143
 8001d50:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001d52:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d54:	f240 1217 	movw	r2, #279	@ 0x117
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d5c:	f240 1247 	movw	r2, #327	@ 0x147
 8001d60:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001d62:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <BSP_LCD_Init+0xc4>)
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <BSP_LCD_Init+0xc4>)
 8001d82:	22c0      	movs	r2, #192	@ 0xc0
 8001d84:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001d86:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <BSP_LCD_Init+0xc4>)
 8001d88:	2204      	movs	r2, #4
 8001d8a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <BSP_LCD_Init+0xc4>)
 8001d8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d94:	4813      	ldr	r0, [pc, #76]	@ (8001de4 <BSP_LCD_Init+0xc4>)
 8001d96:	f006 fd93 	bl	80088c0 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001da0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001db2:	f000 fb57 	bl	8002464 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001db6:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <BSP_LCD_Init+0xbc>)
 8001db8:	f005 fcea 	bl	8007790 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <BSP_LCD_Init+0xc8>)
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <BSP_LCD_Init+0xcc>)
 8001dc0:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <BSP_LCD_Init+0xc8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001dca:	f000 fd93 	bl	80028f4 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001dce:	4808      	ldr	r0, [pc, #32]	@ (8001df0 <BSP_LCD_Init+0xd0>)
 8001dd0:	f000 f8ce 	bl	8001f70 <BSP_LCD_SetFont>

  return LCD_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200001b0 	.word	0x200001b0
 8001de0:	40016800 	.word	0x40016800
 8001de4:	20000298 	.word	0x20000298
 8001de8:	200002e4 	.word	0x200002e4
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000070 	.word	0x20000070

08001df4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <BSP_LCD_GetXSize+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	4798      	blx	r3
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200002e4 	.word	0x200002e4

08001e0c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <BSP_LCD_GetYSize+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200002e4 	.word	0x200002e4

08001e24 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b090      	sub	sp, #64	@ 0x40
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001e34:	f7ff ffde 	bl	8001df4 <BSP_LCD_GetXSize>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001e40:	f7ff ffe4 	bl	8001e0c <BSP_LCD_GetYSize>
 8001e44:	4603      	mov	r3, r0
 8001e46:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001e50:	23ff      	movs	r3, #255	@ 0xff
 8001e52:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e6a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e70:	2307      	movs	r3, #7
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001e74:	f7ff ffbe 	bl	8001df4 <BSP_LCD_GetXSize>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001e7c:	f7ff ffc6 	bl	8001e0c <BSP_LCD_GetYSize>
 8001e80:	4603      	mov	r3, r0
 8001e82:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4814      	ldr	r0, [pc, #80]	@ (8001ee0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001e8e:	f005 fe11 	bl	8007ab4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	4913      	ldr	r1, [pc, #76]	@ (8001ee4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3308      	adds	r3, #8
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001eba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	4909      	ldr	r1, [pc, #36]	@ (8001ee4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001ece:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001ed0:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001ed2:	f005 fe2d 	bl	8007b30 <HAL_LTDC_EnableDither>
}
 8001ed6:	bf00      	nop
 8001ed8:	3740      	adds	r7, #64	@ 0x40
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001b0 	.word	0x200001b0
 8001ee4:	200002cc 	.word	0x200002cc
 8001ee8:	20000070 	.word	0x20000070

08001eec <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <BSP_LCD_SelectLayer+0x1c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200002c8 	.word	0x200002c8

08001f0c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <BSP_LCD_SetTextColor+0x28>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4907      	ldr	r1, [pc, #28]	@ (8001f38 <BSP_LCD_SetTextColor+0x2c>)
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200002c8 	.word	0x200002c8
 8001f38:	200002cc 	.word	0x200002cc

08001f3c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <BSP_LCD_SetBackColor+0x2c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4908      	ldr	r1, [pc, #32]	@ (8001f6c <BSP_LCD_SetBackColor+0x30>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3304      	adds	r3, #4
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200002c8 	.word	0x200002c8
 8001f6c:	200002cc 	.word	0x200002cc

08001f70 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <BSP_LCD_SetFont+0x2c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <BSP_LCD_SetFont+0x30>)
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	3308      	adds	r3, #8
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200002c8 	.word	0x200002c8
 8001fa0:	200002cc 	.word	0x200002cc

08001fa4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <BSP_LCD_Clear+0x48>)
 8001fae:	681c      	ldr	r4, [r3, #0]
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <BSP_LCD_Clear+0x48>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff0 <BSP_LCD_Clear+0x4c>)
 8001fb6:	2134      	movs	r1, #52	@ 0x34
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	335c      	adds	r3, #92	@ 0x5c
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461e      	mov	r6, r3
 8001fc4:	f7ff ff16 	bl	8001df4 <BSP_LCD_GetXSize>
 8001fc8:	4605      	mov	r5, r0
 8001fca:	f7ff ff1f 	bl	8001e0c <BSP_LCD_GetYSize>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	462a      	mov	r2, r5
 8001fdc:	4631      	mov	r1, r6
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f000 fc50 	bl	8002884 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fec:	200002c8 	.word	0x200002c8
 8001ff0:	200001b0 	.word	0x200001b0

08001ff4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, uint8_t Orientation)
{
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4623      	mov	r3, r4
 8002004:	80fb      	strh	r3, [r7, #6]
 8002006:	4603      	mov	r3, r0
 8002008:	80bb      	strh	r3, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	70fb      	strb	r3, [r7, #3]
 800200e:	4613      	mov	r3, r2
 8002010:	70bb      	strb	r3, [r7, #2]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <BSP_LCD_DisplayChar+0x8c>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	491b      	ldr	r1, [pc, #108]	@ (8002084 <BSP_LCD_DisplayChar+0x90>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3308      	adds	r3, #8
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <BSP_LCD_DisplayChar+0x8c>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4c14      	ldr	r4, [pc, #80]	@ (8002084 <BSP_LCD_DisplayChar+0x90>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4423      	add	r3, r4
 800203e:	3308      	adds	r3, #8
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002044:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)],
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <BSP_LCD_DisplayChar+0x8c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4c0d      	ldr	r4, [pc, #52]	@ (8002084 <BSP_LCD_DisplayChar+0x90>)
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4423      	add	r3, r4
 8002058:	3308      	adds	r3, #8
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	889b      	ldrh	r3, [r3, #4]
 800205e:	3307      	adds	r3, #7
 8002060:	2b00      	cmp	r3, #0
 8002062:	da00      	bge.n	8002066 <BSP_LCD_DisplayChar+0x72>
 8002064:	3307      	adds	r3, #7
 8002066:	10db      	asrs	r3, r3, #3
 8002068:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800206c:	18ca      	adds	r2, r1, r3
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	88b9      	ldrh	r1, [r7, #4]
 8002072:	88f8      	ldrh	r0, [r7, #6]
 8002074:	f000 faf2 	bl	800265c <DrawChar>
														   Orientation);
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	200002c8 	.word	0x200002c8
 8002084:	200002cc 	.word	0x200002cc

08002088 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode, uint8_t Orientation)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60ba      	str	r2, [r7, #8]
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	81fb      	strh	r3, [r7, #14]
 8002096:	460b      	mov	r3, r1
 8002098:	81bb      	strh	r3, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800209e:	2301      	movs	r3, #1
 80020a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80020a2:	2300      	movs	r3, #0
 80020a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint32_t size = 0, xsize = 0, ysize = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = pText;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	61fb      	str	r3, [r7, #28]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80020b6:	e002      	b.n	80020be <BSP_LCD_DisplayStringAt+0x36>
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	3301      	adds	r3, #1
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	61fa      	str	r2, [r7, #28]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f6      	bne.n	80020b8 <BSP_LCD_DisplayStringAt+0x30>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80020ca:	f7ff fe93 	bl	8001df4 <BSP_LCD_GetXSize>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b9a      	ldr	r3, [pc, #616]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	489a      	ldr	r0, [pc, #616]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4403      	add	r3, r0
 80020e0:	3308      	adds	r3, #8
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	889b      	ldrh	r3, [r3, #4]
 80020e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ea:	61bb      	str	r3, [r7, #24]
  ysize = (BSP_LCD_GetYSize() / DrawProp[ActiveLayer].pFont->Width);
 80020ec:	f7ff fe8e 	bl	8001e0c <BSP_LCD_GetYSize>
 80020f0:	4601      	mov	r1, r0
 80020f2:	4b92      	ldr	r3, [pc, #584]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4892      	ldr	r0, [pc, #584]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4403      	add	r3, r0
 8002102:	3308      	adds	r3, #8
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	889b      	ldrh	r3, [r3, #4]
 8002108:	fbb1 f3f3 	udiv	r3, r1, r3
 800210c:	617b      	str	r3, [r7, #20]



  if(Orientation){
 800210e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <BSP_LCD_DisplayStringAt+0x19e>
	  switch (mode)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d01c      	beq.n	8002158 <BSP_LCD_DisplayStringAt+0xd0>
 800211e:	2b03      	cmp	r3, #3
 8002120:	dc33      	bgt.n	800218a <BSP_LCD_DisplayStringAt+0x102>
 8002122:	2b01      	cmp	r3, #1
 8002124:	d002      	beq.n	800212c <BSP_LCD_DisplayStringAt+0xa4>
 8002126:	2b02      	cmp	r3, #2
 8002128:	d019      	beq.n	800215e <BSP_LCD_DisplayStringAt+0xd6>
 800212a:	e02e      	b.n	800218a <BSP_LCD_DisplayStringAt+0x102>
	    {
	      case CENTER_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	1ad1      	subs	r1, r2, r3
 8002132:	4b82      	ldr	r3, [pc, #520]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4882      	ldr	r0, [pc, #520]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4403      	add	r3, r0
 8002142:	3308      	adds	r3, #8
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	889b      	ldrh	r3, [r3, #4]
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	89fb      	ldrh	r3, [r7, #14]
 8002152:	4413      	add	r3, r2
 8002154:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002156:	e01b      	b.n	8002190 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case LEFT_MODE:
	      {
	        refcolumn = X;
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800215c:	e018      	b.n	8002190 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      case RIGHT_MODE:
	      {
	        refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	b299      	uxth	r1, r3
 8002166:	4b75      	ldr	r3, [pc, #468]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4875      	ldr	r0, [pc, #468]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4403      	add	r3, r0
 8002176:	3308      	adds	r3, #8
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	889b      	ldrh	r3, [r3, #4]
 800217c:	fb11 f303 	smulbb	r3, r1, r3
 8002180:	b29a      	uxth	r2, r3
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	4413      	add	r3, r2
 8002186:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002188:	e002      	b.n	8002190 <BSP_LCD_DisplayStringAt+0x108>
	      }
	      default:
	      {
	        refcolumn = X;
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800218e:	bf00      	nop
	    }
	  /*
	  ///* Send the string character by character on LCD

	  */
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002190:	e01b      	b.n	80021ca <BSP_LCD_DisplayStringAt+0x142>
	                          DrawProp[ActiveLayer].pFont->Width))
	  {
	    ///* Display one character on LCD
	    BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800219a:	89b9      	ldrh	r1, [r7, #12]
 800219c:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800219e:	f7ff ff29 	bl	8001ff4 <BSP_LCD_DisplayChar>
	    ///* Decrement the column position by 16
	    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80021a2:	4b66      	ldr	r3, [pc, #408]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4966      	ldr	r1, [pc, #408]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3308      	adds	r3, #8
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	889a      	ldrh	r2, [r3, #4]
 80021b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80021ba:	4413      	add	r3, r2
 80021bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    ///* Point on the next character
	    pText++;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
	    i++;
 80021c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021c6:	3301      	adds	r3, #1
 80021c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2dc      	uxtb	r4, r3
 80021d8:	f7ff fe0c 	bl	8001df4 <BSP_LCD_GetXSize>
 80021dc:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80021de:	4b57      	ldr	r3, [pc, #348]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4d57      	ldr	r5, [pc, #348]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	442b      	add	r3, r5
 80021ee:	3308      	adds	r3, #8
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	1ac3      	subs	r3, r0, r3
 80021fa:	b299      	uxth	r1, r3
	                          DrawProp[ActiveLayer].pFont->Width))
 80021fc:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	484f      	ldr	r0, [pc, #316]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4403      	add	r3, r0
 800220c:	3308      	adds	r3, #8
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002212:	4299      	cmp	r1, r3
 8002214:	bf2c      	ite	cs
 8002216:	2301      	movcs	r3, #1
 8002218:	2300      	movcc	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4023      	ands	r3, r4
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1b6      	bne.n	8002192 <BSP_LCD_DisplayStringAt+0x10a>
  }




}
 8002224:	e085      	b.n	8002332 <BSP_LCD_DisplayStringAt+0x2aa>
	  switch (mode)
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d01c      	beq.n	8002266 <BSP_LCD_DisplayStringAt+0x1de>
 800222c:	2b03      	cmp	r3, #3
 800222e:	dc33      	bgt.n	8002298 <BSP_LCD_DisplayStringAt+0x210>
 8002230:	2b01      	cmp	r3, #1
 8002232:	d002      	beq.n	800223a <BSP_LCD_DisplayStringAt+0x1b2>
 8002234:	2b02      	cmp	r3, #2
 8002236:	d019      	beq.n	800226c <BSP_LCD_DisplayStringAt+0x1e4>
 8002238:	e02e      	b.n	8002298 <BSP_LCD_DisplayStringAt+0x210>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	1ad1      	subs	r1, r2, r3
 8002240:	4b3e      	ldr	r3, [pc, #248]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	483e      	ldr	r0, [pc, #248]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4403      	add	r3, r0
 8002250:	3308      	adds	r3, #8
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	889b      	ldrh	r3, [r3, #4]
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	4413      	add	r3, r2
 8002262:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002264:	e01b      	b.n	800229e <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 8002266:	89fb      	ldrh	r3, [r7, #14]
 8002268:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800226a:	e018      	b.n	800229e <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X + ((ysize - size) * DrawProp[ActiveLayer].pFont->Width);
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b299      	uxth	r1, r3
 8002274:	4b31      	ldr	r3, [pc, #196]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4831      	ldr	r0, [pc, #196]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4403      	add	r3, r0
 8002284:	3308      	adds	r3, #8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	889b      	ldrh	r3, [r3, #4]
 800228a:	fb11 f303 	smulbb	r3, r1, r3
 800228e:	b29a      	uxth	r2, r3
 8002290:	89fb      	ldrh	r3, [r7, #14]
 8002292:	4413      	add	r3, r2
 8002294:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 8002296:	e002      	b.n	800229e <BSP_LCD_DisplayStringAt+0x216>
	        refcolumn = X;
 8002298:	89fb      	ldrh	r3, [r7, #14]
 800229a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        break;
 800229c:	bf00      	nop
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800229e:	e01b      	b.n	80022d8 <BSP_LCD_DisplayStringAt+0x250>
	      BSP_LCD_DisplayChar(refcolumn,Y, *pText, Orientation);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80022a8:	89b9      	ldrh	r1, [r7, #12]
 80022aa:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80022ac:	f7ff fea2 	bl	8001ff4 <BSP_LCD_DisplayChar>
	      refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80022b0:	4b22      	ldr	r3, [pc, #136]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4922      	ldr	r1, [pc, #136]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3308      	adds	r3, #8
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	889a      	ldrh	r2, [r3, #4]
 80022c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80022c8:	4413      	add	r3, r2
 80022ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
	      pText++;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
	      i++;
 80022d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2dc      	uxtb	r4, r3
 80022e6:	f7ff fd91 	bl	8001e0c <BSP_LCD_GetYSize>
 80022ea:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80022ec:	4b13      	ldr	r3, [pc, #76]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4d13      	ldr	r5, [pc, #76]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	442b      	add	r3, r5
 80022fc:	3308      	adds	r3, #8
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	889b      	ldrh	r3, [r3, #4]
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	1ac3      	subs	r3, r0, r3
 8002308:	b299      	uxth	r1, r3
	                            DrawProp[ActiveLayer].pFont->Width))
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <BSP_LCD_DisplayStringAt+0x2b4>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	480c      	ldr	r0, [pc, #48]	@ (8002340 <BSP_LCD_DisplayStringAt+0x2b8>)
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4403      	add	r3, r0
 800231a:	3308      	adds	r3, #8
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	889b      	ldrh	r3, [r3, #4]
	  while ((*pText != 0) & (((BSP_LCD_GetYSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002320:	4299      	cmp	r1, r3
 8002322:	bf2c      	ite	cs
 8002324:	2301      	movcs	r3, #1
 8002326:	2300      	movcc	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4023      	ands	r3, r4
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1b6      	bne.n	80022a0 <BSP_LCD_DisplayStringAt+0x218>
}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bdb0      	pop	{r4, r5, r7, pc}
 800233a:	bf00      	nop
 800233c:	200002c8 	.word	0x200002c8
 8002340:	200002cc 	.word	0x200002cc

08002344 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af02      	add	r7, sp, #8
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
 800234e:	460b      	mov	r3, r1
 8002350:	80bb      	strh	r3, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 800235a:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <BSP_LCD_DrawHLine+0x70>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a16      	ldr	r2, [pc, #88]	@ (80023b8 <BSP_LCD_DrawHLine+0x74>)
 8002360:	2134      	movs	r1, #52	@ 0x34
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	335c      	adds	r3, #92	@ 0x5c
 800236a:	681c      	ldr	r4, [r3, #0]
 800236c:	f7ff fd42 	bl	8001df4 <BSP_LCD_GetXSize>
 8002370:	4602      	mov	r2, r0
 8002372:	88bb      	ldrh	r3, [r7, #4]
 8002374:	fb03 f202 	mul.w	r2, r3, r2
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4423      	add	r3, r4
 8002380:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <BSP_LCD_DrawHLine+0x70>)
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	887c      	ldrh	r4, [r7, #2]
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <BSP_LCD_DrawHLine+0x70>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4d0b      	ldr	r5, [pc, #44]	@ (80023bc <BSP_LCD_DrawHLine+0x78>)
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	442b      	add	r3, r5
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	2300      	movs	r3, #0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2301      	movs	r3, #1
 80023a4:	4622      	mov	r2, r4
 80023a6:	f000 fa6d 	bl	8002884 <FillBuffer>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200002c8 	.word	0x200002c8
 80023b8:	200001b0 	.word	0x200001b0
 80023bc:	200002cc 	.word	0x200002cc

080023c0 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80023c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
 80023ca:	460b      	mov	r3, r1
 80023cc:	80bb      	strh	r3, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80023d6:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <BSP_LCD_DrawVLine+0x78>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a18      	ldr	r2, [pc, #96]	@ (800243c <BSP_LCD_DrawVLine+0x7c>)
 80023dc:	2134      	movs	r1, #52	@ 0x34
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	335c      	adds	r3, #92	@ 0x5c
 80023e6:	681c      	ldr	r4, [r3, #0]
 80023e8:	f7ff fd04 	bl	8001df4 <BSP_LCD_GetXSize>
 80023ec:	4602      	mov	r2, r0
 80023ee:	88bb      	ldrh	r3, [r7, #4]
 80023f0:	fb03 f202 	mul.w	r2, r3, r2
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4423      	add	r3, r4
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <BSP_LCD_DrawVLine+0x78>)
 8002400:	681c      	ldr	r4, [r3, #0]
 8002402:	68fd      	ldr	r5, [r7, #12]
 8002404:	887e      	ldrh	r6, [r7, #2]
 8002406:	f7ff fcf5 	bl	8001df4 <BSP_LCD_GetXSize>
 800240a:	4603      	mov	r3, r0
 800240c:	1e59      	subs	r1, r3, #1
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <BSP_LCD_DrawVLine+0x78>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	480b      	ldr	r0, [pc, #44]	@ (8002440 <BSP_LCD_DrawVLine+0x80>)
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4403      	add	r3, r0
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	9100      	str	r1, [sp, #0]
 8002424:	4633      	mov	r3, r6
 8002426:	2201      	movs	r2, #1
 8002428:	4629      	mov	r1, r5
 800242a:	4620      	mov	r0, r4
 800242c:	f000 fa2a 	bl	8002884 <FillBuffer>
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002438:	200002c8 	.word	0x200002c8
 800243c:	200001b0 	.word	0x200001b0
 8002440:	200002cc 	.word	0x200002cc

08002444 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <BSP_LCD_DisplayOn+0x1c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002452:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <BSP_LCD_DisplayOn+0x1c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4798      	blx	r3
  }
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200002e4 	.word	0x200002e4

08002464 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	@ 0x38
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	4b61      	ldr	r3, [pc, #388]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a60      	ldr	r2, [pc, #384]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002474:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
 800247a:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	4b5a      	ldr	r3, [pc, #360]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4a59      	ldr	r2, [pc, #356]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002490:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002494:	6313      	str	r3, [r2, #48]	@ 0x30
 8002496:	4b57      	ldr	r3, [pc, #348]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b53      	ldr	r3, [pc, #332]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	4a52      	ldr	r2, [pc, #328]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b2:	4b50      	ldr	r3, [pc, #320]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b4c      	ldr	r3, [pc, #304]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a4b      	ldr	r2, [pc, #300]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b49      	ldr	r3, [pc, #292]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b45      	ldr	r3, [pc, #276]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a44      	ldr	r2, [pc, #272]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b42      	ldr	r3, [pc, #264]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b3e      	ldr	r3, [pc, #248]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a3d      	ldr	r2, [pc, #244]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a36      	ldr	r2, [pc, #216]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b34      	ldr	r3, [pc, #208]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	4a2f      	ldr	r2, [pc, #188]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800253c:	6313      	str	r3, [r2, #48]	@ 0x30
 800253e:	4b2d      	ldr	r3, [pc, #180]	@ (80025f4 <BSP_LCD_MspInit+0x190>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800254a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002558:	2302      	movs	r3, #2
 800255a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 800255c:	230e      	movs	r3, #14
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002564:	4619      	mov	r1, r3
 8002566:	4824      	ldr	r0, [pc, #144]	@ (80025f8 <BSP_LCD_MspInit+0x194>)
 8002568:	f003 fd48 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800256c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002576:	4619      	mov	r1, r3
 8002578:	4820      	ldr	r0, [pc, #128]	@ (80025fc <BSP_LCD_MspInit+0x198>)
 800257a:	f003 fd3f 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800257e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002588:	4619      	mov	r1, r3
 800258a:	481d      	ldr	r0, [pc, #116]	@ (8002600 <BSP_LCD_MspInit+0x19c>)
 800258c:	f003 fd36 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002590:	2348      	movs	r3, #72	@ 0x48
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002598:	4619      	mov	r1, r3
 800259a:	481a      	ldr	r0, [pc, #104]	@ (8002604 <BSP_LCD_MspInit+0x1a0>)
 800259c:	f003 fd2e 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80025a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80025a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025aa:	4619      	mov	r1, r3
 80025ac:	4816      	ldr	r0, [pc, #88]	@ (8002608 <BSP_LCD_MspInit+0x1a4>)
 80025ae:	f003 fd25 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80025b2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80025b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	4813      	ldr	r0, [pc, #76]	@ (800260c <BSP_LCD_MspInit+0x1a8>)
 80025c0:	f003 fd1c 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80025c4:	2303      	movs	r3, #3
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80025c8:	2309      	movs	r3, #9
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80025cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	480a      	ldr	r0, [pc, #40]	@ (80025fc <BSP_LCD_MspInit+0x198>)
 80025d4:	f003 fd12 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80025d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80025de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e2:	4619      	mov	r1, r3
 80025e4:	4809      	ldr	r0, [pc, #36]	@ (800260c <BSP_LCD_MspInit+0x1a8>)
 80025e6:	f003 fd09 	bl	8005ffc <HAL_GPIO_Init>
}
 80025ea:	bf00      	nop
 80025ec:	3738      	adds	r7, #56	@ 0x38
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020800 	.word	0x40020800
 8002604:	40020c00 	.word	0x40020c00
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800

08002610 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	603a      	str	r2, [r7, #0]
 800261a:	80fb      	strh	r3, [r7, #6]
 800261c:	460b      	mov	r3, r1
 800261e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <BSP_LCD_DrawPixel+0x44>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <BSP_LCD_DrawPixel+0x48>)
 8002626:	2134      	movs	r1, #52	@ 0x34
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	335c      	adds	r3, #92	@ 0x5c
 8002630:	681c      	ldr	r4, [r3, #0]
 8002632:	88bd      	ldrh	r5, [r7, #4]
 8002634:	f7ff fbde 	bl	8001df4 <BSP_LCD_GetXSize>
 8002638:	4603      	mov	r3, r0
 800263a:	fb03 f205 	mul.w	r2, r3, r5
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4423      	add	r3, r4
 8002646:	461a      	mov	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bdb0      	pop	{r4, r5, r7, pc}
 8002654:	200002c8 	.word	0x200002c8
 8002658:	200001b0 	.word	0x200001b0

0800265c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, uint8_t Orientation)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b08b      	sub	sp, #44	@ 0x2c
 8002660:	af00      	add	r7, sp, #0
 8002662:	60ba      	str	r2, [r7, #8]
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	81fb      	strh	r3, [r7, #14]
 800266a:	460b      	mov	r3, r1
 800266c:	81bb      	strh	r3, [r7, #12]
 800266e:	4613      	mov	r3, r2
 8002670:	71fb      	strb	r3, [r7, #7]
  uint32_t i = 0, j = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset, offsetheight;
  uint8_t *pchar;
  uint32_t line = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]

  height = DrawProp[ActiveLayer].pFont->Height;
 800267e:	4b7f      	ldr	r3, [pc, #508]	@ (800287c <DrawChar+0x220>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	497f      	ldr	r1, [pc, #508]	@ (8002880 <DrawChar+0x224>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3308      	adds	r3, #8
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	88db      	ldrh	r3, [r3, #6]
 8002694:	837b      	strh	r3, [r7, #26]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002696:	4b79      	ldr	r3, [pc, #484]	@ (800287c <DrawChar+0x220>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4979      	ldr	r1, [pc, #484]	@ (8002880 <DrawChar+0x224>)
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3308      	adds	r3, #8
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	889b      	ldrh	r3, [r3, #4]
 80026ac:	833b      	strh	r3, [r7, #24]

  offset = 8 * ((width + 7) / 8) -  width ;
 80026ae:	8b3b      	ldrh	r3, [r7, #24]
 80026b0:	3307      	adds	r3, #7
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da00      	bge.n	80026b8 <DrawChar+0x5c>
 80026b6:	3307      	adds	r3, #7
 80026b8:	10db      	asrs	r3, r3, #3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	8b3b      	ldrh	r3, [r7, #24]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	75fb      	strb	r3, [r7, #23]
  offsetheight = 8 * ((height + 7) / 8) -  height;
 80026c8:	8b7b      	ldrh	r3, [r7, #26]
 80026ca:	3307      	adds	r3, #7
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da00      	bge.n	80026d2 <DrawChar+0x76>
 80026d0:	3307      	adds	r3, #7
 80026d2:	10db      	asrs	r3, r3, #3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	8b7b      	ldrh	r3, [r7, #26]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	75bb      	strb	r3, [r7, #22]
  for (i = 0; i < height; i++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e6:	e0be      	b.n	8002866 <DrawChar+0x20a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80026e8:	8b3b      	ldrh	r3, [r7, #24]
 80026ea:	3307      	adds	r3, #7
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da00      	bge.n	80026f2 <DrawChar+0x96>
 80026f0:	3307      	adds	r3, #7
 80026f2:	10db      	asrs	r3, r3, #3
 80026f4:	461a      	mov	r2, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	4413      	add	r3, r2
 8002700:	613b      	str	r3, [r7, #16]

    switch (((width + 7) / 8))
 8002702:	8b3b      	ldrh	r3, [r7, #24]
 8002704:	3307      	adds	r3, #7
 8002706:	2b00      	cmp	r3, #0
 8002708:	da00      	bge.n	800270c <DrawChar+0xb0>
 800270a:	3307      	adds	r3, #7
 800270c:	10db      	asrs	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d002      	beq.n	8002718 <DrawChar+0xbc>
 8002712:	2b02      	cmp	r3, #2
 8002714:	d004      	beq.n	8002720 <DrawChar+0xc4>
 8002716:	e00c      	b.n	8002732 <DrawChar+0xd6>
    {
      case 1:
        line =  pchar[0];
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	61fb      	str	r3, [r7, #28]
        break;
 800271e:	e016      	b.n	800274e <DrawChar+0xf2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	3201      	adds	r2, #1
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]
        break;
 8002730:	e00d      	b.n	800274e <DrawChar+0xf2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	041a      	lsls	r2, r3, #16
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	3301      	adds	r3, #1
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	4313      	orrs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	3202      	adds	r2, #2
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
        break;
 800274c:	bf00      	nop
    }
    if(Orientation){
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03e      	beq.n	80027d2 <DrawChar+0x176>
        for (j = 0; j < width; j++)
 8002754:	2300      	movs	r3, #0
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	e036      	b.n	80027c8 <DrawChar+0x16c>
        {
          if (line & (1 << (width - j + offset - 1)))
 800275a:	8b3a      	ldrh	r2, [r7, #24]
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	1ad2      	subs	r2, r2, r3
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	4413      	add	r3, r2
 8002764:	3b01      	subs	r3, #1
 8002766:	2201      	movs	r2, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	461a      	mov	r2, r3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <DrawChar+0x140>
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	b29a      	uxth	r2, r3
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	4413      	add	r3, r2
 800277e:	b298      	uxth	r0, r3
 8002780:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <DrawChar+0x220>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	493e      	ldr	r1, [pc, #248]	@ (8002880 <DrawChar+0x224>)
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	89bb      	ldrh	r3, [r7, #12]
 8002794:	4619      	mov	r1, r3
 8002796:	f7ff ff3b 	bl	8002610 <BSP_LCD_DrawPixel>
 800279a:	e012      	b.n	80027c2 <DrawChar+0x166>
          }
          else
          {
            BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	4413      	add	r3, r2
 80027a4:	b298      	uxth	r0, r3
 80027a6:	4b35      	ldr	r3, [pc, #212]	@ (800287c <DrawChar+0x220>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4935      	ldr	r1, [pc, #212]	@ (8002880 <DrawChar+0x224>)
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3304      	adds	r3, #4
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	89bb      	ldrh	r3, [r7, #12]
 80027bc:	4619      	mov	r1, r3
 80027be:	f7ff ff27 	bl	8002610 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	3301      	adds	r3, #1
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	8b3b      	ldrh	r3, [r7, #24]
 80027ca:	6a3a      	ldr	r2, [r7, #32]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d3c4      	bcc.n	800275a <DrawChar+0xfe>
 80027d0:	e043      	b.n	800285a <DrawChar+0x1fe>
          }
        }
    }

    else {
        for (j = 0; j < width; j++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	e03c      	b.n	8002852 <DrawChar+0x1f6>
            {
              if (line & (1 << (width - j + offset - 1)))
 80027d8:	8b3a      	ldrh	r2, [r7, #24]
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	1ad2      	subs	r2, r2, r3
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	4413      	add	r3, r2
 80027e2:	3b01      	subs	r3, #1
 80027e4:	2201      	movs	r2, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <DrawChar+0x1c4>
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].TextColor);
 80027f4:	89bb      	ldrh	r3, [r7, #12]
 80027f6:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 80027fa:	b298      	uxth	r0, r3
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	4413      	add	r3, r2
 8002804:	b299      	uxth	r1, r3
 8002806:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <DrawChar+0x220>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4c1d      	ldr	r4, [pc, #116]	@ (8002880 <DrawChar+0x224>)
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4423      	add	r3, r4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f7ff fef9 	bl	8002610 <BSP_LCD_DrawPixel>
 800281e:	e015      	b.n	800284c <DrawChar+0x1f0>
              }
              else
              {
                BSP_LCD_DrawPixel(235-Ypos, Xpos+j, DrawProp[ActiveLayer].BackColor);
 8002820:	89bb      	ldrh	r3, [r7, #12]
 8002822:	f1c3 03eb 	rsb	r3, r3, #235	@ 0xeb
 8002826:	b298      	uxth	r0, r3
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	b29a      	uxth	r2, r3
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	4413      	add	r3, r2
 8002830:	b299      	uxth	r1, r3
 8002832:	4b12      	ldr	r3, [pc, #72]	@ (800287c <DrawChar+0x220>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4c12      	ldr	r4, [pc, #72]	@ (8002880 <DrawChar+0x224>)
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4423      	add	r3, r4
 8002842:	3304      	adds	r3, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	f7ff fee2 	bl	8002610 <BSP_LCD_DrawPixel>
        for (j = 0; j < width; j++)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	3301      	adds	r3, #1
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	8b3b      	ldrh	r3, [r7, #24]
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3be      	bcc.n	80027d8 <DrawChar+0x17c>
              }
            }
    }

    Ypos++;
 800285a:	89bb      	ldrh	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	81bb      	strh	r3, [r7, #12]
  for (i = 0; i < height; i++)
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	3301      	adds	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
 8002866:	8b7b      	ldrh	r3, [r7, #26]
 8002868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286a:	429a      	cmp	r2, r3
 800286c:	f4ff af3c 	bcc.w	80026e8 <DrawChar+0x8c>
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	372c      	adds	r7, #44	@ 0x2c
 8002876:	46bd      	mov	sp, r7
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	bf00      	nop
 800287c:	200002c8 	.word	0x200002c8
 8002880:	200002cc 	.word	0x200002cc

08002884 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002892:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <FillBuffer+0x68>)
 8002894:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002898:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800289a:	4b14      	ldr	r3, [pc, #80]	@ (80028ec <FillBuffer+0x68>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80028a0:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <FillBuffer+0x68>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80028a6:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <FillBuffer+0x68>)
 80028a8:	4a11      	ldr	r2, [pc, #68]	@ (80028f0 <FillBuffer+0x6c>)
 80028aa:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80028ac:	480f      	ldr	r0, [pc, #60]	@ (80028ec <FillBuffer+0x68>)
 80028ae:	f003 f809 	bl	80058c4 <HAL_DMA2D_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d115      	bne.n	80028e4 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	480c      	ldr	r0, [pc, #48]	@ (80028ec <FillBuffer+0x68>)
 80028bc:	f003 fa70 	bl	8005da0 <HAL_DMA2D_ConfigLayer>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10e      	bne.n	80028e4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69f9      	ldr	r1, [r7, #28]
 80028d0:	4806      	ldr	r0, [pc, #24]	@ (80028ec <FillBuffer+0x68>)
 80028d2:	f003 f840 	bl	8005956 <HAL_DMA2D_Start>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80028dc:	210a      	movs	r1, #10
 80028de:	4803      	ldr	r0, [pc, #12]	@ (80028ec <FillBuffer+0x68>)
 80028e0:	f003 f864 	bl	80059ac <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000258 	.word	0x20000258
 80028f0:	4002b000 	.word	0x4002b000

080028f4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80028f8:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 80028fa:	4a2a      	ldr	r2, [pc, #168]	@ (80029a4 <BSP_SDRAM_Init+0xb0>)
 80028fc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80028fe:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002904:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 8002906:	2207      	movs	r2, #7
 8002908:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800290a:	4b27      	ldr	r3, [pc, #156]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 800290c:	2204      	movs	r2, #4
 800290e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002910:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 8002912:	2207      	movs	r2, #7
 8002914:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002916:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 8002918:	2202      	movs	r2, #2
 800291a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800291c:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 800291e:	2202      	movs	r2, #2
 8002920:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002922:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 8002924:	2202      	movs	r2, #2
 8002926:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002928:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 800292a:	2201      	movs	r2, #1
 800292c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800292e:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002934:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002936:	2204      	movs	r2, #4
 8002938:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800293a:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 800293c:	2210      	movs	r2, #16
 800293e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002940:	4b17      	ldr	r3, [pc, #92]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002942:	2240      	movs	r2, #64	@ 0x40
 8002944:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002946:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002948:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800294c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800294e:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002950:	2200      	movs	r2, #0
 8002952:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002956:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800295a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002962:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002968:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800296a:	2100      	movs	r1, #0
 800296c:	480c      	ldr	r0, [pc, #48]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 800296e:	f000 f87f 	bl	8002a70 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <BSP_SDRAM_Init+0xb4>)
 8002974:	480a      	ldr	r0, [pc, #40]	@ (80029a0 <BSP_SDRAM_Init+0xac>)
 8002976:	f006 f963 	bl	8008c40 <HAL_SDRAM_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <BSP_SDRAM_Init+0xb8>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e002      	b.n	800298e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <BSP_SDRAM_Init+0xb8>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800298e:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002992:	f000 f80d 	bl	80029b0 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <BSP_SDRAM_Init+0xb8>)
 8002998:	781b      	ldrb	r3, [r3, #0]
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200002e8 	.word	0x200002e8
 80029a4:	a0000140 	.word	0xa0000140
 80029a8:	2000031c 	.word	0x2000031c
 80029ac:	20000080 	.word	0x20000080

080029b0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80029bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029c2:	4b29      	ldr	r3, [pc, #164]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029c4:	2208      	movs	r2, #8
 80029c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80029c8:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80029ce:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80029d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d8:	4923      	ldr	r1, [pc, #140]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029da:	4824      	ldr	r0, [pc, #144]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029dc:	f006 f964 	bl	8008ca8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f001 fd81 	bl	80044e8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80029e6:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e8:	2202      	movs	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ee:	2208      	movs	r2, #8
 80029f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80029fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a02:	4919      	ldr	r1, [pc, #100]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a04:	4819      	ldr	r0, [pc, #100]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a06:	f006 f94f 	bl	8008ca8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a0a:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a12:	2208      	movs	r2, #8
 8002a14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002a16:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a18:	2204      	movs	r2, #4
 8002a1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002a1c:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a26:	4910      	ldr	r1, [pc, #64]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a28:	4810      	ldr	r0, [pc, #64]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a2a:	f006 f93d 	bl	8008ca8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002a2e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002a32:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a36:	2204      	movs	r2, #4
 8002a38:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a07      	ldr	r2, [pc, #28]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a4a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a50:	4905      	ldr	r1, [pc, #20]	@ (8002a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a52:	4806      	ldr	r0, [pc, #24]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a54:	f006 f928 	bl	8008ca8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4804      	ldr	r0, [pc, #16]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a5c:	f006 f959 	bl	8008d12 <HAL_SDRAM_ProgramRefreshRate>
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000338 	.word	0x20000338
 8002a6c:	200002e8 	.word	0x200002e8

08002a70 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b090      	sub	sp, #64	@ 0x40
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80ec 	beq.w	8002c5a <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a86:	4b77      	ldr	r3, [pc, #476]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	4a76      	ldr	r2, [pc, #472]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a92:	4b74      	ldr	r3, [pc, #464]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	4b70      	ldr	r3, [pc, #448]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002aa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b6d      	ldr	r3, [pc, #436]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	4b69      	ldr	r3, [pc, #420]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a68      	ldr	r2, [pc, #416]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b66      	ldr	r3, [pc, #408]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	4b62      	ldr	r3, [pc, #392]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	4a61      	ldr	r2, [pc, #388]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a5a      	ldr	r2, [pc, #360]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b58      	ldr	r3, [pc, #352]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	4b54      	ldr	r3, [pc, #336]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	4a53      	ldr	r2, [pc, #332]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b18:	f043 0310 	orr.w	r3, r3, #16
 8002b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1e:	4b51      	ldr	r3, [pc, #324]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	4a4c      	ldr	r2, [pc, #304]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b46      	ldr	r3, [pc, #280]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a45      	ldr	r2, [pc, #276]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b43      	ldr	r3, [pc, #268]	@ (8002c64 <BSP_SDRAM_MspInit+0x1f4>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b66:	2302      	movs	r3, #2
 8002b68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002b6e:	230c      	movs	r3, #12
 8002b70:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002b72:	2360      	movs	r3, #96	@ 0x60
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	483a      	ldr	r0, [pc, #232]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f8>)
 8002b7e:	f003 fa3d 	bl	8005ffc <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002b82:	2301      	movs	r3, #1
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4837      	ldr	r0, [pc, #220]	@ (8002c6c <BSP_SDRAM_MspInit+0x1fc>)
 8002b8e:	f003 fa35 	bl	8005ffc <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002b92:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4834      	ldr	r0, [pc, #208]	@ (8002c70 <BSP_SDRAM_MspInit+0x200>)
 8002ba0:	f003 fa2c 	bl	8005ffc <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ba4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4830      	ldr	r0, [pc, #192]	@ (8002c74 <BSP_SDRAM_MspInit+0x204>)
 8002bb2:	f003 fa23 	bl	8005ffc <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002bb6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	482d      	ldr	r0, [pc, #180]	@ (8002c78 <BSP_SDRAM_MspInit+0x208>)
 8002bc4:	f003 fa1a 	bl	8005ffc <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002bc8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002bce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4829      	ldr	r0, [pc, #164]	@ (8002c7c <BSP_SDRAM_MspInit+0x20c>)
 8002bd6:	f003 fa11 	bl	8005ffc <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002bda:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002be0:	4b27      	ldr	r3, [pc, #156]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002be6:	4b26      	ldr	r3, [pc, #152]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bec:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bf4:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bfc:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c04:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c12:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002c1a:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002c20:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c2e:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <BSP_SDRAM_MspInit+0x214>)
 8002c30:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c38:	4a11      	ldr	r2, [pc, #68]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002c3e:	4810      	ldr	r0, [pc, #64]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c40:	f002 fb20 	bl	8005284 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002c44:	480e      	ldr	r0, [pc, #56]	@ (8002c80 <BSP_SDRAM_MspInit+0x210>)
 8002c46:	f002 fa6f 	bl	8005128 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	210f      	movs	r1, #15
 8002c4e:	2038      	movs	r0, #56	@ 0x38
 8002c50:	f002 f93e 	bl	8004ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002c54:	2038      	movs	r0, #56	@ 0x38
 8002c56:	f002 f957 	bl	8004f08 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002c5a:	bf00      	nop
 8002c5c:	3740      	adds	r7, #64	@ 0x40
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	40020c00 	.word	0x40020c00
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40021400 	.word	0x40021400
 8002c7c:	40021800 	.word	0x40021800
 8002c80:	20000348 	.word	0x20000348
 8002c84:	40026410 	.word	0x40026410

08002c88 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460a      	mov	r2, r1
 8002c92:	80fb      	strh	r3, [r7, #6]
 8002c94:	4613      	mov	r3, r2
 8002c96:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002c9c:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <BSP_TS_Init+0x64>)
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002ca2:	4a13      	ldr	r2, [pc, #76]	@ (8002cf0 <BSP_TS_Init+0x68>)
 8002ca4:	88bb      	ldrh	r3, [r7, #4]
 8002ca6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <BSP_TS_Init+0x6c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2082      	movs	r0, #130	@ 0x82
 8002cae:	4798      	blx	r3
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f640 0311 	movw	r3, #2065	@ 0x811
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d104      	bne.n	8002cc6 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <BSP_TS_Init+0x70>)
 8002cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <BSP_TS_Init+0x6c>)
 8002cc0:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <BSP_TS_Init+0x70>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2082      	movs	r0, #130	@ 0x82
 8002cd4:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002cd6:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <BSP_TS_Init+0x70>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2082      	movs	r0, #130	@ 0x82
 8002cde:	4798      	blx	r3
  }

  return ret;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200003ac 	.word	0x200003ac
 8002cf0:	200003ae 	.word	0x200003ae
 8002cf4:	20000038 	.word	0x20000038
 8002cf8:	200003a8 	.word	0x200003a8

08002cfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d02:	463b      	mov	r3, r7
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  sConfig.Offset = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d12:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d14:	4a21      	ldr	r2, [pc, #132]	@ (8002d9c <MX_ADC1_Init+0xa0>)
 8002d16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d18:	4b1f      	ldr	r3, [pc, #124]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d20:	4b1d      	ldr	r3, [pc, #116]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002d26:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d32:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d3a:	4b17      	ldr	r3, [pc, #92]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d40:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d42:	4a17      	ldr	r2, [pc, #92]	@ (8002da0 <MX_ADC1_Init+0xa4>)
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d60:	480d      	ldr	r0, [pc, #52]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d62:	f001 fbe5 	bl	8004530 <HAL_ADC_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002d6c:	f001 f86a 	bl	8003e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002d70:	230d      	movs	r3, #13
 8002d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <MX_ADC1_Init+0x9c>)
 8002d82:	f001 fd3d 	bl	8004800 <HAL_ADC_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002d8c:	f001 f85a 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200003b0 	.word	0x200003b0
 8002d9c:	40012000 	.word	0x40012000
 8002da0:	0f000001 	.word	0x0f000001

08002da4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	@ 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8002e80 <HAL_ADC_MspInit+0xdc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d158      	bne.n	8002e78 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	4b2e      	ldr	r3, [pc, #184]	@ (8002e84 <HAL_ADC_MspInit+0xe0>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <HAL_ADC_MspInit+0xe0>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e84 <HAL_ADC_MspInit+0xe0>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <HAL_ADC_MspInit+0xe0>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	4a26      	ldr	r2, [pc, #152]	@ (8002e84 <HAL_ADC_MspInit+0xe0>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df2:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_ADC_MspInit+0xe0>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dfe:	2308      	movs	r3, #8
 8002e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e02:	2303      	movs	r3, #3
 8002e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	481d      	ldr	r0, [pc, #116]	@ (8002e88 <HAL_ADC_MspInit+0xe4>)
 8002e12:	f003 f8f3 	bl	8005ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e16:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e18:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <HAL_ADC_MspInit+0xec>)
 8002e1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e28:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e2e:	4b17      	ldr	r3, [pc, #92]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e40:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e46:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e54:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e5c:	480b      	ldr	r0, [pc, #44]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e5e:	f002 f963 	bl	8005128 <HAL_DMA_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002e68:	f000 ffec 	bl	8003e44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a07      	ldr	r2, [pc, #28]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e70:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e72:	4a06      	ldr	r2, [pc, #24]	@ (8002e8c <HAL_ADC_MspInit+0xe8>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	@ 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40012000 	.word	0x40012000
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	200003f8 	.word	0x200003f8
 8002e90:	40026410 	.word	0x40026410

08002e94 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <MX_CRC_Init+0x20>)
 8002e9a:	4a07      	ldr	r2, [pc, #28]	@ (8002eb8 <MX_CRC_Init+0x24>)
 8002e9c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e9e:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <MX_CRC_Init+0x20>)
 8002ea0:	f002 f840 	bl	8004f24 <HAL_CRC_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002eaa:	f000 ffcb 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000458 	.word	0x20000458
 8002eb8:	40023000 	.word	0x40023000

08002ebc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef8 <HAL_CRC_MspInit+0x3c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10d      	bne.n	8002eea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <HAL_CRC_MspInit+0x40>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <HAL_CRC_MspInit+0x40>)
 8002ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <HAL_CRC_MspInit+0x40>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023000 	.word	0x40023000
 8002efc:	40023800 	.word	0x40023800

08002f00 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002f06:	463b      	mov	r3, r7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <MX_DAC_Init+0x4c>)
 8002f10:	4a0f      	ldr	r2, [pc, #60]	@ (8002f50 <MX_DAC_Init+0x50>)
 8002f12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002f14:	480d      	ldr	r0, [pc, #52]	@ (8002f4c <MX_DAC_Init+0x4c>)
 8002f16:	f002 f821 	bl	8004f5c <HAL_DAC_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002f20:	f000 ff90 	bl	8003e44 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002f24:	2324      	movs	r3, #36	@ 0x24
 8002f26:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	2210      	movs	r2, #16
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	@ (8002f4c <MX_DAC_Init+0x4c>)
 8002f34:	f002 f894 	bl	8005060 <HAL_DAC_ConfigChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002f3e:	f000 ff81 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000460 	.word	0x20000460
 8002f50:	40007400 	.word	0x40007400

08002f54 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	@ 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_DAC_MspInit+0xf0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d161      	bne.n	800303a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	4b33      	ldr	r3, [pc, #204]	@ (8003048 <HAL_DAC_MspInit+0xf4>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	4a32      	ldr	r2, [pc, #200]	@ (8003048 <HAL_DAC_MspInit+0xf4>)
 8002f80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f86:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <HAL_DAC_MspInit+0xf4>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <HAL_DAC_MspInit+0xf4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003048 <HAL_DAC_MspInit+0xf4>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_DAC_MspInit+0xf4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4822      	ldr	r0, [pc, #136]	@ (800304c <HAL_DAC_MspInit+0xf8>)
 8002fc2:	f003 f81b 	bl	8005ffc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002fc6:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002fc8:	4a22      	ldr	r2, [pc, #136]	@ (8003054 <HAL_DAC_MspInit+0x100>)
 8002fca:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002fcc:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002fce:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002fd2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002fd6:	2240      	movs	r2, #64	@ 0x40
 8002fd8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002fe2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002fea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fee:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ff0:	4b17      	ldr	r3, [pc, #92]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002ff2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ff6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8002ffa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ffe:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8003002:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003006:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800300e:	4810      	ldr	r0, [pc, #64]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8003010:	f002 f88a 	bl	8005128 <HAL_DMA_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800301a:	f000 ff13 	bl	8003e44 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a0b      	ldr	r2, [pc, #44]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <HAL_DAC_MspInit+0xfc>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	210f      	movs	r1, #15
 800302e:	2036      	movs	r0, #54	@ 0x36
 8003030:	f001 ff4e 	bl	8004ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003034:	2036      	movs	r0, #54	@ 0x36
 8003036:	f001 ff67 	bl	8004f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800303a:	bf00      	nop
 800303c:	3728      	adds	r7, #40	@ 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40007400 	.word	0x40007400
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000
 8003050:	20000474 	.word	0x20000474
 8003054:	400260a0 	.word	0x400260a0

08003058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <MX_DMA_Init+0x68>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	4a16      	ldr	r2, [pc, #88]	@ (80030c0 <MX_DMA_Init+0x68>)
 8003068:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800306c:	6313      	str	r3, [r2, #48]	@ 0x30
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <MX_DMA_Init+0x68>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <MX_DMA_Init+0x68>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	4a0f      	ldr	r2, [pc, #60]	@ (80030c0 <MX_DMA_Init+0x68>)
 8003084:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003088:	6313      	str	r3, [r2, #48]	@ 0x30
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <MX_DMA_Init+0x68>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	2011      	movs	r0, #17
 800309c:	f001 ff18 	bl	8004ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80030a0:	2011      	movs	r0, #17
 80030a2:	f001 ff31 	bl	8004f08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2100      	movs	r1, #0
 80030aa:	2038      	movs	r0, #56	@ 0x38
 80030ac:	f001 ff10 	bl	8004ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80030b0:	2038      	movs	r0, #56	@ 0x38
 80030b2:	f001 ff29 	bl	8004f08 <HAL_NVIC_EnableIRQ>

}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800

080030c4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030ca:	4a16      	ldr	r2, [pc, #88]	@ (8003124 <MX_DMA2D_Init+0x60>)
 80030cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80030ce:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80030d4:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80030f8:	4809      	ldr	r0, [pc, #36]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 80030fa:	f002 fbe3 	bl	80058c4 <HAL_DMA2D_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8003104:	f000 fe9e 	bl	8003e44 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003108:	2101      	movs	r1, #1
 800310a:	4805      	ldr	r0, [pc, #20]	@ (8003120 <MX_DMA2D_Init+0x5c>)
 800310c:	f002 fe48 	bl	8005da0 <HAL_DMA2D_ConfigLayer>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8003116:	f000 fe95 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200004d4 	.word	0x200004d4
 8003124:	4002b000 	.word	0x4002b000

08003128 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0e      	ldr	r2, [pc, #56]	@ (8003170 <HAL_DMA2D_MspInit+0x48>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d115      	bne.n	8003166 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <HAL_DMA2D_MspInit+0x4c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a0c      	ldr	r2, [pc, #48]	@ (8003174 <HAL_DMA2D_MspInit+0x4c>)
 8003144:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_DMA2D_MspInit+0x4c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2105      	movs	r1, #5
 800315a:	205a      	movs	r0, #90	@ 0x5a
 800315c:	f001 feb8 	bl	8004ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003160:	205a      	movs	r0, #90	@ 0x5a
 8003162:	f001 fed1 	bl	8004f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	4002b000 	.word	0x4002b000
 8003174:	40023800 	.word	0x40023800

08003178 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
 800318c:	615a      	str	r2, [r3, #20]
 800318e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003190:	4b1f      	ldr	r3, [pc, #124]	@ (8003210 <MX_FMC_Init+0x98>)
 8003192:	4a20      	ldr	r2, [pc, #128]	@ (8003214 <MX_FMC_Init+0x9c>)
 8003194:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <MX_FMC_Init+0x98>)
 8003198:	2201      	movs	r2, #1
 800319a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800319c:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <MX_FMC_Init+0x98>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80031a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <MX_FMC_Init+0x98>)
 80031a4:	2204      	movs	r2, #4
 80031a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <MX_FMC_Init+0x98>)
 80031aa:	2210      	movs	r2, #16
 80031ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80031ae:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <MX_FMC_Init+0x98>)
 80031b0:	2240      	movs	r2, #64	@ 0x40
 80031b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80031b4:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <MX_FMC_Init+0x98>)
 80031b6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80031ba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80031bc:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <MX_FMC_Init+0x98>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80031c2:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <MX_FMC_Init+0x98>)
 80031c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_FMC_Init+0x98>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <MX_FMC_Init+0x98>)
 80031d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031d6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80031d8:	2302      	movs	r3, #2
 80031da:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80031dc:	2307      	movs	r3, #7
 80031de:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80031e0:	2304      	movs	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80031e4:	2307      	movs	r3, #7
 80031e6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80031e8:	2303      	movs	r3, #3
 80031ea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80031ec:	2302      	movs	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80031f0:	2302      	movs	r3, #2
 80031f2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	4805      	ldr	r0, [pc, #20]	@ (8003210 <MX_FMC_Init+0x98>)
 80031fa:	f005 fd21 	bl	8008c40 <HAL_SDRAM_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8003204:	f000 fe1e 	bl	8003e44 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003208:	bf00      	nop
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000514 	.word	0x20000514
 8003214:	a0000140 	.word	0xa0000140

08003218 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800322c:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <HAL_FMC_MspInit+0x104>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d16f      	bne.n	8003314 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003234:	4b39      	ldr	r3, [pc, #228]	@ (800331c <HAL_FMC_MspInit+0x104>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4b38      	ldr	r3, [pc, #224]	@ (8003320 <HAL_FMC_MspInit+0x108>)
 8003240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003242:	4a37      	ldr	r2, [pc, #220]	@ (8003320 <HAL_FMC_MspInit+0x108>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6393      	str	r3, [r2, #56]	@ 0x38
 800324a:	4b35      	ldr	r3, [pc, #212]	@ (8003320 <HAL_FMC_MspInit+0x108>)
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003256:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800325a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003268:	230c      	movs	r3, #12
 800326a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	4619      	mov	r1, r3
 8003270:	482c      	ldr	r0, [pc, #176]	@ (8003324 <HAL_FMC_MspInit+0x10c>)
 8003272:	f002 fec3 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003276:	2301      	movs	r3, #1
 8003278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003286:	230c      	movs	r3, #12
 8003288:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4826      	ldr	r0, [pc, #152]	@ (8003328 <HAL_FMC_MspInit+0x110>)
 8003290:	f002 feb4 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003294:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003298:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032a6:	230c      	movs	r3, #12
 80032a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	481f      	ldr	r0, [pc, #124]	@ (800332c <HAL_FMC_MspInit+0x114>)
 80032b0:	f002 fea4 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80032b4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80032b8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032c6:	230c      	movs	r3, #12
 80032c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4818      	ldr	r0, [pc, #96]	@ (8003330 <HAL_FMC_MspInit+0x118>)
 80032d0:	f002 fe94 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80032d4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80032d8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032e6:	230c      	movs	r3, #12
 80032e8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4811      	ldr	r0, [pc, #68]	@ (8003334 <HAL_FMC_MspInit+0x11c>)
 80032f0:	f002 fe84 	bl	8005ffc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80032f4:	2360      	movs	r3, #96	@ 0x60
 80032f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003300:	2303      	movs	r3, #3
 8003302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003304:	230c      	movs	r3, #12
 8003306:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	4619      	mov	r1, r3
 800330c:	480a      	ldr	r0, [pc, #40]	@ (8003338 <HAL_FMC_MspInit+0x120>)
 800330e:	f002 fe75 	bl	8005ffc <HAL_GPIO_Init>
 8003312:	e000      	b.n	8003316 <HAL_FMC_MspInit+0xfe>
    return;
 8003314:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000548 	.word	0x20000548
 8003320:	40023800 	.word	0x40023800
 8003324:	40021400 	.word	0x40021400
 8003328:	40020800 	.word	0x40020800
 800332c:	40021800 	.word	0x40021800
 8003330:	40021000 	.word	0x40021000
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40020400 	.word	0x40020400

0800333c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003344:	f7ff ff68 	bl	8003218 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <MX_GPIO_Init>:
     PB15   ------> USB_OTG_HS_DP
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	4b99      	ldr	r3, [pc, #612]	@ (80035d0 <MX_GPIO_Init+0x280>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	4a98      	ldr	r2, [pc, #608]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6313      	str	r3, [r2, #48]	@ 0x30
 8003376:	4b96      	ldr	r3, [pc, #600]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	4b92      	ldr	r3, [pc, #584]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4a91      	ldr	r2, [pc, #580]	@ (80035d0 <MX_GPIO_Init+0x280>)
 800338c:	f043 0320 	orr.w	r3, r3, #32
 8003390:	6313      	str	r3, [r2, #48]	@ 0x30
 8003392:	4b8f      	ldr	r3, [pc, #572]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	4b8b      	ldr	r3, [pc, #556]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	4a8a      	ldr	r2, [pc, #552]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ae:	4b88      	ldr	r3, [pc, #544]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	4b84      	ldr	r3, [pc, #528]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	4a83      	ldr	r2, [pc, #524]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ca:	4b81      	ldr	r3, [pc, #516]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	4b7d      	ldr	r3, [pc, #500]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	4a7c      	ldr	r2, [pc, #496]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e6:	4b7a      	ldr	r3, [pc, #488]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	4a75      	ldr	r2, [pc, #468]	@ (80035d0 <MX_GPIO_Init+0x280>)
 80033fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003400:	6313      	str	r3, [r2, #48]	@ 0x30
 8003402:	4b73      	ldr	r3, [pc, #460]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	4b6f      	ldr	r3, [pc, #444]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	4a6e      	ldr	r2, [pc, #440]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003418:	f043 0310 	orr.w	r3, r3, #16
 800341c:	6313      	str	r3, [r2, #48]	@ 0x30
 800341e:	4b6c      	ldr	r3, [pc, #432]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	4b68      	ldr	r3, [pc, #416]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a67      	ldr	r2, [pc, #412]	@ (80035d0 <MX_GPIO_Init+0x280>)
 8003434:	f043 0308 	orr.w	r3, r3, #8
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b65      	ldr	r3, [pc, #404]	@ (80035d0 <MX_GPIO_Init+0x280>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003446:	2200      	movs	r2, #0
 8003448:	2116      	movs	r1, #22
 800344a:	4862      	ldr	r0, [pc, #392]	@ (80035d4 <MX_GPIO_Init+0x284>)
 800344c:	f003 f88e 	bl	800656c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	4860      	ldr	r0, [pc, #384]	@ (80035d8 <MX_GPIO_Init+0x288>)
 8003456:	f003 f889 	bl	800656c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800345a:	2200      	movs	r2, #0
 800345c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003460:	485e      	ldr	r0, [pc, #376]	@ (80035dc <MX_GPIO_Init+0x28c>)
 8003462:	f003 f883 	bl	800656c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003466:	2200      	movs	r2, #0
 8003468:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800346c:	485c      	ldr	r0, [pc, #368]	@ (80035e0 <MX_GPIO_Init+0x290>)
 800346e:	f003 f87d 	bl	800656c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003472:	2316      	movs	r3, #22
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003476:	2301      	movs	r3, #1
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003486:	4619      	mov	r1, r3
 8003488:	4852      	ldr	r0, [pc, #328]	@ (80035d4 <MX_GPIO_Init+0x284>)
 800348a:	f002 fdb7 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 800348e:	2307      	movs	r3, #7
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003492:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003496:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a0:	4619      	mov	r1, r3
 80034a2:	484d      	ldr	r0, [pc, #308]	@ (80035d8 <MX_GPIO_Init+0x288>)
 80034a4:	f002 fdaa 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80034a8:	2380      	movs	r3, #128	@ 0x80
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80034b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034bc:	4619      	mov	r1, r3
 80034be:	4846      	ldr	r0, [pc, #280]	@ (80035d8 <MX_GPIO_Init+0x288>)
 80034c0:	f002 fd9c 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80034c4:	2320      	movs	r3, #32
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80034c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80034cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80034d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d6:	4619      	mov	r1, r3
 80034d8:	483e      	ldr	r0, [pc, #248]	@ (80035d4 <MX_GPIO_Init+0x284>)
 80034da:	f002 fd8f 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80034de:	2304      	movs	r3, #4
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e2:	2300      	movs	r3, #0
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80034ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ee:	4619      	mov	r1, r3
 80034f0:	483c      	ldr	r0, [pc, #240]	@ (80035e4 <MX_GPIO_Init+0x294>)
 80034f2:	f002 fd83 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80034f6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003508:	230c      	movs	r3, #12
 800350a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003510:	4619      	mov	r1, r3
 8003512:	4834      	ldr	r0, [pc, #208]	@ (80035e4 <MX_GPIO_Init+0x294>)
 8003514:	f002 fd72 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352a:	4619      	mov	r1, r3
 800352c:	482d      	ldr	r0, [pc, #180]	@ (80035e4 <MX_GPIO_Init+0x294>)
 800352e:	f002 fd65 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003544:	4619      	mov	r1, r3
 8003546:	4825      	ldr	r0, [pc, #148]	@ (80035dc <MX_GPIO_Init+0x28c>)
 8003548:	f002 fd58 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800354c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003552:	2301      	movs	r3, #1
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800355e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003562:	4619      	mov	r1, r3
 8003564:	481d      	ldr	r0, [pc, #116]	@ (80035dc <MX_GPIO_Init+0x28c>)
 8003566:	f002 fd49 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800356a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800357c:	2307      	movs	r3, #7
 800357e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003584:	4619      	mov	r1, r3
 8003586:	4814      	ldr	r0, [pc, #80]	@ (80035d8 <MX_GPIO_Init+0x288>)
 8003588:	f002 fd38 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800358c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003592:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a0:	4619      	mov	r1, r3
 80035a2:	480d      	ldr	r0, [pc, #52]	@ (80035d8 <MX_GPIO_Init+0x288>)
 80035a4:	f002 fd2a 	bl	8005ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80035a8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ae:	2301      	movs	r3, #1
 80035b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035be:	4619      	mov	r1, r3
 80035c0:	4807      	ldr	r0, [pc, #28]	@ (80035e0 <MX_GPIO_Init+0x290>)
 80035c2:	f002 fd1b 	bl	8005ffc <HAL_GPIO_Init>

}
 80035c6:	bf00      	nop
 80035c8:	3738      	adds	r7, #56	@ 0x38
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40020800 	.word	0x40020800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020c00 	.word	0x40020c00
 80035e0:	40021800 	.word	0x40021800
 80035e4:	40020400 	.word	0x40020400

080035e8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80035ec:	4b1b      	ldr	r3, [pc, #108]	@ (800365c <MX_I2C3_Init+0x74>)
 80035ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003660 <MX_I2C3_Init+0x78>)
 80035f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80035f2:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <MX_I2C3_Init+0x74>)
 80035f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <MX_I2C3_Init+0x7c>)
 80035f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035f8:	4b18      	ldr	r3, [pc, #96]	@ (800365c <MX_I2C3_Init+0x74>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80035fe:	4b17      	ldr	r3, [pc, #92]	@ (800365c <MX_I2C3_Init+0x74>)
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003604:	4b15      	ldr	r3, [pc, #84]	@ (800365c <MX_I2C3_Init+0x74>)
 8003606:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800360a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800360c:	4b13      	ldr	r3, [pc, #76]	@ (800365c <MX_I2C3_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003612:	4b12      	ldr	r3, [pc, #72]	@ (800365c <MX_I2C3_Init+0x74>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003618:	4b10      	ldr	r3, [pc, #64]	@ (800365c <MX_I2C3_Init+0x74>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800361e:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <MX_I2C3_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003624:	480d      	ldr	r0, [pc, #52]	@ (800365c <MX_I2C3_Init+0x74>)
 8003626:	f002 ffd5 	bl	80065d4 <HAL_I2C_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003630:	f000 fc08 	bl	8003e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003634:	2100      	movs	r1, #0
 8003636:	4809      	ldr	r0, [pc, #36]	@ (800365c <MX_I2C3_Init+0x74>)
 8003638:	f004 f82e 	bl	8007698 <HAL_I2CEx_ConfigAnalogFilter>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003642:	f000 fbff 	bl	8003e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003646:	2100      	movs	r1, #0
 8003648:	4804      	ldr	r0, [pc, #16]	@ (800365c <MX_I2C3_Init+0x74>)
 800364a:	f004 f861 	bl	8007710 <HAL_I2CEx_ConfigDigitalFilter>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003654:	f000 fbf6 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}
 800365c:	2000054c 	.word	0x2000054c
 8003660:	40005c00 	.word	0x40005c00
 8003664:	000186a0 	.word	0x000186a0

08003668 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	@ 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a29      	ldr	r2, [pc, #164]	@ (800372c <HAL_I2C_MspInit+0xc4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d14b      	bne.n	8003722 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	4b28      	ldr	r3, [pc, #160]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	6313      	str	r3, [r2, #48]	@ 0x30
 800369a:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	4a20      	ldr	r2, [pc, #128]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80036c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c8:	2312      	movs	r3, #18
 80036ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036d4:	2304      	movs	r3, #4
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	4815      	ldr	r0, [pc, #84]	@ (8003734 <HAL_I2C_MspInit+0xcc>)
 80036e0:	f002 fc8c 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80036e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036ea:	2312      	movs	r3, #18
 80036ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ee:	2301      	movs	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036f6:	2304      	movs	r3, #4
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	4619      	mov	r1, r3
 8003700:	480d      	ldr	r0, [pc, #52]	@ (8003738 <HAL_I2C_MspInit+0xd0>)
 8003702:	f002 fc7b 	bl	8005ffc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	4b09      	ldr	r3, [pc, #36]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	4a08      	ldr	r2, [pc, #32]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 8003710:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003714:	6413      	str	r3, [r2, #64]	@ 0x40
 8003716:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <HAL_I2C_MspInit+0xc8>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003722:	bf00      	nop
 8003724:	3728      	adds	r7, #40	@ 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40005c00 	.word	0x40005c00
 8003730:	40023800 	.word	0x40023800
 8003734:	40020800 	.word	0x40020800
 8003738:	40020000 	.word	0x40020000

0800373c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0b      	ldr	r2, [pc, #44]	@ (8003778 <HAL_I2C_MspDeInit+0x3c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10f      	bne.n	800376e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800374e:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <HAL_I2C_MspDeInit+0x40>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <HAL_I2C_MspDeInit+0x40>)
 8003754:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003758:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800375a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800375e:	4808      	ldr	r0, [pc, #32]	@ (8003780 <HAL_I2C_MspDeInit+0x44>)
 8003760:	f002 fdf8 	bl	8006354 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003768:	4806      	ldr	r0, [pc, #24]	@ (8003784 <HAL_I2C_MspDeInit+0x48>)
 800376a:	f002 fdf3 	bl	8006354 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40005c00 	.word	0x40005c00
 800377c:	40023800 	.word	0x40023800
 8003780:	40020800 	.word	0x40020800
 8003784:	40020000 	.word	0x40020000

08003788 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08e      	sub	sp, #56	@ 0x38
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	2234      	movs	r2, #52	@ 0x34
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f006 fe9b 	bl	800a4d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800379a:	4b39      	ldr	r3, [pc, #228]	@ (8003880 <MX_LTDC_Init+0xf8>)
 800379c:	4a39      	ldr	r2, [pc, #228]	@ (8003884 <MX_LTDC_Init+0xfc>)
 800379e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80037a6:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80037ac:	4b34      	ldr	r3, [pc, #208]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80037b2:	4b33      	ldr	r3, [pc, #204]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80037b8:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037ba:	2209      	movs	r2, #9
 80037bc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80037be:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80037c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037c6:	221d      	movs	r2, #29
 80037c8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80037ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037cc:	2203      	movs	r2, #3
 80037ce:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80037d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037d2:	f240 120d 	movw	r2, #269	@ 0x10d
 80037d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80037d8:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037da:	f240 1243 	movw	r2, #323	@ 0x143
 80037de:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80037e0:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037e2:	f240 1217 	movw	r2, #279	@ 0x117
 80037e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80037e8:	4b25      	ldr	r3, [pc, #148]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037ea:	f240 1247 	movw	r2, #327	@ 0x147
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80037f0:	4b23      	ldr	r3, [pc, #140]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80037f8:	4b21      	ldr	r3, [pc, #132]	@ (8003880 <MX_LTDC_Init+0xf8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003800:	4b1f      	ldr	r3, [pc, #124]	@ (8003880 <MX_LTDC_Init+0xf8>)
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003808:	481d      	ldr	r0, [pc, #116]	@ (8003880 <MX_LTDC_Init+0xf8>)
 800380a:	f003 ffc1 	bl	8007790 <HAL_LTDC_Init>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003814:	f000 fb16 	bl	8003e44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800381c:	23f0      	movs	r3, #240	@ 0xf0
 800381e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8003824:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003828:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800382a:	2302      	movs	r3, #2
 800382c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800382e:	23ff      	movs	r3, #255	@ 0xff
 8003830:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003836:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800383a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800383c:	2307      	movs	r3, #7
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8003840:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8003846:	23f0      	movs	r3, #240	@ 0xf0
 8003848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 800384a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800384e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	2200      	movs	r2, #0
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	@ (8003880 <MX_LTDC_Init+0xf8>)
 800386a:	f004 f923 	bl	8007ab4 <HAL_LTDC_ConfigLayer>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8003874:	f000 fae6 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003878:	bf00      	nop
 800387a:	3738      	adds	r7, #56	@ 0x38
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200005a0 	.word	0x200005a0
 8003884:	40016800 	.word	0x40016800

08003888 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b09a      	sub	sp, #104	@ 0x68
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a4:	2230      	movs	r2, #48	@ 0x30
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f006 fe11 	bl	800a4d0 <memset>
  if(ltdcHandle->Instance==LTDC)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a85      	ldr	r2, [pc, #532]	@ (8003ac8 <HAL_LTDC_MspInit+0x240>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	f040 8103 	bne.w	8003ac0 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80038ba:	2308      	movs	r3, #8
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80038be:	2332      	movs	r3, #50	@ 0x32
 80038c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80038c2:	2304      	movs	r3, #4
 80038c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80038c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f004 fff5 	bl	80088c0 <HAL_RCCEx_PeriphCLKConfig>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80038dc:	f000 fab2 	bl	8003e44 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	4b79      	ldr	r3, [pc, #484]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 80038e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e8:	4a78      	ldr	r2, [pc, #480]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 80038ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80038f0:	4b76      	ldr	r3, [pc, #472]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 80038f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	4b72      	ldr	r3, [pc, #456]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	4a71      	ldr	r2, [pc, #452]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003906:	f043 0320 	orr.w	r3, r3, #32
 800390a:	6313      	str	r3, [r2, #48]	@ 0x30
 800390c:	4b6f      	ldr	r3, [pc, #444]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	4b6b      	ldr	r3, [pc, #428]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	4a6a      	ldr	r2, [pc, #424]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6313      	str	r3, [r2, #48]	@ 0x30
 8003928:	4b68      	ldr	r3, [pc, #416]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	4b64      	ldr	r3, [pc, #400]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	4a63      	ldr	r2, [pc, #396]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	6313      	str	r3, [r2, #48]	@ 0x30
 8003944:	4b61      	ldr	r3, [pc, #388]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003958:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800395a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800395e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003960:	4b5a      	ldr	r3, [pc, #360]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	4b56      	ldr	r3, [pc, #344]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	4a55      	ldr	r2, [pc, #340]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	6313      	str	r3, [r2, #48]	@ 0x30
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003988:	2300      	movs	r3, #0
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	4b4f      	ldr	r3, [pc, #316]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	4a4e      	ldr	r2, [pc, #312]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	6313      	str	r3, [r2, #48]	@ 0x30
 8003998:	4b4c      	ldr	r3, [pc, #304]	@ (8003acc <HAL_LTDC_MspInit+0x244>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80039a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039b6:	230e      	movs	r3, #14
 80039b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80039ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039be:	4619      	mov	r1, r3
 80039c0:	4843      	ldr	r0, [pc, #268]	@ (8003ad0 <HAL_LTDC_MspInit+0x248>)
 80039c2:	f002 fb1b 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80039c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80039ca:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d4:	2300      	movs	r3, #0
 80039d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039d8:	230e      	movs	r3, #14
 80039da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039e0:	4619      	mov	r1, r3
 80039e2:	483c      	ldr	r0, [pc, #240]	@ (8003ad4 <HAL_LTDC_MspInit+0x24c>)
 80039e4:	f002 fb0a 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80039e8:	2303      	movs	r3, #3
 80039ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80039f8:	2309      	movs	r3, #9
 80039fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a00:	4619      	mov	r1, r3
 8003a02:	4835      	ldr	r0, [pc, #212]	@ (8003ad8 <HAL_LTDC_MspInit+0x250>)
 8003a04:	f002 fafa 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003a08:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003a0c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	2300      	movs	r3, #0
 8003a18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a1a:	230e      	movs	r3, #14
 8003a1c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a22:	4619      	mov	r1, r3
 8003a24:	482c      	ldr	r0, [pc, #176]	@ (8003ad8 <HAL_LTDC_MspInit+0x250>)
 8003a26:	f002 fae9 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003a2a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003a2e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a3c:	230e      	movs	r3, #14
 8003a3e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a44:	4619      	mov	r1, r3
 8003a46:	4825      	ldr	r0, [pc, #148]	@ (8003adc <HAL_LTDC_MspInit+0x254>)
 8003a48:	f002 fad8 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003a4c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003a50:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a5e:	230e      	movs	r3, #14
 8003a60:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a66:	4619      	mov	r1, r3
 8003a68:	481d      	ldr	r0, [pc, #116]	@ (8003ae0 <HAL_LTDC_MspInit+0x258>)
 8003a6a:	f002 fac7 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003a6e:	2348      	movs	r3, #72	@ 0x48
 8003a70:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a7e:	230e      	movs	r3, #14
 8003a80:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a86:	4619      	mov	r1, r3
 8003a88:	4816      	ldr	r0, [pc, #88]	@ (8003ae4 <HAL_LTDC_MspInit+0x25c>)
 8003a8a:	f002 fab7 	bl	8005ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003a8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a92:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003aa0:	2309      	movs	r3, #9
 8003aa2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	480c      	ldr	r0, [pc, #48]	@ (8003adc <HAL_LTDC_MspInit+0x254>)
 8003aac:	f002 faa6 	bl	8005ffc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2105      	movs	r1, #5
 8003ab4:	2058      	movs	r0, #88	@ 0x58
 8003ab6:	f001 fa0b 	bl	8004ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003aba:	2058      	movs	r0, #88	@ 0x58
 8003abc:	f001 fa24 	bl	8004f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3768      	adds	r7, #104	@ 0x68
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40016800 	.word	0x40016800
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40021400 	.word	0x40021400
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40021800 	.word	0x40021800
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00

08003ae8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Callback que se llama al completarse la conversión del ADC */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0c      	ldr	r2, [pc, #48]	@ (8003b28 <HAL_ADC_ConvCpltCallback+0x40>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d111      	bne.n	8003b1e <HAL_ADC_ConvCpltCallback+0x36>
    	BSP_LED_On(LED3);
 8003afa:	2000      	movs	r0, #0
 8003afc:	f7fd fd84 	bl	8001608 <BSP_LED_On>
        //Procesa los datos del buffer
    	sprintf(texto,"%d",adc_data[1]);
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_ADC_ConvCpltCallback+0x44>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	461a      	mov	r2, r3
 8003b06:	490a      	ldr	r1, [pc, #40]	@ (8003b30 <HAL_ADC_ConvCpltCallback+0x48>)
 8003b08:	480a      	ldr	r0, [pc, #40]	@ (8003b34 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003b0a:	f006 fcc1 	bl	800a490 <siprintf>
    	BSP_LCD_DisplayStringAt(0, 112, texto, CENTER_MODE, 0);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2301      	movs	r3, #1
 8003b14:	4a07      	ldr	r2, [pc, #28]	@ (8003b34 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003b16:	2170      	movs	r1, #112	@ 0x70
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7fe fab5 	bl	8002088 <BSP_LCD_DisplayStringAt>
	    //Graficar los datos del ADC en la pantalla LCD

    }
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40012000 	.word	0x40012000
 8003b2c:	20000804 	.word	0x20000804
 8003b30:	0800b85c 	.word	0x0800b85c
 8003b34:	2000064c 	.word	0x2000064c

08003b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b3e:	f000 fc91 	bl	8004464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b42:	f000 f88f 	bl	8003c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b46:	f7ff fc03 	bl	8003350 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b4a:	f7ff fa85 	bl	8003058 <MX_DMA_Init>
  MX_CRC_Init();
 8003b4e:	f7ff f9a1 	bl	8002e94 <MX_CRC_Init>
  MX_DMA2D_Init();
 8003b52:	f7ff fab7 	bl	80030c4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003b56:	f7ff fb0f 	bl	8003178 <MX_FMC_Init>
  MX_I2C3_Init();
 8003b5a:	f7ff fd45 	bl	80035e8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003b5e:	f7ff fe13 	bl	8003788 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003b62:	f000 f979 	bl	8003e58 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003b66:	f000 fb7b 	bl	8004260 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003b6a:	f7ff f8c7 	bl	8002cfc <MX_ADC1_Init>
  MX_TIM2_Init();
 8003b6e:	f000 fbc7 	bl	8004300 <MX_TIM2_Init>
  MX_DAC_Init();
 8003b72:	f7ff f9c5 	bl	8002f00 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	BSP_SDRAM_Init();
 8003b76:	f7fe febd 	bl	80028f4 <BSP_SDRAM_Init>
	BSP_LCD_Init();
 8003b7a:	f7fe f8d1 	bl	8001d20 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8003b7e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7fe f94e 	bl	8001e24 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8003b88:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7fe f949 	bl	8001e24 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f7fe f9aa 	bl	8001eec <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8003b98:	f7fe fc54 	bl	8002444 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8003b9c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003ba0:	f7fe fa00 	bl	8001fa4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003ba4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003ba8:	f7fe f9c8 	bl	8001f3c <BSP_LCD_SetBackColor>
	BSP_TS_Init(240,320);
 8003bac:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003bb0:	20f0      	movs	r0, #240	@ 0xf0
 8003bb2:	f7ff f869 	bl	8002c88 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	BSP_LCD_SetFont(&Font16);
 8003bb6:	4822      	ldr	r0, [pc, #136]	@ (8003c40 <main+0x108>)
 8003bb8:	f7fe f9da 	bl	8001f70 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	f7fe f9a4 	bl	8001f0c <BSP_LCD_SetTextColor>
	sprintf(texto,"%d KHz",FRECUENCIA);
 8003bc4:	2218      	movs	r2, #24
 8003bc6:	491f      	ldr	r1, [pc, #124]	@ (8003c44 <main+0x10c>)
 8003bc8:	481f      	ldr	r0, [pc, #124]	@ (8003c48 <main+0x110>)
 8003bca:	f006 fc61 	bl	800a490 <siprintf>
	BSP_LCD_DisplayStringAt(0, 224, texto, CENTER_MODE, 0);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c48 <main+0x110>)
 8003bd6:	21e0      	movs	r1, #224	@ 0xe0
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f7fe fa55 	bl	8002088 <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(14,(uint8_t*)"24KHz", 0);
	BSP_LCD_DisplayStringAt(0, 0, "Input Signal", CENTER_MODE, 0);
 8003bde:	2300      	movs	r3, #0
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2301      	movs	r3, #1
 8003be4:	4a19      	ldr	r2, [pc, #100]	@ (8003c4c <main+0x114>)
 8003be6:	2100      	movs	r1, #0
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7fe fa4d 	bl	8002088 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 0, "Voltage", CENTER_MODE, 1);
 8003bee:	2301      	movs	r3, #1
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <main+0x118>)
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7fe fa45 	bl	8002088 <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAtLine(9,(uint8_t*)" 0123456789");
	BSP_LCD_DrawHLine(0, 11, 240);
 8003bfe:	22f0      	movs	r2, #240	@ 0xf0
 8003c00:	210b      	movs	r1, #11
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7fe fb9e 	bl	8002344 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(11, 0, 320);
 8003c08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	200b      	movs	r0, #11
 8003c10:	f7fe fbd6 	bl	80023c0 <BSP_LCD_DrawVLine>
	contador=0;
 8003c14:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <main+0x11c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	801a      	strh	r2, [r3, #0]
	Generate_Sine_Wave(dac_data, BUFFER_SIZE, ADC_RES/2); // 2048 para señal de 12 bits (amplitud)
 8003c1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c1e:	2164      	movs	r1, #100	@ 0x64
 8003c20:	480d      	ldr	r0, [pc, #52]	@ (8003c58 <main+0x120>)
 8003c22:	f000 f891 	bl	8003d48 <Generate_Sine_Wave>
	//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, dac_data, BUFFER_SIZE, DAC_ALIGN_12B_R);
	//HAL_TIM_Base_Start(&htim2);

	  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, BUFFER_SIZE) != HAL_OK)
 8003c26:	2264      	movs	r2, #100	@ 0x64
 8003c28:	490c      	ldr	r1, [pc, #48]	@ (8003c5c <main+0x124>)
 8003c2a:	480d      	ldr	r0, [pc, #52]	@ (8003c60 <main+0x128>)
 8003c2c:	f000 fcc4 	bl	80045b8 <HAL_ADC_Start_DMA>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <main+0x104>
	  {
	    /* Start Conversation Error */
	    Error_Handler();
 8003c36:	f000 f905 	bl	8003e44 <Error_Handler>
	  }


  while (1)
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <main+0x104>
 8003c40:	20000078 	.word	0x20000078
 8003c44:	0800b860 	.word	0x0800b860
 8003c48:	2000064c 	.word	0x2000064c
 8003c4c:	0800b868 	.word	0x0800b868
 8003c50:	0800b878 	.word	0x0800b878
 8003c54:	20000648 	.word	0x20000648
 8003c58:	20000674 	.word	0x20000674
 8003c5c:	20000804 	.word	0x20000804
 8003c60:	200003b0 	.word	0x200003b0

08003c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b094      	sub	sp, #80	@ 0x50
 8003c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c6a:	f107 0320 	add.w	r3, r7, #32
 8003c6e:	2230      	movs	r2, #48	@ 0x30
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f006 fc2c 	bl	800a4d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d3c <SystemClock_Config+0xd8>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	4a2a      	ldr	r2, [pc, #168]	@ (8003d3c <SystemClock_Config+0xd8>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c98:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <SystemClock_Config+0xd8>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <SystemClock_Config+0xdc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a24      	ldr	r2, [pc, #144]	@ (8003d40 <SystemClock_Config+0xdc>)
 8003cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <SystemClock_Config+0xdc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003cd8:	23b4      	movs	r3, #180	@ 0xb4
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce4:	f107 0320 	add.w	r3, r7, #32
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 f933 	bl	8007f54 <HAL_RCC_OscConfig>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003cf4:	f000 f8a6 	bl	8003e44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003cf8:	f004 f8dc 	bl	8007eb4 <HAL_PWREx_EnableOverDrive>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003d02:	f000 f89f 	bl	8003e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d06:	230f      	movs	r3, #15
 8003d08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003d16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d1e:	f107 030c 	add.w	r3, r7, #12
 8003d22:	2105      	movs	r1, #5
 8003d24:	4618      	mov	r0, r3
 8003d26:	f004 fb8d 	bl	8008444 <HAL_RCC_ClockConfig>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003d30:	f000 f888 	bl	8003e44 <Error_Handler>
  }
}
 8003d34:	bf00      	nop
 8003d36:	3750      	adds	r7, #80	@ 0x50
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40007000 	.word	0x40007000
 8003d44:	00000000 	.word	0x00000000

08003d48 <Generate_Sine_Wave>:
/* USER CODE BEGIN 4 */



void Generate_Sine_Wave(uint32_t *buffer, uint32_t buff_size, uint32_t amplitude)
{
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	ed2d 8b02 	vpush	{d8}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < buff_size; i++)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e04d      	b.n	8003dfa <Generate_Sine_Wave+0xb2>
        {
            float theta = 2.0f * M_PI * i / buff_size; // Cálculo del ángulo para la frecuencia correcta
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f7fc fbd8 	bl	8000514 <__aeabi_ui2d>
 8003d64:	a32c      	add	r3, pc, #176	@ (adr r3, 8003e18 <Generate_Sine_Wave+0xd0>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f7fc fc4d 	bl	8000608 <__aeabi_dmul>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4614      	mov	r4, r2
 8003d74:	461d      	mov	r5, r3
 8003d76:	68b8      	ldr	r0, [r7, #8]
 8003d78:	f7fc fbcc 	bl	8000514 <__aeabi_ui2d>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4620      	mov	r0, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	f7fc fd6a 	bl	800085c <__aeabi_ddiv>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7fc fe4c 	bl	8000a2c <__aeabi_d2f>
 8003d94:	4603      	mov	r3, r0
 8003d96:	613b      	str	r3, [r7, #16]
            buffer[i] = (uint32_t)(amplitude * (1 + sinf(theta))); // Normalización para valores positivos
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003da2:	ed97 0a04 	vldr	s0, [r7, #16]
 8003da6:	f007 f813 	bl	800add0 <sinf>
 8003daa:	eef0 7a40 	vmov.f32	s15, s0
 8003dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003db2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003db6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc6:	ee17 2a90 	vmov	r2, s15
 8003dca:	601a      	str	r2, [r3, #0]

            //Dibujar el punto en la pantalla, con ajustes en la posición
            BSP_LCD_DrawPixel(12 + buffer[i] / 20, i + 12, LCD_COLOR_RED);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e10 <Generate_Sine_Wave+0xc8>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	330c      	adds	r3, #12
 8003de2:	b298      	uxth	r0, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	330c      	adds	r3, #12
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4a09      	ldr	r2, [pc, #36]	@ (8003e14 <Generate_Sine_Wave+0xcc>)
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fe fc0e 	bl	8002610 <BSP_LCD_DrawPixel>
    for (i = 0; i < buff_size; i++)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3301      	adds	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3ad      	bcc.n	8003d5e <Generate_Sine_Wave+0x16>
        }
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	ecbd 8b02 	vpop	{d8}
 8003e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e10:	cccccccd 	.word	0xcccccccd
 8003e14:	ffff0000 	.word	0xffff0000
 8003e18:	3fa6defc 	.word	0x3fa6defc
 8003e1c:	401921fb 	.word	0x401921fb

08003e20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e32:	f000 fb39 	bl	80044a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40001000 	.word	0x40001000

08003e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e48:	b672      	cpsid	i
}
 8003e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f7fd fbdb 	bl	8001608 <BSP_LED_On>
  while (1)
 8003e52:	bf00      	nop
 8003e54:	e7fd      	b.n	8003e52 <Error_Handler+0xe>
	...

08003e58 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003e5c:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ec0 <MX_SPI5_Init+0x68>)
 8003e60:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003e62:	4b16      	ldr	r3, [pc, #88]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e68:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003e6a:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e70:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e76:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003e82:	4b0e      	ldr	r3, [pc, #56]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e88:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e8c:	2218      	movs	r2, #24
 8003e8e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e90:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e96:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9c:	4b07      	ldr	r3, [pc, #28]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003ea2:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003ea4:	220a      	movs	r2, #10
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003ea8:	4804      	ldr	r0, [pc, #16]	@ (8003ebc <MX_SPI5_Init+0x64>)
 8003eaa:	f004 ff5a 	bl	8008d62 <HAL_SPI_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003eb4:	f7ff ffc6 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000994 	.word	0x20000994
 8003ec0:	40015000 	.word	0x40015000

08003ec4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	@ 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <HAL_SPI_MspInit+0x84>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d12c      	bne.n	8003f40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	4b18      	ldr	r3, [pc, #96]	@ (8003f4c <HAL_SPI_MspInit+0x88>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	4a17      	ldr	r2, [pc, #92]	@ (8003f4c <HAL_SPI_MspInit+0x88>)
 8003ef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <HAL_SPI_MspInit+0x88>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b11      	ldr	r3, [pc, #68]	@ (8003f4c <HAL_SPI_MspInit+0x88>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	4a10      	ldr	r2, [pc, #64]	@ (8003f4c <HAL_SPI_MspInit+0x88>)
 8003f0c:	f043 0320 	orr.w	r3, r3, #32
 8003f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f12:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <HAL_SPI_MspInit+0x88>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003f1e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003f30:	2305      	movs	r3, #5
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4805      	ldr	r0, [pc, #20]	@ (8003f50 <HAL_SPI_MspInit+0x8c>)
 8003f3c:	f002 f85e 	bl	8005ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003f40:	bf00      	nop
 8003f42:	3728      	adds	r7, #40	@ 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40015000 	.word	0x40015000
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40021400 	.word	0x40021400

08003f54 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a08      	ldr	r2, [pc, #32]	@ (8003f84 <HAL_SPI_MspDeInit+0x30>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10a      	bne.n	8003f7c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003f66:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <HAL_SPI_MspDeInit+0x34>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_SPI_MspDeInit+0x34>)
 8003f6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f70:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003f72:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003f76:	4805      	ldr	r0, [pc, #20]	@ (8003f8c <HAL_SPI_MspDeInit+0x38>)
 8003f78:	f002 f9ec 	bl	8006354 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40015000 	.word	0x40015000
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40021400 	.word	0x40021400

08003f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	4b10      	ldr	r3, [pc, #64]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	4a08      	ldr	r2, [pc, #32]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08e      	sub	sp, #56	@ 0x38
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	4b33      	ldr	r3, [pc, #204]	@ (80040c4 <HAL_InitTick+0xe4>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	4a32      	ldr	r2, [pc, #200]	@ (80040c4 <HAL_InitTick+0xe4>)
 8003ffa:	f043 0310 	orr.w	r3, r3, #16
 8003ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004000:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <HAL_InitTick+0xe4>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800400c:	f107 0210 	add.w	r2, r7, #16
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f004 fc20 	bl	800885c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004026:	f004 fc05 	bl	8008834 <HAL_RCC_GetPCLK1Freq>
 800402a:	6378      	str	r0, [r7, #52]	@ 0x34
 800402c:	e004      	b.n	8004038 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800402e:	f004 fc01 	bl	8008834 <HAL_RCC_GetPCLK1Freq>
 8004032:	4603      	mov	r3, r0
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403a:	4a23      	ldr	r2, [pc, #140]	@ (80040c8 <HAL_InitTick+0xe8>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	0c9b      	lsrs	r3, r3, #18
 8004042:	3b01      	subs	r3, #1
 8004044:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004046:	4b21      	ldr	r3, [pc, #132]	@ (80040cc <HAL_InitTick+0xec>)
 8004048:	4a21      	ldr	r2, [pc, #132]	@ (80040d0 <HAL_InitTick+0xf0>)
 800404a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800404c:	4b1f      	ldr	r3, [pc, #124]	@ (80040cc <HAL_InitTick+0xec>)
 800404e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004052:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004054:	4a1d      	ldr	r2, [pc, #116]	@ (80040cc <HAL_InitTick+0xec>)
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800405a:	4b1c      	ldr	r3, [pc, #112]	@ (80040cc <HAL_InitTick+0xec>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <HAL_InitTick+0xec>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004066:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <HAL_InitTick+0xec>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800406c:	4817      	ldr	r0, [pc, #92]	@ (80040cc <HAL_InitTick+0xec>)
 800406e:	f005 fc7f 	bl	8009970 <HAL_TIM_Base_Init>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004078:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11b      	bne.n	80040b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004080:	4812      	ldr	r0, [pc, #72]	@ (80040cc <HAL_InitTick+0xec>)
 8004082:	f005 fcc5 	bl	8009a10 <HAL_TIM_Base_Start_IT>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800408c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004090:	2b00      	cmp	r3, #0
 8004092:	d111      	bne.n	80040b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004094:	2036      	movs	r0, #54	@ 0x36
 8004096:	f000 ff37 	bl	8004f08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b0f      	cmp	r3, #15
 800409e:	d808      	bhi.n	80040b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80040a0:	2200      	movs	r2, #0
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	2036      	movs	r0, #54	@ 0x36
 80040a6:	f000 ff13 	bl	8004ed0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040aa:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <HAL_InitTick+0xf4>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	e002      	b.n	80040b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80040b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3738      	adds	r7, #56	@ 0x38
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	200009ec 	.word	0x200009ec
 80040d0:	40001000 	.word	0x40001000
 80040d4:	20000088 	.word	0x20000088

080040d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <NMI_Handler+0x4>

080040e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <HardFault_Handler+0x4>

080040e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <MemManage_Handler+0x4>

080040f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <BusFault_Handler+0x4>

080040f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <UsageFault_Handler+0x4>

08004100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800413c:	4802      	ldr	r0, [pc, #8]	@ (8004148 <DMA1_Stream6_IRQHandler+0x10>)
 800413e:	f001 f957 	bl	80053f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000474 	.word	0x20000474

0800414c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004150:	4802      	ldr	r0, [pc, #8]	@ (800415c <TIM2_IRQHandler+0x10>)
 8004152:	f005 fccd 	bl	8009af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000a80 	.word	0x20000a80

08004160 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004164:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <TIM6_DAC_IRQHandler+0x20>)
 8004166:	791b      	ldrb	r3, [r3, #4]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800416e:	4804      	ldr	r0, [pc, #16]	@ (8004180 <TIM6_DAC_IRQHandler+0x20>)
 8004170:	f000 ff16 	bl	8004fa0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004174:	4803      	ldr	r0, [pc, #12]	@ (8004184 <TIM6_DAC_IRQHandler+0x24>)
 8004176:	f005 fcbb 	bl	8009af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000460 	.word	0x20000460
 8004184:	200009ec 	.word	0x200009ec

08004188 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800418c:	4804      	ldr	r0, [pc, #16]	@ (80041a0 <DMA2_Stream0_IRQHandler+0x18>)
 800418e:	f001 f92f 	bl	80053f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 8004192:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004196:	4803      	ldr	r0, [pc, #12]	@ (80041a4 <DMA2_Stream0_IRQHandler+0x1c>)
 8004198:	f002 fa01 	bl	800659e <HAL_GPIO_TogglePin>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	200003f8 	.word	0x200003f8
 80041a4:	40021800 	.word	0x40021800

080041a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80041ac:	4802      	ldr	r0, [pc, #8]	@ (80041b8 <LTDC_IRQHandler+0x10>)
 80041ae:	f003 fbbf 	bl	8007930 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200005a0 	.word	0x200005a0

080041bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80041c0:	4802      	ldr	r0, [pc, #8]	@ (80041cc <DMA2D_IRQHandler+0x10>)
 80041c2:	f001 fcdc 	bl	8005b7e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200004d4 	.word	0x200004d4

080041d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041d8:	4a14      	ldr	r2, [pc, #80]	@ (800422c <_sbrk+0x5c>)
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <_sbrk+0x60>)
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041e4:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <_sbrk+0x64>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041ec:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <_sbrk+0x64>)
 80041ee:	4a12      	ldr	r2, [pc, #72]	@ (8004238 <_sbrk+0x68>)
 80041f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041f2:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <_sbrk+0x64>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d207      	bcs.n	8004210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004200:	f006 f96e 	bl	800a4e0 <__errno>
 8004204:	4603      	mov	r3, r0
 8004206:	220c      	movs	r2, #12
 8004208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	e009      	b.n	8004224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004210:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <_sbrk+0x64>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <_sbrk+0x64>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <_sbrk+0x64>)
 8004220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20030000 	.word	0x20030000
 8004230:	00000400 	.word	0x00000400
 8004234:	20000a34 	.word	0x20000a34
 8004238:	20000c18 	.word	0x20000c18

0800423c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <SystemInit+0x20>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	4a05      	ldr	r2, [pc, #20]	@ (800425c <SystemInit+0x20>)
 8004248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800424c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
 8004270:	609a      	str	r2, [r3, #8]
 8004272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004274:	463b      	mov	r3, r7
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800427c:	4b1e      	ldr	r3, [pc, #120]	@ (80042f8 <MX_TIM1_Init+0x98>)
 800427e:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <MX_TIM1_Init+0x9c>)
 8004280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004282:	4b1d      	ldr	r3, [pc, #116]	@ (80042f8 <MX_TIM1_Init+0x98>)
 8004284:	2200      	movs	r2, #0
 8004286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004288:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <MX_TIM1_Init+0x98>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800428e:	4b1a      	ldr	r3, [pc, #104]	@ (80042f8 <MX_TIM1_Init+0x98>)
 8004290:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004296:	4b18      	ldr	r3, [pc, #96]	@ (80042f8 <MX_TIM1_Init+0x98>)
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800429c:	4b16      	ldr	r3, [pc, #88]	@ (80042f8 <MX_TIM1_Init+0x98>)
 800429e:	2200      	movs	r2, #0
 80042a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a2:	4b15      	ldr	r3, [pc, #84]	@ (80042f8 <MX_TIM1_Init+0x98>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042a8:	4813      	ldr	r0, [pc, #76]	@ (80042f8 <MX_TIM1_Init+0x98>)
 80042aa:	f005 fb61 	bl	8009970 <HAL_TIM_Base_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80042b4:	f7ff fdc6 	bl	8003e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042be:	f107 0308 	add.w	r3, r7, #8
 80042c2:	4619      	mov	r1, r3
 80042c4:	480c      	ldr	r0, [pc, #48]	@ (80042f8 <MX_TIM1_Init+0x98>)
 80042c6:	f005 fd03 	bl	8009cd0 <HAL_TIM_ConfigClockSource>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80042d0:	f7ff fdb8 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d4:	2300      	movs	r3, #0
 80042d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d8:	2300      	movs	r3, #0
 80042da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042dc:	463b      	mov	r3, r7
 80042de:	4619      	mov	r1, r3
 80042e0:	4805      	ldr	r0, [pc, #20]	@ (80042f8 <MX_TIM1_Init+0x98>)
 80042e2:	f005 ff2b 	bl	800a13c <HAL_TIMEx_MasterConfigSynchronization>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80042ec:	f7ff fdaa 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80042f0:	bf00      	nop
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000a38 	.word	0x20000a38
 80042fc:	40010000 	.word	0x40010000

08004300 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004314:	463b      	mov	r3, r7
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800431c:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <MX_TIM2_Init+0x94>)
 800431e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8004324:	4b1b      	ldr	r3, [pc, #108]	@ (8004394 <MX_TIM2_Init+0x94>)
 8004326:	2205      	movs	r2, #5
 8004328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800432a:	4b1a      	ldr	r3, [pc, #104]	@ (8004394 <MX_TIM2_Init+0x94>)
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8004330:	4b18      	ldr	r3, [pc, #96]	@ (8004394 <MX_TIM2_Init+0x94>)
 8004332:	2201      	movs	r2, #1
 8004334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004336:	4b17      	ldr	r3, [pc, #92]	@ (8004394 <MX_TIM2_Init+0x94>)
 8004338:	2200      	movs	r2, #0
 800433a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800433c:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <MX_TIM2_Init+0x94>)
 800433e:	2280      	movs	r2, #128	@ 0x80
 8004340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004342:	4814      	ldr	r0, [pc, #80]	@ (8004394 <MX_TIM2_Init+0x94>)
 8004344:	f005 fb14 	bl	8009970 <HAL_TIM_Base_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800434e:	f7ff fd79 	bl	8003e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004358:	f107 0308 	add.w	r3, r7, #8
 800435c:	4619      	mov	r1, r3
 800435e:	480d      	ldr	r0, [pc, #52]	@ (8004394 <MX_TIM2_Init+0x94>)
 8004360:	f005 fcb6 	bl	8009cd0 <HAL_TIM_ConfigClockSource>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800436a:	f7ff fd6b 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800436e:	2320      	movs	r3, #32
 8004370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004376:	463b      	mov	r3, r7
 8004378:	4619      	mov	r1, r3
 800437a:	4806      	ldr	r0, [pc, #24]	@ (8004394 <MX_TIM2_Init+0x94>)
 800437c:	f005 fede 	bl	800a13c <HAL_TIMEx_MasterConfigSynchronization>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004386:	f7ff fd5d 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000a80 	.word	0x20000a80

08004398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <HAL_TIM_Base_MspInit+0x70>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	4b17      	ldr	r3, [pc, #92]	@ (800440c <HAL_TIM_Base_MspInit+0x74>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	4a16      	ldr	r2, [pc, #88]	@ (800440c <HAL_TIM_Base_MspInit+0x74>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043ba:	4b14      	ldr	r3, [pc, #80]	@ (800440c <HAL_TIM_Base_MspInit+0x74>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80043c6:	e01a      	b.n	80043fe <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d0:	d115      	bne.n	80043fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <HAL_TIM_Base_MspInit+0x74>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	4a0c      	ldr	r2, [pc, #48]	@ (800440c <HAL_TIM_Base_MspInit+0x74>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e2:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <HAL_TIM_Base_MspInit+0x74>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	201c      	movs	r0, #28
 80043f4:	f000 fd6c 	bl	8004ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043f8:	201c      	movs	r0, #28
 80043fa:	f000 fd85 	bl	8004f08 <HAL_NVIC_EnableIRQ>
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40023800 	.word	0x40023800

08004410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004448 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004414:	f7ff ff12 	bl	800423c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004418:	480c      	ldr	r0, [pc, #48]	@ (800444c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800441a:	490d      	ldr	r1, [pc, #52]	@ (8004450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800441c:	4a0d      	ldr	r2, [pc, #52]	@ (8004454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800441e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004420:	e002      	b.n	8004428 <LoopCopyDataInit>

08004422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004426:	3304      	adds	r3, #4

08004428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800442a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800442c:	d3f9      	bcc.n	8004422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800442e:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004430:	4c0a      	ldr	r4, [pc, #40]	@ (800445c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004434:	e001      	b.n	800443a <LoopFillZerobss>

08004436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004438:	3204      	adds	r2, #4

0800443a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800443a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800443c:	d3fb      	bcc.n	8004436 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800443e:	f006 f855 	bl	800a4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004442:	f7ff fb79 	bl	8003b38 <main>
  bx  lr    
 8004446:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004448:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800444c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004450:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8004454:	0800e350 	.word	0x0800e350
  ldr r2, =_sbss
 8004458:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800445c:	20000c14 	.word	0x20000c14

08004460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004460:	e7fe      	b.n	8004460 <ADC_IRQHandler>
	...

08004464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004468:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <HAL_Init+0x40>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <HAL_Init+0x40>)
 800446e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_Init+0x40>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <HAL_Init+0x40>)
 800447a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800447e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_Init+0x40>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <HAL_Init+0x40>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800448c:	2003      	movs	r0, #3
 800448e:	f000 fd14 	bl	8004eba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004492:	200f      	movs	r0, #15
 8004494:	f7ff fda4 	bl	8003fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004498:	f7ff fd7a 	bl	8003f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00

080044a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_IncTick+0x20>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_IncTick+0x24>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	4a04      	ldr	r2, [pc, #16]	@ (80044cc <HAL_IncTick+0x24>)
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	2000008c 	.word	0x2000008c
 80044cc:	20000ac8 	.word	0x20000ac8

080044d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return uwTick;
 80044d4:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <HAL_GetTick+0x14>)
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000ac8 	.word	0x20000ac8

080044e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044f0:	f7ff ffee 	bl	80044d0 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d005      	beq.n	800450e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004502:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <HAL_Delay+0x44>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800450e:	bf00      	nop
 8004510:	f7ff ffde 	bl	80044d0 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	429a      	cmp	r2, r3
 800451e:	d8f7      	bhi.n	8004510 <HAL_Delay+0x28>
  {
  }
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	2000008c 	.word	0x2000008c

08004530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e033      	b.n	80045ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fe fc28 	bl	8002da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d118      	bne.n	80045a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004576:	f023 0302 	bic.w	r3, r3, #2
 800457a:	f043 0202 	orr.w	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa6e 	bl	8004a64 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40
 800459e:	e001      	b.n	80045a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_ADC_Start_DMA+0x1e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e0e9      	b.n	80047aa <HAL_ADC_Start_DMA+0x1f2>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d018      	beq.n	800461e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045fc:	4b6d      	ldr	r3, [pc, #436]	@ (80047b4 <HAL_ADC_Start_DMA+0x1fc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6d      	ldr	r2, [pc, #436]	@ (80047b8 <HAL_ADC_Start_DMA+0x200>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	0c9a      	lsrs	r2, r3, #18
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004610:	e002      	b.n	8004618 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3b01      	subs	r3, #1
 8004616:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f9      	bne.n	8004612 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462c:	d107      	bne.n	800463e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800463c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 80a1 	bne.w	8004790 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004678:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468c:	d106      	bne.n	800469c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	f023 0206 	bic.w	r2, r3, #6
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44
 800469a:	e002      	b.n	80046a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046aa:	4b44      	ldr	r3, [pc, #272]	@ (80047bc <HAL_ADC_Start_DMA+0x204>)
 80046ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	4a43      	ldr	r2, [pc, #268]	@ (80047c0 <HAL_ADC_Start_DMA+0x208>)
 80046b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	4a42      	ldr	r2, [pc, #264]	@ (80047c4 <HAL_ADC_Start_DMA+0x20c>)
 80046bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	4a41      	ldr	r2, [pc, #260]	@ (80047c8 <HAL_ADC_Start_DMA+0x210>)
 80046c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80046ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80046de:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	334c      	adds	r3, #76	@ 0x4c
 80046fa:	4619      	mov	r1, r3
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f000 fe1e 	bl	8005340 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2b00      	cmp	r3, #0
 800470e:	d12a      	bne.n	8004766 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2d      	ldr	r2, [pc, #180]	@ (80047cc <HAL_ADC_Start_DMA+0x214>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d015      	beq.n	8004746 <HAL_ADC_Start_DMA+0x18e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <HAL_ADC_Start_DMA+0x218>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d105      	bne.n	8004730 <HAL_ADC_Start_DMA+0x178>
 8004724:	4b25      	ldr	r3, [pc, #148]	@ (80047bc <HAL_ADC_Start_DMA+0x204>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a27      	ldr	r2, [pc, #156]	@ (80047d4 <HAL_ADC_Start_DMA+0x21c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d136      	bne.n	80047a8 <HAL_ADC_Start_DMA+0x1f0>
 800473a:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <HAL_ADC_Start_DMA+0x204>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	d130      	bne.n	80047a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d129      	bne.n	80047a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	e020      	b.n	80047a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <HAL_ADC_Start_DMA+0x214>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d11b      	bne.n	80047a8 <HAL_ADC_Start_DMA+0x1f0>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d114      	bne.n	80047a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	e00b      	b.n	80047a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000084 	.word	0x20000084
 80047b8:	431bde83 	.word	0x431bde83
 80047bc:	40012300 	.word	0x40012300
 80047c0:	08004c5d 	.word	0x08004c5d
 80047c4:	08004d17 	.word	0x08004d17
 80047c8:	08004d33 	.word	0x08004d33
 80047cc:	40012000 	.word	0x40012000
 80047d0:	40012100 	.word	0x40012100
 80047d4:	40012200 	.word	0x40012200

080047d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_ADC_ConfigChannel+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e113      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x244>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b09      	cmp	r3, #9
 800482a:	d925      	bls.n	8004878 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68d9      	ldr	r1, [r3, #12]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	3b1e      	subs	r3, #30
 8004842:	2207      	movs	r2, #7
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43da      	mvns	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	400a      	ands	r2, r1
 8004850:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68d9      	ldr	r1, [r3, #12]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	4618      	mov	r0, r3
 8004864:	4603      	mov	r3, r0
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4403      	add	r3, r0
 800486a:	3b1e      	subs	r3, #30
 800486c:	409a      	lsls	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	e022      	b.n	80048be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6919      	ldr	r1, [r3, #16]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	2207      	movs	r2, #7
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	400a      	ands	r2, r1
 800489a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6919      	ldr	r1, [r3, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4618      	mov	r0, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4403      	add	r3, r0
 80048b4:	409a      	lsls	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d824      	bhi.n	8004910 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	3b05      	subs	r3, #5
 80048d8:	221f      	movs	r2, #31
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43da      	mvns	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	400a      	ands	r2, r1
 80048e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4618      	mov	r0, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	3b05      	subs	r3, #5
 8004902:	fa00 f203 	lsl.w	r2, r0, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	635a      	str	r2, [r3, #52]	@ 0x34
 800490e:	e04c      	b.n	80049aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d824      	bhi.n	8004962 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	3b23      	subs	r3, #35	@ 0x23
 800492a:	221f      	movs	r2, #31
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43da      	mvns	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	400a      	ands	r2, r1
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	4618      	mov	r0, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	3b23      	subs	r3, #35	@ 0x23
 8004954:	fa00 f203 	lsl.w	r2, r0, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004960:	e023      	b.n	80049aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	3b41      	subs	r3, #65	@ 0x41
 8004974:	221f      	movs	r2, #31
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43da      	mvns	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	400a      	ands	r2, r1
 8004982:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	4618      	mov	r0, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	3b41      	subs	r3, #65	@ 0x41
 800499e:	fa00 f203 	lsl.w	r2, r0, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049aa:	4b29      	ldr	r3, [pc, #164]	@ (8004a50 <HAL_ADC_ConfigChannel+0x250>)
 80049ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a28      	ldr	r2, [pc, #160]	@ (8004a54 <HAL_ADC_ConfigChannel+0x254>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d10f      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x1d8>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b12      	cmp	r3, #18
 80049be:	d10b      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a54 <HAL_ADC_ConfigChannel+0x254>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d12b      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x23a>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a58 <HAL_ADC_ConfigChannel+0x258>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <HAL_ADC_ConfigChannel+0x1f4>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b11      	cmp	r3, #17
 80049f2:	d122      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a11      	ldr	r2, [pc, #68]	@ (8004a58 <HAL_ADC_ConfigChannel+0x258>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d111      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a16:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <HAL_ADC_ConfigChannel+0x25c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a11      	ldr	r2, [pc, #68]	@ (8004a60 <HAL_ADC_ConfigChannel+0x260>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	0c9a      	lsrs	r2, r3, #18
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a2c:	e002      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f9      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012300 	.word	0x40012300
 8004a54:	40012000 	.word	0x40012000
 8004a58:	10000012 	.word	0x10000012
 8004a5c:	20000084 	.word	0x20000084
 8004a60:	431bde83 	.word	0x431bde83

08004a64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a6c:	4b79      	ldr	r3, [pc, #484]	@ (8004c54 <ADC_Init+0x1f0>)
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	4a58      	ldr	r2, [pc, #352]	@ (8004c58 <ADC_Init+0x1f4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6899      	ldr	r1, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	e00f      	b.n	8004b62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b60:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0202 	bic.w	r2, r2, #2
 8004b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6899      	ldr	r1, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	7e1b      	ldrb	r3, [r3, #24]
 8004b7c:	005a      	lsls	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b9e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004bae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	035a      	lsls	r2, r3, #13
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	e007      	b.n	8004bd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	051a      	lsls	r2, r3, #20
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6899      	ldr	r1, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c1a:	025a      	lsls	r2, r3, #9
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	029a      	lsls	r2, r3, #10
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40012300 	.word	0x40012300
 8004c58:	0f000001 	.word	0x0f000001

08004c5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d13c      	bne.n	8004cf0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d12b      	bne.n	8004ce8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d127      	bne.n	8004ce8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d006      	beq.n	8004cb4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d119      	bne.n	8004ce8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0220 	bic.w	r2, r2, #32
 8004cc2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7fe fefd 	bl	8003ae8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cee:	e00e      	b.n	8004d0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fd75 	bl	80047ec <HAL_ADC_ErrorCallback>
}
 8004d02:	e004      	b.n	8004d0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fd57 	bl	80047d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2240      	movs	r2, #64	@ 0x40
 8004d44:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f043 0204 	orr.w	r2, r3, #4
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff fd4a 	bl	80047ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d70:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d92:	4a04      	ldr	r2, [pc, #16]	@ (8004da4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	60d3      	str	r3, [r2, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	e000ed00 	.word	0xe000ed00

08004da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dac:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	0a1b      	lsrs	r3, r3, #8
 8004db2:	f003 0307 	and.w	r3, r3, #7
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	e000ed00 	.word	0xe000ed00

08004dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	db0b      	blt.n	8004dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	f003 021f 	and.w	r2, r3, #31
 8004ddc:	4907      	ldr	r1, [pc, #28]	@ (8004dfc <__NVIC_EnableIRQ+0x38>)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2001      	movs	r0, #1
 8004de6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	e000e100 	.word	0xe000e100

08004e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	db0a      	blt.n	8004e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	490c      	ldr	r1, [pc, #48]	@ (8004e4c <__NVIC_SetPriority+0x4c>)
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	0112      	lsls	r2, r2, #4
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	440b      	add	r3, r1
 8004e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e28:	e00a      	b.n	8004e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4908      	ldr	r1, [pc, #32]	@ (8004e50 <__NVIC_SetPriority+0x50>)
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	3b04      	subs	r3, #4
 8004e38:	0112      	lsls	r2, r2, #4
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	761a      	strb	r2, [r3, #24]
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	e000e100 	.word	0xe000e100
 8004e50:	e000ed00 	.word	0xe000ed00

08004e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	@ 0x24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f1c3 0307 	rsb	r3, r3, #7
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	bf28      	it	cs
 8004e72:	2304      	movcs	r3, #4
 8004e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d902      	bls.n	8004e84 <NVIC_EncodePriority+0x30>
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3b03      	subs	r3, #3
 8004e82:	e000      	b.n	8004e86 <NVIC_EncodePriority+0x32>
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e88:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43da      	mvns	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	401a      	ands	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea6:	43d9      	mvns	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eac:	4313      	orrs	r3, r2
         );
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3724      	adds	r7, #36	@ 0x24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff ff4c 	bl	8004d60 <__NVIC_SetPriorityGrouping>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee2:	f7ff ff61 	bl	8004da8 <__NVIC_GetPriorityGrouping>
 8004ee6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	6978      	ldr	r0, [r7, #20]
 8004eee:	f7ff ffb1 	bl	8004e54 <NVIC_EncodePriority>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff ff80 	bl	8004e00 <__NVIC_SetPriority>
}
 8004f00:	bf00      	nop
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff ff54 	bl	8004dc4 <__NVIC_EnableIRQ>
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e00e      	b.n	8004f54 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	795b      	ldrb	r3, [r3, #5]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fd ffb8 	bl	8002ebc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e014      	b.n	8004f98 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	791b      	ldrb	r3, [r3, #4]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd ffe8 	bl	8002f54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d018      	beq.n	8004ffe <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f043 0201 	orr.w	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fe6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ff6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f827 	bl	800504c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01d      	beq.n	8005044 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f043 0202 	orr.w	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800502c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800503c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f867 	bl	8005112 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	@ 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_DAC_ConfigChannel+0x1c>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e042      	b.n	8005106 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	795b      	ldrb	r3, [r3, #5]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_DAC_ConfigChannel+0x2c>
 8005088:	2302      	movs	r3, #2
 800508a:	e03c      	b.n	8005106 <HAL_DAC_ConfigChannel+0xa6>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2202      	movs	r2, #2
 8005096:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	22c0      	movs	r2, #192	@ 0xc0
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	400a      	ands	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005104:	7ffb      	ldrb	r3, [r7, #31]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3724      	adds	r7, #36	@ 0x24
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005134:	f7ff f9cc 	bl	80044d0 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e099      	b.n	8005278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005164:	e00f      	b.n	8005186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005166:	f7ff f9b3 	bl	80044d0 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b05      	cmp	r3, #5
 8005172:	d908      	bls.n	8005186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2203      	movs	r2, #3
 800517e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e078      	b.n	8005278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e8      	bne.n	8005166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4b38      	ldr	r3, [pc, #224]	@ (8005280 <HAL_DMA_Init+0x158>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d107      	bne.n	80051f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e8:	4313      	orrs	r3, r2
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	2b04      	cmp	r3, #4
 8005218:	d117      	bne.n	800524a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 facd 	bl	80057cc <DMA_CheckFifoParam>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2240      	movs	r2, #64	@ 0x40
 800523c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005246:	2301      	movs	r3, #1
 8005248:	e016      	b.n	8005278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa84 	bl	8005760 <DMA_CalcBaseAndBitshift>
 8005258:	4603      	mov	r3, r0
 800525a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005260:	223f      	movs	r2, #63	@ 0x3f
 8005262:	409a      	lsls	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	f010803f 	.word	0xf010803f

08005284 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e050      	b.n	8005338 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d101      	bne.n	80052a6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80052a2:	2302      	movs	r3, #2
 80052a4:	e048      	b.n	8005338 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2221      	movs	r2, #33	@ 0x21
 80052e4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa3a 	bl	8005760 <DMA_CalcBaseAndBitshift>
 80052ec:	4603      	mov	r3, r0
 80052ee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005318:	223f      	movs	r2, #63	@ 0x3f
 800531a:	409a      	lsls	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005356:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_DMA_Start_IT+0x26>
 8005362:	2302      	movs	r3, #2
 8005364:	e040      	b.n	80053e8 <HAL_DMA_Start_IT+0xa8>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d12f      	bne.n	80053da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f9b8 	bl	8005704 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005398:	223f      	movs	r2, #63	@ 0x3f
 800539a:	409a      	lsls	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0216 	orr.w	r2, r2, #22
 80053ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e005      	b.n	80053e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
 80053e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053fc:	4b8e      	ldr	r3, [pc, #568]	@ (8005638 <HAL_DMA_IRQHandler+0x248>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a8e      	ldr	r2, [pc, #568]	@ (800563c <HAL_DMA_IRQHandler+0x24c>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541a:	2208      	movs	r2, #8
 800541c:	409a      	lsls	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01a      	beq.n	800545c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0204 	bic.w	r2, r2, #4
 8005442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005448:	2208      	movs	r2, #8
 800544a:	409a      	lsls	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005454:	f043 0201 	orr.w	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d012      	beq.n	8005492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547e:	2201      	movs	r2, #1
 8005480:	409a      	lsls	r2, r3
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548a:	f043 0202 	orr.w	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005496:	2204      	movs	r2, #4
 8005498:	409a      	lsls	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d012      	beq.n	80054c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	2204      	movs	r2, #4
 80054b6:	409a      	lsls	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	f043 0204 	orr.w	r2, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054cc:	2210      	movs	r2, #16
 80054ce:	409a      	lsls	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d043      	beq.n	8005560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d03c      	beq.n	8005560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ea:	2210      	movs	r2, #16
 80054ec:	409a      	lsls	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d018      	beq.n	8005532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d108      	bne.n	8005520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d024      	beq.n	8005560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
 800551e:	e01f      	b.n	8005560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
 8005530:	e016      	b.n	8005560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0208 	bic.w	r2, r2, #8
 800554e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005564:	2220      	movs	r2, #32
 8005566:	409a      	lsls	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 808f 	beq.w	8005690 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8087 	beq.w	8005690 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005586:	2220      	movs	r2, #32
 8005588:	409a      	lsls	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b05      	cmp	r3, #5
 8005598:	d136      	bne.n	8005608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0216 	bic.w	r2, r2, #22
 80055a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <HAL_DMA_IRQHandler+0x1da>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0208 	bic.w	r2, r2, #8
 80055d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055de:	223f      	movs	r2, #63	@ 0x3f
 80055e0:	409a      	lsls	r2, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d07e      	beq.n	80056fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
        }
        return;
 8005606:	e079      	b.n	80056fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01d      	beq.n	8005652 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10d      	bne.n	8005640 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005628:	2b00      	cmp	r3, #0
 800562a:	d031      	beq.n	8005690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
 8005634:	e02c      	b.n	8005690 <HAL_DMA_IRQHandler+0x2a0>
 8005636:	bf00      	nop
 8005638:	20000084 	.word	0x20000084
 800563c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d023      	beq.n	8005690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
 8005650:	e01e      	b.n	8005690 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10f      	bne.n	8005680 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0210 	bic.w	r2, r2, #16
 800566e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	d032      	beq.n	80056fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d022      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2205      	movs	r2, #5
 80056a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	3301      	adds	r3, #1
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d307      	bcc.n	80056d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f2      	bne.n	80056bc <HAL_DMA_IRQHandler+0x2cc>
 80056d6:	e000      	b.n	80056da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
 80056fa:	e000      	b.n	80056fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80056fc:	bf00      	nop
    }
  }
}
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005720:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b40      	cmp	r3, #64	@ 0x40
 8005730:	d108      	bne.n	8005744 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005742:	e007      	b.n	8005754 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	3b10      	subs	r3, #16
 8005770:	4a14      	ldr	r2, [pc, #80]	@ (80057c4 <DMA_CalcBaseAndBitshift+0x64>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800577a:	4a13      	ldr	r2, [pc, #76]	@ (80057c8 <DMA_CalcBaseAndBitshift+0x68>)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d909      	bls.n	80057a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005796:	f023 0303 	bic.w	r3, r3, #3
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	659a      	str	r2, [r3, #88]	@ 0x58
 80057a0:	e007      	b.n	80057b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	aaaaaaab 	.word	0xaaaaaaab
 80057c8:	0800df34 	.word	0x0800df34

080057cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11f      	bne.n	8005826 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d856      	bhi.n	800589a <DMA_CheckFifoParam+0xce>
 80057ec:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <DMA_CheckFifoParam+0x28>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005805 	.word	0x08005805
 80057f8:	08005817 	.word	0x08005817
 80057fc:	08005805 	.word	0x08005805
 8005800:	0800589b 	.word	0x0800589b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d046      	beq.n	800589e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005814:	e043      	b.n	800589e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800581e:	d140      	bne.n	80058a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005824:	e03d      	b.n	80058a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800582e:	d121      	bne.n	8005874 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d837      	bhi.n	80058a6 <DMA_CheckFifoParam+0xda>
 8005836:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <DMA_CheckFifoParam+0x70>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	0800584d 	.word	0x0800584d
 8005840:	08005853 	.word	0x08005853
 8005844:	0800584d 	.word	0x0800584d
 8005848:	08005865 	.word	0x08005865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	73fb      	strb	r3, [r7, #15]
      break;
 8005850:	e030      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d025      	beq.n	80058aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005862:	e022      	b.n	80058aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800586c:	d11f      	bne.n	80058ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005872:	e01c      	b.n	80058ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d903      	bls.n	8005882 <DMA_CheckFifoParam+0xb6>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d003      	beq.n	8005888 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005880:	e018      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
      break;
 8005886:	e015      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00e      	beq.n	80058b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e00b      	b.n	80058b2 <DMA_CheckFifoParam+0xe6>
      break;
 800589a:	bf00      	nop
 800589c:	e00a      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      break;
 800589e:	bf00      	nop
 80058a0:	e008      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      break;
 80058a2:	bf00      	nop
 80058a4:	e006      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <DMA_CheckFifoParam+0xe8>
      break;
 80058b2:	bf00      	nop
    }
  } 
  
  return status; 
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop

080058c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e03b      	b.n	800594e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fd fc1c 	bl	8003128 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005914:	f023 0107 	bic.w	r1, r3, #7
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800592e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68d1      	ldr	r1, [r2, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	430b      	orrs	r3, r1
 800593c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af02      	add	r7, sp, #8
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_DMA2D_Start+0x1c>
 800596e:	2302      	movs	r3, #2
 8005970:	e018      	b.n	80059a4 <HAL_DMA2D_Start+0x4e>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2202      	movs	r2, #2
 800597e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fa99 	bl	8005ec4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0201 	orr.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d056      	beq.n	8005a76 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c8:	f7fe fd82 	bl	80044d0 <HAL_GetTick>
 80059cc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059ce:	e04b      	b.n	8005a68 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d023      	beq.n	8005a2a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	f043 0202 	orr.w	r2, r3, #2
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2221      	movs	r2, #33	@ 0x21
 8005a14:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2204      	movs	r2, #4
 8005a1a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0a5      	b.n	8005b76 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d01a      	beq.n	8005a68 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a32:	f7fe fd4d 	bl	80044d0 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <HAL_DMA2D_PollForTransfer+0x9c>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10f      	bne.n	8005a68 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2203      	movs	r2, #3
 8005a58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e086      	b.n	8005b76 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0ac      	beq.n	80059d0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d061      	beq.n	8005b5c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a98:	f7fe fd1a 	bl	80044d0 <HAL_GetTick>
 8005a9c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a9e:	e056      	b.n	8005b4e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d02e      	beq.n	8005b10 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad6:	f043 0202 	orr.w	r2, r3, #2
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2229      	movs	r2, #41	@ 0x29
 8005afa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2204      	movs	r2, #4
 8005b00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e032      	b.n	8005b76 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d01a      	beq.n	8005b4e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b18:	f7fe fcda 	bl	80044d0 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d302      	bcc.n	8005b2e <HAL_DMA2D_PollForTransfer+0x182>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10f      	bne.n	8005b4e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e013      	b.n	8005b76 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0a1      	beq.n	8005aa0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2212      	movs	r2, #18
 8005b62:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d026      	beq.n	8005bee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d021      	beq.n	8005bee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bb8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d026      	beq.n	8005c46 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d021      	beq.n	8005c46 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c10:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2220      	movs	r2, #32
 8005c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d026      	beq.n	8005c9e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d021      	beq.n	8005c9e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	f043 0204 	orr.w	r2, r3, #4
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d013      	beq.n	8005cd0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f853 	bl	8005d76 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d024      	beq.n	8005d24 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01f      	beq.n	8005d24 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005cf2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01f      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01a      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f80e 	bl	8005d8a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_DMA2D_ConfigLayer+0x20>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e079      	b.n	8005eb4 <HAL_DMA2D_ConfigLayer+0x114>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	3318      	adds	r3, #24
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	4413      	add	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	041b      	lsls	r3, r3, #16
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005dea:	4b35      	ldr	r3, [pc, #212]	@ (8005ec0 <HAL_DMA2D_ConfigLayer+0x120>)
 8005dec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b0a      	cmp	r3, #10
 8005df4:	d003      	beq.n	8005dfe <HAL_DMA2D_ConfigLayer+0x5e>
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b09      	cmp	r3, #9
 8005dfc:	d107      	bne.n	8005e0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e005      	b.n	8005e1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	061b      	lsls	r3, r3, #24
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d120      	bne.n	8005e62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	ea02 0103 	and.w	r1, r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b0a      	cmp	r3, #10
 8005e48:	d003      	beq.n	8005e52 <HAL_DMA2D_ConfigLayer+0xb2>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b09      	cmp	r3, #9
 8005e50:	d127      	bne.n	8005ea2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005e5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e60:	e01f      	b.n	8005ea2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	ea02 0103 	and.w	r1, r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b0a      	cmp	r3, #10
 8005e8a:	d003      	beq.n	8005e94 <HAL_DMA2D_ConfigLayer+0xf4>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b09      	cmp	r3, #9
 8005e92:	d106      	bne.n	8005ea2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ea0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	ff03000f 	.word	0xff03000f

08005ec4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08b      	sub	sp, #44	@ 0x2c
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	041a      	lsls	r2, r3, #16
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005efc:	d174      	bne.n	8005fe8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f04:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f0c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f14:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d108      	bne.n	8005f36 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f34:	e053      	b.n	8005fde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d106      	bne.n	8005f4c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4a:	e048      	b.n	8005fde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d111      	bne.n	8005f78 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	0cdb      	lsrs	r3, r3, #19
 8005f58:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	0a9b      	lsrs	r3, r3, #10
 8005f5e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	08db      	lsrs	r3, r3, #3
 8005f64:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	02db      	lsls	r3, r3, #11
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f76:	e032      	b.n	8005fde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d117      	bne.n	8005fb0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	0fdb      	lsrs	r3, r3, #31
 8005f84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	0cdb      	lsrs	r3, r3, #19
 8005f8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	0adb      	lsrs	r3, r3, #11
 8005f90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	08db      	lsrs	r3, r3, #3
 8005f96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	029b      	lsls	r3, r3, #10
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	03db      	lsls	r3, r3, #15
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fae:	e016      	b.n	8005fde <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	0f1b      	lsrs	r3, r3, #28
 8005fb4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	0d1b      	lsrs	r3, r3, #20
 8005fba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	0b1b      	lsrs	r3, r3, #12
 8005fc0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	011a      	lsls	r2, r3, #4
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	031b      	lsls	r3, r3, #12
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005fe6:	e003      	b.n	8005ff0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	60da      	str	r2, [r3, #12]
}
 8005ff0:	bf00      	nop
 8005ff2:	372c      	adds	r7, #44	@ 0x2c
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b089      	sub	sp, #36	@ 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800600a:	2300      	movs	r3, #0
 800600c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	e177      	b.n	8006308 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006018:	2201      	movs	r2, #1
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4013      	ands	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	429a      	cmp	r2, r3
 8006032:	f040 8166 	bne.w	8006302 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b01      	cmp	r3, #1
 8006040:	d005      	beq.n	800604e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800604a:	2b02      	cmp	r3, #2
 800604c:	d130      	bne.n	80060b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	2203      	movs	r2, #3
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4013      	ands	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	4313      	orrs	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006084:	2201      	movs	r2, #1
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	43db      	mvns	r3, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4013      	ands	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f003 0201 	and.w	r2, r3, #1
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d017      	beq.n	80060ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	2203      	movs	r2, #3
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	43db      	mvns	r3, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d123      	bne.n	8006140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	08da      	lsrs	r2, r3, #3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3208      	adds	r2, #8
 8006100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	220f      	movs	r2, #15
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	43db      	mvns	r3, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	08da      	lsrs	r2, r3, #3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3208      	adds	r2, #8
 800613a:	69b9      	ldr	r1, [r7, #24]
 800613c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	2203      	movs	r2, #3
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f003 0203 	and.w	r2, r3, #3
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4313      	orrs	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80c0 	beq.w	8006302 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	4b66      	ldr	r3, [pc, #408]	@ (8006320 <HAL_GPIO_Init+0x324>)
 8006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618a:	4a65      	ldr	r2, [pc, #404]	@ (8006320 <HAL_GPIO_Init+0x324>)
 800618c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006190:	6453      	str	r3, [r2, #68]	@ 0x44
 8006192:	4b63      	ldr	r3, [pc, #396]	@ (8006320 <HAL_GPIO_Init+0x324>)
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800619e:	4a61      	ldr	r2, [pc, #388]	@ (8006324 <HAL_GPIO_Init+0x328>)
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	3302      	adds	r3, #2
 80061a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	220f      	movs	r2, #15
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a58      	ldr	r2, [pc, #352]	@ (8006328 <HAL_GPIO_Init+0x32c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d037      	beq.n	800623a <HAL_GPIO_Init+0x23e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a57      	ldr	r2, [pc, #348]	@ (800632c <HAL_GPIO_Init+0x330>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d031      	beq.n	8006236 <HAL_GPIO_Init+0x23a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a56      	ldr	r2, [pc, #344]	@ (8006330 <HAL_GPIO_Init+0x334>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02b      	beq.n	8006232 <HAL_GPIO_Init+0x236>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a55      	ldr	r2, [pc, #340]	@ (8006334 <HAL_GPIO_Init+0x338>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d025      	beq.n	800622e <HAL_GPIO_Init+0x232>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a54      	ldr	r2, [pc, #336]	@ (8006338 <HAL_GPIO_Init+0x33c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <HAL_GPIO_Init+0x22e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a53      	ldr	r2, [pc, #332]	@ (800633c <HAL_GPIO_Init+0x340>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d019      	beq.n	8006226 <HAL_GPIO_Init+0x22a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a52      	ldr	r2, [pc, #328]	@ (8006340 <HAL_GPIO_Init+0x344>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_GPIO_Init+0x226>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a51      	ldr	r2, [pc, #324]	@ (8006344 <HAL_GPIO_Init+0x348>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00d      	beq.n	800621e <HAL_GPIO_Init+0x222>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a50      	ldr	r2, [pc, #320]	@ (8006348 <HAL_GPIO_Init+0x34c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <HAL_GPIO_Init+0x21e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a4f      	ldr	r2, [pc, #316]	@ (800634c <HAL_GPIO_Init+0x350>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d101      	bne.n	8006216 <HAL_GPIO_Init+0x21a>
 8006212:	2309      	movs	r3, #9
 8006214:	e012      	b.n	800623c <HAL_GPIO_Init+0x240>
 8006216:	230a      	movs	r3, #10
 8006218:	e010      	b.n	800623c <HAL_GPIO_Init+0x240>
 800621a:	2308      	movs	r3, #8
 800621c:	e00e      	b.n	800623c <HAL_GPIO_Init+0x240>
 800621e:	2307      	movs	r3, #7
 8006220:	e00c      	b.n	800623c <HAL_GPIO_Init+0x240>
 8006222:	2306      	movs	r3, #6
 8006224:	e00a      	b.n	800623c <HAL_GPIO_Init+0x240>
 8006226:	2305      	movs	r3, #5
 8006228:	e008      	b.n	800623c <HAL_GPIO_Init+0x240>
 800622a:	2304      	movs	r3, #4
 800622c:	e006      	b.n	800623c <HAL_GPIO_Init+0x240>
 800622e:	2303      	movs	r3, #3
 8006230:	e004      	b.n	800623c <HAL_GPIO_Init+0x240>
 8006232:	2302      	movs	r3, #2
 8006234:	e002      	b.n	800623c <HAL_GPIO_Init+0x240>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <HAL_GPIO_Init+0x240>
 800623a:	2300      	movs	r3, #0
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	f002 0203 	and.w	r2, r2, #3
 8006242:	0092      	lsls	r2, r2, #2
 8006244:	4093      	lsls	r3, r2
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4313      	orrs	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800624c:	4935      	ldr	r1, [pc, #212]	@ (8006324 <HAL_GPIO_Init+0x328>)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	089b      	lsrs	r3, r3, #2
 8006252:	3302      	adds	r3, #2
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800625a:	4b3d      	ldr	r3, [pc, #244]	@ (8006350 <HAL_GPIO_Init+0x354>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	43db      	mvns	r3, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	4013      	ands	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800627e:	4a34      	ldr	r2, [pc, #208]	@ (8006350 <HAL_GPIO_Init+0x354>)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006284:	4b32      	ldr	r3, [pc, #200]	@ (8006350 <HAL_GPIO_Init+0x354>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	43db      	mvns	r3, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062a8:	4a29      	ldr	r2, [pc, #164]	@ (8006350 <HAL_GPIO_Init+0x354>)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062ae:	4b28      	ldr	r3, [pc, #160]	@ (8006350 <HAL_GPIO_Init+0x354>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	43db      	mvns	r3, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006350 <HAL_GPIO_Init+0x354>)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <HAL_GPIO_Init+0x354>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	43db      	mvns	r3, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	4013      	ands	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062fc:	4a14      	ldr	r2, [pc, #80]	@ (8006350 <HAL_GPIO_Init+0x354>)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	3301      	adds	r3, #1
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b0f      	cmp	r3, #15
 800630c:	f67f ae84 	bls.w	8006018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	3724      	adds	r7, #36	@ 0x24
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40023800 	.word	0x40023800
 8006324:	40013800 	.word	0x40013800
 8006328:	40020000 	.word	0x40020000
 800632c:	40020400 	.word	0x40020400
 8006330:	40020800 	.word	0x40020800
 8006334:	40020c00 	.word	0x40020c00
 8006338:	40021000 	.word	0x40021000
 800633c:	40021400 	.word	0x40021400
 8006340:	40021800 	.word	0x40021800
 8006344:	40021c00 	.word	0x40021c00
 8006348:	40022000 	.word	0x40022000
 800634c:	40022400 	.word	0x40022400
 8006350:	40013c00 	.word	0x40013c00

08006354 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e0d9      	b.n	8006524 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006370:	2201      	movs	r2, #1
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4013      	ands	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	f040 80c9 	bne.w	800651e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800638c:	4a6b      	ldr	r2, [pc, #428]	@ (800653c <HAL_GPIO_DeInit+0x1e8>)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	089b      	lsrs	r3, r3, #2
 8006392:	3302      	adds	r3, #2
 8006394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006398:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	220f      	movs	r2, #15
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a63      	ldr	r2, [pc, #396]	@ (8006540 <HAL_GPIO_DeInit+0x1ec>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d037      	beq.n	8006426 <HAL_GPIO_DeInit+0xd2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a62      	ldr	r2, [pc, #392]	@ (8006544 <HAL_GPIO_DeInit+0x1f0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d031      	beq.n	8006422 <HAL_GPIO_DeInit+0xce>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a61      	ldr	r2, [pc, #388]	@ (8006548 <HAL_GPIO_DeInit+0x1f4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d02b      	beq.n	800641e <HAL_GPIO_DeInit+0xca>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a60      	ldr	r2, [pc, #384]	@ (800654c <HAL_GPIO_DeInit+0x1f8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d025      	beq.n	800641a <HAL_GPIO_DeInit+0xc6>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a5f      	ldr	r2, [pc, #380]	@ (8006550 <HAL_GPIO_DeInit+0x1fc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01f      	beq.n	8006416 <HAL_GPIO_DeInit+0xc2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006554 <HAL_GPIO_DeInit+0x200>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d019      	beq.n	8006412 <HAL_GPIO_DeInit+0xbe>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006558 <HAL_GPIO_DeInit+0x204>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_GPIO_DeInit+0xba>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a5c      	ldr	r2, [pc, #368]	@ (800655c <HAL_GPIO_DeInit+0x208>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00d      	beq.n	800640a <HAL_GPIO_DeInit+0xb6>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a5b      	ldr	r2, [pc, #364]	@ (8006560 <HAL_GPIO_DeInit+0x20c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <HAL_GPIO_DeInit+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006564 <HAL_GPIO_DeInit+0x210>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_GPIO_DeInit+0xae>
 80063fe:	2309      	movs	r3, #9
 8006400:	e012      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 8006402:	230a      	movs	r3, #10
 8006404:	e010      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 8006406:	2308      	movs	r3, #8
 8006408:	e00e      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 800640a:	2307      	movs	r3, #7
 800640c:	e00c      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 800640e:	2306      	movs	r3, #6
 8006410:	e00a      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 8006412:	2305      	movs	r3, #5
 8006414:	e008      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 8006416:	2304      	movs	r3, #4
 8006418:	e006      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 800641a:	2303      	movs	r3, #3
 800641c:	e004      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 800641e:	2302      	movs	r3, #2
 8006420:	e002      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <HAL_GPIO_DeInit+0xd4>
 8006426:	2300      	movs	r3, #0
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	f002 0203 	and.w	r2, r2, #3
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	4093      	lsls	r3, r2
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	429a      	cmp	r2, r3
 8006436:	d132      	bne.n	800649e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006438:	4b4b      	ldr	r3, [pc, #300]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	43db      	mvns	r3, r3
 8006440:	4949      	ldr	r1, [pc, #292]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 8006442:	4013      	ands	r3, r2
 8006444:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006446:	4b48      	ldr	r3, [pc, #288]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	43db      	mvns	r3, r3
 800644e:	4946      	ldr	r1, [pc, #280]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 8006450:	4013      	ands	r3, r2
 8006452:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006454:	4b44      	ldr	r3, [pc, #272]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	43db      	mvns	r3, r3
 800645c:	4942      	ldr	r1, [pc, #264]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 800645e:	4013      	ands	r3, r2
 8006460:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006462:	4b41      	ldr	r3, [pc, #260]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	43db      	mvns	r3, r3
 800646a:	493f      	ldr	r1, [pc, #252]	@ (8006568 <HAL_GPIO_DeInit+0x214>)
 800646c:	4013      	ands	r3, r2
 800646e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	220f      	movs	r2, #15
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006480:	4a2e      	ldr	r2, [pc, #184]	@ (800653c <HAL_GPIO_DeInit+0x1e8>)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	089b      	lsrs	r3, r3, #2
 8006486:	3302      	adds	r3, #2
 8006488:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	43da      	mvns	r2, r3
 8006490:	482a      	ldr	r0, [pc, #168]	@ (800653c <HAL_GPIO_DeInit+0x1e8>)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	400a      	ands	r2, r1
 8006498:	3302      	adds	r3, #2
 800649a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	2103      	movs	r1, #3
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	08da      	lsrs	r2, r3, #3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3208      	adds	r2, #8
 80064bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	220f      	movs	r2, #15
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43db      	mvns	r3, r3
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	08d2      	lsrs	r2, r2, #3
 80064d4:	4019      	ands	r1, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3208      	adds	r2, #8
 80064da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	2103      	movs	r1, #3
 80064e8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	2101      	movs	r1, #1
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	43db      	mvns	r3, r3
 8006502:	401a      	ands	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	2103      	movs	r1, #3
 8006512:	fa01 f303 	lsl.w	r3, r1, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	401a      	ands	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	3301      	adds	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	f67f af22 	bls.w	8006370 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40013800 	.word	0x40013800
 8006540:	40020000 	.word	0x40020000
 8006544:	40020400 	.word	0x40020400
 8006548:	40020800 	.word	0x40020800
 800654c:	40020c00 	.word	0x40020c00
 8006550:	40021000 	.word	0x40021000
 8006554:	40021400 	.word	0x40021400
 8006558:	40021800 	.word	0x40021800
 800655c:	40021c00 	.word	0x40021c00
 8006560:	40022000 	.word	0x40022000
 8006564:	40022400 	.word	0x40022400
 8006568:	40013c00 	.word	0x40013c00

0800656c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	807b      	strh	r3, [r7, #2]
 8006578:	4613      	mov	r3, r2
 800657a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800657c:	787b      	ldrb	r3, [r7, #1]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006588:	e003      	b.n	8006592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800658a:	887b      	ldrh	r3, [r7, #2]
 800658c:	041a      	lsls	r2, r3, #16
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	619a      	str	r2, [r3, #24]
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065b0:	887a      	ldrh	r2, [r7, #2]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4013      	ands	r3, r2
 80065b6:	041a      	lsls	r2, r3, #16
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	43d9      	mvns	r1, r3
 80065bc:	887b      	ldrh	r3, [r7, #2]
 80065be:	400b      	ands	r3, r1
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	619a      	str	r2, [r3, #24]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e12b      	b.n	800683e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fd f834 	bl	8003668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2224      	movs	r2, #36	@ 0x24
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0201 	bic.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006638:	f002 f8fc 	bl	8008834 <HAL_RCC_GetPCLK1Freq>
 800663c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4a81      	ldr	r2, [pc, #516]	@ (8006848 <HAL_I2C_Init+0x274>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d807      	bhi.n	8006658 <HAL_I2C_Init+0x84>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a80      	ldr	r2, [pc, #512]	@ (800684c <HAL_I2C_Init+0x278>)
 800664c:	4293      	cmp	r3, r2
 800664e:	bf94      	ite	ls
 8006650:	2301      	movls	r3, #1
 8006652:	2300      	movhi	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e006      	b.n	8006666 <HAL_I2C_Init+0x92>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a7d      	ldr	r2, [pc, #500]	@ (8006850 <HAL_I2C_Init+0x27c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	bf94      	ite	ls
 8006660:	2301      	movls	r3, #1
 8006662:	2300      	movhi	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0e7      	b.n	800683e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a78      	ldr	r2, [pc, #480]	@ (8006854 <HAL_I2C_Init+0x280>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	0c9b      	lsrs	r3, r3, #18
 8006678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4a6a      	ldr	r2, [pc, #424]	@ (8006848 <HAL_I2C_Init+0x274>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d802      	bhi.n	80066a8 <HAL_I2C_Init+0xd4>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	3301      	adds	r3, #1
 80066a6:	e009      	b.n	80066bc <HAL_I2C_Init+0xe8>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	4a69      	ldr	r2, [pc, #420]	@ (8006858 <HAL_I2C_Init+0x284>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	099b      	lsrs	r3, r3, #6
 80066ba:	3301      	adds	r3, #1
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80066ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	495c      	ldr	r1, [pc, #368]	@ (8006848 <HAL_I2C_Init+0x274>)
 80066d8:	428b      	cmp	r3, r1
 80066da:	d819      	bhi.n	8006710 <HAL_I2C_Init+0x13c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1e59      	subs	r1, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80066f0:	400b      	ands	r3, r1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_I2C_Init+0x138>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1e59      	subs	r1, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	fbb1 f3f3 	udiv	r3, r1, r3
 8006704:	3301      	adds	r3, #1
 8006706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670a:	e051      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 800670c:	2304      	movs	r3, #4
 800670e:	e04f      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d111      	bne.n	800673c <HAL_I2C_Init+0x168>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1e58      	subs	r0, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6859      	ldr	r1, [r3, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	440b      	add	r3, r1
 8006726:	fbb0 f3f3 	udiv	r3, r0, r3
 800672a:	3301      	adds	r3, #1
 800672c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e012      	b.n	8006762 <HAL_I2C_Init+0x18e>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1e58      	subs	r0, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6859      	ldr	r1, [r3, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	0099      	lsls	r1, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006752:	3301      	adds	r3, #1
 8006754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_Init+0x196>
 8006766:	2301      	movs	r3, #1
 8006768:	e022      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10e      	bne.n	8006790 <HAL_I2C_Init+0x1bc>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1e58      	subs	r0, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	440b      	add	r3, r1
 8006780:	fbb0 f3f3 	udiv	r3, r0, r3
 8006784:	3301      	adds	r3, #1
 8006786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800678e:	e00f      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1e58      	subs	r0, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	0099      	lsls	r1, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a6:	3301      	adds	r3, #1
 80067a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	6809      	ldr	r1, [r1, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80067de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6911      	ldr	r1, [r2, #16]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68d2      	ldr	r2, [r2, #12]
 80067ea:	4311      	orrs	r1, r2
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	000186a0 	.word	0x000186a0
 800684c:	001e847f 	.word	0x001e847f
 8006850:	003d08ff 	.word	0x003d08ff
 8006854:	431bde83 	.word	0x431bde83
 8006858:	10624dd3 	.word	0x10624dd3

0800685c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e021      	b.n	80068b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2224      	movs	r2, #36	@ 0x24
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fc ff58 	bl	800373c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	4608      	mov	r0, r1
 80068c6:	4611      	mov	r1, r2
 80068c8:	461a      	mov	r2, r3
 80068ca:	4603      	mov	r3, r0
 80068cc:	817b      	strh	r3, [r7, #10]
 80068ce:	460b      	mov	r3, r1
 80068d0:	813b      	strh	r3, [r7, #8]
 80068d2:	4613      	mov	r3, r2
 80068d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068d6:	f7fd fdfb 	bl	80044d0 <HAL_GetTick>
 80068da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	f040 80d9 	bne.w	8006a9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	2319      	movs	r3, #25
 80068f0:	2201      	movs	r2, #1
 80068f2:	496d      	ldr	r1, [pc, #436]	@ (8006aa8 <HAL_I2C_Mem_Write+0x1ec>)
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fc99 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006900:	2302      	movs	r3, #2
 8006902:	e0cc      	b.n	8006a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_I2C_Mem_Write+0x56>
 800690e:	2302      	movs	r3, #2
 8006910:	e0c5      	b.n	8006a9e <HAL_I2C_Mem_Write+0x1e2>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d007      	beq.n	8006938 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2221      	movs	r2, #33	@ 0x21
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2240      	movs	r2, #64	@ 0x40
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a3a      	ldr	r2, [r7, #32]
 8006962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4a4d      	ldr	r2, [pc, #308]	@ (8006aac <HAL_I2C_Mem_Write+0x1f0>)
 8006978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800697a:	88f8      	ldrh	r0, [r7, #6]
 800697c:	893a      	ldrh	r2, [r7, #8]
 800697e:	8979      	ldrh	r1, [r7, #10]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	4603      	mov	r3, r0
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 fad0 	bl	8006f30 <I2C_RequestMemoryWrite>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d052      	beq.n	8006a3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e081      	b.n	8006a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fd5e 	bl	8007460 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d107      	bne.n	80069c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e06b      	b.n	8006a9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d11b      	bne.n	8006a3c <HAL_I2C_Mem_Write+0x180>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d017      	beq.n	8006a3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1aa      	bne.n	800699a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fd51 	bl	80074f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d107      	bne.n	8006a6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e016      	b.n	8006a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	00100002 	.word	0x00100002
 8006aac:	ffff0000 	.word	0xffff0000

08006ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08c      	sub	sp, #48	@ 0x30
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	817b      	strh	r3, [r7, #10]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	813b      	strh	r3, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006aca:	f7fd fd01 	bl	80044d0 <HAL_GetTick>
 8006ace:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	f040 8214 	bne.w	8006f06 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	2319      	movs	r3, #25
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	497b      	ldr	r1, [pc, #492]	@ (8006cd4 <HAL_I2C_Mem_Read+0x224>)
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fb9f 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
 8006af6:	e207      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_I2C_Mem_Read+0x56>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e200      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d007      	beq.n	8006b2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2222      	movs	r2, #34	@ 0x22
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2240      	movs	r2, #64	@ 0x40
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8006cd8 <HAL_I2C_Mem_Read+0x228>)
 8006b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b6e:	88f8      	ldrh	r0, [r7, #6]
 8006b70:	893a      	ldrh	r2, [r7, #8]
 8006b72:	8979      	ldrh	r1, [r7, #10]
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 fa6c 	bl	800705c <I2C_RequestMemoryRead>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e1bc      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d113      	bne.n	8006bbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b96:	2300      	movs	r3, #0
 8006b98:	623b      	str	r3, [r7, #32]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	623b      	str	r3, [r7, #32]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	623b      	str	r3, [r7, #32]
 8006baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e190      	b.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d11b      	bne.n	8006bfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	61fb      	str	r3, [r7, #28]
 8006bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	e170      	b.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d11b      	bne.n	8006c3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	e150      	b.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c54:	e144      	b.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	f200 80f1 	bhi.w	8006e42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d123      	bne.n	8006cb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fc87 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e145      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691a      	ldr	r2, [r3, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006cae:	e117      	b.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d14e      	bne.n	8006d56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4906      	ldr	r1, [pc, #24]	@ (8006cdc <HAL_I2C_Mem_Read+0x22c>)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fab2 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e11a      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
 8006cd2:	bf00      	nop
 8006cd4:	00100002 	.word	0x00100002
 8006cd8:	ffff0000 	.word	0xffff0000
 8006cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d54:	e0c4      	b.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	496c      	ldr	r1, [pc, #432]	@ (8006f10 <HAL_I2C_Mem_Read+0x460>)
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fa63 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0cb      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	2200      	movs	r2, #0
 8006dba:	4955      	ldr	r1, [pc, #340]	@ (8006f10 <HAL_I2C_Mem_Read+0x460>)
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fa35 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e09d      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e40:	e04e      	b.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fb9a 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e058      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d124      	bne.n	8006ee0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d107      	bne.n	8006eae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f47f aeb6 	bne.w	8006c56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e000      	b.n	8006f08 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006f06:	2302      	movs	r3, #2
  }
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3728      	adds	r7, #40	@ 0x28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	00010004 	.word	0x00010004

08006f14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f22:	b2db      	uxtb	r3, r3
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	817b      	strh	r3, [r7, #10]
 8006f42:	460b      	mov	r3, r1
 8006f44:	813b      	strh	r3, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f960 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f80:	d103      	bne.n	8006f8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e05f      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f8e:	897b      	ldrh	r3, [r7, #10]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	6a3a      	ldr	r2, [r7, #32]
 8006fa2:	492d      	ldr	r1, [pc, #180]	@ (8007058 <I2C_RequestMemoryWrite+0x128>)
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f9bb 	bl	8007320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e04c      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fcc:	6a39      	ldr	r1, [r7, #32]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fa46 	bl	8007460 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00d      	beq.n	8006ff6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d107      	bne.n	8006ff2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e02b      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d105      	bne.n	8007008 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ffc:	893b      	ldrh	r3, [r7, #8]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	e021      	b.n	800704c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007008:	893b      	ldrh	r3, [r7, #8]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b29b      	uxth	r3, r3
 800700e:	b2da      	uxtb	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007018:	6a39      	ldr	r1, [r7, #32]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fa20 	bl	8007460 <I2C_WaitOnTXEFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00d      	beq.n	8007042 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	2b04      	cmp	r3, #4
 800702c:	d107      	bne.n	800703e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800703c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e005      	b.n	800704e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007042:	893b      	ldrh	r3, [r7, #8]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	00010002 	.word	0x00010002

0800705c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	4608      	mov	r0, r1
 8007066:	4611      	mov	r1, r2
 8007068:	461a      	mov	r2, r3
 800706a:	4603      	mov	r3, r0
 800706c:	817b      	strh	r3, [r7, #10]
 800706e:	460b      	mov	r3, r1
 8007070:	813b      	strh	r3, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007084:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2200      	movs	r2, #0
 800709e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f8c2 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070bc:	d103      	bne.n	80070c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e0aa      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	4952      	ldr	r1, [pc, #328]	@ (8007228 <I2C_RequestMemoryRead+0x1cc>)
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f91d 	bl	8007320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e097      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f9a8 	bl	8007460 <I2C_WaitOnTXEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	2b04      	cmp	r3, #4
 800711c:	d107      	bne.n	800712e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800712c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e076      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007138:	893b      	ldrh	r3, [r7, #8]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	611a      	str	r2, [r3, #16]
 8007142:	e021      	b.n	8007188 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007144:	893b      	ldrh	r3, [r7, #8]
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b29b      	uxth	r3, r3
 800714a:	b2da      	uxtb	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007154:	6a39      	ldr	r1, [r7, #32]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f982 	bl	8007460 <I2C_WaitOnTXEFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	2b04      	cmp	r3, #4
 8007168:	d107      	bne.n	800717a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e050      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718a:	6a39      	ldr	r1, [r7, #32]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f967 	bl	8007460 <I2C_WaitOnTXEFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00d      	beq.n	80071b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	2b04      	cmp	r3, #4
 800719e:	d107      	bne.n	80071b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e035      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f82b 	bl	800722c <I2C_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ea:	d103      	bne.n	80071f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e013      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071f8:	897b      	ldrh	r3, [r7, #10]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	b2da      	uxtb	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	4906      	ldr	r1, [pc, #24]	@ (8007228 <I2C_RequestMemoryRead+0x1cc>)
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f886 	bl	8007320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	00010002 	.word	0x00010002

0800722c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800723c:	e048      	b.n	80072d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d044      	beq.n	80072d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007246:	f7fd f943 	bl	80044d0 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d302      	bcc.n	800725c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d139      	bne.n	80072d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b01      	cmp	r3, #1
 8007264:	d10d      	bne.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	43da      	mvns	r2, r3
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4013      	ands	r3, r2
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	e00c      	b.n	800729c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	43da      	mvns	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf0c      	ite	eq
 8007294:	2301      	moveq	r3, #1
 8007296:	2300      	movne	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d116      	bne.n	80072d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072bc:	f043 0220 	orr.w	r2, r3, #32
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e023      	b.n	8007318 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d10d      	bne.n	80072f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	43da      	mvns	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4013      	ands	r3, r2
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bf0c      	ite	eq
 80072ec:	2301      	moveq	r3, #1
 80072ee:	2300      	movne	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	e00c      	b.n	8007310 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	43da      	mvns	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4013      	ands	r3, r2
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	429a      	cmp	r2, r3
 8007314:	d093      	beq.n	800723e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800732e:	e071      	b.n	8007414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733e:	d123      	bne.n	8007388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800734e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007374:	f043 0204 	orr.w	r2, r3, #4
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e067      	b.n	8007458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d041      	beq.n	8007414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007390:	f7fd f89e 	bl	80044d0 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d302      	bcc.n	80073a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d136      	bne.n	8007414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d10c      	bne.n	80073ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	43da      	mvns	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bf14      	ite	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	2300      	moveq	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	e00b      	b.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	43da      	mvns	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4013      	ands	r3, r2
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d016      	beq.n	8007414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007400:	f043 0220 	orr.w	r2, r3, #32
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e021      	b.n	8007458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b01      	cmp	r3, #1
 800741c:	d10c      	bne.n	8007438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	43da      	mvns	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e00b      	b.n	8007450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	43da      	mvns	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4013      	ands	r3, r2
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	bf14      	ite	ne
 800744a:	2301      	movne	r3, #1
 800744c:	2300      	moveq	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	f47f af6d 	bne.w	8007330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800746c:	e034      	b.n	80074d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f8e3 	bl	800763a <I2C_IsAcknowledgeFailed>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e034      	b.n	80074e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d028      	beq.n	80074d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007486:	f7fd f823 	bl	80044d0 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d11d      	bne.n	80074d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a6:	2b80      	cmp	r3, #128	@ 0x80
 80074a8:	d016      	beq.n	80074d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e007      	b.n	80074e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e2:	2b80      	cmp	r3, #128	@ 0x80
 80074e4:	d1c3      	bne.n	800746e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074fc:	e034      	b.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 f89b 	bl	800763a <I2C_IsAcknowledgeFailed>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e034      	b.n	8007578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007514:	d028      	beq.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007516:	f7fc ffdb 	bl	80044d0 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	429a      	cmp	r2, r3
 8007524:	d302      	bcc.n	800752c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11d      	bne.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b04      	cmp	r3, #4
 8007538:	d016      	beq.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e007      	b.n	8007578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b04      	cmp	r3, #4
 8007574:	d1c3      	bne.n	80074fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800758c:	e049      	b.n	8007622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b10      	cmp	r3, #16
 800759a:	d119      	bne.n	80075d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0210 	mvn.w	r2, #16
 80075a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e030      	b.n	8007632 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d0:	f7fc ff7e 	bl	80044d0 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d302      	bcc.n	80075e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d11d      	bne.n	8007622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f0:	2b40      	cmp	r3, #64	@ 0x40
 80075f2:	d016      	beq.n	8007622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	f043 0220 	orr.w	r2, r3, #32
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e007      	b.n	8007632 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762c:	2b40      	cmp	r3, #64	@ 0x40
 800762e:	d1ae      	bne.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800764c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007650:	d11b      	bne.n	800768a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800765a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007676:	f043 0204 	orr.w	r2, r3, #4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d129      	bne.n	8007702 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2224      	movs	r2, #36	@ 0x24
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0201 	bic.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0210 	bic.w	r2, r2, #16
 80076d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 0201 	orr.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	e000      	b.n	8007704 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007702:	2302      	movs	r3, #2
  }
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b20      	cmp	r3, #32
 8007728:	d12a      	bne.n	8007780 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2224      	movs	r2, #36	@ 0x24
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800774a:	89fb      	ldrh	r3, [r7, #14]
 800774c:	f023 030f 	bic.w	r3, r3, #15
 8007750:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	b29a      	uxth	r2, r3
 8007756:	89fb      	ldrh	r3, [r7, #14]
 8007758:	4313      	orrs	r3, r2
 800775a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	89fa      	ldrh	r2, [r7, #14]
 8007762:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	e000      	b.n	8007782 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007780:	2302      	movs	r3, #2
  }
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e0bf      	b.n	8007922 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fc f866 	bl	8003888 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80077d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6999      	ldr	r1, [r3, #24]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80077e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6899      	ldr	r1, [r3, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b4a      	ldr	r3, [pc, #296]	@ (800792c <HAL_LTDC_Init+0x19c>)
 8007804:	400b      	ands	r3, r1
 8007806:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6899      	ldr	r1, [r3, #8]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68d9      	ldr	r1, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	4b3e      	ldr	r3, [pc, #248]	@ (800792c <HAL_LTDC_Init+0x19c>)
 8007832:	400b      	ands	r3, r1
 8007834:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	041b      	lsls	r3, r3, #16
 800783c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68d9      	ldr	r1, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1a      	ldr	r2, [r3, #32]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6919      	ldr	r1, [r3, #16]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b33      	ldr	r3, [pc, #204]	@ (800792c <HAL_LTDC_Init+0x19c>)
 8007860:	400b      	ands	r3, r1
 8007862:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6919      	ldr	r1, [r3, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6959      	ldr	r1, [r3, #20]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	4b27      	ldr	r3, [pc, #156]	@ (800792c <HAL_LTDC_Init+0x19c>)
 800788e:	400b      	ands	r3, r1
 8007890:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6959      	ldr	r1, [r3, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80078b6:	021b      	lsls	r3, r3, #8
 80078b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80078d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0206 	orr.w	r2, r2, #6
 80078fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	f000f800 	.word	0xf000f800

08007930 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007946:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d023      	beq.n	800799a <HAL_LTDC_IRQHandler+0x6a>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01e      	beq.n	800799a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0204 	bic.w	r2, r2, #4
 800796a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2204      	movs	r2, #4
 8007972:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800797a:	f043 0201 	orr.w	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2204      	movs	r2, #4
 8007988:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f86f 	bl	8007a78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d023      	beq.n	80079ec <HAL_LTDC_IRQHandler+0xbc>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01e      	beq.n	80079ec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0202 	bic.w	r2, r2, #2
 80079bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2202      	movs	r2, #2
 80079c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80079cc:	f043 0202 	orr.w	r2, r3, #2
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2204      	movs	r2, #4
 80079da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f846 	bl	8007a78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01b      	beq.n	8007a2e <HAL_LTDC_IRQHandler+0xfe>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d016      	beq.n	8007a2e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2201      	movs	r2, #1
 8007a16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f82f 	bl	8007a8c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01b      	beq.n	8007a70 <HAL_LTDC_IRQHandler+0x140>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d016      	beq.n	8007a70 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0208 	bic.w	r2, r2, #8
 8007a50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2208      	movs	r2, #8
 8007a58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f818 	bl	8007aa0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007ab4:	b5b0      	push	{r4, r5, r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_LTDC_ConfigLayer+0x1a>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e02c      	b.n	8007b28 <HAL_LTDC_ConfigLayer+0x74>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2134      	movs	r1, #52	@ 0x34
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4614      	mov	r4, r2
 8007af2:	461d      	mov	r5, r3
 8007af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f83b 	bl	8007b84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2201      	movs	r2, #1
 8007b14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bdb0      	pop	{r4, r5, r7, pc}

08007b30 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_LTDC_EnableDither+0x16>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e016      	b.n	8007b74 <HAL_LTDC_EnableDither+0x44>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007b56:	4b0a      	ldr	r3, [pc, #40]	@ (8007b80 <HAL_LTDC_EnableDither+0x50>)
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	4a09      	ldr	r2, [pc, #36]	@ (8007b80 <HAL_LTDC_EnableDither+0x50>)
 8007b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b60:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40016800 	.word	0x40016800

08007b84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b089      	sub	sp, #36	@ 0x24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	0c1b      	lsrs	r3, r3, #16
 8007b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba0:	4413      	add	r3, r2
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	01db      	lsls	r3, r3, #7
 8007bb0:	4413      	add	r3, r2
 8007bb2:	3384      	adds	r3, #132	@ 0x84
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	01d2      	lsls	r2, r2, #7
 8007bc0:	440a      	add	r2, r1
 8007bc2:	3284      	adds	r2, #132	@ 0x84
 8007bc4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007bc8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	0c1b      	lsrs	r3, r3, #16
 8007bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007bda:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007bdc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4619      	mov	r1, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	01db      	lsls	r3, r3, #7
 8007be8:	440b      	add	r3, r1
 8007bea:	3384      	adds	r3, #132	@ 0x84
 8007bec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007bf2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c02:	4413      	add	r3, r2
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	01db      	lsls	r3, r3, #7
 8007c12:	4413      	add	r3, r2
 8007c14:	3384      	adds	r3, #132	@ 0x84
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	01d2      	lsls	r2, r2, #7
 8007c22:	440a      	add	r2, r1
 8007c24:	3284      	adds	r2, #132	@ 0x84
 8007c26:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007c2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c3a:	4413      	add	r3, r2
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	01db      	lsls	r3, r3, #7
 8007c48:	440b      	add	r3, r1
 8007c4a:	3384      	adds	r3, #132	@ 0x84
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	01db      	lsls	r3, r3, #7
 8007c5e:	4413      	add	r3, r2
 8007c60:	3384      	adds	r3, #132	@ 0x84
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	6812      	ldr	r2, [r2, #0]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	01d2      	lsls	r2, r2, #7
 8007c6e:	440a      	add	r2, r1
 8007c70:	3284      	adds	r2, #132	@ 0x84
 8007c72:	f023 0307 	bic.w	r3, r3, #7
 8007c76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	01db      	lsls	r3, r3, #7
 8007c82:	4413      	add	r3, r2
 8007c84:	3384      	adds	r3, #132	@ 0x84
 8007c86:	461a      	mov	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007c9e:	041b      	lsls	r3, r3, #16
 8007ca0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	061b      	lsls	r3, r3, #24
 8007ca8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	01db      	lsls	r3, r3, #7
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3384      	adds	r3, #132	@ 0x84
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	01db      	lsls	r3, r3, #7
 8007cc4:	4413      	add	r3, r2
 8007cc6:	3384      	adds	r3, #132	@ 0x84
 8007cc8:	461a      	mov	r2, r3
 8007cca:	2300      	movs	r3, #0
 8007ccc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	01db      	lsls	r3, r3, #7
 8007ce8:	440b      	add	r3, r1
 8007cea:	3384      	adds	r3, #132	@ 0x84
 8007cec:	4619      	mov	r1, r3
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	01db      	lsls	r3, r3, #7
 8007cfe:	4413      	add	r3, r2
 8007d00:	3384      	adds	r3, #132	@ 0x84
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	6812      	ldr	r2, [r2, #0]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	01d2      	lsls	r2, r2, #7
 8007d0e:	440a      	add	r2, r1
 8007d10:	3284      	adds	r2, #132	@ 0x84
 8007d12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	01db      	lsls	r3, r3, #7
 8007d22:	4413      	add	r3, r2
 8007d24:	3384      	adds	r3, #132	@ 0x84
 8007d26:	461a      	mov	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	01db      	lsls	r3, r3, #7
 8007d38:	4413      	add	r3, r2
 8007d3a:	3384      	adds	r3, #132	@ 0x84
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	6812      	ldr	r2, [r2, #0]
 8007d42:	4611      	mov	r1, r2
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	01d2      	lsls	r2, r2, #7
 8007d48:	440a      	add	r2, r1
 8007d4a:	3284      	adds	r2, #132	@ 0x84
 8007d4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007d50:	f023 0307 	bic.w	r3, r3, #7
 8007d54:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	69da      	ldr	r2, [r3, #28]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	6809      	ldr	r1, [r1, #0]
 8007d62:	4608      	mov	r0, r1
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	01c9      	lsls	r1, r1, #7
 8007d68:	4401      	add	r1, r0
 8007d6a:	3184      	adds	r1, #132	@ 0x84
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	01db      	lsls	r3, r3, #7
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3384      	adds	r3, #132	@ 0x84
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	01db      	lsls	r3, r3, #7
 8007d8a:	4413      	add	r3, r2
 8007d8c:	3384      	adds	r3, #132	@ 0x84
 8007d8e:	461a      	mov	r2, r3
 8007d90:	2300      	movs	r3, #0
 8007d92:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	01db      	lsls	r3, r3, #7
 8007d9e:	4413      	add	r3, r2
 8007da0:	3384      	adds	r3, #132	@ 0x84
 8007da2:	461a      	mov	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d102      	bne.n	8007db8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007db2:	2304      	movs	r3, #4
 8007db4:	61fb      	str	r3, [r7, #28]
 8007db6:	e01b      	b.n	8007df0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d102      	bne.n	8007dc6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	e014      	b.n	8007df0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d00b      	beq.n	8007de6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d007      	beq.n	8007de6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d003      	beq.n	8007de6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007de2:	2b07      	cmp	r3, #7
 8007de4:	d102      	bne.n	8007dec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007de6:	2302      	movs	r3, #2
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	e001      	b.n	8007df0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007dec:	2301      	movs	r3, #1
 8007dee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	01db      	lsls	r3, r3, #7
 8007dfa:	4413      	add	r3, r2
 8007dfc:	3384      	adds	r3, #132	@ 0x84
 8007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	4611      	mov	r1, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	01d2      	lsls	r2, r2, #7
 8007e0a:	440a      	add	r2, r1
 8007e0c:	3284      	adds	r2, #132	@ 0x84
 8007e0e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e18:	69fa      	ldr	r2, [r7, #28]
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6859      	ldr	r1, [r3, #4]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	1acb      	subs	r3, r1, r3
 8007e2a:	69f9      	ldr	r1, [r7, #28]
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	6809      	ldr	r1, [r1, #0]
 8007e36:	4608      	mov	r0, r1
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	01c9      	lsls	r1, r1, #7
 8007e3c:	4401      	add	r1, r0
 8007e3e:	3184      	adds	r1, #132	@ 0x84
 8007e40:	4313      	orrs	r3, r2
 8007e42:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	01db      	lsls	r3, r3, #7
 8007e4e:	4413      	add	r3, r2
 8007e50:	3384      	adds	r3, #132	@ 0x84
 8007e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	01d2      	lsls	r2, r2, #7
 8007e5e:	440a      	add	r2, r1
 8007e60:	3284      	adds	r2, #132	@ 0x84
 8007e62:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	01db      	lsls	r3, r3, #7
 8007e76:	4413      	add	r3, r2
 8007e78:	3384      	adds	r3, #132	@ 0x84
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	01db      	lsls	r3, r3, #7
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3384      	adds	r3, #132	@ 0x84
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	6812      	ldr	r2, [r2, #0]
 8007e96:	4611      	mov	r1, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	01d2      	lsls	r2, r2, #7
 8007e9c:	440a      	add	r2, r1
 8007e9e:	3284      	adds	r2, #132	@ 0x84
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	6013      	str	r3, [r2, #0]
}
 8007ea6:	bf00      	nop
 8007ea8:	3724      	adds	r7, #36	@ 0x24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
	...

08007eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4b20      	ldr	r3, [pc, #128]	@ (8007f44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ece:	4b1d      	ldr	r3, [pc, #116]	@ (8007f44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007eda:	4b1b      	ldr	r3, [pc, #108]	@ (8007f48 <HAL_PWREx_EnableOverDrive+0x94>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ee0:	f7fc faf6 	bl	80044d0 <HAL_GetTick>
 8007ee4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ee6:	e009      	b.n	8007efc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ee8:	f7fc faf2 	bl	80044d0 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ef6:	d901      	bls.n	8007efc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e01f      	b.n	8007f3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007efc:	4b13      	ldr	r3, [pc, #76]	@ (8007f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f08:	d1ee      	bne.n	8007ee8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007f0a:	4b11      	ldr	r3, [pc, #68]	@ (8007f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f10:	f7fc fade 	bl	80044d0 <HAL_GetTick>
 8007f14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f16:	e009      	b.n	8007f2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007f18:	f7fc fada 	bl	80044d0 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f26:	d901      	bls.n	8007f2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e007      	b.n	8007f3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f2c:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f38:	d1ee      	bne.n	8007f18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40023800 	.word	0x40023800
 8007f48:	420e0040 	.word	0x420e0040
 8007f4c:	40007000 	.word	0x40007000
 8007f50:	420e0044 	.word	0x420e0044

08007f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e267      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d075      	beq.n	800805e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f72:	4b88      	ldr	r3, [pc, #544]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 030c 	and.w	r3, r3, #12
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d00c      	beq.n	8007f98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f7e:	4b85      	ldr	r3, [pc, #532]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d112      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f8a:	4b82      	ldr	r3, [pc, #520]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f96:	d10b      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f98:	4b7e      	ldr	r3, [pc, #504]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d05b      	beq.n	800805c <HAL_RCC_OscConfig+0x108>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d157      	bne.n	800805c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e242      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb8:	d106      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x74>
 8007fba:	4b76      	ldr	r3, [pc, #472]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a75      	ldr	r2, [pc, #468]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	e01d      	b.n	8008004 <HAL_RCC_OscConfig+0xb0>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fd0:	d10c      	bne.n	8007fec <HAL_RCC_OscConfig+0x98>
 8007fd2:	4b70      	ldr	r3, [pc, #448]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a6f      	ldr	r2, [pc, #444]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	4b6d      	ldr	r3, [pc, #436]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a6c      	ldr	r2, [pc, #432]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e00b      	b.n	8008004 <HAL_RCC_OscConfig+0xb0>
 8007fec:	4b69      	ldr	r3, [pc, #420]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a68      	ldr	r2, [pc, #416]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4b66      	ldr	r3, [pc, #408]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a65      	ldr	r2, [pc, #404]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d013      	beq.n	8008034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800c:	f7fc fa60 	bl	80044d0 <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008014:	f7fc fa5c 	bl	80044d0 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b64      	cmp	r3, #100	@ 0x64
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e207      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008026:	4b5b      	ldr	r3, [pc, #364]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0f0      	beq.n	8008014 <HAL_RCC_OscConfig+0xc0>
 8008032:	e014      	b.n	800805e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008034:	f7fc fa4c 	bl	80044d0 <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800803c:	f7fc fa48 	bl	80044d0 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b64      	cmp	r3, #100	@ 0x64
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e1f3      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800804e:	4b51      	ldr	r3, [pc, #324]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f0      	bne.n	800803c <HAL_RCC_OscConfig+0xe8>
 800805a:	e000      	b.n	800805e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800805c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d063      	beq.n	8008132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800806a:	4b4a      	ldr	r3, [pc, #296]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 030c 	and.w	r3, r3, #12
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008076:	4b47      	ldr	r3, [pc, #284]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800807e:	2b08      	cmp	r3, #8
 8008080:	d11c      	bne.n	80080bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008082:	4b44      	ldr	r3, [pc, #272]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d116      	bne.n	80080bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800808e:	4b41      	ldr	r3, [pc, #260]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <HAL_RCC_OscConfig+0x152>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d001      	beq.n	80080a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e1c7      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	4937      	ldr	r1, [pc, #220]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ba:	e03a      	b.n	8008132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d020      	beq.n	8008106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080c4:	4b34      	ldr	r3, [pc, #208]	@ (8008198 <HAL_RCC_OscConfig+0x244>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ca:	f7fc fa01 	bl	80044d0 <HAL_GetTick>
 80080ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080d2:	f7fc f9fd 	bl	80044d0 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e1a8      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0f0      	beq.n	80080d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f0:	4b28      	ldr	r3, [pc, #160]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	4925      	ldr	r1, [pc, #148]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008100:	4313      	orrs	r3, r2
 8008102:	600b      	str	r3, [r1, #0]
 8008104:	e015      	b.n	8008132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008106:	4b24      	ldr	r3, [pc, #144]	@ (8008198 <HAL_RCC_OscConfig+0x244>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fc f9e0 	bl	80044d0 <HAL_GetTick>
 8008110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008114:	f7fc f9dc 	bl	80044d0 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e187      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008126:	4b1b      	ldr	r3, [pc, #108]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f0      	bne.n	8008114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d036      	beq.n	80081ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d016      	beq.n	8008174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008146:	4b15      	ldr	r3, [pc, #84]	@ (800819c <HAL_RCC_OscConfig+0x248>)
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814c:	f7fc f9c0 	bl	80044d0 <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008152:	e008      	b.n	8008166 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008154:	f7fc f9bc 	bl	80044d0 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e167      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008166:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <HAL_RCC_OscConfig+0x240>)
 8008168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0f0      	beq.n	8008154 <HAL_RCC_OscConfig+0x200>
 8008172:	e01b      	b.n	80081ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <HAL_RCC_OscConfig+0x248>)
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800817a:	f7fc f9a9 	bl	80044d0 <HAL_GetTick>
 800817e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008180:	e00e      	b.n	80081a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008182:	f7fc f9a5 	bl	80044d0 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d907      	bls.n	80081a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e150      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
 8008194:	40023800 	.word	0x40023800
 8008198:	42470000 	.word	0x42470000
 800819c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a0:	4b88      	ldr	r3, [pc, #544]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1ea      	bne.n	8008182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8097 	beq.w	80082e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081be:	4b81      	ldr	r3, [pc, #516]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10f      	bne.n	80081ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	4b7d      	ldr	r3, [pc, #500]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d2:	4a7c      	ldr	r2, [pc, #496]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80081da:	4b7a      	ldr	r3, [pc, #488]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e2:	60bb      	str	r3, [r7, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081e6:	2301      	movs	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ea:	4b77      	ldr	r3, [pc, #476]	@ (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d118      	bne.n	8008228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081f6:	4b74      	ldr	r3, [pc, #464]	@ (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a73      	ldr	r2, [pc, #460]	@ (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008202:	f7fc f965 	bl	80044d0 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800820a:	f7fc f961 	bl	80044d0 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e10c      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800821c:	4b6a      	ldr	r3, [pc, #424]	@ (80083c8 <HAL_RCC_OscConfig+0x474>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0f0      	beq.n	800820a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d106      	bne.n	800823e <HAL_RCC_OscConfig+0x2ea>
 8008230:	4b64      	ldr	r3, [pc, #400]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008234:	4a63      	ldr	r2, [pc, #396]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	6713      	str	r3, [r2, #112]	@ 0x70
 800823c:	e01c      	b.n	8008278 <HAL_RCC_OscConfig+0x324>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b05      	cmp	r3, #5
 8008244:	d10c      	bne.n	8008260 <HAL_RCC_OscConfig+0x30c>
 8008246:	4b5f      	ldr	r3, [pc, #380]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824a:	4a5e      	ldr	r2, [pc, #376]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 800824c:	f043 0304 	orr.w	r3, r3, #4
 8008250:	6713      	str	r3, [r2, #112]	@ 0x70
 8008252:	4b5c      	ldr	r3, [pc, #368]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	4a5b      	ldr	r2, [pc, #364]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	6713      	str	r3, [r2, #112]	@ 0x70
 800825e:	e00b      	b.n	8008278 <HAL_RCC_OscConfig+0x324>
 8008260:	4b58      	ldr	r3, [pc, #352]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008264:	4a57      	ldr	r2, [pc, #348]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	6713      	str	r3, [r2, #112]	@ 0x70
 800826c:	4b55      	ldr	r3, [pc, #340]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	4a54      	ldr	r2, [pc, #336]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008272:	f023 0304 	bic.w	r3, r3, #4
 8008276:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d015      	beq.n	80082ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008280:	f7fc f926 	bl	80044d0 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008286:	e00a      	b.n	800829e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008288:	f7fc f922 	bl	80044d0 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008296:	4293      	cmp	r3, r2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e0cb      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800829e:	4b49      	ldr	r3, [pc, #292]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0ee      	beq.n	8008288 <HAL_RCC_OscConfig+0x334>
 80082aa:	e014      	b.n	80082d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082ac:	f7fc f910 	bl	80044d0 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b2:	e00a      	b.n	80082ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b4:	f7fc f90c 	bl	80044d0 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e0b5      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ca:	4b3e      	ldr	r3, [pc, #248]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1ee      	bne.n	80082b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d105      	bne.n	80082e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082dc:	4b39      	ldr	r3, [pc, #228]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e0:	4a38      	ldr	r2, [pc, #224]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 80a1 	beq.w	8008434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082f2:	4b34      	ldr	r3, [pc, #208]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 030c 	and.w	r3, r3, #12
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d05c      	beq.n	80083b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d141      	bne.n	800838a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008306:	4b31      	ldr	r3, [pc, #196]	@ (80083cc <HAL_RCC_OscConfig+0x478>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830c:	f7fc f8e0 	bl	80044d0 <HAL_GetTick>
 8008310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008314:	f7fc f8dc 	bl	80044d0 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e087      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008326:	4b27      	ldr	r3, [pc, #156]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f0      	bne.n	8008314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008340:	019b      	lsls	r3, r3, #6
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	3b01      	subs	r3, #1
 800834c:	041b      	lsls	r3, r3, #16
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008354:	061b      	lsls	r3, r3, #24
 8008356:	491b      	ldr	r1, [pc, #108]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008358:	4313      	orrs	r3, r2
 800835a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800835c:	4b1b      	ldr	r3, [pc, #108]	@ (80083cc <HAL_RCC_OscConfig+0x478>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008362:	f7fc f8b5 	bl	80044d0 <HAL_GetTick>
 8008366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008368:	e008      	b.n	800837c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800836a:	f7fc f8b1 	bl	80044d0 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e05c      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800837c:	4b11      	ldr	r3, [pc, #68]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0f0      	beq.n	800836a <HAL_RCC_OscConfig+0x416>
 8008388:	e054      	b.n	8008434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800838a:	4b10      	ldr	r3, [pc, #64]	@ (80083cc <HAL_RCC_OscConfig+0x478>)
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008390:	f7fc f89e 	bl	80044d0 <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008398:	f7fc f89a 	bl	80044d0 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e045      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083aa:	4b06      	ldr	r3, [pc, #24]	@ (80083c4 <HAL_RCC_OscConfig+0x470>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f0      	bne.n	8008398 <HAL_RCC_OscConfig+0x444>
 80083b6:	e03d      	b.n	8008434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d107      	bne.n	80083d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e038      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
 80083c4:	40023800 	.word	0x40023800
 80083c8:	40007000 	.word	0x40007000
 80083cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008440 <HAL_RCC_OscConfig+0x4ec>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d028      	beq.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d121      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d11a      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008400:	4013      	ands	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008408:	4293      	cmp	r3, r2
 800840a:	d111      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	3b01      	subs	r3, #1
 800841a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800841c:	429a      	cmp	r2, r3
 800841e:	d107      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800842c:	429a      	cmp	r2, r3
 800842e:	d001      	beq.n	8008434 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40023800 	.word	0x40023800

08008444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e0cc      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008458:	4b68      	ldr	r3, [pc, #416]	@ (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d90c      	bls.n	8008480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008466:	4b65      	ldr	r3, [pc, #404]	@ (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800846e:	4b63      	ldr	r3, [pc, #396]	@ (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d001      	beq.n	8008480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0b8      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d020      	beq.n	80084ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008498:	4b59      	ldr	r3, [pc, #356]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4a58      	ldr	r2, [pc, #352]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80084a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084b0:	4b53      	ldr	r3, [pc, #332]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	4a52      	ldr	r2, [pc, #328]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80084ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084bc:	4b50      	ldr	r3, [pc, #320]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	494d      	ldr	r1, [pc, #308]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d044      	beq.n	8008564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d107      	bne.n	80084f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084e2:	4b47      	ldr	r3, [pc, #284]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d119      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e07f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d003      	beq.n	8008502 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d107      	bne.n	8008512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008502:	4b3f      	ldr	r3, [pc, #252]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e06f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008512:	4b3b      	ldr	r3, [pc, #236]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e067      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008522:	4b37      	ldr	r3, [pc, #220]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 0203 	bic.w	r2, r3, #3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	4934      	ldr	r1, [pc, #208]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008530:	4313      	orrs	r3, r2
 8008532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008534:	f7fb ffcc 	bl	80044d0 <HAL_GetTick>
 8008538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800853a:	e00a      	b.n	8008552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800853c:	f7fb ffc8 	bl	80044d0 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800854a:	4293      	cmp	r3, r2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e04f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008552:	4b2b      	ldr	r3, [pc, #172]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 020c 	and.w	r2, r3, #12
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	429a      	cmp	r2, r3
 8008562:	d1eb      	bne.n	800853c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008564:	4b25      	ldr	r3, [pc, #148]	@ (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d20c      	bcs.n	800858c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008572:	4b22      	ldr	r3, [pc, #136]	@ (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800857a:	4b20      	ldr	r3, [pc, #128]	@ (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d001      	beq.n	800858c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e032      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008598:	4b19      	ldr	r3, [pc, #100]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	4916      	ldr	r1, [pc, #88]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085b6:	4b12      	ldr	r3, [pc, #72]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	490e      	ldr	r1, [pc, #56]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80085ca:	f000 f821 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80085ce:	4602      	mov	r2, r0
 80085d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	091b      	lsrs	r3, r3, #4
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	490a      	ldr	r1, [pc, #40]	@ (8008604 <HAL_RCC_ClockConfig+0x1c0>)
 80085dc:	5ccb      	ldrb	r3, [r1, r3]
 80085de:	fa22 f303 	lsr.w	r3, r2, r3
 80085e2:	4a09      	ldr	r2, [pc, #36]	@ (8008608 <HAL_RCC_ClockConfig+0x1c4>)
 80085e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80085e6:	4b09      	ldr	r3, [pc, #36]	@ (800860c <HAL_RCC_ClockConfig+0x1c8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fb fcf8 	bl	8003fe0 <HAL_InitTick>

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40023c00 	.word	0x40023c00
 8008600:	40023800 	.word	0x40023800
 8008604:	0800df1c 	.word	0x0800df1c
 8008608:	20000084 	.word	0x20000084
 800860c:	20000088 	.word	0x20000088

08008610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008614:	b094      	sub	sp, #80	@ 0x50
 8008616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008628:	4b79      	ldr	r3, [pc, #484]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 030c 	and.w	r3, r3, #12
 8008630:	2b08      	cmp	r3, #8
 8008632:	d00d      	beq.n	8008650 <HAL_RCC_GetSysClockFreq+0x40>
 8008634:	2b08      	cmp	r3, #8
 8008636:	f200 80e1 	bhi.w	80087fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x34>
 800863e:	2b04      	cmp	r3, #4
 8008640:	d003      	beq.n	800864a <HAL_RCC_GetSysClockFreq+0x3a>
 8008642:	e0db      	b.n	80087fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008644:	4b73      	ldr	r3, [pc, #460]	@ (8008814 <HAL_RCC_GetSysClockFreq+0x204>)
 8008646:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008648:	e0db      	b.n	8008802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800864a:	4b73      	ldr	r3, [pc, #460]	@ (8008818 <HAL_RCC_GetSysClockFreq+0x208>)
 800864c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800864e:	e0d8      	b.n	8008802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008650:	4b6f      	ldr	r3, [pc, #444]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008658:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800865a:	4b6d      	ldr	r3, [pc, #436]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d063      	beq.n	800872e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008666:	4b6a      	ldr	r3, [pc, #424]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	099b      	lsrs	r3, r3, #6
 800866c:	2200      	movs	r2, #0
 800866e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008670:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008678:	633b      	str	r3, [r7, #48]	@ 0x30
 800867a:	2300      	movs	r3, #0
 800867c:	637b      	str	r3, [r7, #52]	@ 0x34
 800867e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008682:	4622      	mov	r2, r4
 8008684:	462b      	mov	r3, r5
 8008686:	f04f 0000 	mov.w	r0, #0
 800868a:	f04f 0100 	mov.w	r1, #0
 800868e:	0159      	lsls	r1, r3, #5
 8008690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008694:	0150      	lsls	r0, r2, #5
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4621      	mov	r1, r4
 800869c:	1a51      	subs	r1, r2, r1
 800869e:	6139      	str	r1, [r7, #16]
 80086a0:	4629      	mov	r1, r5
 80086a2:	eb63 0301 	sbc.w	r3, r3, r1
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086b4:	4659      	mov	r1, fp
 80086b6:	018b      	lsls	r3, r1, #6
 80086b8:	4651      	mov	r1, sl
 80086ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086be:	4651      	mov	r1, sl
 80086c0:	018a      	lsls	r2, r1, #6
 80086c2:	4651      	mov	r1, sl
 80086c4:	ebb2 0801 	subs.w	r8, r2, r1
 80086c8:	4659      	mov	r1, fp
 80086ca:	eb63 0901 	sbc.w	r9, r3, r1
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086e2:	4690      	mov	r8, r2
 80086e4:	4699      	mov	r9, r3
 80086e6:	4623      	mov	r3, r4
 80086e8:	eb18 0303 	adds.w	r3, r8, r3
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	462b      	mov	r3, r5
 80086f0:	eb49 0303 	adc.w	r3, r9, r3
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	f04f 0300 	mov.w	r3, #0
 80086fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008702:	4629      	mov	r1, r5
 8008704:	024b      	lsls	r3, r1, #9
 8008706:	4621      	mov	r1, r4
 8008708:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800870c:	4621      	mov	r1, r4
 800870e:	024a      	lsls	r2, r1, #9
 8008710:	4610      	mov	r0, r2
 8008712:	4619      	mov	r1, r3
 8008714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008716:	2200      	movs	r2, #0
 8008718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800871a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800871c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008720:	f7f8 f9d4 	bl	8000acc <__aeabi_uldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4613      	mov	r3, r2
 800872a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800872c:	e058      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800872e:	4b38      	ldr	r3, [pc, #224]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	099b      	lsrs	r3, r3, #6
 8008734:	2200      	movs	r2, #0
 8008736:	4618      	mov	r0, r3
 8008738:	4611      	mov	r1, r2
 800873a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800873e:	623b      	str	r3, [r7, #32]
 8008740:	2300      	movs	r3, #0
 8008742:	627b      	str	r3, [r7, #36]	@ 0x24
 8008744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	f04f 0000 	mov.w	r0, #0
 8008750:	f04f 0100 	mov.w	r1, #0
 8008754:	0159      	lsls	r1, r3, #5
 8008756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800875a:	0150      	lsls	r0, r2, #5
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4641      	mov	r1, r8
 8008762:	ebb2 0a01 	subs.w	sl, r2, r1
 8008766:	4649      	mov	r1, r9
 8008768:	eb63 0b01 	sbc.w	fp, r3, r1
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800877c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008780:	ebb2 040a 	subs.w	r4, r2, sl
 8008784:	eb63 050b 	sbc.w	r5, r3, fp
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	00eb      	lsls	r3, r5, #3
 8008792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008796:	00e2      	lsls	r2, r4, #3
 8008798:	4614      	mov	r4, r2
 800879a:	461d      	mov	r5, r3
 800879c:	4643      	mov	r3, r8
 800879e:	18e3      	adds	r3, r4, r3
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	464b      	mov	r3, r9
 80087a4:	eb45 0303 	adc.w	r3, r5, r3
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087b6:	4629      	mov	r1, r5
 80087b8:	028b      	lsls	r3, r1, #10
 80087ba:	4621      	mov	r1, r4
 80087bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087c0:	4621      	mov	r1, r4
 80087c2:	028a      	lsls	r2, r1, #10
 80087c4:	4610      	mov	r0, r2
 80087c6:	4619      	mov	r1, r3
 80087c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ca:	2200      	movs	r2, #0
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	61fa      	str	r2, [r7, #28]
 80087d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087d4:	f7f8 f97a 	bl	8000acc <__aeabi_uldivmod>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4613      	mov	r3, r2
 80087de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80087e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	0c1b      	lsrs	r3, r3, #16
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	3301      	adds	r3, #1
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80087f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087fa:	e002      	b.n	8008802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087fc:	4b05      	ldr	r3, [pc, #20]	@ (8008814 <HAL_RCC_GetSysClockFreq+0x204>)
 80087fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008804:	4618      	mov	r0, r3
 8008806:	3750      	adds	r7, #80	@ 0x50
 8008808:	46bd      	mov	sp, r7
 800880a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800880e:	bf00      	nop
 8008810:	40023800 	.word	0x40023800
 8008814:	00f42400 	.word	0x00f42400
 8008818:	007a1200 	.word	0x007a1200

0800881c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008820:	4b03      	ldr	r3, [pc, #12]	@ (8008830 <HAL_RCC_GetHCLKFreq+0x14>)
 8008822:	681b      	ldr	r3, [r3, #0]
}
 8008824:	4618      	mov	r0, r3
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	20000084 	.word	0x20000084

08008834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008838:	f7ff fff0 	bl	800881c <HAL_RCC_GetHCLKFreq>
 800883c:	4602      	mov	r2, r0
 800883e:	4b05      	ldr	r3, [pc, #20]	@ (8008854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	0a9b      	lsrs	r3, r3, #10
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	4903      	ldr	r1, [pc, #12]	@ (8008858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800884a:	5ccb      	ldrb	r3, [r1, r3]
 800884c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008850:	4618      	mov	r0, r3
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40023800 	.word	0x40023800
 8008858:	0800df2c 	.word	0x0800df2c

0800885c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	220f      	movs	r2, #15
 800886a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800886c:	4b12      	ldr	r3, [pc, #72]	@ (80088b8 <HAL_RCC_GetClockConfig+0x5c>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 0203 	and.w	r2, r3, #3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008878:	4b0f      	ldr	r3, [pc, #60]	@ (80088b8 <HAL_RCC_GetClockConfig+0x5c>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008884:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008890:	4b09      	ldr	r3, [pc, #36]	@ (80088b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	08db      	lsrs	r3, r3, #3
 8008896:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800889e:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <HAL_RCC_GetClockConfig+0x60>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 020f 	and.w	r2, r3, #15
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	601a      	str	r2, [r3, #0]
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	40023800 	.word	0x40023800
 80088bc:	40023c00 	.word	0x40023c00

080088c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10b      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d105      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d075      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088f4:	4b91      	ldr	r3, [pc, #580]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088fa:	f7fb fde9 	bl	80044d0 <HAL_GetTick>
 80088fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008900:	e008      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008902:	f7fb fde5 	bl	80044d0 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e189      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008914:	4b8a      	ldr	r3, [pc, #552]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1f0      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	019a      	lsls	r2, r3, #6
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	071b      	lsls	r3, r3, #28
 8008938:	4981      	ldr	r1, [pc, #516]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800893a:	4313      	orrs	r3, r2
 800893c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01f      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800894c:	4b7c      	ldr	r3, [pc, #496]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800894e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008952:	0f1b      	lsrs	r3, r3, #28
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	019a      	lsls	r2, r3, #6
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	061b      	lsls	r3, r3, #24
 8008966:	431a      	orrs	r2, r3
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	071b      	lsls	r3, r3, #28
 800896c:	4974      	ldr	r1, [pc, #464]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008974:	4b72      	ldr	r3, [pc, #456]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800897a:	f023 021f 	bic.w	r2, r3, #31
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	3b01      	subs	r3, #1
 8008984:	496e      	ldr	r1, [pc, #440]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00d      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	019a      	lsls	r2, r3, #6
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	061b      	lsls	r3, r3, #24
 80089a4:	431a      	orrs	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	071b      	lsls	r3, r3, #28
 80089ac:	4964      	ldr	r1, [pc, #400]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80089b4:	4b61      	ldr	r3, [pc, #388]	@ (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089ba:	f7fb fd89 	bl	80044d0 <HAL_GetTick>
 80089be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089c0:	e008      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089c2:	f7fb fd85 	bl	80044d0 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e129      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d079      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089f8:	4b52      	ldr	r3, [pc, #328]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089fe:	f7fb fd67 	bl	80044d0 <HAL_GetTick>
 8008a02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a04:	e008      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a06:	f7fb fd63 	bl	80044d0 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d901      	bls.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e107      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a18:	4b49      	ldr	r3, [pc, #292]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a24:	d0ef      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d020      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a32:	4b43      	ldr	r3, [pc, #268]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a38:	0f1b      	lsrs	r3, r3, #28
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	019a      	lsls	r2, r3, #6
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	061b      	lsls	r3, r3, #24
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	071b      	lsls	r3, r3, #28
 8008a52:	493b      	ldr	r1, [pc, #236]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a5a:	4b39      	ldr	r3, [pc, #228]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a60:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	021b      	lsls	r3, r3, #8
 8008a6c:	4934      	ldr	r1, [pc, #208]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01e      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a80:	4b2f      	ldr	r3, [pc, #188]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a86:	0e1b      	lsrs	r3, r3, #24
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	019a      	lsls	r2, r3, #6
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	061b      	lsls	r3, r3, #24
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	071b      	lsls	r3, r3, #28
 8008aa0:	4927      	ldr	r1, [pc, #156]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008aa8:	4b25      	ldr	r3, [pc, #148]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab6:	4922      	ldr	r1, [pc, #136]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008abe:	4b21      	ldr	r3, [pc, #132]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ac4:	f7fb fd04 	bl	80044d0 <HAL_GetTick>
 8008ac8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008aca:	e008      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008acc:	f7fb fd00 	bl	80044d0 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e0a4      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ade:	4b18      	ldr	r3, [pc, #96]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aea:	d1ef      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0320 	and.w	r3, r3, #32
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 808b 	beq.w	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	4b10      	ldr	r3, [pc, #64]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	4a0f      	ldr	r2, [pc, #60]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b16:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b22:	f7fb fcd5 	bl	80044d0 <HAL_GetTick>
 8008b26:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008b28:	e010      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b2a:	f7fb fcd1 	bl	80044d0 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d909      	bls.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e075      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008b3c:	42470068 	.word	0x42470068
 8008b40:	40023800 	.word	0x40023800
 8008b44:	42470070 	.word	0x42470070
 8008b48:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008b4c:	4b38      	ldr	r3, [pc, #224]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0e8      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b58:	4b36      	ldr	r3, [pc, #216]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b60:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d02f      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d028      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b76:	4b2f      	ldr	r3, [pc, #188]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b80:	4b2d      	ldr	r3, [pc, #180]	@ (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b86:	4b2c      	ldr	r3, [pc, #176]	@ (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b8c:	4a29      	ldr	r2, [pc, #164]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b92:	4b28      	ldr	r3, [pc, #160]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d114      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b9e:	f7fb fc97 	bl	80044d0 <HAL_GetTick>
 8008ba2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba4:	e00a      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba6:	f7fb fc93 	bl	80044d0 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e035      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0ee      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bd4:	d10d      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008bd6:	4b17      	ldr	r3, [pc, #92]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bea:	4912      	ldr	r1, [pc, #72]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	608b      	str	r3, [r1, #8]
 8008bf0:	e005      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008bf2:	4b10      	ldr	r3, [pc, #64]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bf8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008bfc:	6093      	str	r3, [r2, #8]
 8008bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c0a:	490a      	ldr	r1, [pc, #40]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d004      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008c22:	4b06      	ldr	r3, [pc, #24]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008c24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	40007000 	.word	0x40007000
 8008c34:	40023800 	.word	0x40023800
 8008c38:	42470e40 	.word	0x42470e40
 8008c3c:	424711e0 	.word	0x424711e0

08008c40 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e025      	b.n	8008ca0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d106      	bne.n	8008c6e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fa fb67 	bl	800333c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2202      	movs	r2, #2
 8008c72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f001 faeb 	bl	800a25c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	f001 fb40 	bl	800a316 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008cba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d101      	bne.n	8008cc6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e021      	b.n	8008d0a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d002      	beq.n	8008cd2 <HAL_SDRAM_SendCommand+0x2a>
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d118      	bne.n	8008d04 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 fb80 	bl	800a3e8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d104      	bne.n	8008cfa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2205      	movs	r2, #5
 8008cf4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008cf8:	e006      	b.n	8008d08 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008d02:	e001      	b.n	8008d08 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e000      	b.n	8008d0a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d101      	bne.n	8008d2c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e016      	b.n	8008d5a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d10f      	bne.n	8008d58 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 fb8b 	bl	800a462 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	e000      	b.n	8008d5a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e07b      	b.n	8008e6c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d108      	bne.n	8008d8e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d84:	d009      	beq.n	8008d9a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	61da      	str	r2, [r3, #28]
 8008d8c:	e005      	b.n	8008d9a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7fb f885 	bl	8003ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	431a      	orrs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e1e:	ea42 0103 	orr.w	r1, r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	f003 0104 	and.w	r1, r3, #4
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e40:	f003 0210 	and.w	r2, r3, #16
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69da      	ldr	r2, [r3, #28]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e01a      	b.n	8008ebc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e9c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7fb f858 	bl	8003f54 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ed4:	f7fb fafc 	bl	80044d0 <HAL_GetTick>
 8008ed8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008eda:	88fb      	ldrh	r3, [r7, #6]
 8008edc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d001      	beq.n	8008eee <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008eea:	2302      	movs	r3, #2
 8008eec:	e12a      	b.n	8009144 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <HAL_SPI_Transmit+0x36>
 8008ef4:	88fb      	ldrh	r3, [r7, #6]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e122      	b.n	8009144 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d101      	bne.n	8008f0c <HAL_SPI_Transmit+0x48>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e11b      	b.n	8009144 <HAL_SPI_Transmit+0x280>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2203      	movs	r2, #3
 8008f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	88fa      	ldrh	r2, [r7, #6]
 8008f2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	88fa      	ldrh	r2, [r7, #6]
 8008f32:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f5a:	d10f      	bne.n	8008f7c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f86:	2b40      	cmp	r3, #64	@ 0x40
 8008f88:	d007      	beq.n	8008f9a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa2:	d152      	bne.n	800904a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <HAL_SPI_Transmit+0xee>
 8008fac:	8b7b      	ldrh	r3, [r7, #26]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d145      	bne.n	800903e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb6:	881a      	ldrh	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc2:	1c9a      	adds	r2, r3, #2
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008fd6:	e032      	b.n	800903e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d112      	bne.n	800900c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fea:	881a      	ldrh	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff6:	1c9a      	adds	r2, r3, #2
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009000:	b29b      	uxth	r3, r3
 8009002:	3b01      	subs	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	86da      	strh	r2, [r3, #54]	@ 0x36
 800900a:	e018      	b.n	800903e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800900c:	f7fb fa60 	bl	80044d0 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d803      	bhi.n	8009024 <HAL_SPI_Transmit+0x160>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009022:	d102      	bne.n	800902a <HAL_SPI_Transmit+0x166>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e082      	b.n	8009144 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009042:	b29b      	uxth	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1c7      	bne.n	8008fd8 <HAL_SPI_Transmit+0x114>
 8009048:	e053      	b.n	80090f2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <HAL_SPI_Transmit+0x194>
 8009052:	8b7b      	ldrh	r3, [r7, #26]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d147      	bne.n	80090e8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	7812      	ldrb	r2, [r2, #0]
 8009064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800907e:	e033      	b.n	80090e8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b02      	cmp	r3, #2
 800908c:	d113      	bne.n	80090b6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	7812      	ldrb	r2, [r2, #0]
 800909a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80090b4:	e018      	b.n	80090e8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090b6:	f7fb fa0b 	bl	80044d0 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d803      	bhi.n	80090ce <HAL_SPI_Transmit+0x20a>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090cc:	d102      	bne.n	80090d4 <HAL_SPI_Transmit+0x210>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e02d      	b.n	8009144 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1c6      	bne.n	8009080 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fbe6 	bl	80098c8 <SPI_EndRxTxTransaction>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2220      	movs	r2, #32
 8009106:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009142:	2300      	movs	r3, #0
  }
}
 8009144:	4618      	mov	r0, r3
 8009146:	3720      	adds	r7, #32
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af02      	add	r7, sp, #8
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	4613      	mov	r3, r2
 800915a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b01      	cmp	r3, #1
 8009166:	d001      	beq.n	800916c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009168:	2302      	movs	r3, #2
 800916a:	e104      	b.n	8009376 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009174:	d112      	bne.n	800919c <HAL_SPI_Receive+0x50>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10e      	bne.n	800919c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2204      	movs	r2, #4
 8009182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009186:	88fa      	ldrh	r2, [r7, #6]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f8f3 	bl	800937e <HAL_SPI_TransmitReceive>
 8009198:	4603      	mov	r3, r0
 800919a:	e0ec      	b.n	8009376 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800919c:	f7fb f998 	bl	80044d0 <HAL_GetTick>
 80091a0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <HAL_SPI_Receive+0x62>
 80091a8:	88fb      	ldrh	r3, [r7, #6]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e0e1      	b.n	8009376 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_SPI_Receive+0x74>
 80091bc:	2302      	movs	r3, #2
 80091be:	e0da      	b.n	8009376 <HAL_SPI_Receive+0x22a>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2204      	movs	r2, #4
 80091cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	88fa      	ldrh	r2, [r7, #6]
 80091e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	88fa      	ldrh	r2, [r7, #6]
 80091e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800920e:	d10f      	bne.n	8009230 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800921e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800922e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800923a:	2b40      	cmp	r3, #64	@ 0x40
 800923c:	d007      	beq.n	800924e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800924c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d170      	bne.n	8009338 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009256:	e035      	b.n	80092c4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b01      	cmp	r3, #1
 8009264:	d115      	bne.n	8009292 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f103 020c 	add.w	r2, r3, #12
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	b2d2      	uxtb	r2, r2
 8009276:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009286:	b29b      	uxth	r3, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	b29a      	uxth	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009290:	e018      	b.n	80092c4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009292:	f7fb f91d 	bl	80044d0 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d803      	bhi.n	80092aa <HAL_SPI_Receive+0x15e>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	d102      	bne.n	80092b0 <HAL_SPI_Receive+0x164>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d109      	bne.n	80092c4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e058      	b.n	8009376 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1c4      	bne.n	8009258 <HAL_SPI_Receive+0x10c>
 80092ce:	e038      	b.n	8009342 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d113      	bne.n	8009306 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e8:	b292      	uxth	r2, r2
 80092ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f0:	1c9a      	adds	r2, r3, #2
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009304:	e018      	b.n	8009338 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009306:	f7fb f8e3 	bl	80044d0 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d803      	bhi.n	800931e <HAL_SPI_Receive+0x1d2>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931c:	d102      	bne.n	8009324 <HAL_SPI_Receive+0x1d8>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d109      	bne.n	8009338 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e01e      	b.n	8009376 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800933c:	b29b      	uxth	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1c6      	bne.n	80092d0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fa58 	bl	80097fc <SPI_EndRxTransaction>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2220      	movs	r2, #32
 8009356:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009374:	2300      	movs	r3, #0
  }
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b08a      	sub	sp, #40	@ 0x28
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
 800938a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800938c:	2301      	movs	r3, #1
 800938e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009390:	f7fb f89e 	bl	80044d0 <HAL_GetTick>
 8009394:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800939c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80093a4:	887b      	ldrh	r3, [r7, #2]
 80093a6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093a8:	7ffb      	ldrb	r3, [r7, #31]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d00c      	beq.n	80093c8 <HAL_SPI_TransmitReceive+0x4a>
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093b4:	d106      	bne.n	80093c4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d102      	bne.n	80093c4 <HAL_SPI_TransmitReceive+0x46>
 80093be:	7ffb      	ldrb	r3, [r7, #31]
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d001      	beq.n	80093c8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80093c4:	2302      	movs	r3, #2
 80093c6:	e17f      	b.n	80096c8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <HAL_SPI_TransmitReceive+0x5c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <HAL_SPI_TransmitReceive+0x5c>
 80093d4:	887b      	ldrh	r3, [r7, #2]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e174      	b.n	80096c8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d101      	bne.n	80093ec <HAL_SPI_TransmitReceive+0x6e>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e16d      	b.n	80096c8 <HAL_SPI_TransmitReceive+0x34a>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d003      	beq.n	8009408 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2205      	movs	r2, #5
 8009404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	887a      	ldrh	r2, [r7, #2]
 8009418:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	887a      	ldrh	r2, [r7, #2]
 800941e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	887a      	ldrh	r2, [r7, #2]
 800942a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	887a      	ldrh	r2, [r7, #2]
 8009430:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009448:	2b40      	cmp	r3, #64	@ 0x40
 800944a:	d007      	beq.n	800945c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800945a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009464:	d17e      	bne.n	8009564 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_SPI_TransmitReceive+0xf6>
 800946e:	8afb      	ldrh	r3, [r7, #22]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d16c      	bne.n	800954e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009478:	881a      	ldrh	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009484:	1c9a      	adds	r2, r3, #2
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800948e:	b29b      	uxth	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009498:	e059      	b.n	800954e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d11b      	bne.n	80094e0 <HAL_SPI_TransmitReceive+0x162>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d016      	beq.n	80094e0 <HAL_SPI_TransmitReceive+0x162>
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d113      	bne.n	80094e0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094bc:	881a      	ldrh	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c8:	1c9a      	adds	r2, r3, #2
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d119      	bne.n	8009522 <HAL_SPI_TransmitReceive+0x1a4>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d014      	beq.n	8009522 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	b292      	uxth	r2, r2
 8009504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950a:	1c9a      	adds	r2, r3, #2
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800951e:	2301      	movs	r3, #1
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009522:	f7fa ffd5 	bl	80044d0 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800952e:	429a      	cmp	r2, r3
 8009530:	d80d      	bhi.n	800954e <HAL_SPI_TransmitReceive+0x1d0>
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d009      	beq.n	800954e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e0bc      	b.n	80096c8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1a0      	bne.n	800949a <HAL_SPI_TransmitReceive+0x11c>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800955c:	b29b      	uxth	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d19b      	bne.n	800949a <HAL_SPI_TransmitReceive+0x11c>
 8009562:	e082      	b.n	800966a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <HAL_SPI_TransmitReceive+0x1f4>
 800956c:	8afb      	ldrh	r3, [r7, #22]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d171      	bne.n	8009656 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	330c      	adds	r3, #12
 800957c:	7812      	ldrb	r2, [r2, #0]
 800957e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009584:	1c5a      	adds	r2, r3, #1
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800958e:	b29b      	uxth	r3, r3
 8009590:	3b01      	subs	r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009598:	e05d      	b.n	8009656 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d11c      	bne.n	80095e2 <HAL_SPI_TransmitReceive+0x264>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d017      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x264>
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d114      	bne.n	80095e2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	330c      	adds	r3, #12
 80095c2:	7812      	ldrb	r2, [r2, #0]
 80095c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d119      	bne.n	8009624 <HAL_SPI_TransmitReceive+0x2a6>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d014      	beq.n	8009624 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009604:	b2d2      	uxtb	r2, r2
 8009606:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009616:	b29b      	uxth	r3, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009620:	2301      	movs	r3, #1
 8009622:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009624:	f7fa ff54 	bl	80044d0 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009630:	429a      	cmp	r2, r3
 8009632:	d803      	bhi.n	800963c <HAL_SPI_TransmitReceive+0x2be>
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d102      	bne.n	8009642 <HAL_SPI_TransmitReceive+0x2c4>
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e038      	b.n	80096c8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800965a:	b29b      	uxth	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d19c      	bne.n	800959a <HAL_SPI_TransmitReceive+0x21c>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d197      	bne.n	800959a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800966a:	6a3a      	ldr	r2, [r7, #32]
 800966c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f92a 	bl	80098c8 <SPI_EndRxTxTransaction>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d008      	beq.n	800968c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2220      	movs	r2, #32
 800967e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e01d      	b.n	80096c8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009694:	2300      	movs	r3, #0
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	613b      	str	r3, [r7, #16]
 80096a8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80096c6:	2300      	movs	r3, #0
  }
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3728      	adds	r7, #40	@ 0x28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096de:	b2db      	uxtb	r3, r3
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	4613      	mov	r3, r2
 80096fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096fc:	f7fa fee8 	bl	80044d0 <HAL_GetTick>
 8009700:	4602      	mov	r2, r0
 8009702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4413      	add	r3, r2
 800970a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800970c:	f7fa fee0 	bl	80044d0 <HAL_GetTick>
 8009710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009712:	4b39      	ldr	r3, [pc, #228]	@ (80097f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	015b      	lsls	r3, r3, #5
 8009718:	0d1b      	lsrs	r3, r3, #20
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	fb02 f303 	mul.w	r3, r2, r3
 8009720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009722:	e054      	b.n	80097ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972a:	d050      	beq.n	80097ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800972c:	f7fa fed0 	bl	80044d0 <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	429a      	cmp	r2, r3
 800973a:	d902      	bls.n	8009742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d13d      	bne.n	80097be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800975a:	d111      	bne.n	8009780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009764:	d004      	beq.n	8009770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800976e:	d107      	bne.n	8009780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800977e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009788:	d10f      	bne.n	80097aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e017      	b.n	80097ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d101      	bne.n	80097c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689a      	ldr	r2, [r3, #8]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4013      	ands	r3, r2
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	429a      	cmp	r2, r3
 80097dc:	bf0c      	ite	eq
 80097de:	2301      	moveq	r3, #1
 80097e0:	2300      	movne	r3, #0
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d19b      	bne.n	8009724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3720      	adds	r7, #32
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000084 	.word	0x20000084

080097fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009810:	d111      	bne.n	8009836 <SPI_EndRxTransaction+0x3a>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800981a:	d004      	beq.n	8009826 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009824:	d107      	bne.n	8009836 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009834:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800983e:	d12a      	bne.n	8009896 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009848:	d012      	beq.n	8009870 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2200      	movs	r2, #0
 8009852:	2180      	movs	r1, #128	@ 0x80
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff ff49 	bl	80096ec <SPI_WaitFlagStateUntilTimeout>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d02d      	beq.n	80098bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e026      	b.n	80098be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2200      	movs	r2, #0
 8009878:	2101      	movs	r1, #1
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff ff36 	bl	80096ec <SPI_WaitFlagStateUntilTimeout>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d01a      	beq.n	80098bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988a:	f043 0220 	orr.w	r2, r3, #32
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e013      	b.n	80098be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2200      	movs	r2, #0
 800989e:	2101      	movs	r1, #1
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff ff23 	bl	80096ec <SPI_WaitFlagStateUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d007      	beq.n	80098bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b0:	f043 0220 	orr.w	r2, r3, #32
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e000      	b.n	80098be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2201      	movs	r2, #1
 80098dc:	2102      	movs	r1, #2
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7ff ff04 	bl	80096ec <SPI_WaitFlagStateUntilTimeout>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d007      	beq.n	80098fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ee:	f043 0220 	orr.w	r2, r3, #32
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e032      	b.n	8009960 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80098fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009968 <SPI_EndRxTxTransaction+0xa0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a1b      	ldr	r2, [pc, #108]	@ (800996c <SPI_EndRxTxTransaction+0xa4>)
 8009900:	fba2 2303 	umull	r2, r3, r2, r3
 8009904:	0d5b      	lsrs	r3, r3, #21
 8009906:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800990a:	fb02 f303 	mul.w	r3, r2, r3
 800990e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009918:	d112      	bne.n	8009940 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2200      	movs	r2, #0
 8009922:	2180      	movs	r1, #128	@ 0x80
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fee1 	bl	80096ec <SPI_WaitFlagStateUntilTimeout>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d016      	beq.n	800995e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009934:	f043 0220 	orr.w	r2, r3, #32
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e00f      	b.n	8009960 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	3b01      	subs	r3, #1
 800994a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009956:	2b80      	cmp	r3, #128	@ 0x80
 8009958:	d0f2      	beq.n	8009940 <SPI_EndRxTxTransaction+0x78>
 800995a:	e000      	b.n	800995e <SPI_EndRxTxTransaction+0x96>
        break;
 800995c:	bf00      	nop
  }

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20000084 	.word	0x20000084
 800996c:	165e9f81 	.word	0x165e9f81

08009970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e041      	b.n	8009a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7fa fcfe 	bl	8004398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f000 fa7e 	bl	8009eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d001      	beq.n	8009a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e04e      	b.n	8009ac6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a23      	ldr	r2, [pc, #140]	@ (8009ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d022      	beq.n	8009a90 <HAL_TIM_Base_Start_IT+0x80>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a52:	d01d      	beq.n	8009a90 <HAL_TIM_Base_Start_IT+0x80>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1f      	ldr	r2, [pc, #124]	@ (8009ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d018      	beq.n	8009a90 <HAL_TIM_Base_Start_IT+0x80>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a1e      	ldr	r2, [pc, #120]	@ (8009adc <HAL_TIM_Base_Start_IT+0xcc>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d013      	beq.n	8009a90 <HAL_TIM_Base_Start_IT+0x80>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00e      	beq.n	8009a90 <HAL_TIM_Base_Start_IT+0x80>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a1b      	ldr	r2, [pc, #108]	@ (8009ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d009      	beq.n	8009a90 <HAL_TIM_Base_Start_IT+0x80>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a19      	ldr	r2, [pc, #100]	@ (8009ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_TIM_Base_Start_IT+0x80>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a18      	ldr	r2, [pc, #96]	@ (8009aec <HAL_TIM_Base_Start_IT+0xdc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d111      	bne.n	8009ab4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b06      	cmp	r3, #6
 8009aa0:	d010      	beq.n	8009ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f042 0201 	orr.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab2:	e007      	b.n	8009ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0201 	orr.w	r2, r2, #1
 8009ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	40010000 	.word	0x40010000
 8009ad8:	40000400 	.word	0x40000400
 8009adc:	40000800 	.word	0x40000800
 8009ae0:	40000c00 	.word	0x40000c00
 8009ae4:	40010400 	.word	0x40010400
 8009ae8:	40014000 	.word	0x40014000
 8009aec:	40001800 	.word	0x40001800

08009af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d020      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 0302 	and.w	r3, r3, #2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01b      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f06f 0202 	mvn.w	r2, #2
 8009b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	f003 0303 	and.w	r3, r3, #3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f999 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009b40:	e005      	b.n	8009b4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f98b 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f99c 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d020      	beq.n	8009ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01b      	beq.n	8009ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0204 	mvn.w	r2, #4
 8009b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f973 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009b8c:	e005      	b.n	8009b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f965 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f976 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d020      	beq.n	8009bec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01b      	beq.n	8009bec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f06f 0208 	mvn.w	r2, #8
 8009bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f94d 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009bd8:	e005      	b.n	8009be6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f93f 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f950 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f003 0310 	and.w	r3, r3, #16
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d020      	beq.n	8009c38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d01b      	beq.n	8009c38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f06f 0210 	mvn.w	r2, #16
 8009c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2208      	movs	r2, #8
 8009c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f927 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009c24:	e005      	b.n	8009c32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f919 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f92a 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00c      	beq.n	8009c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d007      	beq.n	8009c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f06f 0201 	mvn.w	r2, #1
 8009c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7fa f8e2 	bl	8003e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00c      	beq.n	8009c80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d007      	beq.n	8009c80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fae4 	bl	800a248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00c      	beq.n	8009ca4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f8fb 	bl	8009e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00c      	beq.n	8009cc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d007      	beq.n	8009cc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0220 	mvn.w	r2, #32
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fab6 	bl	800a234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cc8:	bf00      	nop
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d101      	bne.n	8009cec <HAL_TIM_ConfigClockSource+0x1c>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	e0b4      	b.n	8009e56 <HAL_TIM_ConfigClockSource+0x186>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d24:	d03e      	beq.n	8009da4 <HAL_TIM_ConfigClockSource+0xd4>
 8009d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d2a:	f200 8087 	bhi.w	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d32:	f000 8086 	beq.w	8009e42 <HAL_TIM_ConfigClockSource+0x172>
 8009d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d3a:	d87f      	bhi.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d3c:	2b70      	cmp	r3, #112	@ 0x70
 8009d3e:	d01a      	beq.n	8009d76 <HAL_TIM_ConfigClockSource+0xa6>
 8009d40:	2b70      	cmp	r3, #112	@ 0x70
 8009d42:	d87b      	bhi.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d44:	2b60      	cmp	r3, #96	@ 0x60
 8009d46:	d050      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x11a>
 8009d48:	2b60      	cmp	r3, #96	@ 0x60
 8009d4a:	d877      	bhi.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d4c:	2b50      	cmp	r3, #80	@ 0x50
 8009d4e:	d03c      	beq.n	8009dca <HAL_TIM_ConfigClockSource+0xfa>
 8009d50:	2b50      	cmp	r3, #80	@ 0x50
 8009d52:	d873      	bhi.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d54:	2b40      	cmp	r3, #64	@ 0x40
 8009d56:	d058      	beq.n	8009e0a <HAL_TIM_ConfigClockSource+0x13a>
 8009d58:	2b40      	cmp	r3, #64	@ 0x40
 8009d5a:	d86f      	bhi.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d5c:	2b30      	cmp	r3, #48	@ 0x30
 8009d5e:	d064      	beq.n	8009e2a <HAL_TIM_ConfigClockSource+0x15a>
 8009d60:	2b30      	cmp	r3, #48	@ 0x30
 8009d62:	d86b      	bhi.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	d060      	beq.n	8009e2a <HAL_TIM_ConfigClockSource+0x15a>
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	d867      	bhi.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d05c      	beq.n	8009e2a <HAL_TIM_ConfigClockSource+0x15a>
 8009d70:	2b10      	cmp	r3, #16
 8009d72:	d05a      	beq.n	8009e2a <HAL_TIM_ConfigClockSource+0x15a>
 8009d74:	e062      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d86:	f000 f9b9 	bl	800a0fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	609a      	str	r2, [r3, #8]
      break;
 8009da2:	e04f      	b.n	8009e44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009db4:	f000 f9a2 	bl	800a0fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dc6:	609a      	str	r2, [r3, #8]
      break;
 8009dc8:	e03c      	b.n	8009e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f000 f916 	bl	800a008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2150      	movs	r1, #80	@ 0x50
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 f96f 	bl	800a0c6 <TIM_ITRx_SetConfig>
      break;
 8009de8:	e02c      	b.n	8009e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009df6:	461a      	mov	r2, r3
 8009df8:	f000 f935 	bl	800a066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2160      	movs	r1, #96	@ 0x60
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 f95f 	bl	800a0c6 <TIM_ITRx_SetConfig>
      break;
 8009e08:	e01c      	b.n	8009e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e16:	461a      	mov	r2, r3
 8009e18:	f000 f8f6 	bl	800a008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2140      	movs	r1, #64	@ 0x40
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 f94f 	bl	800a0c6 <TIM_ITRx_SetConfig>
      break;
 8009e28:	e00c      	b.n	8009e44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f000 f946 	bl	800a0c6 <TIM_ITRx_SetConfig>
      break;
 8009e3a:	e003      	b.n	8009e44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e40:	e000      	b.n	8009e44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e7a:	bf00      	nop
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e8e:	bf00      	nop
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a46      	ldr	r2, [pc, #280]	@ (8009fdc <TIM_Base_SetConfig+0x12c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d013      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ece:	d00f      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a43      	ldr	r2, [pc, #268]	@ (8009fe0 <TIM_Base_SetConfig+0x130>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00b      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a42      	ldr	r2, [pc, #264]	@ (8009fe4 <TIM_Base_SetConfig+0x134>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a41      	ldr	r2, [pc, #260]	@ (8009fe8 <TIM_Base_SetConfig+0x138>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a40      	ldr	r2, [pc, #256]	@ (8009fec <TIM_Base_SetConfig+0x13c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d108      	bne.n	8009f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a35      	ldr	r2, [pc, #212]	@ (8009fdc <TIM_Base_SetConfig+0x12c>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d02b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f10:	d027      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a32      	ldr	r2, [pc, #200]	@ (8009fe0 <TIM_Base_SetConfig+0x130>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d023      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a31      	ldr	r2, [pc, #196]	@ (8009fe4 <TIM_Base_SetConfig+0x134>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01f      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a30      	ldr	r2, [pc, #192]	@ (8009fe8 <TIM_Base_SetConfig+0x138>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d01b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8009fec <TIM_Base_SetConfig+0x13c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d017      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a2e      	ldr	r2, [pc, #184]	@ (8009ff0 <TIM_Base_SetConfig+0x140>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d013      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8009ff4 <TIM_Base_SetConfig+0x144>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00f      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a2c      	ldr	r2, [pc, #176]	@ (8009ff8 <TIM_Base_SetConfig+0x148>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009ffc <TIM_Base_SetConfig+0x14c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d007      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a2a      	ldr	r2, [pc, #168]	@ (800a000 <TIM_Base_SetConfig+0x150>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d003      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a29      	ldr	r2, [pc, #164]	@ (800a004 <TIM_Base_SetConfig+0x154>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d108      	bne.n	8009f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a10      	ldr	r2, [pc, #64]	@ (8009fdc <TIM_Base_SetConfig+0x12c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d003      	beq.n	8009fa8 <TIM_Base_SetConfig+0xf8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a12      	ldr	r2, [pc, #72]	@ (8009fec <TIM_Base_SetConfig+0x13c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d103      	bne.n	8009fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d105      	bne.n	8009fce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f023 0201 	bic.w	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	611a      	str	r2, [r3, #16]
  }
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	40010000 	.word	0x40010000
 8009fe0:	40000400 	.word	0x40000400
 8009fe4:	40000800 	.word	0x40000800
 8009fe8:	40000c00 	.word	0x40000c00
 8009fec:	40010400 	.word	0x40010400
 8009ff0:	40014000 	.word	0x40014000
 8009ff4:	40014400 	.word	0x40014400
 8009ff8:	40014800 	.word	0x40014800
 8009ffc:	40001800 	.word	0x40001800
 800a000:	40001c00 	.word	0x40001c00
 800a004:	40002000 	.word	0x40002000

0800a008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	f023 0201 	bic.w	r2, r3, #1
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f023 030a 	bic.w	r3, r3, #10
 800a044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	621a      	str	r2, [r3, #32]
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a066:	b480      	push	{r7}
 800a068:	b087      	sub	sp, #28
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	f023 0210 	bic.w	r2, r3, #16
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	031b      	lsls	r3, r3, #12
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4313      	orrs	r3, r2
 800a09a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	621a      	str	r2, [r3, #32]
}
 800a0ba:	bf00      	nop
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	f043 0307 	orr.w	r3, r3, #7
 800a0e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	609a      	str	r2, [r3, #8]
}
 800a0f0:	bf00      	nop
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	021a      	lsls	r2, r3, #8
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	431a      	orrs	r2, r3
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	4313      	orrs	r3, r2
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	4313      	orrs	r3, r2
 800a128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	609a      	str	r2, [r3, #8]
}
 800a130:	bf00      	nop
 800a132:	371c      	adds	r7, #28
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d101      	bne.n	800a154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a150:	2302      	movs	r3, #2
 800a152:	e05a      	b.n	800a20a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2202      	movs	r2, #2
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a17a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a21      	ldr	r2, [pc, #132]	@ (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d022      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a0:	d01d      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a1d      	ldr	r2, [pc, #116]	@ (800a21c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d018      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a1b      	ldr	r2, [pc, #108]	@ (800a220 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d013      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a224 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d00e      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a18      	ldr	r2, [pc, #96]	@ (800a228 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d009      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a17      	ldr	r2, [pc, #92]	@ (800a22c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d004      	beq.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a15      	ldr	r2, [pc, #84]	@ (800a230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d10c      	bne.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	40010000 	.word	0x40010000
 800a21c:	40000400 	.word	0x40000400
 800a220:	40000800 	.word	0x40000800
 800a224:	40000c00 	.word	0x40000c00
 800a228:	40010400 	.word	0x40010400
 800a22c:	40014000 	.word	0x40014000
 800a230:	40001800 	.word	0x40001800

0800a234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d123      	bne.n	800a2b6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a276:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	6851      	ldr	r1, [r2, #4]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	6892      	ldr	r2, [r2, #8]
 800a282:	4311      	orrs	r1, r2
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	68d2      	ldr	r2, [r2, #12]
 800a288:	4311      	orrs	r1, r2
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	6912      	ldr	r2, [r2, #16]
 800a28e:	4311      	orrs	r1, r2
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	6952      	ldr	r2, [r2, #20]
 800a294:	4311      	orrs	r1, r2
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	6992      	ldr	r2, [r2, #24]
 800a29a:	4311      	orrs	r1, r2
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	69d2      	ldr	r2, [r2, #28]
 800a2a0:	4311      	orrs	r1, r2
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	6a12      	ldr	r2, [r2, #32]
 800a2a6:	4311      	orrs	r1, r2
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	e028      	b.n	800a308 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	69d9      	ldr	r1, [r3, #28]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	4319      	orrs	r1, r3
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a2dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	6851      	ldr	r1, [r2, #4]
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	6892      	ldr	r2, [r2, #8]
 800a2e8:	4311      	orrs	r1, r2
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	68d2      	ldr	r2, [r2, #12]
 800a2ee:	4311      	orrs	r1, r2
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	6912      	ldr	r2, [r2, #16]
 800a2f4:	4311      	orrs	r1, r2
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	6952      	ldr	r2, [r2, #20]
 800a2fa:	4311      	orrs	r1, r2
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	6992      	ldr	r2, [r2, #24]
 800a300:	430a      	orrs	r2, r1
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a316:	b480      	push	{r7}
 800a318:	b085      	sub	sp, #20
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	60f8      	str	r0, [r7, #12]
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d128      	bne.n	800a37a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	1e59      	subs	r1, r3, #1
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	4319      	orrs	r1, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	3b01      	subs	r3, #1
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	4319      	orrs	r1, r3
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	3b01      	subs	r3, #1
 800a350:	031b      	lsls	r3, r3, #12
 800a352:	4319      	orrs	r1, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	3b01      	subs	r3, #1
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	4319      	orrs	r1, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	3b01      	subs	r3, #1
 800a364:	051b      	lsls	r3, r3, #20
 800a366:	4319      	orrs	r1, r3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	061b      	lsls	r3, r3, #24
 800a370:	430b      	orrs	r3, r1
 800a372:	431a      	orrs	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	609a      	str	r2, [r3, #8]
 800a378:	e02f      	b.n	800a3da <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a382:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	68d2      	ldr	r2, [r2, #12]
 800a38a:	3a01      	subs	r2, #1
 800a38c:	0311      	lsls	r1, r2, #12
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	6952      	ldr	r2, [r2, #20]
 800a392:	3a01      	subs	r2, #1
 800a394:	0512      	lsls	r2, r2, #20
 800a396:	430a      	orrs	r2, r1
 800a398:	431a      	orrs	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	1e59      	subs	r1, r3, #1
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	4319      	orrs	r1, r3
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	4319      	orrs	r1, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	041b      	lsls	r3, r3, #16
 800a3c8:	4319      	orrs	r1, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	061b      	lsls	r3, r3, #24
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	0d9b      	lsrs	r3, r3, #22
 800a3fe:	059b      	lsls	r3, r3, #22
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	6811      	ldr	r1, [r2, #0]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	6852      	ldr	r2, [r2, #4]
 800a408:	4311      	orrs	r1, r2
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	6892      	ldr	r2, [r2, #8]
 800a40e:	3a01      	subs	r2, #1
 800a410:	0152      	lsls	r2, r2, #5
 800a412:	4311      	orrs	r1, r2
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	68d2      	ldr	r2, [r2, #12]
 800a418:	0252      	lsls	r2, r2, #9
 800a41a:	430a      	orrs	r2, r1
 800a41c:	431a      	orrs	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a422:	f7fa f855 	bl	80044d0 <HAL_GetTick>
 800a426:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a428:	e010      	b.n	800a44c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a430:	d00c      	beq.n	800a44c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <FMC_SDRAM_SendCommand+0x60>
 800a438:	f7fa f84a 	bl	80044d0 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	429a      	cmp	r2, r3
 800a446:	d201      	bcs.n	800a44c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e006      	b.n	800a45a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b20      	cmp	r3, #32
 800a456:	d0e8      	beq.n	800a42a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a474:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	0052      	lsls	r2, r2, #1
 800a47c:	431a      	orrs	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <siprintf>:
 800a490:	b40e      	push	{r1, r2, r3}
 800a492:	b500      	push	{lr}
 800a494:	b09c      	sub	sp, #112	@ 0x70
 800a496:	ab1d      	add	r3, sp, #116	@ 0x74
 800a498:	9002      	str	r0, [sp, #8]
 800a49a:	9006      	str	r0, [sp, #24]
 800a49c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a4a0:	4809      	ldr	r0, [pc, #36]	@ (800a4c8 <siprintf+0x38>)
 800a4a2:	9107      	str	r1, [sp, #28]
 800a4a4:	9104      	str	r1, [sp, #16]
 800a4a6:	4909      	ldr	r1, [pc, #36]	@ (800a4cc <siprintf+0x3c>)
 800a4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ac:	9105      	str	r1, [sp, #20]
 800a4ae:	6800      	ldr	r0, [r0, #0]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	a902      	add	r1, sp, #8
 800a4b4:	f000 f994 	bl	800a7e0 <_svfiprintf_r>
 800a4b8:	9b02      	ldr	r3, [sp, #8]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	b01c      	add	sp, #112	@ 0x70
 800a4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c4:	b003      	add	sp, #12
 800a4c6:	4770      	bx	lr
 800a4c8:	20000090 	.word	0x20000090
 800a4cc:	ffff0208 	.word	0xffff0208

0800a4d0 <memset>:
 800a4d0:	4402      	add	r2, r0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d100      	bne.n	800a4da <memset+0xa>
 800a4d8:	4770      	bx	lr
 800a4da:	f803 1b01 	strb.w	r1, [r3], #1
 800a4de:	e7f9      	b.n	800a4d4 <memset+0x4>

0800a4e0 <__errno>:
 800a4e0:	4b01      	ldr	r3, [pc, #4]	@ (800a4e8 <__errno+0x8>)
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	20000090 	.word	0x20000090

0800a4ec <__libc_init_array>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a524 <__libc_init_array+0x38>)
 800a4f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a528 <__libc_init_array+0x3c>)
 800a4f2:	1b64      	subs	r4, r4, r5
 800a4f4:	10a4      	asrs	r4, r4, #2
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	42a6      	cmp	r6, r4
 800a4fa:	d109      	bne.n	800a510 <__libc_init_array+0x24>
 800a4fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a52c <__libc_init_array+0x40>)
 800a4fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a530 <__libc_init_array+0x44>)
 800a500:	f001 f9a0 	bl	800b844 <_init>
 800a504:	1b64      	subs	r4, r4, r5
 800a506:	10a4      	asrs	r4, r4, #2
 800a508:	2600      	movs	r6, #0
 800a50a:	42a6      	cmp	r6, r4
 800a50c:	d105      	bne.n	800a51a <__libc_init_array+0x2e>
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	f855 3b04 	ldr.w	r3, [r5], #4
 800a514:	4798      	blx	r3
 800a516:	3601      	adds	r6, #1
 800a518:	e7ee      	b.n	800a4f8 <__libc_init_array+0xc>
 800a51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51e:	4798      	blx	r3
 800a520:	3601      	adds	r6, #1
 800a522:	e7f2      	b.n	800a50a <__libc_init_array+0x1e>
 800a524:	0800e348 	.word	0x0800e348
 800a528:	0800e348 	.word	0x0800e348
 800a52c:	0800e348 	.word	0x0800e348
 800a530:	0800e34c 	.word	0x0800e34c

0800a534 <__retarget_lock_acquire_recursive>:
 800a534:	4770      	bx	lr

0800a536 <__retarget_lock_release_recursive>:
 800a536:	4770      	bx	lr

0800a538 <_free_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4605      	mov	r5, r0
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d041      	beq.n	800a5c4 <_free_r+0x8c>
 800a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a544:	1f0c      	subs	r4, r1, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	18e4      	addlt	r4, r4, r3
 800a54c:	f000 f8e0 	bl	800a710 <__malloc_lock>
 800a550:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c8 <_free_r+0x90>)
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	b933      	cbnz	r3, 800a564 <_free_r+0x2c>
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	4628      	mov	r0, r5
 800a55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a560:	f000 b8dc 	b.w	800a71c <__malloc_unlock>
 800a564:	42a3      	cmp	r3, r4
 800a566:	d908      	bls.n	800a57a <_free_r+0x42>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	1821      	adds	r1, r4, r0
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1809      	addeq	r1, r1, r0
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	e7ed      	b.n	800a556 <_free_r+0x1e>
 800a57a:	461a      	mov	r2, r3
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	b10b      	cbz	r3, 800a584 <_free_r+0x4c>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d9fa      	bls.n	800a57a <_free_r+0x42>
 800a584:	6811      	ldr	r1, [r2, #0]
 800a586:	1850      	adds	r0, r2, r1
 800a588:	42a0      	cmp	r0, r4
 800a58a:	d10b      	bne.n	800a5a4 <_free_r+0x6c>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	4401      	add	r1, r0
 800a590:	1850      	adds	r0, r2, r1
 800a592:	4283      	cmp	r3, r0
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	d1e0      	bne.n	800a55a <_free_r+0x22>
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	6053      	str	r3, [r2, #4]
 800a59e:	4408      	add	r0, r1
 800a5a0:	6010      	str	r0, [r2, #0]
 800a5a2:	e7da      	b.n	800a55a <_free_r+0x22>
 800a5a4:	d902      	bls.n	800a5ac <_free_r+0x74>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	e7d6      	b.n	800a55a <_free_r+0x22>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf04      	itt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	bf04      	itt	eq
 800a5bc:	1809      	addeq	r1, r1, r0
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	6054      	str	r4, [r2, #4]
 800a5c2:	e7ca      	b.n	800a55a <_free_r+0x22>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000c10 	.word	0x20000c10

0800a5cc <sbrk_aligned>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	4e0f      	ldr	r6, [pc, #60]	@ (800a60c <sbrk_aligned+0x40>)
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	6831      	ldr	r1, [r6, #0]
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	b911      	cbnz	r1, 800a5de <sbrk_aligned+0x12>
 800a5d8:	f000 fba6 	bl	800ad28 <_sbrk_r>
 800a5dc:	6030      	str	r0, [r6, #0]
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 fba1 	bl	800ad28 <_sbrk_r>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	d103      	bne.n	800a5f2 <sbrk_aligned+0x26>
 800a5ea:	f04f 34ff 	mov.w	r4, #4294967295
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	bd70      	pop	{r4, r5, r6, pc}
 800a5f2:	1cc4      	adds	r4, r0, #3
 800a5f4:	f024 0403 	bic.w	r4, r4, #3
 800a5f8:	42a0      	cmp	r0, r4
 800a5fa:	d0f8      	beq.n	800a5ee <sbrk_aligned+0x22>
 800a5fc:	1a21      	subs	r1, r4, r0
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 fb92 	bl	800ad28 <_sbrk_r>
 800a604:	3001      	adds	r0, #1
 800a606:	d1f2      	bne.n	800a5ee <sbrk_aligned+0x22>
 800a608:	e7ef      	b.n	800a5ea <sbrk_aligned+0x1e>
 800a60a:	bf00      	nop
 800a60c:	20000c0c 	.word	0x20000c0c

0800a610 <_malloc_r>:
 800a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a614:	1ccd      	adds	r5, r1, #3
 800a616:	f025 0503 	bic.w	r5, r5, #3
 800a61a:	3508      	adds	r5, #8
 800a61c:	2d0c      	cmp	r5, #12
 800a61e:	bf38      	it	cc
 800a620:	250c      	movcc	r5, #12
 800a622:	2d00      	cmp	r5, #0
 800a624:	4606      	mov	r6, r0
 800a626:	db01      	blt.n	800a62c <_malloc_r+0x1c>
 800a628:	42a9      	cmp	r1, r5
 800a62a:	d904      	bls.n	800a636 <_malloc_r+0x26>
 800a62c:	230c      	movs	r3, #12
 800a62e:	6033      	str	r3, [r6, #0]
 800a630:	2000      	movs	r0, #0
 800a632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a70c <_malloc_r+0xfc>
 800a63a:	f000 f869 	bl	800a710 <__malloc_lock>
 800a63e:	f8d8 3000 	ldr.w	r3, [r8]
 800a642:	461c      	mov	r4, r3
 800a644:	bb44      	cbnz	r4, 800a698 <_malloc_r+0x88>
 800a646:	4629      	mov	r1, r5
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff ffbf 	bl	800a5cc <sbrk_aligned>
 800a64e:	1c43      	adds	r3, r0, #1
 800a650:	4604      	mov	r4, r0
 800a652:	d158      	bne.n	800a706 <_malloc_r+0xf6>
 800a654:	f8d8 4000 	ldr.w	r4, [r8]
 800a658:	4627      	mov	r7, r4
 800a65a:	2f00      	cmp	r7, #0
 800a65c:	d143      	bne.n	800a6e6 <_malloc_r+0xd6>
 800a65e:	2c00      	cmp	r4, #0
 800a660:	d04b      	beq.n	800a6fa <_malloc_r+0xea>
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	4639      	mov	r1, r7
 800a666:	4630      	mov	r0, r6
 800a668:	eb04 0903 	add.w	r9, r4, r3
 800a66c:	f000 fb5c 	bl	800ad28 <_sbrk_r>
 800a670:	4581      	cmp	r9, r0
 800a672:	d142      	bne.n	800a6fa <_malloc_r+0xea>
 800a674:	6821      	ldr	r1, [r4, #0]
 800a676:	1a6d      	subs	r5, r5, r1
 800a678:	4629      	mov	r1, r5
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff ffa6 	bl	800a5cc <sbrk_aligned>
 800a680:	3001      	adds	r0, #1
 800a682:	d03a      	beq.n	800a6fa <_malloc_r+0xea>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	442b      	add	r3, r5
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	f8d8 3000 	ldr.w	r3, [r8]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	bb62      	cbnz	r2, 800a6ec <_malloc_r+0xdc>
 800a692:	f8c8 7000 	str.w	r7, [r8]
 800a696:	e00f      	b.n	800a6b8 <_malloc_r+0xa8>
 800a698:	6822      	ldr	r2, [r4, #0]
 800a69a:	1b52      	subs	r2, r2, r5
 800a69c:	d420      	bmi.n	800a6e0 <_malloc_r+0xd0>
 800a69e:	2a0b      	cmp	r2, #11
 800a6a0:	d917      	bls.n	800a6d2 <_malloc_r+0xc2>
 800a6a2:	1961      	adds	r1, r4, r5
 800a6a4:	42a3      	cmp	r3, r4
 800a6a6:	6025      	str	r5, [r4, #0]
 800a6a8:	bf18      	it	ne
 800a6aa:	6059      	strne	r1, [r3, #4]
 800a6ac:	6863      	ldr	r3, [r4, #4]
 800a6ae:	bf08      	it	eq
 800a6b0:	f8c8 1000 	streq.w	r1, [r8]
 800a6b4:	5162      	str	r2, [r4, r5]
 800a6b6:	604b      	str	r3, [r1, #4]
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f000 f82f 	bl	800a71c <__malloc_unlock>
 800a6be:	f104 000b 	add.w	r0, r4, #11
 800a6c2:	1d23      	adds	r3, r4, #4
 800a6c4:	f020 0007 	bic.w	r0, r0, #7
 800a6c8:	1ac2      	subs	r2, r0, r3
 800a6ca:	bf1c      	itt	ne
 800a6cc:	1a1b      	subne	r3, r3, r0
 800a6ce:	50a3      	strne	r3, [r4, r2]
 800a6d0:	e7af      	b.n	800a632 <_malloc_r+0x22>
 800a6d2:	6862      	ldr	r2, [r4, #4]
 800a6d4:	42a3      	cmp	r3, r4
 800a6d6:	bf0c      	ite	eq
 800a6d8:	f8c8 2000 	streq.w	r2, [r8]
 800a6dc:	605a      	strne	r2, [r3, #4]
 800a6de:	e7eb      	b.n	800a6b8 <_malloc_r+0xa8>
 800a6e0:	4623      	mov	r3, r4
 800a6e2:	6864      	ldr	r4, [r4, #4]
 800a6e4:	e7ae      	b.n	800a644 <_malloc_r+0x34>
 800a6e6:	463c      	mov	r4, r7
 800a6e8:	687f      	ldr	r7, [r7, #4]
 800a6ea:	e7b6      	b.n	800a65a <_malloc_r+0x4a>
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	d1fb      	bne.n	800a6ec <_malloc_r+0xdc>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	6053      	str	r3, [r2, #4]
 800a6f8:	e7de      	b.n	800a6b8 <_malloc_r+0xa8>
 800a6fa:	230c      	movs	r3, #12
 800a6fc:	6033      	str	r3, [r6, #0]
 800a6fe:	4630      	mov	r0, r6
 800a700:	f000 f80c 	bl	800a71c <__malloc_unlock>
 800a704:	e794      	b.n	800a630 <_malloc_r+0x20>
 800a706:	6005      	str	r5, [r0, #0]
 800a708:	e7d6      	b.n	800a6b8 <_malloc_r+0xa8>
 800a70a:	bf00      	nop
 800a70c:	20000c10 	.word	0x20000c10

0800a710 <__malloc_lock>:
 800a710:	4801      	ldr	r0, [pc, #4]	@ (800a718 <__malloc_lock+0x8>)
 800a712:	f7ff bf0f 	b.w	800a534 <__retarget_lock_acquire_recursive>
 800a716:	bf00      	nop
 800a718:	20000c08 	.word	0x20000c08

0800a71c <__malloc_unlock>:
 800a71c:	4801      	ldr	r0, [pc, #4]	@ (800a724 <__malloc_unlock+0x8>)
 800a71e:	f7ff bf0a 	b.w	800a536 <__retarget_lock_release_recursive>
 800a722:	bf00      	nop
 800a724:	20000c08 	.word	0x20000c08

0800a728 <__ssputs_r>:
 800a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a72c:	688e      	ldr	r6, [r1, #8]
 800a72e:	461f      	mov	r7, r3
 800a730:	42be      	cmp	r6, r7
 800a732:	680b      	ldr	r3, [r1, #0]
 800a734:	4682      	mov	sl, r0
 800a736:	460c      	mov	r4, r1
 800a738:	4690      	mov	r8, r2
 800a73a:	d82d      	bhi.n	800a798 <__ssputs_r+0x70>
 800a73c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a740:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a744:	d026      	beq.n	800a794 <__ssputs_r+0x6c>
 800a746:	6965      	ldr	r5, [r4, #20]
 800a748:	6909      	ldr	r1, [r1, #16]
 800a74a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a74e:	eba3 0901 	sub.w	r9, r3, r1
 800a752:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a756:	1c7b      	adds	r3, r7, #1
 800a758:	444b      	add	r3, r9
 800a75a:	106d      	asrs	r5, r5, #1
 800a75c:	429d      	cmp	r5, r3
 800a75e:	bf38      	it	cc
 800a760:	461d      	movcc	r5, r3
 800a762:	0553      	lsls	r3, r2, #21
 800a764:	d527      	bpl.n	800a7b6 <__ssputs_r+0x8e>
 800a766:	4629      	mov	r1, r5
 800a768:	f7ff ff52 	bl	800a610 <_malloc_r>
 800a76c:	4606      	mov	r6, r0
 800a76e:	b360      	cbz	r0, 800a7ca <__ssputs_r+0xa2>
 800a770:	6921      	ldr	r1, [r4, #16]
 800a772:	464a      	mov	r2, r9
 800a774:	f000 fae8 	bl	800ad48 <memcpy>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a782:	81a3      	strh	r3, [r4, #12]
 800a784:	6126      	str	r6, [r4, #16]
 800a786:	6165      	str	r5, [r4, #20]
 800a788:	444e      	add	r6, r9
 800a78a:	eba5 0509 	sub.w	r5, r5, r9
 800a78e:	6026      	str	r6, [r4, #0]
 800a790:	60a5      	str	r5, [r4, #8]
 800a792:	463e      	mov	r6, r7
 800a794:	42be      	cmp	r6, r7
 800a796:	d900      	bls.n	800a79a <__ssputs_r+0x72>
 800a798:	463e      	mov	r6, r7
 800a79a:	6820      	ldr	r0, [r4, #0]
 800a79c:	4632      	mov	r2, r6
 800a79e:	4641      	mov	r1, r8
 800a7a0:	f000 faa8 	bl	800acf4 <memmove>
 800a7a4:	68a3      	ldr	r3, [r4, #8]
 800a7a6:	1b9b      	subs	r3, r3, r6
 800a7a8:	60a3      	str	r3, [r4, #8]
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	4433      	add	r3, r6
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	f000 fad4 	bl	800ad64 <_realloc_r>
 800a7bc:	4606      	mov	r6, r0
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d1e0      	bne.n	800a784 <__ssputs_r+0x5c>
 800a7c2:	6921      	ldr	r1, [r4, #16]
 800a7c4:	4650      	mov	r0, sl
 800a7c6:	f7ff feb7 	bl	800a538 <_free_r>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	f8ca 3000 	str.w	r3, [sl]
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	e7e9      	b.n	800a7b2 <__ssputs_r+0x8a>
	...

0800a7e0 <_svfiprintf_r>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	4698      	mov	r8, r3
 800a7e6:	898b      	ldrh	r3, [r1, #12]
 800a7e8:	061b      	lsls	r3, r3, #24
 800a7ea:	b09d      	sub	sp, #116	@ 0x74
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	4614      	mov	r4, r2
 800a7f2:	d510      	bpl.n	800a816 <_svfiprintf_r+0x36>
 800a7f4:	690b      	ldr	r3, [r1, #16]
 800a7f6:	b973      	cbnz	r3, 800a816 <_svfiprintf_r+0x36>
 800a7f8:	2140      	movs	r1, #64	@ 0x40
 800a7fa:	f7ff ff09 	bl	800a610 <_malloc_r>
 800a7fe:	6028      	str	r0, [r5, #0]
 800a800:	6128      	str	r0, [r5, #16]
 800a802:	b930      	cbnz	r0, 800a812 <_svfiprintf_r+0x32>
 800a804:	230c      	movs	r3, #12
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	b01d      	add	sp, #116	@ 0x74
 800a80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a812:	2340      	movs	r3, #64	@ 0x40
 800a814:	616b      	str	r3, [r5, #20]
 800a816:	2300      	movs	r3, #0
 800a818:	9309      	str	r3, [sp, #36]	@ 0x24
 800a81a:	2320      	movs	r3, #32
 800a81c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a820:	f8cd 800c 	str.w	r8, [sp, #12]
 800a824:	2330      	movs	r3, #48	@ 0x30
 800a826:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a9c4 <_svfiprintf_r+0x1e4>
 800a82a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a82e:	f04f 0901 	mov.w	r9, #1
 800a832:	4623      	mov	r3, r4
 800a834:	469a      	mov	sl, r3
 800a836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a83a:	b10a      	cbz	r2, 800a840 <_svfiprintf_r+0x60>
 800a83c:	2a25      	cmp	r2, #37	@ 0x25
 800a83e:	d1f9      	bne.n	800a834 <_svfiprintf_r+0x54>
 800a840:	ebba 0b04 	subs.w	fp, sl, r4
 800a844:	d00b      	beq.n	800a85e <_svfiprintf_r+0x7e>
 800a846:	465b      	mov	r3, fp
 800a848:	4622      	mov	r2, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7ff ff6b 	bl	800a728 <__ssputs_r>
 800a852:	3001      	adds	r0, #1
 800a854:	f000 80a7 	beq.w	800a9a6 <_svfiprintf_r+0x1c6>
 800a858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a85a:	445a      	add	r2, fp
 800a85c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a85e:	f89a 3000 	ldrb.w	r3, [sl]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 809f 	beq.w	800a9a6 <_svfiprintf_r+0x1c6>
 800a868:	2300      	movs	r3, #0
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295
 800a86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a872:	f10a 0a01 	add.w	sl, sl, #1
 800a876:	9304      	str	r3, [sp, #16]
 800a878:	9307      	str	r3, [sp, #28]
 800a87a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a87e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a880:	4654      	mov	r4, sl
 800a882:	2205      	movs	r2, #5
 800a884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a888:	484e      	ldr	r0, [pc, #312]	@ (800a9c4 <_svfiprintf_r+0x1e4>)
 800a88a:	f7f5 fcb1 	bl	80001f0 <memchr>
 800a88e:	9a04      	ldr	r2, [sp, #16]
 800a890:	b9d8      	cbnz	r0, 800a8ca <_svfiprintf_r+0xea>
 800a892:	06d0      	lsls	r0, r2, #27
 800a894:	bf44      	itt	mi
 800a896:	2320      	movmi	r3, #32
 800a898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a89c:	0711      	lsls	r1, r2, #28
 800a89e:	bf44      	itt	mi
 800a8a0:	232b      	movmi	r3, #43	@ 0x2b
 800a8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a8aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ac:	d015      	beq.n	800a8da <_svfiprintf_r+0xfa>
 800a8ae:	9a07      	ldr	r2, [sp, #28]
 800a8b0:	4654      	mov	r4, sl
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	f04f 0c0a 	mov.w	ip, #10
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8be:	3b30      	subs	r3, #48	@ 0x30
 800a8c0:	2b09      	cmp	r3, #9
 800a8c2:	d94b      	bls.n	800a95c <_svfiprintf_r+0x17c>
 800a8c4:	b1b0      	cbz	r0, 800a8f4 <_svfiprintf_r+0x114>
 800a8c6:	9207      	str	r2, [sp, #28]
 800a8c8:	e014      	b.n	800a8f4 <_svfiprintf_r+0x114>
 800a8ca:	eba0 0308 	sub.w	r3, r0, r8
 800a8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	9304      	str	r3, [sp, #16]
 800a8d6:	46a2      	mov	sl, r4
 800a8d8:	e7d2      	b.n	800a880 <_svfiprintf_r+0xa0>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	1d19      	adds	r1, r3, #4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	9103      	str	r1, [sp, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bfbb      	ittet	lt
 800a8e6:	425b      	neglt	r3, r3
 800a8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8ec:	9307      	strge	r3, [sp, #28]
 800a8ee:	9307      	strlt	r3, [sp, #28]
 800a8f0:	bfb8      	it	lt
 800a8f2:	9204      	strlt	r2, [sp, #16]
 800a8f4:	7823      	ldrb	r3, [r4, #0]
 800a8f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8f8:	d10a      	bne.n	800a910 <_svfiprintf_r+0x130>
 800a8fa:	7863      	ldrb	r3, [r4, #1]
 800a8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8fe:	d132      	bne.n	800a966 <_svfiprintf_r+0x186>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	1d1a      	adds	r2, r3, #4
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	9203      	str	r2, [sp, #12]
 800a908:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a90c:	3402      	adds	r4, #2
 800a90e:	9305      	str	r3, [sp, #20]
 800a910:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9d4 <_svfiprintf_r+0x1f4>
 800a914:	7821      	ldrb	r1, [r4, #0]
 800a916:	2203      	movs	r2, #3
 800a918:	4650      	mov	r0, sl
 800a91a:	f7f5 fc69 	bl	80001f0 <memchr>
 800a91e:	b138      	cbz	r0, 800a930 <_svfiprintf_r+0x150>
 800a920:	9b04      	ldr	r3, [sp, #16]
 800a922:	eba0 000a 	sub.w	r0, r0, sl
 800a926:	2240      	movs	r2, #64	@ 0x40
 800a928:	4082      	lsls	r2, r0
 800a92a:	4313      	orrs	r3, r2
 800a92c:	3401      	adds	r4, #1
 800a92e:	9304      	str	r3, [sp, #16]
 800a930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a934:	4824      	ldr	r0, [pc, #144]	@ (800a9c8 <_svfiprintf_r+0x1e8>)
 800a936:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a93a:	2206      	movs	r2, #6
 800a93c:	f7f5 fc58 	bl	80001f0 <memchr>
 800a940:	2800      	cmp	r0, #0
 800a942:	d036      	beq.n	800a9b2 <_svfiprintf_r+0x1d2>
 800a944:	4b21      	ldr	r3, [pc, #132]	@ (800a9cc <_svfiprintf_r+0x1ec>)
 800a946:	bb1b      	cbnz	r3, 800a990 <_svfiprintf_r+0x1b0>
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	3307      	adds	r3, #7
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	3308      	adds	r3, #8
 800a952:	9303      	str	r3, [sp, #12]
 800a954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a956:	4433      	add	r3, r6
 800a958:	9309      	str	r3, [sp, #36]	@ 0x24
 800a95a:	e76a      	b.n	800a832 <_svfiprintf_r+0x52>
 800a95c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a960:	460c      	mov	r4, r1
 800a962:	2001      	movs	r0, #1
 800a964:	e7a8      	b.n	800a8b8 <_svfiprintf_r+0xd8>
 800a966:	2300      	movs	r3, #0
 800a968:	3401      	adds	r4, #1
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	4619      	mov	r1, r3
 800a96e:	f04f 0c0a 	mov.w	ip, #10
 800a972:	4620      	mov	r0, r4
 800a974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a978:	3a30      	subs	r2, #48	@ 0x30
 800a97a:	2a09      	cmp	r2, #9
 800a97c:	d903      	bls.n	800a986 <_svfiprintf_r+0x1a6>
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0c6      	beq.n	800a910 <_svfiprintf_r+0x130>
 800a982:	9105      	str	r1, [sp, #20]
 800a984:	e7c4      	b.n	800a910 <_svfiprintf_r+0x130>
 800a986:	fb0c 2101 	mla	r1, ip, r1, r2
 800a98a:	4604      	mov	r4, r0
 800a98c:	2301      	movs	r3, #1
 800a98e:	e7f0      	b.n	800a972 <_svfiprintf_r+0x192>
 800a990:	ab03      	add	r3, sp, #12
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	462a      	mov	r2, r5
 800a996:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d0 <_svfiprintf_r+0x1f0>)
 800a998:	a904      	add	r1, sp, #16
 800a99a:	4638      	mov	r0, r7
 800a99c:	f3af 8000 	nop.w
 800a9a0:	1c42      	adds	r2, r0, #1
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	d1d6      	bne.n	800a954 <_svfiprintf_r+0x174>
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	065b      	lsls	r3, r3, #25
 800a9aa:	f53f af2d 	bmi.w	800a808 <_svfiprintf_r+0x28>
 800a9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9b0:	e72c      	b.n	800a80c <_svfiprintf_r+0x2c>
 800a9b2:	ab03      	add	r3, sp, #12
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4b05      	ldr	r3, [pc, #20]	@ (800a9d0 <_svfiprintf_r+0x1f0>)
 800a9ba:	a904      	add	r1, sp, #16
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f000 f879 	bl	800aab4 <_printf_i>
 800a9c2:	e7ed      	b.n	800a9a0 <_svfiprintf_r+0x1c0>
 800a9c4:	0800df3c 	.word	0x0800df3c
 800a9c8:	0800df46 	.word	0x0800df46
 800a9cc:	00000000 	.word	0x00000000
 800a9d0:	0800a729 	.word	0x0800a729
 800a9d4:	0800df42 	.word	0x0800df42

0800a9d8 <_printf_common>:
 800a9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	4616      	mov	r6, r2
 800a9de:	4698      	mov	r8, r3
 800a9e0:	688a      	ldr	r2, [r1, #8]
 800a9e2:	690b      	ldr	r3, [r1, #16]
 800a9e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	bfb8      	it	lt
 800a9ec:	4613      	movlt	r3, r2
 800a9ee:	6033      	str	r3, [r6, #0]
 800a9f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	b10a      	cbz	r2, 800a9fe <_printf_common+0x26>
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	0699      	lsls	r1, r3, #26
 800aa02:	bf42      	ittt	mi
 800aa04:	6833      	ldrmi	r3, [r6, #0]
 800aa06:	3302      	addmi	r3, #2
 800aa08:	6033      	strmi	r3, [r6, #0]
 800aa0a:	6825      	ldr	r5, [r4, #0]
 800aa0c:	f015 0506 	ands.w	r5, r5, #6
 800aa10:	d106      	bne.n	800aa20 <_printf_common+0x48>
 800aa12:	f104 0a19 	add.w	sl, r4, #25
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	6832      	ldr	r2, [r6, #0]
 800aa1a:	1a9b      	subs	r3, r3, r2
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dc26      	bgt.n	800aa6e <_printf_common+0x96>
 800aa20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	3b00      	subs	r3, #0
 800aa28:	bf18      	it	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	0692      	lsls	r2, r2, #26
 800aa2e:	d42b      	bmi.n	800aa88 <_printf_common+0xb0>
 800aa30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa34:	4641      	mov	r1, r8
 800aa36:	4638      	mov	r0, r7
 800aa38:	47c8      	blx	r9
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	d01e      	beq.n	800aa7c <_printf_common+0xa4>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	6922      	ldr	r2, [r4, #16]
 800aa42:	f003 0306 	and.w	r3, r3, #6
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	bf02      	ittt	eq
 800aa4a:	68e5      	ldreq	r5, [r4, #12]
 800aa4c:	6833      	ldreq	r3, [r6, #0]
 800aa4e:	1aed      	subeq	r5, r5, r3
 800aa50:	68a3      	ldr	r3, [r4, #8]
 800aa52:	bf0c      	ite	eq
 800aa54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa58:	2500      	movne	r5, #0
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	bfc4      	itt	gt
 800aa5e:	1a9b      	subgt	r3, r3, r2
 800aa60:	18ed      	addgt	r5, r5, r3
 800aa62:	2600      	movs	r6, #0
 800aa64:	341a      	adds	r4, #26
 800aa66:	42b5      	cmp	r5, r6
 800aa68:	d11a      	bne.n	800aaa0 <_printf_common+0xc8>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e008      	b.n	800aa80 <_printf_common+0xa8>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4652      	mov	r2, sl
 800aa72:	4641      	mov	r1, r8
 800aa74:	4638      	mov	r0, r7
 800aa76:	47c8      	blx	r9
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d103      	bne.n	800aa84 <_printf_common+0xac>
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa84:	3501      	adds	r5, #1
 800aa86:	e7c6      	b.n	800aa16 <_printf_common+0x3e>
 800aa88:	18e1      	adds	r1, r4, r3
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	2030      	movs	r0, #48	@ 0x30
 800aa8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa92:	4422      	add	r2, r4
 800aa94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa9c:	3302      	adds	r3, #2
 800aa9e:	e7c7      	b.n	800aa30 <_printf_common+0x58>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	4641      	mov	r1, r8
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	47c8      	blx	r9
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d0e6      	beq.n	800aa7c <_printf_common+0xa4>
 800aaae:	3601      	adds	r6, #1
 800aab0:	e7d9      	b.n	800aa66 <_printf_common+0x8e>
	...

0800aab4 <_printf_i>:
 800aab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	7e0f      	ldrb	r7, [r1, #24]
 800aaba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aabc:	2f78      	cmp	r7, #120	@ 0x78
 800aabe:	4691      	mov	r9, r2
 800aac0:	4680      	mov	r8, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	469a      	mov	sl, r3
 800aac6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aaca:	d807      	bhi.n	800aadc <_printf_i+0x28>
 800aacc:	2f62      	cmp	r7, #98	@ 0x62
 800aace:	d80a      	bhi.n	800aae6 <_printf_i+0x32>
 800aad0:	2f00      	cmp	r7, #0
 800aad2:	f000 80d2 	beq.w	800ac7a <_printf_i+0x1c6>
 800aad6:	2f58      	cmp	r7, #88	@ 0x58
 800aad8:	f000 80b9 	beq.w	800ac4e <_printf_i+0x19a>
 800aadc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aae0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aae4:	e03a      	b.n	800ab5c <_printf_i+0xa8>
 800aae6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aaea:	2b15      	cmp	r3, #21
 800aaec:	d8f6      	bhi.n	800aadc <_printf_i+0x28>
 800aaee:	a101      	add	r1, pc, #4	@ (adr r1, 800aaf4 <_printf_i+0x40>)
 800aaf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaf4:	0800ab4d 	.word	0x0800ab4d
 800aaf8:	0800ab61 	.word	0x0800ab61
 800aafc:	0800aadd 	.word	0x0800aadd
 800ab00:	0800aadd 	.word	0x0800aadd
 800ab04:	0800aadd 	.word	0x0800aadd
 800ab08:	0800aadd 	.word	0x0800aadd
 800ab0c:	0800ab61 	.word	0x0800ab61
 800ab10:	0800aadd 	.word	0x0800aadd
 800ab14:	0800aadd 	.word	0x0800aadd
 800ab18:	0800aadd 	.word	0x0800aadd
 800ab1c:	0800aadd 	.word	0x0800aadd
 800ab20:	0800ac61 	.word	0x0800ac61
 800ab24:	0800ab8b 	.word	0x0800ab8b
 800ab28:	0800ac1b 	.word	0x0800ac1b
 800ab2c:	0800aadd 	.word	0x0800aadd
 800ab30:	0800aadd 	.word	0x0800aadd
 800ab34:	0800ac83 	.word	0x0800ac83
 800ab38:	0800aadd 	.word	0x0800aadd
 800ab3c:	0800ab8b 	.word	0x0800ab8b
 800ab40:	0800aadd 	.word	0x0800aadd
 800ab44:	0800aadd 	.word	0x0800aadd
 800ab48:	0800ac23 	.word	0x0800ac23
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	1d1a      	adds	r2, r3, #4
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6032      	str	r2, [r6, #0]
 800ab54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e09d      	b.n	800ac9c <_printf_i+0x1e8>
 800ab60:	6833      	ldr	r3, [r6, #0]
 800ab62:	6820      	ldr	r0, [r4, #0]
 800ab64:	1d19      	adds	r1, r3, #4
 800ab66:	6031      	str	r1, [r6, #0]
 800ab68:	0606      	lsls	r6, r0, #24
 800ab6a:	d501      	bpl.n	800ab70 <_printf_i+0xbc>
 800ab6c:	681d      	ldr	r5, [r3, #0]
 800ab6e:	e003      	b.n	800ab78 <_printf_i+0xc4>
 800ab70:	0645      	lsls	r5, r0, #25
 800ab72:	d5fb      	bpl.n	800ab6c <_printf_i+0xb8>
 800ab74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab78:	2d00      	cmp	r5, #0
 800ab7a:	da03      	bge.n	800ab84 <_printf_i+0xd0>
 800ab7c:	232d      	movs	r3, #45	@ 0x2d
 800ab7e:	426d      	negs	r5, r5
 800ab80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab84:	4859      	ldr	r0, [pc, #356]	@ (800acec <_printf_i+0x238>)
 800ab86:	230a      	movs	r3, #10
 800ab88:	e011      	b.n	800abae <_printf_i+0xfa>
 800ab8a:	6821      	ldr	r1, [r4, #0]
 800ab8c:	6833      	ldr	r3, [r6, #0]
 800ab8e:	0608      	lsls	r0, r1, #24
 800ab90:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab94:	d402      	bmi.n	800ab9c <_printf_i+0xe8>
 800ab96:	0649      	lsls	r1, r1, #25
 800ab98:	bf48      	it	mi
 800ab9a:	b2ad      	uxthmi	r5, r5
 800ab9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab9e:	4853      	ldr	r0, [pc, #332]	@ (800acec <_printf_i+0x238>)
 800aba0:	6033      	str	r3, [r6, #0]
 800aba2:	bf14      	ite	ne
 800aba4:	230a      	movne	r3, #10
 800aba6:	2308      	moveq	r3, #8
 800aba8:	2100      	movs	r1, #0
 800abaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abae:	6866      	ldr	r6, [r4, #4]
 800abb0:	60a6      	str	r6, [r4, #8]
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	bfa2      	ittt	ge
 800abb6:	6821      	ldrge	r1, [r4, #0]
 800abb8:	f021 0104 	bicge.w	r1, r1, #4
 800abbc:	6021      	strge	r1, [r4, #0]
 800abbe:	b90d      	cbnz	r5, 800abc4 <_printf_i+0x110>
 800abc0:	2e00      	cmp	r6, #0
 800abc2:	d04b      	beq.n	800ac5c <_printf_i+0x1a8>
 800abc4:	4616      	mov	r6, r2
 800abc6:	fbb5 f1f3 	udiv	r1, r5, r3
 800abca:	fb03 5711 	mls	r7, r3, r1, r5
 800abce:	5dc7      	ldrb	r7, [r0, r7]
 800abd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abd4:	462f      	mov	r7, r5
 800abd6:	42bb      	cmp	r3, r7
 800abd8:	460d      	mov	r5, r1
 800abda:	d9f4      	bls.n	800abc6 <_printf_i+0x112>
 800abdc:	2b08      	cmp	r3, #8
 800abde:	d10b      	bne.n	800abf8 <_printf_i+0x144>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	07df      	lsls	r7, r3, #31
 800abe4:	d508      	bpl.n	800abf8 <_printf_i+0x144>
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	6861      	ldr	r1, [r4, #4]
 800abea:	4299      	cmp	r1, r3
 800abec:	bfde      	ittt	le
 800abee:	2330      	movle	r3, #48	@ 0x30
 800abf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abf8:	1b92      	subs	r2, r2, r6
 800abfa:	6122      	str	r2, [r4, #16]
 800abfc:	f8cd a000 	str.w	sl, [sp]
 800ac00:	464b      	mov	r3, r9
 800ac02:	aa03      	add	r2, sp, #12
 800ac04:	4621      	mov	r1, r4
 800ac06:	4640      	mov	r0, r8
 800ac08:	f7ff fee6 	bl	800a9d8 <_printf_common>
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d14a      	bne.n	800aca6 <_printf_i+0x1f2>
 800ac10:	f04f 30ff 	mov.w	r0, #4294967295
 800ac14:	b004      	add	sp, #16
 800ac16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	f043 0320 	orr.w	r3, r3, #32
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	4833      	ldr	r0, [pc, #204]	@ (800acf0 <_printf_i+0x23c>)
 800ac24:	2778      	movs	r7, #120	@ 0x78
 800ac26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	6831      	ldr	r1, [r6, #0]
 800ac2e:	061f      	lsls	r7, r3, #24
 800ac30:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac34:	d402      	bmi.n	800ac3c <_printf_i+0x188>
 800ac36:	065f      	lsls	r7, r3, #25
 800ac38:	bf48      	it	mi
 800ac3a:	b2ad      	uxthmi	r5, r5
 800ac3c:	6031      	str	r1, [r6, #0]
 800ac3e:	07d9      	lsls	r1, r3, #31
 800ac40:	bf44      	itt	mi
 800ac42:	f043 0320 	orrmi.w	r3, r3, #32
 800ac46:	6023      	strmi	r3, [r4, #0]
 800ac48:	b11d      	cbz	r5, 800ac52 <_printf_i+0x19e>
 800ac4a:	2310      	movs	r3, #16
 800ac4c:	e7ac      	b.n	800aba8 <_printf_i+0xf4>
 800ac4e:	4827      	ldr	r0, [pc, #156]	@ (800acec <_printf_i+0x238>)
 800ac50:	e7e9      	b.n	800ac26 <_printf_i+0x172>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	f023 0320 	bic.w	r3, r3, #32
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	e7f6      	b.n	800ac4a <_printf_i+0x196>
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	e7bd      	b.n	800abdc <_printf_i+0x128>
 800ac60:	6833      	ldr	r3, [r6, #0]
 800ac62:	6825      	ldr	r5, [r4, #0]
 800ac64:	6961      	ldr	r1, [r4, #20]
 800ac66:	1d18      	adds	r0, r3, #4
 800ac68:	6030      	str	r0, [r6, #0]
 800ac6a:	062e      	lsls	r6, r5, #24
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	d501      	bpl.n	800ac74 <_printf_i+0x1c0>
 800ac70:	6019      	str	r1, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <_printf_i+0x1c6>
 800ac74:	0668      	lsls	r0, r5, #25
 800ac76:	d5fb      	bpl.n	800ac70 <_printf_i+0x1bc>
 800ac78:	8019      	strh	r1, [r3, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	4616      	mov	r6, r2
 800ac80:	e7bc      	b.n	800abfc <_printf_i+0x148>
 800ac82:	6833      	ldr	r3, [r6, #0]
 800ac84:	1d1a      	adds	r2, r3, #4
 800ac86:	6032      	str	r2, [r6, #0]
 800ac88:	681e      	ldr	r6, [r3, #0]
 800ac8a:	6862      	ldr	r2, [r4, #4]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f7f5 faae 	bl	80001f0 <memchr>
 800ac94:	b108      	cbz	r0, 800ac9a <_printf_i+0x1e6>
 800ac96:	1b80      	subs	r0, r0, r6
 800ac98:	6060      	str	r0, [r4, #4]
 800ac9a:	6863      	ldr	r3, [r4, #4]
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aca4:	e7aa      	b.n	800abfc <_printf_i+0x148>
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	4632      	mov	r2, r6
 800acaa:	4649      	mov	r1, r9
 800acac:	4640      	mov	r0, r8
 800acae:	47d0      	blx	sl
 800acb0:	3001      	adds	r0, #1
 800acb2:	d0ad      	beq.n	800ac10 <_printf_i+0x15c>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	079b      	lsls	r3, r3, #30
 800acb8:	d413      	bmi.n	800ace2 <_printf_i+0x22e>
 800acba:	68e0      	ldr	r0, [r4, #12]
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	4298      	cmp	r0, r3
 800acc0:	bfb8      	it	lt
 800acc2:	4618      	movlt	r0, r3
 800acc4:	e7a6      	b.n	800ac14 <_printf_i+0x160>
 800acc6:	2301      	movs	r3, #1
 800acc8:	4632      	mov	r2, r6
 800acca:	4649      	mov	r1, r9
 800accc:	4640      	mov	r0, r8
 800acce:	47d0      	blx	sl
 800acd0:	3001      	adds	r0, #1
 800acd2:	d09d      	beq.n	800ac10 <_printf_i+0x15c>
 800acd4:	3501      	adds	r5, #1
 800acd6:	68e3      	ldr	r3, [r4, #12]
 800acd8:	9903      	ldr	r1, [sp, #12]
 800acda:	1a5b      	subs	r3, r3, r1
 800acdc:	42ab      	cmp	r3, r5
 800acde:	dcf2      	bgt.n	800acc6 <_printf_i+0x212>
 800ace0:	e7eb      	b.n	800acba <_printf_i+0x206>
 800ace2:	2500      	movs	r5, #0
 800ace4:	f104 0619 	add.w	r6, r4, #25
 800ace8:	e7f5      	b.n	800acd6 <_printf_i+0x222>
 800acea:	bf00      	nop
 800acec:	0800df4d 	.word	0x0800df4d
 800acf0:	0800df5e 	.word	0x0800df5e

0800acf4 <memmove>:
 800acf4:	4288      	cmp	r0, r1
 800acf6:	b510      	push	{r4, lr}
 800acf8:	eb01 0402 	add.w	r4, r1, r2
 800acfc:	d902      	bls.n	800ad04 <memmove+0x10>
 800acfe:	4284      	cmp	r4, r0
 800ad00:	4623      	mov	r3, r4
 800ad02:	d807      	bhi.n	800ad14 <memmove+0x20>
 800ad04:	1e43      	subs	r3, r0, #1
 800ad06:	42a1      	cmp	r1, r4
 800ad08:	d008      	beq.n	800ad1c <memmove+0x28>
 800ad0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad12:	e7f8      	b.n	800ad06 <memmove+0x12>
 800ad14:	4402      	add	r2, r0
 800ad16:	4601      	mov	r1, r0
 800ad18:	428a      	cmp	r2, r1
 800ad1a:	d100      	bne.n	800ad1e <memmove+0x2a>
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad26:	e7f7      	b.n	800ad18 <memmove+0x24>

0800ad28 <_sbrk_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	@ (800ad44 <_sbrk_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f7f9 fa4c 	bl	80041d0 <_sbrk>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_sbrk_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_sbrk_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20000c04 	.word	0x20000c04

0800ad48 <memcpy>:
 800ad48:	440a      	add	r2, r1
 800ad4a:	4291      	cmp	r1, r2
 800ad4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad50:	d100      	bne.n	800ad54 <memcpy+0xc>
 800ad52:	4770      	bx	lr
 800ad54:	b510      	push	{r4, lr}
 800ad56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad5e:	4291      	cmp	r1, r2
 800ad60:	d1f9      	bne.n	800ad56 <memcpy+0xe>
 800ad62:	bd10      	pop	{r4, pc}

0800ad64 <_realloc_r>:
 800ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	4680      	mov	r8, r0
 800ad6a:	4615      	mov	r5, r2
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	b921      	cbnz	r1, 800ad7a <_realloc_r+0x16>
 800ad70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	4611      	mov	r1, r2
 800ad76:	f7ff bc4b 	b.w	800a610 <_malloc_r>
 800ad7a:	b92a      	cbnz	r2, 800ad88 <_realloc_r+0x24>
 800ad7c:	f7ff fbdc 	bl	800a538 <_free_r>
 800ad80:	2400      	movs	r4, #0
 800ad82:	4620      	mov	r0, r4
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	f000 f81a 	bl	800adc0 <_malloc_usable_size_r>
 800ad8c:	4285      	cmp	r5, r0
 800ad8e:	4606      	mov	r6, r0
 800ad90:	d802      	bhi.n	800ad98 <_realloc_r+0x34>
 800ad92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad96:	d8f4      	bhi.n	800ad82 <_realloc_r+0x1e>
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	f7ff fc38 	bl	800a610 <_malloc_r>
 800ada0:	4607      	mov	r7, r0
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0ec      	beq.n	800ad80 <_realloc_r+0x1c>
 800ada6:	42b5      	cmp	r5, r6
 800ada8:	462a      	mov	r2, r5
 800adaa:	4621      	mov	r1, r4
 800adac:	bf28      	it	cs
 800adae:	4632      	movcs	r2, r6
 800adb0:	f7ff ffca 	bl	800ad48 <memcpy>
 800adb4:	4621      	mov	r1, r4
 800adb6:	4640      	mov	r0, r8
 800adb8:	f7ff fbbe 	bl	800a538 <_free_r>
 800adbc:	463c      	mov	r4, r7
 800adbe:	e7e0      	b.n	800ad82 <_realloc_r+0x1e>

0800adc0 <_malloc_usable_size_r>:
 800adc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc4:	1f18      	subs	r0, r3, #4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bfbc      	itt	lt
 800adca:	580b      	ldrlt	r3, [r1, r0]
 800adcc:	18c0      	addlt	r0, r0, r3
 800adce:	4770      	bx	lr

0800add0 <sinf>:
 800add0:	ee10 3a10 	vmov	r3, s0
 800add4:	b507      	push	{r0, r1, r2, lr}
 800add6:	4a1f      	ldr	r2, [pc, #124]	@ (800ae54 <sinf+0x84>)
 800add8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800addc:	4293      	cmp	r3, r2
 800adde:	d807      	bhi.n	800adf0 <sinf+0x20>
 800ade0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800ae58 <sinf+0x88>
 800ade4:	2000      	movs	r0, #0
 800ade6:	b003      	add	sp, #12
 800ade8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adec:	f000 b88e 	b.w	800af0c <__kernel_sinf>
 800adf0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800adf4:	d304      	bcc.n	800ae00 <sinf+0x30>
 800adf6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800adfa:	b003      	add	sp, #12
 800adfc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae00:	4668      	mov	r0, sp
 800ae02:	f000 f8cb 	bl	800af9c <__ieee754_rem_pio2f>
 800ae06:	f000 0003 	and.w	r0, r0, #3
 800ae0a:	2801      	cmp	r0, #1
 800ae0c:	d00a      	beq.n	800ae24 <sinf+0x54>
 800ae0e:	2802      	cmp	r0, #2
 800ae10:	d00f      	beq.n	800ae32 <sinf+0x62>
 800ae12:	b9c0      	cbnz	r0, 800ae46 <sinf+0x76>
 800ae14:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae18:	ed9d 0a00 	vldr	s0, [sp]
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	f000 f875 	bl	800af0c <__kernel_sinf>
 800ae22:	e7ea      	b.n	800adfa <sinf+0x2a>
 800ae24:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae28:	ed9d 0a00 	vldr	s0, [sp]
 800ae2c:	f000 f816 	bl	800ae5c <__kernel_cosf>
 800ae30:	e7e3      	b.n	800adfa <sinf+0x2a>
 800ae32:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae36:	ed9d 0a00 	vldr	s0, [sp]
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	f000 f866 	bl	800af0c <__kernel_sinf>
 800ae40:	eeb1 0a40 	vneg.f32	s0, s0
 800ae44:	e7d9      	b.n	800adfa <sinf+0x2a>
 800ae46:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae4a:	ed9d 0a00 	vldr	s0, [sp]
 800ae4e:	f000 f805 	bl	800ae5c <__kernel_cosf>
 800ae52:	e7f5      	b.n	800ae40 <sinf+0x70>
 800ae54:	3f490fd8 	.word	0x3f490fd8
 800ae58:	00000000 	.word	0x00000000

0800ae5c <__kernel_cosf>:
 800ae5c:	ee10 3a10 	vmov	r3, s0
 800ae60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae64:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ae68:	eef0 6a40 	vmov.f32	s13, s0
 800ae6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ae70:	d204      	bcs.n	800ae7c <__kernel_cosf+0x20>
 800ae72:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ae76:	ee17 2a90 	vmov	r2, s15
 800ae7a:	b342      	cbz	r2, 800aece <__kernel_cosf+0x72>
 800ae7c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ae80:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800aeec <__kernel_cosf+0x90>
 800ae84:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800aef0 <__kernel_cosf+0x94>
 800ae88:	4a1a      	ldr	r2, [pc, #104]	@ (800aef4 <__kernel_cosf+0x98>)
 800ae8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aef8 <__kernel_cosf+0x9c>
 800ae94:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ae98:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800aefc <__kernel_cosf+0xa0>
 800ae9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aea0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800af00 <__kernel_cosf+0xa4>
 800aea4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aea8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800af04 <__kernel_cosf+0xa8>
 800aeac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aeb0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800aeb4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800aeb8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aebc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800aec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec4:	d804      	bhi.n	800aed0 <__kernel_cosf+0x74>
 800aec6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aeca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aece:	4770      	bx	lr
 800aed0:	4a0d      	ldr	r2, [pc, #52]	@ (800af08 <__kernel_cosf+0xac>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	bf9a      	itte	ls
 800aed6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800aeda:	ee07 3a10 	vmovls	s14, r3
 800aede:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800aee2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aeea:	e7ec      	b.n	800aec6 <__kernel_cosf+0x6a>
 800aeec:	ad47d74e 	.word	0xad47d74e
 800aef0:	310f74f6 	.word	0x310f74f6
 800aef4:	3e999999 	.word	0x3e999999
 800aef8:	b493f27c 	.word	0xb493f27c
 800aefc:	37d00d01 	.word	0x37d00d01
 800af00:	bab60b61 	.word	0xbab60b61
 800af04:	3d2aaaab 	.word	0x3d2aaaab
 800af08:	3f480000 	.word	0x3f480000

0800af0c <__kernel_sinf>:
 800af0c:	ee10 3a10 	vmov	r3, s0
 800af10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af14:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800af18:	d204      	bcs.n	800af24 <__kernel_sinf+0x18>
 800af1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800af1e:	ee17 3a90 	vmov	r3, s15
 800af22:	b35b      	cbz	r3, 800af7c <__kernel_sinf+0x70>
 800af24:	ee20 7a00 	vmul.f32	s14, s0, s0
 800af28:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800af80 <__kernel_sinf+0x74>
 800af2c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800af84 <__kernel_sinf+0x78>
 800af30:	eea7 6a27 	vfma.f32	s12, s14, s15
 800af34:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800af88 <__kernel_sinf+0x7c>
 800af38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800af3c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800af8c <__kernel_sinf+0x80>
 800af40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800af44:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800af90 <__kernel_sinf+0x84>
 800af48:	ee60 6a07 	vmul.f32	s13, s0, s14
 800af4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800af50:	b930      	cbnz	r0, 800af60 <__kernel_sinf+0x54>
 800af52:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800af94 <__kernel_sinf+0x88>
 800af56:	eea7 6a27 	vfma.f32	s12, s14, s15
 800af5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800af5e:	4770      	bx	lr
 800af60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800af64:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800af68:	eee0 7a86 	vfma.f32	s15, s1, s12
 800af6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800af70:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800af98 <__kernel_sinf+0x8c>
 800af74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800af78:	ee30 0a60 	vsub.f32	s0, s0, s1
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	2f2ec9d3 	.word	0x2f2ec9d3
 800af84:	b2d72f34 	.word	0xb2d72f34
 800af88:	3638ef1b 	.word	0x3638ef1b
 800af8c:	b9500d01 	.word	0xb9500d01
 800af90:	3c088889 	.word	0x3c088889
 800af94:	be2aaaab 	.word	0xbe2aaaab
 800af98:	3e2aaaab 	.word	0x3e2aaaab

0800af9c <__ieee754_rem_pio2f>:
 800af9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af9e:	ee10 6a10 	vmov	r6, s0
 800afa2:	4b88      	ldr	r3, [pc, #544]	@ (800b1c4 <__ieee754_rem_pio2f+0x228>)
 800afa4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800afa8:	429d      	cmp	r5, r3
 800afaa:	b087      	sub	sp, #28
 800afac:	4604      	mov	r4, r0
 800afae:	d805      	bhi.n	800afbc <__ieee754_rem_pio2f+0x20>
 800afb0:	2300      	movs	r3, #0
 800afb2:	ed80 0a00 	vstr	s0, [r0]
 800afb6:	6043      	str	r3, [r0, #4]
 800afb8:	2000      	movs	r0, #0
 800afba:	e022      	b.n	800b002 <__ieee754_rem_pio2f+0x66>
 800afbc:	4b82      	ldr	r3, [pc, #520]	@ (800b1c8 <__ieee754_rem_pio2f+0x22c>)
 800afbe:	429d      	cmp	r5, r3
 800afc0:	d83a      	bhi.n	800b038 <__ieee754_rem_pio2f+0x9c>
 800afc2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b1cc <__ieee754_rem_pio2f+0x230>
 800afcc:	4a80      	ldr	r2, [pc, #512]	@ (800b1d0 <__ieee754_rem_pio2f+0x234>)
 800afce:	f023 030f 	bic.w	r3, r3, #15
 800afd2:	dd18      	ble.n	800b006 <__ieee754_rem_pio2f+0x6a>
 800afd4:	4293      	cmp	r3, r2
 800afd6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800afda:	bf09      	itett	eq
 800afdc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b1d4 <__ieee754_rem_pio2f+0x238>
 800afe0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b1d8 <__ieee754_rem_pio2f+0x23c>
 800afe4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b1dc <__ieee754_rem_pio2f+0x240>
 800afe8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800afec:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800aff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aff4:	ed80 7a00 	vstr	s14, [r0]
 800aff8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800affc:	edc0 7a01 	vstr	s15, [r0, #4]
 800b000:	2001      	movs	r0, #1
 800b002:	b007      	add	sp, #28
 800b004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b006:	4293      	cmp	r3, r2
 800b008:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b00c:	bf09      	itett	eq
 800b00e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b1d4 <__ieee754_rem_pio2f+0x238>
 800b012:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b1d8 <__ieee754_rem_pio2f+0x23c>
 800b016:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b1dc <__ieee754_rem_pio2f+0x240>
 800b01a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b01e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b026:	ed80 7a00 	vstr	s14, [r0]
 800b02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b02e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b032:	f04f 30ff 	mov.w	r0, #4294967295
 800b036:	e7e4      	b.n	800b002 <__ieee754_rem_pio2f+0x66>
 800b038:	4b69      	ldr	r3, [pc, #420]	@ (800b1e0 <__ieee754_rem_pio2f+0x244>)
 800b03a:	429d      	cmp	r5, r3
 800b03c:	d873      	bhi.n	800b126 <__ieee754_rem_pio2f+0x18a>
 800b03e:	f000 f8dd 	bl	800b1fc <fabsf>
 800b042:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b1e4 <__ieee754_rem_pio2f+0x248>
 800b046:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b04a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b04e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b056:	ee17 0a90 	vmov	r0, s15
 800b05a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b1cc <__ieee754_rem_pio2f+0x230>
 800b05e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b062:	281f      	cmp	r0, #31
 800b064:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b1d8 <__ieee754_rem_pio2f+0x23c>
 800b068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06c:	eeb1 6a47 	vneg.f32	s12, s14
 800b070:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b074:	ee16 1a90 	vmov	r1, s13
 800b078:	dc09      	bgt.n	800b08e <__ieee754_rem_pio2f+0xf2>
 800b07a:	4a5b      	ldr	r2, [pc, #364]	@ (800b1e8 <__ieee754_rem_pio2f+0x24c>)
 800b07c:	1e47      	subs	r7, r0, #1
 800b07e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b082:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b086:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d107      	bne.n	800b09e <__ieee754_rem_pio2f+0x102>
 800b08e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b092:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b096:	2a08      	cmp	r2, #8
 800b098:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b09c:	dc14      	bgt.n	800b0c8 <__ieee754_rem_pio2f+0x12c>
 800b09e:	6021      	str	r1, [r4, #0]
 800b0a0:	ed94 7a00 	vldr	s14, [r4]
 800b0a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b0a8:	2e00      	cmp	r6, #0
 800b0aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b0ae:	ed84 0a01 	vstr	s0, [r4, #4]
 800b0b2:	daa6      	bge.n	800b002 <__ieee754_rem_pio2f+0x66>
 800b0b4:	eeb1 7a47 	vneg.f32	s14, s14
 800b0b8:	eeb1 0a40 	vneg.f32	s0, s0
 800b0bc:	ed84 7a00 	vstr	s14, [r4]
 800b0c0:	ed84 0a01 	vstr	s0, [r4, #4]
 800b0c4:	4240      	negs	r0, r0
 800b0c6:	e79c      	b.n	800b002 <__ieee754_rem_pio2f+0x66>
 800b0c8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b1d4 <__ieee754_rem_pio2f+0x238>
 800b0cc:	eef0 6a40 	vmov.f32	s13, s0
 800b0d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b0d4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b0d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b0dc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b1dc <__ieee754_rem_pio2f+0x240>
 800b0e0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b0e4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b0e8:	ee15 2a90 	vmov	r2, s11
 800b0ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b0f0:	1a5b      	subs	r3, r3, r1
 800b0f2:	2b19      	cmp	r3, #25
 800b0f4:	dc04      	bgt.n	800b100 <__ieee754_rem_pio2f+0x164>
 800b0f6:	edc4 5a00 	vstr	s11, [r4]
 800b0fa:	eeb0 0a66 	vmov.f32	s0, s13
 800b0fe:	e7cf      	b.n	800b0a0 <__ieee754_rem_pio2f+0x104>
 800b100:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b1ec <__ieee754_rem_pio2f+0x250>
 800b104:	eeb0 0a66 	vmov.f32	s0, s13
 800b108:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b10c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b110:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b1f0 <__ieee754_rem_pio2f+0x254>
 800b114:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b118:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b11c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b120:	ed84 7a00 	vstr	s14, [r4]
 800b124:	e7bc      	b.n	800b0a0 <__ieee754_rem_pio2f+0x104>
 800b126:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b12a:	d306      	bcc.n	800b13a <__ieee754_rem_pio2f+0x19e>
 800b12c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b130:	edc0 7a01 	vstr	s15, [r0, #4]
 800b134:	edc0 7a00 	vstr	s15, [r0]
 800b138:	e73e      	b.n	800afb8 <__ieee754_rem_pio2f+0x1c>
 800b13a:	15ea      	asrs	r2, r5, #23
 800b13c:	3a86      	subs	r2, #134	@ 0x86
 800b13e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b14a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b1f4 <__ieee754_rem_pio2f+0x258>
 800b14e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b156:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b15a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b15e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b162:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b16a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b16e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b172:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b17e:	d11e      	bne.n	800b1be <__ieee754_rem_pio2f+0x222>
 800b180:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b188:	bf0c      	ite	eq
 800b18a:	2301      	moveq	r3, #1
 800b18c:	2302      	movne	r3, #2
 800b18e:	491a      	ldr	r1, [pc, #104]	@ (800b1f8 <__ieee754_rem_pio2f+0x25c>)
 800b190:	9101      	str	r1, [sp, #4]
 800b192:	2102      	movs	r1, #2
 800b194:	9100      	str	r1, [sp, #0]
 800b196:	a803      	add	r0, sp, #12
 800b198:	4621      	mov	r1, r4
 800b19a:	f000 f837 	bl	800b20c <__kernel_rem_pio2f>
 800b19e:	2e00      	cmp	r6, #0
 800b1a0:	f6bf af2f 	bge.w	800b002 <__ieee754_rem_pio2f+0x66>
 800b1a4:	edd4 7a00 	vldr	s15, [r4]
 800b1a8:	eef1 7a67 	vneg.f32	s15, s15
 800b1ac:	edc4 7a00 	vstr	s15, [r4]
 800b1b0:	edd4 7a01 	vldr	s15, [r4, #4]
 800b1b4:	eef1 7a67 	vneg.f32	s15, s15
 800b1b8:	edc4 7a01 	vstr	s15, [r4, #4]
 800b1bc:	e782      	b.n	800b0c4 <__ieee754_rem_pio2f+0x128>
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e7e5      	b.n	800b18e <__ieee754_rem_pio2f+0x1f2>
 800b1c2:	bf00      	nop
 800b1c4:	3f490fd8 	.word	0x3f490fd8
 800b1c8:	4016cbe3 	.word	0x4016cbe3
 800b1cc:	3fc90f80 	.word	0x3fc90f80
 800b1d0:	3fc90fd0 	.word	0x3fc90fd0
 800b1d4:	37354400 	.word	0x37354400
 800b1d8:	37354443 	.word	0x37354443
 800b1dc:	2e85a308 	.word	0x2e85a308
 800b1e0:	43490f80 	.word	0x43490f80
 800b1e4:	3f22f984 	.word	0x3f22f984
 800b1e8:	0800df70 	.word	0x0800df70
 800b1ec:	2e85a300 	.word	0x2e85a300
 800b1f0:	248d3132 	.word	0x248d3132
 800b1f4:	43800000 	.word	0x43800000
 800b1f8:	0800dff0 	.word	0x0800dff0

0800b1fc <fabsf>:
 800b1fc:	ee10 3a10 	vmov	r3, s0
 800b200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b204:	ee00 3a10 	vmov	s0, r3
 800b208:	4770      	bx	lr
	...

0800b20c <__kernel_rem_pio2f>:
 800b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b210:	ed2d 8b04 	vpush	{d8-d9}
 800b214:	b0d9      	sub	sp, #356	@ 0x164
 800b216:	4690      	mov	r8, r2
 800b218:	9001      	str	r0, [sp, #4]
 800b21a:	4ab9      	ldr	r2, [pc, #740]	@ (800b500 <__kernel_rem_pio2f+0x2f4>)
 800b21c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b21e:	f118 0f04 	cmn.w	r8, #4
 800b222:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b226:	460f      	mov	r7, r1
 800b228:	f103 3bff 	add.w	fp, r3, #4294967295
 800b22c:	db27      	blt.n	800b27e <__kernel_rem_pio2f+0x72>
 800b22e:	f1b8 0203 	subs.w	r2, r8, #3
 800b232:	bf48      	it	mi
 800b234:	f108 0204 	addmi.w	r2, r8, #4
 800b238:	10d2      	asrs	r2, r2, #3
 800b23a:	1c55      	adds	r5, r2, #1
 800b23c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b23e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800b510 <__kernel_rem_pio2f+0x304>
 800b242:	00e8      	lsls	r0, r5, #3
 800b244:	eba2 060b 	sub.w	r6, r2, fp
 800b248:	9002      	str	r0, [sp, #8]
 800b24a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b24e:	eb0a 0c0b 	add.w	ip, sl, fp
 800b252:	ac1c      	add	r4, sp, #112	@ 0x70
 800b254:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b258:	2000      	movs	r0, #0
 800b25a:	4560      	cmp	r0, ip
 800b25c:	dd11      	ble.n	800b282 <__kernel_rem_pio2f+0x76>
 800b25e:	a91c      	add	r1, sp, #112	@ 0x70
 800b260:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b264:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b268:	f04f 0c00 	mov.w	ip, #0
 800b26c:	45d4      	cmp	ip, sl
 800b26e:	dc27      	bgt.n	800b2c0 <__kernel_rem_pio2f+0xb4>
 800b270:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b274:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800b510 <__kernel_rem_pio2f+0x304>
 800b278:	4606      	mov	r6, r0
 800b27a:	2400      	movs	r4, #0
 800b27c:	e016      	b.n	800b2ac <__kernel_rem_pio2f+0xa0>
 800b27e:	2200      	movs	r2, #0
 800b280:	e7db      	b.n	800b23a <__kernel_rem_pio2f+0x2e>
 800b282:	42c6      	cmn	r6, r0
 800b284:	bf5d      	ittte	pl
 800b286:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b28a:	ee07 1a90 	vmovpl	s15, r1
 800b28e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b292:	eef0 7a47 	vmovmi.f32	s15, s14
 800b296:	ece4 7a01 	vstmia	r4!, {s15}
 800b29a:	3001      	adds	r0, #1
 800b29c:	e7dd      	b.n	800b25a <__kernel_rem_pio2f+0x4e>
 800b29e:	ecfe 6a01 	vldmia	lr!, {s13}
 800b2a2:	ed96 7a00 	vldr	s14, [r6]
 800b2a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b2aa:	3401      	adds	r4, #1
 800b2ac:	455c      	cmp	r4, fp
 800b2ae:	f1a6 0604 	sub.w	r6, r6, #4
 800b2b2:	ddf4      	ble.n	800b29e <__kernel_rem_pio2f+0x92>
 800b2b4:	ece9 7a01 	vstmia	r9!, {s15}
 800b2b8:	f10c 0c01 	add.w	ip, ip, #1
 800b2bc:	3004      	adds	r0, #4
 800b2be:	e7d5      	b.n	800b26c <__kernel_rem_pio2f+0x60>
 800b2c0:	a908      	add	r1, sp, #32
 800b2c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2c6:	9104      	str	r1, [sp, #16]
 800b2c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b2ca:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800b50c <__kernel_rem_pio2f+0x300>
 800b2ce:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800b508 <__kernel_rem_pio2f+0x2fc>
 800b2d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b2d6:	9203      	str	r2, [sp, #12]
 800b2d8:	4654      	mov	r4, sl
 800b2da:	00a2      	lsls	r2, r4, #2
 800b2dc:	9205      	str	r2, [sp, #20]
 800b2de:	aa58      	add	r2, sp, #352	@ 0x160
 800b2e0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b2e4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b2e8:	a944      	add	r1, sp, #272	@ 0x110
 800b2ea:	aa08      	add	r2, sp, #32
 800b2ec:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b2f0:	4694      	mov	ip, r2
 800b2f2:	4626      	mov	r6, r4
 800b2f4:	2e00      	cmp	r6, #0
 800b2f6:	f1a0 0004 	sub.w	r0, r0, #4
 800b2fa:	dc4c      	bgt.n	800b396 <__kernel_rem_pio2f+0x18a>
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b302:	f000 f9f5 	bl	800b6f0 <scalbnf>
 800b306:	eeb0 8a40 	vmov.f32	s16, s0
 800b30a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b30e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b312:	f000 fa53 	bl	800b7bc <floorf>
 800b316:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b31a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b31e:	2d00      	cmp	r5, #0
 800b320:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b324:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b328:	ee17 9a90 	vmov	r9, s15
 800b32c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b330:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b334:	dd41      	ble.n	800b3ba <__kernel_rem_pio2f+0x1ae>
 800b336:	f104 3cff 	add.w	ip, r4, #4294967295
 800b33a:	a908      	add	r1, sp, #32
 800b33c:	f1c5 0e08 	rsb	lr, r5, #8
 800b340:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b344:	fa46 f00e 	asr.w	r0, r6, lr
 800b348:	4481      	add	r9, r0
 800b34a:	fa00 f00e 	lsl.w	r0, r0, lr
 800b34e:	1a36      	subs	r6, r6, r0
 800b350:	f1c5 0007 	rsb	r0, r5, #7
 800b354:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b358:	4106      	asrs	r6, r0
 800b35a:	2e00      	cmp	r6, #0
 800b35c:	dd3c      	ble.n	800b3d8 <__kernel_rem_pio2f+0x1cc>
 800b35e:	f04f 0e00 	mov.w	lr, #0
 800b362:	f109 0901 	add.w	r9, r9, #1
 800b366:	4670      	mov	r0, lr
 800b368:	4574      	cmp	r4, lr
 800b36a:	dc68      	bgt.n	800b43e <__kernel_rem_pio2f+0x232>
 800b36c:	2d00      	cmp	r5, #0
 800b36e:	dd03      	ble.n	800b378 <__kernel_rem_pio2f+0x16c>
 800b370:	2d01      	cmp	r5, #1
 800b372:	d074      	beq.n	800b45e <__kernel_rem_pio2f+0x252>
 800b374:	2d02      	cmp	r5, #2
 800b376:	d07d      	beq.n	800b474 <__kernel_rem_pio2f+0x268>
 800b378:	2e02      	cmp	r6, #2
 800b37a:	d12d      	bne.n	800b3d8 <__kernel_rem_pio2f+0x1cc>
 800b37c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b380:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b384:	b340      	cbz	r0, 800b3d8 <__kernel_rem_pio2f+0x1cc>
 800b386:	4628      	mov	r0, r5
 800b388:	9306      	str	r3, [sp, #24]
 800b38a:	f000 f9b1 	bl	800b6f0 <scalbnf>
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b394:	e020      	b.n	800b3d8 <__kernel_rem_pio2f+0x1cc>
 800b396:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b39a:	3e01      	subs	r6, #1
 800b39c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3a4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b3a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b3ac:	ecac 0a01 	vstmia	ip!, {s0}
 800b3b0:	ed90 0a00 	vldr	s0, [r0]
 800b3b4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b3b8:	e79c      	b.n	800b2f4 <__kernel_rem_pio2f+0xe8>
 800b3ba:	d105      	bne.n	800b3c8 <__kernel_rem_pio2f+0x1bc>
 800b3bc:	1e60      	subs	r0, r4, #1
 800b3be:	a908      	add	r1, sp, #32
 800b3c0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b3c4:	11f6      	asrs	r6, r6, #7
 800b3c6:	e7c8      	b.n	800b35a <__kernel_rem_pio2f+0x14e>
 800b3c8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b3cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d4:	da31      	bge.n	800b43a <__kernel_rem_pio2f+0x22e>
 800b3d6:	2600      	movs	r6, #0
 800b3d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e0:	f040 8098 	bne.w	800b514 <__kernel_rem_pio2f+0x308>
 800b3e4:	1e60      	subs	r0, r4, #1
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4550      	cmp	r0, sl
 800b3ea:	da4b      	bge.n	800b484 <__kernel_rem_pio2f+0x278>
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	d065      	beq.n	800b4bc <__kernel_rem_pio2f+0x2b0>
 800b3f0:	3c01      	subs	r4, #1
 800b3f2:	ab08      	add	r3, sp, #32
 800b3f4:	3d08      	subs	r5, #8
 800b3f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0f8      	beq.n	800b3f0 <__kernel_rem_pio2f+0x1e4>
 800b3fe:	4628      	mov	r0, r5
 800b400:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b404:	f000 f974 	bl	800b6f0 <scalbnf>
 800b408:	1c63      	adds	r3, r4, #1
 800b40a:	aa44      	add	r2, sp, #272	@ 0x110
 800b40c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b50c <__kernel_rem_pio2f+0x300>
 800b410:	0099      	lsls	r1, r3, #2
 800b412:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b416:	4623      	mov	r3, r4
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f280 80a9 	bge.w	800b570 <__kernel_rem_pio2f+0x364>
 800b41e:	4623      	mov	r3, r4
 800b420:	2b00      	cmp	r3, #0
 800b422:	f2c0 80c7 	blt.w	800b5b4 <__kernel_rem_pio2f+0x3a8>
 800b426:	aa44      	add	r2, sp, #272	@ 0x110
 800b428:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b42c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b504 <__kernel_rem_pio2f+0x2f8>
 800b430:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b510 <__kernel_rem_pio2f+0x304>
 800b434:	2000      	movs	r0, #0
 800b436:	1ae2      	subs	r2, r4, r3
 800b438:	e0b1      	b.n	800b59e <__kernel_rem_pio2f+0x392>
 800b43a:	2602      	movs	r6, #2
 800b43c:	e78f      	b.n	800b35e <__kernel_rem_pio2f+0x152>
 800b43e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b442:	b948      	cbnz	r0, 800b458 <__kernel_rem_pio2f+0x24c>
 800b444:	b121      	cbz	r1, 800b450 <__kernel_rem_pio2f+0x244>
 800b446:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b44a:	f842 1c04 	str.w	r1, [r2, #-4]
 800b44e:	2101      	movs	r1, #1
 800b450:	f10e 0e01 	add.w	lr, lr, #1
 800b454:	4608      	mov	r0, r1
 800b456:	e787      	b.n	800b368 <__kernel_rem_pio2f+0x15c>
 800b458:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b45c:	e7f5      	b.n	800b44a <__kernel_rem_pio2f+0x23e>
 800b45e:	f104 3cff 	add.w	ip, r4, #4294967295
 800b462:	aa08      	add	r2, sp, #32
 800b464:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b468:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b46c:	a908      	add	r1, sp, #32
 800b46e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b472:	e781      	b.n	800b378 <__kernel_rem_pio2f+0x16c>
 800b474:	f104 3cff 	add.w	ip, r4, #4294967295
 800b478:	aa08      	add	r2, sp, #32
 800b47a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b47e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b482:	e7f3      	b.n	800b46c <__kernel_rem_pio2f+0x260>
 800b484:	a908      	add	r1, sp, #32
 800b486:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b48a:	3801      	subs	r0, #1
 800b48c:	430a      	orrs	r2, r1
 800b48e:	e7ab      	b.n	800b3e8 <__kernel_rem_pio2f+0x1dc>
 800b490:	3201      	adds	r2, #1
 800b492:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b496:	2e00      	cmp	r6, #0
 800b498:	d0fa      	beq.n	800b490 <__kernel_rem_pio2f+0x284>
 800b49a:	9905      	ldr	r1, [sp, #20]
 800b49c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b4a0:	eb0d 0001 	add.w	r0, sp, r1
 800b4a4:	18e6      	adds	r6, r4, r3
 800b4a6:	a91c      	add	r1, sp, #112	@ 0x70
 800b4a8:	f104 0c01 	add.w	ip, r4, #1
 800b4ac:	384c      	subs	r0, #76	@ 0x4c
 800b4ae:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b4b2:	4422      	add	r2, r4
 800b4b4:	4562      	cmp	r2, ip
 800b4b6:	da04      	bge.n	800b4c2 <__kernel_rem_pio2f+0x2b6>
 800b4b8:	4614      	mov	r4, r2
 800b4ba:	e70e      	b.n	800b2da <__kernel_rem_pio2f+0xce>
 800b4bc:	9804      	ldr	r0, [sp, #16]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	e7e7      	b.n	800b492 <__kernel_rem_pio2f+0x286>
 800b4c2:	9903      	ldr	r1, [sp, #12]
 800b4c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b4c8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b4cc:	9105      	str	r1, [sp, #20]
 800b4ce:	ee07 1a90 	vmov	s15, r1
 800b4d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4d6:	2400      	movs	r4, #0
 800b4d8:	ece6 7a01 	vstmia	r6!, {s15}
 800b4dc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b510 <__kernel_rem_pio2f+0x304>
 800b4e0:	46b1      	mov	r9, r6
 800b4e2:	455c      	cmp	r4, fp
 800b4e4:	dd04      	ble.n	800b4f0 <__kernel_rem_pio2f+0x2e4>
 800b4e6:	ece0 7a01 	vstmia	r0!, {s15}
 800b4ea:	f10c 0c01 	add.w	ip, ip, #1
 800b4ee:	e7e1      	b.n	800b4b4 <__kernel_rem_pio2f+0x2a8>
 800b4f0:	ecfe 6a01 	vldmia	lr!, {s13}
 800b4f4:	ed39 7a01 	vldmdb	r9!, {s14}
 800b4f8:	3401      	adds	r4, #1
 800b4fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4fe:	e7f0      	b.n	800b4e2 <__kernel_rem_pio2f+0x2d6>
 800b500:	0800e334 	.word	0x0800e334
 800b504:	0800e308 	.word	0x0800e308
 800b508:	43800000 	.word	0x43800000
 800b50c:	3b800000 	.word	0x3b800000
 800b510:	00000000 	.word	0x00000000
 800b514:	9b02      	ldr	r3, [sp, #8]
 800b516:	eeb0 0a48 	vmov.f32	s0, s16
 800b51a:	eba3 0008 	sub.w	r0, r3, r8
 800b51e:	f000 f8e7 	bl	800b6f0 <scalbnf>
 800b522:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b508 <__kernel_rem_pio2f+0x2fc>
 800b526:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52e:	db19      	blt.n	800b564 <__kernel_rem_pio2f+0x358>
 800b530:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b50c <__kernel_rem_pio2f+0x300>
 800b534:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b538:	aa08      	add	r2, sp, #32
 800b53a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b53e:	3508      	adds	r5, #8
 800b540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b544:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b54c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b550:	ee10 3a10 	vmov	r3, s0
 800b554:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b558:	ee17 3a90 	vmov	r3, s15
 800b55c:	3401      	adds	r4, #1
 800b55e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b562:	e74c      	b.n	800b3fe <__kernel_rem_pio2f+0x1f2>
 800b564:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b568:	aa08      	add	r2, sp, #32
 800b56a:	ee10 3a10 	vmov	r3, s0
 800b56e:	e7f6      	b.n	800b55e <__kernel_rem_pio2f+0x352>
 800b570:	a808      	add	r0, sp, #32
 800b572:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b576:	9001      	str	r0, [sp, #4]
 800b578:	ee07 0a90 	vmov	s15, r0
 800b57c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b580:	3b01      	subs	r3, #1
 800b582:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b586:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b58a:	ed62 7a01 	vstmdb	r2!, {s15}
 800b58e:	e743      	b.n	800b418 <__kernel_rem_pio2f+0x20c>
 800b590:	ecfc 6a01 	vldmia	ip!, {s13}
 800b594:	ecb5 7a01 	vldmia	r5!, {s14}
 800b598:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b59c:	3001      	adds	r0, #1
 800b59e:	4550      	cmp	r0, sl
 800b5a0:	dc01      	bgt.n	800b5a6 <__kernel_rem_pio2f+0x39a>
 800b5a2:	4282      	cmp	r2, r0
 800b5a4:	daf4      	bge.n	800b590 <__kernel_rem_pio2f+0x384>
 800b5a6:	a858      	add	r0, sp, #352	@ 0x160
 800b5a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b5ac:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	e735      	b.n	800b420 <__kernel_rem_pio2f+0x214>
 800b5b4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	dc09      	bgt.n	800b5ce <__kernel_rem_pio2f+0x3c2>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dc2b      	bgt.n	800b616 <__kernel_rem_pio2f+0x40a>
 800b5be:	d044      	beq.n	800b64a <__kernel_rem_pio2f+0x43e>
 800b5c0:	f009 0007 	and.w	r0, r9, #7
 800b5c4:	b059      	add	sp, #356	@ 0x164
 800b5c6:	ecbd 8b04 	vpop	{d8-d9}
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ce:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d1f5      	bne.n	800b5c0 <__kernel_rem_pio2f+0x3b4>
 800b5d4:	aa30      	add	r2, sp, #192	@ 0xc0
 800b5d6:	1f0b      	subs	r3, r1, #4
 800b5d8:	4413      	add	r3, r2
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4620      	mov	r0, r4
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	f1a2 0204 	sub.w	r2, r2, #4
 800b5e4:	dc52      	bgt.n	800b68c <__kernel_rem_pio2f+0x480>
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	2a01      	cmp	r2, #1
 800b5ea:	f1a3 0304 	sub.w	r3, r3, #4
 800b5ee:	dc5d      	bgt.n	800b6ac <__kernel_rem_pio2f+0x4a0>
 800b5f0:	ab30      	add	r3, sp, #192	@ 0xc0
 800b5f2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800b510 <__kernel_rem_pio2f+0x304>
 800b5f6:	440b      	add	r3, r1
 800b5f8:	2c01      	cmp	r4, #1
 800b5fa:	dc67      	bgt.n	800b6cc <__kernel_rem_pio2f+0x4c0>
 800b5fc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b600:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800b604:	2e00      	cmp	r6, #0
 800b606:	d167      	bne.n	800b6d8 <__kernel_rem_pio2f+0x4cc>
 800b608:	edc7 6a00 	vstr	s13, [r7]
 800b60c:	ed87 7a01 	vstr	s14, [r7, #4]
 800b610:	edc7 7a02 	vstr	s15, [r7, #8]
 800b614:	e7d4      	b.n	800b5c0 <__kernel_rem_pio2f+0x3b4>
 800b616:	ab30      	add	r3, sp, #192	@ 0xc0
 800b618:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800b510 <__kernel_rem_pio2f+0x304>
 800b61c:	440b      	add	r3, r1
 800b61e:	4622      	mov	r2, r4
 800b620:	2a00      	cmp	r2, #0
 800b622:	da24      	bge.n	800b66e <__kernel_rem_pio2f+0x462>
 800b624:	b34e      	cbz	r6, 800b67a <__kernel_rem_pio2f+0x46e>
 800b626:	eef1 7a47 	vneg.f32	s15, s14
 800b62a:	edc7 7a00 	vstr	s15, [r7]
 800b62e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800b632:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b636:	aa31      	add	r2, sp, #196	@ 0xc4
 800b638:	2301      	movs	r3, #1
 800b63a:	429c      	cmp	r4, r3
 800b63c:	da20      	bge.n	800b680 <__kernel_rem_pio2f+0x474>
 800b63e:	b10e      	cbz	r6, 800b644 <__kernel_rem_pio2f+0x438>
 800b640:	eef1 7a67 	vneg.f32	s15, s15
 800b644:	edc7 7a01 	vstr	s15, [r7, #4]
 800b648:	e7ba      	b.n	800b5c0 <__kernel_rem_pio2f+0x3b4>
 800b64a:	ab30      	add	r3, sp, #192	@ 0xc0
 800b64c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800b510 <__kernel_rem_pio2f+0x304>
 800b650:	440b      	add	r3, r1
 800b652:	2c00      	cmp	r4, #0
 800b654:	da05      	bge.n	800b662 <__kernel_rem_pio2f+0x456>
 800b656:	b10e      	cbz	r6, 800b65c <__kernel_rem_pio2f+0x450>
 800b658:	eef1 7a67 	vneg.f32	s15, s15
 800b65c:	edc7 7a00 	vstr	s15, [r7]
 800b660:	e7ae      	b.n	800b5c0 <__kernel_rem_pio2f+0x3b4>
 800b662:	ed33 7a01 	vldmdb	r3!, {s14}
 800b666:	3c01      	subs	r4, #1
 800b668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b66c:	e7f1      	b.n	800b652 <__kernel_rem_pio2f+0x446>
 800b66e:	ed73 7a01 	vldmdb	r3!, {s15}
 800b672:	3a01      	subs	r2, #1
 800b674:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b678:	e7d2      	b.n	800b620 <__kernel_rem_pio2f+0x414>
 800b67a:	eef0 7a47 	vmov.f32	s15, s14
 800b67e:	e7d4      	b.n	800b62a <__kernel_rem_pio2f+0x41e>
 800b680:	ecb2 7a01 	vldmia	r2!, {s14}
 800b684:	3301      	adds	r3, #1
 800b686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b68a:	e7d6      	b.n	800b63a <__kernel_rem_pio2f+0x42e>
 800b68c:	edd2 7a00 	vldr	s15, [r2]
 800b690:	edd2 6a01 	vldr	s13, [r2, #4]
 800b694:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b698:	3801      	subs	r0, #1
 800b69a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b69e:	ed82 7a00 	vstr	s14, [r2]
 800b6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a6:	edc2 7a01 	vstr	s15, [r2, #4]
 800b6aa:	e798      	b.n	800b5de <__kernel_rem_pio2f+0x3d2>
 800b6ac:	edd3 7a00 	vldr	s15, [r3]
 800b6b0:	edd3 6a01 	vldr	s13, [r3, #4]
 800b6b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b6b8:	3a01      	subs	r2, #1
 800b6ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6be:	ed83 7a00 	vstr	s14, [r3]
 800b6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c6:	edc3 7a01 	vstr	s15, [r3, #4]
 800b6ca:	e78d      	b.n	800b5e8 <__kernel_rem_pio2f+0x3dc>
 800b6cc:	ed33 7a01 	vldmdb	r3!, {s14}
 800b6d0:	3c01      	subs	r4, #1
 800b6d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6d6:	e78f      	b.n	800b5f8 <__kernel_rem_pio2f+0x3ec>
 800b6d8:	eef1 6a66 	vneg.f32	s13, s13
 800b6dc:	eeb1 7a47 	vneg.f32	s14, s14
 800b6e0:	edc7 6a00 	vstr	s13, [r7]
 800b6e4:	ed87 7a01 	vstr	s14, [r7, #4]
 800b6e8:	eef1 7a67 	vneg.f32	s15, s15
 800b6ec:	e790      	b.n	800b610 <__kernel_rem_pio2f+0x404>
 800b6ee:	bf00      	nop

0800b6f0 <scalbnf>:
 800b6f0:	ee10 3a10 	vmov	r3, s0
 800b6f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b6f8:	d02b      	beq.n	800b752 <scalbnf+0x62>
 800b6fa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b6fe:	d302      	bcc.n	800b706 <scalbnf+0x16>
 800b700:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b704:	4770      	bx	lr
 800b706:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b70a:	d123      	bne.n	800b754 <scalbnf+0x64>
 800b70c:	4b24      	ldr	r3, [pc, #144]	@ (800b7a0 <scalbnf+0xb0>)
 800b70e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b7a4 <scalbnf+0xb4>
 800b712:	4298      	cmp	r0, r3
 800b714:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b718:	db17      	blt.n	800b74a <scalbnf+0x5a>
 800b71a:	ee10 3a10 	vmov	r3, s0
 800b71e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b722:	3a19      	subs	r2, #25
 800b724:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b728:	4288      	cmp	r0, r1
 800b72a:	dd15      	ble.n	800b758 <scalbnf+0x68>
 800b72c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b7a8 <scalbnf+0xb8>
 800b730:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b7ac <scalbnf+0xbc>
 800b734:	ee10 3a10 	vmov	r3, s0
 800b738:	eeb0 7a67 	vmov.f32	s14, s15
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bfb8      	it	lt
 800b740:	eef0 7a66 	vmovlt.f32	s15, s13
 800b744:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b748:	4770      	bx	lr
 800b74a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b7b0 <scalbnf+0xc0>
 800b74e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b752:	4770      	bx	lr
 800b754:	0dd2      	lsrs	r2, r2, #23
 800b756:	e7e5      	b.n	800b724 <scalbnf+0x34>
 800b758:	4410      	add	r0, r2
 800b75a:	28fe      	cmp	r0, #254	@ 0xfe
 800b75c:	dce6      	bgt.n	800b72c <scalbnf+0x3c>
 800b75e:	2800      	cmp	r0, #0
 800b760:	dd06      	ble.n	800b770 <scalbnf+0x80>
 800b762:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b766:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b76a:	ee00 3a10 	vmov	s0, r3
 800b76e:	4770      	bx	lr
 800b770:	f110 0f16 	cmn.w	r0, #22
 800b774:	da09      	bge.n	800b78a <scalbnf+0x9a>
 800b776:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b7b0 <scalbnf+0xc0>
 800b77a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b7b4 <scalbnf+0xc4>
 800b77e:	ee10 3a10 	vmov	r3, s0
 800b782:	eeb0 7a67 	vmov.f32	s14, s15
 800b786:	2b00      	cmp	r3, #0
 800b788:	e7d9      	b.n	800b73e <scalbnf+0x4e>
 800b78a:	3019      	adds	r0, #25
 800b78c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b790:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b794:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b7b8 <scalbnf+0xc8>
 800b798:	ee07 3a90 	vmov	s15, r3
 800b79c:	e7d7      	b.n	800b74e <scalbnf+0x5e>
 800b79e:	bf00      	nop
 800b7a0:	ffff3cb0 	.word	0xffff3cb0
 800b7a4:	4c000000 	.word	0x4c000000
 800b7a8:	7149f2ca 	.word	0x7149f2ca
 800b7ac:	f149f2ca 	.word	0xf149f2ca
 800b7b0:	0da24260 	.word	0x0da24260
 800b7b4:	8da24260 	.word	0x8da24260
 800b7b8:	33000000 	.word	0x33000000

0800b7bc <floorf>:
 800b7bc:	ee10 3a10 	vmov	r3, s0
 800b7c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b7c4:	3a7f      	subs	r2, #127	@ 0x7f
 800b7c6:	2a16      	cmp	r2, #22
 800b7c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b7cc:	dc2b      	bgt.n	800b826 <floorf+0x6a>
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	da12      	bge.n	800b7f8 <floorf+0x3c>
 800b7d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b838 <floorf+0x7c>
 800b7d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b7da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e2:	dd06      	ble.n	800b7f2 <floorf+0x36>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	da24      	bge.n	800b832 <floorf+0x76>
 800b7e8:	2900      	cmp	r1, #0
 800b7ea:	4b14      	ldr	r3, [pc, #80]	@ (800b83c <floorf+0x80>)
 800b7ec:	bf08      	it	eq
 800b7ee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b7f2:	ee00 3a10 	vmov	s0, r3
 800b7f6:	4770      	bx	lr
 800b7f8:	4911      	ldr	r1, [pc, #68]	@ (800b840 <floorf+0x84>)
 800b7fa:	4111      	asrs	r1, r2
 800b7fc:	420b      	tst	r3, r1
 800b7fe:	d0fa      	beq.n	800b7f6 <floorf+0x3a>
 800b800:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800b838 <floorf+0x7c>
 800b804:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b808:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b810:	ddef      	ble.n	800b7f2 <floorf+0x36>
 800b812:	2b00      	cmp	r3, #0
 800b814:	bfbe      	ittt	lt
 800b816:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800b81a:	fa40 f202 	asrlt.w	r2, r0, r2
 800b81e:	189b      	addlt	r3, r3, r2
 800b820:	ea23 0301 	bic.w	r3, r3, r1
 800b824:	e7e5      	b.n	800b7f2 <floorf+0x36>
 800b826:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b82a:	d3e4      	bcc.n	800b7f6 <floorf+0x3a>
 800b82c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b830:	4770      	bx	lr
 800b832:	2300      	movs	r3, #0
 800b834:	e7dd      	b.n	800b7f2 <floorf+0x36>
 800b836:	bf00      	nop
 800b838:	7149f2ca 	.word	0x7149f2ca
 800b83c:	bf800000 	.word	0xbf800000
 800b840:	007fffff 	.word	0x007fffff

0800b844 <_init>:
 800b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b846:	bf00      	nop
 800b848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84a:	bc08      	pop	{r3}
 800b84c:	469e      	mov	lr, r3
 800b84e:	4770      	bx	lr

0800b850 <_fini>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	bf00      	nop
 800b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b856:	bc08      	pop	{r3}
 800b858:	469e      	mov	lr, r3
 800b85a:	4770      	bx	lr
